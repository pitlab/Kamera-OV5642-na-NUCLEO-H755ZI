
AutoPitLot_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003490  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08103728  08103728  00004728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08103738  08103738  00004738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810373c  0810373c  0000473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000014  10000000  08103740  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000084  10000014  08103754  00005014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000098  08103754  00005098  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d28a  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fef  00000000  00000000  000122ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bd0  00000000  00000000  000142c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000008f0  00000000  00000000  00014e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038adc  00000000  00000000  00015780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000100b4  00000000  00000000  0004e25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00179d1d  00000000  00000000  0005e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d802d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f84  00000000  00000000  001d8070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  001daff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000014 	.word	0x10000014
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103710 	.word	0x08103710

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000018 	.word	0x10000018
 81002d4:	08103710 	.word	0x08103710

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	@ (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	@ (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	@ (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	@ (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <StartMagnetometerHMC>:
// Parametry: brak
// Zwraca: kod błędu HAL
// Czas zajęcia magistrali I2C: 760us przy zegarze 100kHz
////////////////////////////////////////////////////////////////////////////////
uint8_t StartMagnetometerHMC(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b084      	sub	sp, #16
 810030c:	af02      	add	r7, sp, #8
    uint8_t dane_we[2];

    dane_we[0] = MODE;
 810030e:	2302      	movs	r3, #2
 8100310:	713b      	strb	r3, [r7, #4]
    dane_we[1] = (1 << 0);   //Mode Select:0=Continuous-Measurement Mode, 1=Single-Measurement Mode, 2-3=Idle Mode.
 8100312:	2301      	movs	r3, #1
 8100314:	717b      	strb	r3, [r7, #5]

    return HAL_I2C_Master_Transmit(&hi2c1, HMC_I2C_ADR, dane_we, 2, MAG_TIMEOUT);		//rozpocznij pomiar na I2C1
 8100316:	1d3a      	adds	r2, r7, #4
 8100318:	2302      	movs	r3, #2
 810031a:	9300      	str	r3, [sp, #0]
 810031c:	2302      	movs	r3, #2
 810031e:	213c      	movs	r1, #60	@ 0x3c
 8100320:	4803      	ldr	r0, [pc, #12]	@ (8100330 <StartMagnetometerHMC+0x28>)
 8100322:	f000 feb7 	bl	8101094 <HAL_I2C_Master_Transmit>
 8100326:	4603      	mov	r3, r0
}
 8100328:	4618      	mov	r0, r3
 810032a:	3708      	adds	r7, #8
 810032c:	46bd      	mov	sp, r7
 810032e:	bd80      	pop	{r7, pc}
 8100330:	10000030 	.word	0x10000030

08100334 <ReadMagnetometerHMC>:
// Parametry: *dane_wy wskaźnik na dane wychodzące
// Zwraca: kod błędu HAL
// Czas zajęcia magistrali I2C: 2,2ms przy zegarze 100kHz
////////////////////////////////////////////////////////////////////////////////
uint8_t ReadMagnetometerHMC(float *fWynik)
{
 8100334:	b580      	push	{r7, lr}
 8100336:	b086      	sub	sp, #24
 8100338:	af02      	add	r7, sp, #8
 810033a:	6078      	str	r0, [r7, #4]
	uint8_t dane[6];
	uint8_t err;

    dane[0] = DATA_XH;
 810033c:	2303      	movs	r3, #3
 810033e:	723b      	strb	r3, [r7, #8]
    err = HAL_I2C_Master_Transmit(&hi2c1, HMC_I2C_ADR, dane, 1, MAG_TIMEOUT);	//wyślij polecenie odczytu wszystkich pomiarów
 8100340:	f107 0208 	add.w	r2, r7, #8
 8100344:	2302      	movs	r3, #2
 8100346:	9300      	str	r3, [sp, #0]
 8100348:	2301      	movs	r3, #1
 810034a:	213c      	movs	r1, #60	@ 0x3c
 810034c:	4835      	ldr	r0, [pc, #212]	@ (8100424 <ReadMagnetometerHMC+0xf0>)
 810034e:	f000 fea1 	bl	8101094 <HAL_I2C_Master_Transmit>
 8100352:	4603      	mov	r3, r0
 8100354:	73fb      	strb	r3, [r7, #15]
    if (err)
 8100356:	7bfb      	ldrb	r3, [r7, #15]
 8100358:	2b00      	cmp	r3, #0
 810035a:	d001      	beq.n	8100360 <ReadMagnetometerHMC+0x2c>
    	return err;
 810035c:	7bfb      	ldrb	r3, [r7, #15]
 810035e:	e05c      	b.n	810041a <ReadMagnetometerHMC+0xe6>

    err =  HAL_I2C_Master_Receive(&hi2c1, HMC_I2C_ADR, dane, 6, MAG_TIMEOUT);		//odczytaj dane
 8100360:	f107 0208 	add.w	r2, r7, #8
 8100364:	2302      	movs	r3, #2
 8100366:	9300      	str	r3, [sp, #0]
 8100368:	2306      	movs	r3, #6
 810036a:	213c      	movs	r1, #60	@ 0x3c
 810036c:	482d      	ldr	r0, [pc, #180]	@ (8100424 <ReadMagnetometerHMC+0xf0>)
 810036e:	f000 ffa9 	bl	81012c4 <HAL_I2C_Master_Receive>
 8100372:	4603      	mov	r3, r0
 8100374:	73fb      	strb	r3, [r7, #15]
    if (err)
 8100376:	7bfb      	ldrb	r3, [r7, #15]
 8100378:	2b00      	cmp	r3, #0
 810037a:	d001      	beq.n	8100380 <ReadMagnetometerHMC+0x4c>
       	return err;
 810037c:	7bfb      	ldrb	r3, [r7, #15]
 810037e:	e04c      	b.n	810041a <ReadMagnetometerHMC+0xe6>

    if ((!dane[0] && !dane[1]) | (!dane[2] && !dane[3]) | (!dane[4] && !dane[5]))
 8100380:	7a3b      	ldrb	r3, [r7, #8]
 8100382:	2b00      	cmp	r3, #0
 8100384:	d104      	bne.n	8100390 <ReadMagnetometerHMC+0x5c>
 8100386:	7a7b      	ldrb	r3, [r7, #9]
 8100388:	2b00      	cmp	r3, #0
 810038a:	d101      	bne.n	8100390 <ReadMagnetometerHMC+0x5c>
 810038c:	2301      	movs	r3, #1
 810038e:	e000      	b.n	8100392 <ReadMagnetometerHMC+0x5e>
 8100390:	2300      	movs	r3, #0
 8100392:	f003 0301 	and.w	r3, r3, #1
 8100396:	b2da      	uxtb	r2, r3
 8100398:	7abb      	ldrb	r3, [r7, #10]
 810039a:	2b00      	cmp	r3, #0
 810039c:	d104      	bne.n	81003a8 <ReadMagnetometerHMC+0x74>
 810039e:	7afb      	ldrb	r3, [r7, #11]
 81003a0:	2b00      	cmp	r3, #0
 81003a2:	d101      	bne.n	81003a8 <ReadMagnetometerHMC+0x74>
 81003a4:	2301      	movs	r3, #1
 81003a6:	e000      	b.n	81003aa <ReadMagnetometerHMC+0x76>
 81003a8:	2300      	movs	r3, #0
 81003aa:	f003 0301 	and.w	r3, r3, #1
 81003ae:	b2db      	uxtb	r3, r3
 81003b0:	4313      	orrs	r3, r2
 81003b2:	b2db      	uxtb	r3, r3
 81003b4:	461a      	mov	r2, r3
 81003b6:	7b3b      	ldrb	r3, [r7, #12]
 81003b8:	2b00      	cmp	r3, #0
 81003ba:	d104      	bne.n	81003c6 <ReadMagnetometerHMC+0x92>
 81003bc:	7b7b      	ldrb	r3, [r7, #13]
 81003be:	2b00      	cmp	r3, #0
 81003c0:	d101      	bne.n	81003c6 <ReadMagnetometerHMC+0x92>
 81003c2:	2301      	movs	r3, #1
 81003c4:	e000      	b.n	81003c8 <ReadMagnetometerHMC+0x94>
 81003c6:	2300      	movs	r3, #0
 81003c8:	4313      	orrs	r3, r2
 81003ca:	2b00      	cmp	r3, #0
 81003cc:	d001      	beq.n	81003d2 <ReadMagnetometerHMC+0x9e>
    	return ERR_ZLE_DANE;
 81003ce:	2312      	movs	r3, #18
 81003d0:	e023      	b.n	810041a <ReadMagnetometerHMC+0xe6>

    *(fWynik+0) = 0x100 * dane[0] + dane[1];
 81003d2:	7a3b      	ldrb	r3, [r7, #8]
 81003d4:	021b      	lsls	r3, r3, #8
 81003d6:	7a7a      	ldrb	r2, [r7, #9]
 81003d8:	4413      	add	r3, r2
 81003da:	ee07 3a90 	vmov	s15, r3
 81003de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81003e2:	687b      	ldr	r3, [r7, #4]
 81003e4:	edc3 7a00 	vstr	s15, [r3]
	*(fWynik+1) = 0x100 * dane[2] + dane[3];
 81003e8:	7abb      	ldrb	r3, [r7, #10]
 81003ea:	021b      	lsls	r3, r3, #8
 81003ec:	7afa      	ldrb	r2, [r7, #11]
 81003ee:	441a      	add	r2, r3
 81003f0:	687b      	ldr	r3, [r7, #4]
 81003f2:	3304      	adds	r3, #4
 81003f4:	ee07 2a90 	vmov	s15, r2
 81003f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81003fc:	edc3 7a00 	vstr	s15, [r3]
	*(fWynik+2) = 0x100 * dane[4] + dane[5];
 8100400:	7b3b      	ldrb	r3, [r7, #12]
 8100402:	021b      	lsls	r3, r3, #8
 8100404:	7b7a      	ldrb	r2, [r7, #13]
 8100406:	441a      	add	r2, r3
 8100408:	687b      	ldr	r3, [r7, #4]
 810040a:	3308      	adds	r3, #8
 810040c:	ee07 2a90 	vmov	s15, r2
 8100410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100414:	edc3 7a00 	vstr	s15, [r3]
	return ERR_OK;
 8100418:	2300      	movs	r3, #0
}
 810041a:	4618      	mov	r0, r3
 810041c:	3710      	adds	r7, #16
 810041e:	46bd      	mov	sp, r7
 8100420:	bd80      	pop	{r7, pc}
 8100422:	bf00      	nop
 8100424:	10000030 	.word	0x10000030

08100428 <InitMagnetometerHMC>:
// Inicjuje zmienne konfiguracyjne
// Parametry: 
// Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t InitMagnetometerHMC(void)
{
 8100428:	b580      	push	{r7, lr}
 810042a:	b084      	sub	sp, #16
 810042c:	af02      	add	r7, sp, #8
    uint8_t dane[4];

    //sprawdź obecność magnetometru na magistrali I2C2
    if (TestPresenceHMC5883() == ERR_BRAK_MAGN)
 810042e:	f000 f81d 	bl	810046c <TestPresenceHMC5883>
 8100432:	4603      	mov	r3, r0
 8100434:	2b20      	cmp	r3, #32
 8100436:	d101      	bne.n	810043c <InitMagnetometerHMC+0x14>
    	return ERR_BRAK_MAGN;
 8100438:	2320      	movs	r3, #32
 810043a:	e010      	b.n	810045e <InitMagnetometerHMC+0x36>

    dane[0] = CONF_A;
 810043c:	2300      	movs	r3, #0
 810043e:	713b      	strb	r3, [r7, #4]
    //Ustaw tryb pracy na 30Hz
    //Configuration Register A
    dane[1] = (0 << 0)|   //Measurement Configuration: 0=Normal measurement configuration, 1=Positive bias configuration, 2=Negative bias configuration
 8100440:	2354      	movs	r3, #84	@ 0x54
 8100442:	717b      	strb	r3, [r7, #5]
              (5 << 2)|   //Data Output Rate:6=75Hz, 5=30, 4=15, 3=7,5, 2=3
              (2 << 5)|   //Select number of samples averaged per measurement output: 00 = 1; 01 = 2; 10 = 4; 11 = 8
              (0 << 7);   //This bit must be cleared for correct operation.
    //Configuration Register B
    dane[2] = (1 << 5);   //Gain Configuration: 0=0,88 Gaussa, 1=1,3; 2=1,9; , 3=2,5; 4=4; 5=4,7; 6=5,6; 7=8,1 Gaussa
 8100444:	2320      	movs	r3, #32
 8100446:	71bb      	strb	r3, [r7, #6]
    //Mode Register
    dane[3] = (0 << 0)|   //Mode Select:0=Continuous-Measurement Mode, 1=Single-Measurement Mode, 2-3=Idle Mode.
 8100448:	2300      	movs	r3, #0
 810044a:	71fb      	strb	r3, [r7, #7]
              (0 << 2);   //Bits 2-7 must be cleared for correct operation.

    return HAL_I2C_Master_Transmit(&hi2c1, HMC_I2C_ADR, dane, 4, MAG_TIMEOUT);		//zapisz 3 rejestry jedną transmisją
 810044c:	1d3a      	adds	r2, r7, #4
 810044e:	2302      	movs	r3, #2
 8100450:	9300      	str	r3, [sp, #0]
 8100452:	2304      	movs	r3, #4
 8100454:	213c      	movs	r1, #60	@ 0x3c
 8100456:	4804      	ldr	r0, [pc, #16]	@ (8100468 <InitMagnetometerHMC+0x40>)
 8100458:	f000 fe1c 	bl	8101094 <HAL_I2C_Master_Transmit>
 810045c:	4603      	mov	r3, r0
}
 810045e:	4618      	mov	r0, r3
 8100460:	3708      	adds	r7, #8
 8100462:	46bd      	mov	sp, r7
 8100464:	bd80      	pop	{r7, pc}
 8100466:	bf00      	nop
 8100468:	10000030 	.word	0x10000030

0810046c <TestPresenceHMC5883>:
// Parametry: brak
// Zwraca: systemowy kod błędu
// Czas zajęcia magistrali I2C: ms przy zegarze 100kHz
////////////////////////////////////////////////////////////////////////////////
uint8_t TestPresenceHMC5883(void)
{
 810046c:	b580      	push	{r7, lr}
 810046e:	b084      	sub	sp, #16
 8100470:	af02      	add	r7, sp, #8
	uint8_t err;
    uint8_t	dane[3];

    dane[0] = ID_A;
 8100472:	230a      	movs	r3, #10
 8100474:	713b      	strb	r3, [r7, #4]
    err = HAL_I2C_Master_Transmit(&hi2c1, HMC_I2C_ADR, dane, 1, MAG_TIMEOUT);	//wyślij polecenie odczytu rejestrów identyfikacyjnych
 8100476:	1d3a      	adds	r2, r7, #4
 8100478:	2302      	movs	r3, #2
 810047a:	9300      	str	r3, [sp, #0]
 810047c:	2301      	movs	r3, #1
 810047e:	213c      	movs	r1, #60	@ 0x3c
 8100480:	4812      	ldr	r0, [pc, #72]	@ (81004cc <TestPresenceHMC5883+0x60>)
 8100482:	f000 fe07 	bl	8101094 <HAL_I2C_Master_Transmit>
 8100486:	4603      	mov	r3, r0
 8100488:	71fb      	strb	r3, [r7, #7]
    if (!err)
 810048a:	79fb      	ldrb	r3, [r7, #7]
 810048c:	2b00      	cmp	r3, #0
 810048e:	d117      	bne.n	81004c0 <TestPresenceHMC5883+0x54>
    {
        err =  HAL_I2C_Master_Receive(&hi2c1, HMC_I2C_ADR, dane, 3, MAG_TIMEOUT);		//odczytaj dane
 8100490:	1d3a      	adds	r2, r7, #4
 8100492:	2302      	movs	r3, #2
 8100494:	9300      	str	r3, [sp, #0]
 8100496:	2303      	movs	r3, #3
 8100498:	213c      	movs	r1, #60	@ 0x3c
 810049a:	480c      	ldr	r0, [pc, #48]	@ (81004cc <TestPresenceHMC5883+0x60>)
 810049c:	f000 ff12 	bl	81012c4 <HAL_I2C_Master_Receive>
 81004a0:	4603      	mov	r3, r0
 81004a2:	71fb      	strb	r3, [r7, #7]
        if (!err)
 81004a4:	79fb      	ldrb	r3, [r7, #7]
 81004a6:	2b00      	cmp	r3, #0
 81004a8:	d10a      	bne.n	81004c0 <TestPresenceHMC5883+0x54>
        {
        	  if ((dane[0] == 'H') && (dane[1] == '4') && (dane[2] == '3'))
 81004aa:	793b      	ldrb	r3, [r7, #4]
 81004ac:	2b48      	cmp	r3, #72	@ 0x48
 81004ae:	d107      	bne.n	81004c0 <TestPresenceHMC5883+0x54>
 81004b0:	797b      	ldrb	r3, [r7, #5]
 81004b2:	2b34      	cmp	r3, #52	@ 0x34
 81004b4:	d104      	bne.n	81004c0 <TestPresenceHMC5883+0x54>
 81004b6:	79bb      	ldrb	r3, [r7, #6]
 81004b8:	2b33      	cmp	r3, #51	@ 0x33
 81004ba:	d101      	bne.n	81004c0 <TestPresenceHMC5883+0x54>
        		  return ERR_OK;
 81004bc:	2300      	movs	r3, #0
 81004be:	e000      	b.n	81004c2 <TestPresenceHMC5883+0x56>
        }
    }
    return ERR_BRAK_MAGN;
 81004c0:	2320      	movs	r3, #32
}
 81004c2:	4618      	mov	r0, r3
 81004c4:	3708      	adds	r7, #8
 81004c6:	46bd      	mov	sp, r7
 81004c8:	bd80      	pop	{r7, pc}
 81004ca:	bf00      	nop
 81004cc:	10000030 	.word	0x10000030

081004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81004d0:	b580      	push	{r7, lr}
 81004d2:	b082      	sub	sp, #8
 81004d4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81004d6:	4b2c      	ldr	r3, [pc, #176]	@ (8100588 <main+0xb8>)
 81004d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004dc:	4a2a      	ldr	r2, [pc, #168]	@ (8100588 <main+0xb8>)
 81004de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81004e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81004e6:	4b28      	ldr	r3, [pc, #160]	@ (8100588 <main+0xb8>)
 81004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81004ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81004f0:	607b      	str	r3, [r7, #4]
 81004f2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81004f4:	2001      	movs	r0, #1
 81004f6:	f000 fd1f 	bl	8100f38 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81004fa:	f001 fbe7 	bl	8101ccc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81004fe:	2201      	movs	r2, #1
 8100500:	2102      	movs	r1, #2
 8100502:	2000      	movs	r0, #0
 8100504:	f001 fb68 	bl	8101bd8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100508:	4b20      	ldr	r3, [pc, #128]	@ (810058c <main+0xbc>)
 810050a:	681b      	ldr	r3, [r3, #0]
 810050c:	091b      	lsrs	r3, r3, #4
 810050e:	f003 030f 	and.w	r3, r3, #15
 8100512:	2b07      	cmp	r3, #7
 8100514:	d108      	bne.n	8100528 <main+0x58>
 8100516:	4b1e      	ldr	r3, [pc, #120]	@ (8100590 <main+0xc0>)
 8100518:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810051c:	4a1c      	ldr	r2, [pc, #112]	@ (8100590 <main+0xc0>)
 810051e:	f043 0301 	orr.w	r3, r3, #1
 8100522:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100526:	e007      	b.n	8100538 <main+0x68>
 8100528:	4b19      	ldr	r3, [pc, #100]	@ (8100590 <main+0xc0>)
 810052a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810052e:	4a18      	ldr	r2, [pc, #96]	@ (8100590 <main+0xc0>)
 8100530:	f043 0301 	orr.w	r3, r3, #1
 8100534:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100538:	f000 f97e 	bl	8100838 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810053c:	f000 f870 	bl	8100620 <MX_GPIO_Init>
  MX_I2C1_Init();
 8100540:	f000 f830 	bl	81005a4 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (stan_magnetometru != ERR_OK)
 8100544:	4b13      	ldr	r3, [pc, #76]	@ (8100594 <main+0xc4>)
 8100546:	781b      	ldrb	r3, [r3, #0]
 8100548:	2b00      	cmp	r3, #0
 810054a:	d005      	beq.n	8100558 <main+0x88>
		  stan_magnetometru = InitMagnetometerHMC();
 810054c:	f7ff ff6c 	bl	8100428 <InitMagnetometerHMC>
 8100550:	4603      	mov	r3, r0
 8100552:	461a      	mov	r2, r3
 8100554:	4b0f      	ldr	r3, [pc, #60]	@ (8100594 <main+0xc4>)
 8100556:	701a      	strb	r2, [r3, #0]

	  //BSP_LED_Toggle(LED_GREEN);
	  StartMagnetometerHMC();
 8100558:	f7ff fed6 	bl	8100308 <StartMagnetometerHMC>
	  HAL_Delay(60);
 810055c:	203c      	movs	r0, #60	@ 0x3c
 810055e:	f000 fa1f 	bl	81009a0 <HAL_Delay>
	  //BSP_LED_Toggle(LED_GREEN);
	  err = ReadMagnetometerHMC(fVectMag);
 8100562:	480d      	ldr	r0, [pc, #52]	@ (8100598 <main+0xc8>)
 8100564:	f7ff fee6 	bl	8100334 <ReadMagnetometerHMC>
 8100568:	4603      	mov	r3, r0
 810056a:	461a      	mov	r2, r3
 810056c:	4b0b      	ldr	r3, [pc, #44]	@ (810059c <main+0xcc>)
 810056e:	701a      	strb	r2, [r3, #0]
	  if (err == ERR_OK)
 8100570:	4b0a      	ldr	r3, [pc, #40]	@ (810059c <main+0xcc>)
 8100572:	781b      	ldrb	r3, [r3, #0]
 8100574:	2b00      	cmp	r3, #0
 8100576:	d102      	bne.n	810057e <main+0xae>
		  nowy_pomiar_mag = 1;
 8100578:	4b09      	ldr	r3, [pc, #36]	@ (81005a0 <main+0xd0>)
 810057a:	2201      	movs	r2, #1
 810057c:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(40);
 810057e:	2028      	movs	r0, #40	@ 0x28
 8100580:	f000 fa0e 	bl	81009a0 <HAL_Delay>
	  if (stan_magnetometru != ERR_OK)
 8100584:	e7de      	b.n	8100544 <main+0x74>
 8100586:	bf00      	nop
 8100588:	58024400 	.word	0x58024400
 810058c:	e000ed00 	.word	0xe000ed00
 8100590:	58026400 	.word	0x58026400
 8100594:	10000008 	.word	0x10000008
 8100598:	10000088 	.word	0x10000088
 810059c:	10000084 	.word	0x10000084
 81005a0:	10000085 	.word	0x10000085

081005a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81005a4:	b580      	push	{r7, lr}
 81005a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005aa:	4a1c      	ldr	r2, [pc, #112]	@ (810061c <MX_I2C1_Init+0x78>)
 81005ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 81005ae:	4b1a      	ldr	r3, [pc, #104]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005b0:	f640 6214 	movw	r2, #3604	@ 0xe14
 81005b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81005b6:	4b18      	ldr	r3, [pc, #96]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005b8:	2200      	movs	r2, #0
 81005ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81005bc:	4b16      	ldr	r3, [pc, #88]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005be:	2201      	movs	r2, #1
 81005c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81005c2:	4b15      	ldr	r3, [pc, #84]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005c4:	2200      	movs	r2, #0
 81005c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81005c8:	4b13      	ldr	r3, [pc, #76]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005ca:	2200      	movs	r2, #0
 81005cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81005ce:	4b12      	ldr	r3, [pc, #72]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005d0:	2200      	movs	r2, #0
 81005d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81005d4:	4b10      	ldr	r3, [pc, #64]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005d6:	2200      	movs	r2, #0
 81005d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81005da:	4b0f      	ldr	r3, [pc, #60]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005dc:	2200      	movs	r2, #0
 81005de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81005e0:	480d      	ldr	r0, [pc, #52]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005e2:	f000 fcbb 	bl	8100f5c <HAL_I2C_Init>
 81005e6:	4603      	mov	r3, r0
 81005e8:	2b00      	cmp	r3, #0
 81005ea:	d001      	beq.n	81005f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 81005ec:	f000 f832 	bl	8100654 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81005f0:	2100      	movs	r1, #0
 81005f2:	4809      	ldr	r0, [pc, #36]	@ (8100618 <MX_I2C1_Init+0x74>)
 81005f4:	f001 fa02 	bl	81019fc <HAL_I2CEx_ConfigAnalogFilter>
 81005f8:	4603      	mov	r3, r0
 81005fa:	2b00      	cmp	r3, #0
 81005fc:	d001      	beq.n	8100602 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 81005fe:	f000 f829 	bl	8100654 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100602:	2100      	movs	r1, #0
 8100604:	4804      	ldr	r0, [pc, #16]	@ (8100618 <MX_I2C1_Init+0x74>)
 8100606:	f001 fa44 	bl	8101a92 <HAL_I2CEx_ConfigDigitalFilter>
 810060a:	4603      	mov	r3, r0
 810060c:	2b00      	cmp	r3, #0
 810060e:	d001      	beq.n	8100614 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8100610:	f000 f820 	bl	8100654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8100614:	bf00      	nop
 8100616:	bd80      	pop	{r7, pc}
 8100618:	10000030 	.word	0x10000030
 810061c:	40005400 	.word	0x40005400

08100620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100620:	b480      	push	{r7}
 8100622:	b083      	sub	sp, #12
 8100624:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100626:	4b0a      	ldr	r3, [pc, #40]	@ (8100650 <MX_GPIO_Init+0x30>)
 8100628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810062c:	4a08      	ldr	r2, [pc, #32]	@ (8100650 <MX_GPIO_Init+0x30>)
 810062e:	f043 0302 	orr.w	r3, r3, #2
 8100632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100636:	4b06      	ldr	r3, [pc, #24]	@ (8100650 <MX_GPIO_Init+0x30>)
 8100638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810063c:	f003 0302 	and.w	r3, r3, #2
 8100640:	607b      	str	r3, [r7, #4]
 8100642:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100644:	bf00      	nop
 8100646:	370c      	adds	r7, #12
 8100648:	46bd      	mov	sp, r7
 810064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810064e:	4770      	bx	lr
 8100650:	58024400 	.word	0x58024400

08100654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100654:	b480      	push	{r7}
 8100656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100658:	b672      	cpsid	i
}
 810065a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810065c:	bf00      	nop
 810065e:	e7fd      	b.n	810065c <Error_Handler+0x8>

08100660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100660:	b580      	push	{r7, lr}
 8100662:	b084      	sub	sp, #16
 8100664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8100666:	f107 0308 	add.w	r3, r7, #8
 810066a:	2200      	movs	r2, #0
 810066c:	601a      	str	r2, [r3, #0]
 810066e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100670:	4b0e      	ldr	r3, [pc, #56]	@ (81006ac <HAL_MspInit+0x4c>)
 8100672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100676:	4a0d      	ldr	r2, [pc, #52]	@ (81006ac <HAL_MspInit+0x4c>)
 8100678:	f043 0302 	orr.w	r3, r3, #2
 810067c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100680:	4b0a      	ldr	r3, [pc, #40]	@ (81006ac <HAL_MspInit+0x4c>)
 8100682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100686:	f003 0302 	and.w	r3, r3, #2
 810068a:	607b      	str	r3, [r7, #4]
 810068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 810068e:	2300      	movs	r3, #0
 8100690:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8100692:	2300      	movs	r3, #0
 8100694:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8100696:	f107 0308 	add.w	r3, r7, #8
 810069a:	4618      	mov	r0, r3
 810069c:	f001 fa46 	bl	8101b2c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 81006a0:	f001 fa8a 	bl	8101bb8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81006a4:	bf00      	nop
 81006a6:	3710      	adds	r7, #16
 81006a8:	46bd      	mov	sp, r7
 81006aa:	bd80      	pop	{r7, pc}
 81006ac:	58024400 	.word	0x58024400

081006b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81006b0:	b580      	push	{r7, lr}
 81006b2:	b0ba      	sub	sp, #232	@ 0xe8
 81006b4:	af00      	add	r7, sp, #0
 81006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81006b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81006bc:	2200      	movs	r2, #0
 81006be:	601a      	str	r2, [r3, #0]
 81006c0:	605a      	str	r2, [r3, #4]
 81006c2:	609a      	str	r2, [r3, #8]
 81006c4:	60da      	str	r2, [r3, #12]
 81006c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81006c8:	f107 0310 	add.w	r3, r7, #16
 81006cc:	22c0      	movs	r2, #192	@ 0xc0
 81006ce:	2100      	movs	r1, #0
 81006d0:	4618      	mov	r0, r3
 81006d2:	f002 fff1 	bl	81036b8 <memset>
  if(hi2c->Instance==I2C1)
 81006d6:	687b      	ldr	r3, [r7, #4]
 81006d8:	681b      	ldr	r3, [r3, #0]
 81006da:	4a27      	ldr	r2, [pc, #156]	@ (8100778 <HAL_I2C_MspInit+0xc8>)
 81006dc:	4293      	cmp	r3, r2
 81006de:	d147      	bne.n	8100770 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81006e0:	f04f 0208 	mov.w	r2, #8
 81006e4:	f04f 0300 	mov.w	r3, #0
 81006e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_CSI;
 81006ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 81006f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81006f4:	f107 0310 	add.w	r3, r7, #16
 81006f8:	4618      	mov	r0, r3
 81006fa:	f001 fc6f 	bl	8101fdc <HAL_RCCEx_PeriphCLKConfig>
 81006fe:	4603      	mov	r3, r0
 8100700:	2b00      	cmp	r3, #0
 8100702:	d001      	beq.n	8100708 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8100704:	f7ff ffa6 	bl	8100654 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100708:	4b1c      	ldr	r3, [pc, #112]	@ (810077c <HAL_I2C_MspInit+0xcc>)
 810070a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810070e:	4a1b      	ldr	r2, [pc, #108]	@ (810077c <HAL_I2C_MspInit+0xcc>)
 8100710:	f043 0302 	orr.w	r3, r3, #2
 8100714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100718:	4b18      	ldr	r3, [pc, #96]	@ (810077c <HAL_I2C_MspInit+0xcc>)
 810071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810071e:	f003 0302 	and.w	r3, r3, #2
 8100722:	60fb      	str	r3, [r7, #12]
 8100724:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8100726:	f44f 7310 	mov.w	r3, #576	@ 0x240
 810072a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810072e:	2312      	movs	r3, #18
 8100730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100734:	2301      	movs	r3, #1
 8100736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810073a:	2300      	movs	r3, #0
 810073c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8100740:	2304      	movs	r3, #4
 8100742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100746:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810074a:	4619      	mov	r1, r3
 810074c:	480c      	ldr	r0, [pc, #48]	@ (8100780 <HAL_I2C_MspInit+0xd0>)
 810074e:	f000 fa43 	bl	8100bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100752:	4b0a      	ldr	r3, [pc, #40]	@ (810077c <HAL_I2C_MspInit+0xcc>)
 8100754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100758:	4a08      	ldr	r2, [pc, #32]	@ (810077c <HAL_I2C_MspInit+0xcc>)
 810075a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810075e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100762:	4b06      	ldr	r3, [pc, #24]	@ (810077c <HAL_I2C_MspInit+0xcc>)
 8100764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810076c:	60bb      	str	r3, [r7, #8]
 810076e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8100770:	bf00      	nop
 8100772:	37e8      	adds	r7, #232	@ 0xe8
 8100774:	46bd      	mov	sp, r7
 8100776:	bd80      	pop	{r7, pc}
 8100778:	40005400 	.word	0x40005400
 810077c:	58024400 	.word	0x58024400
 8100780:	58020400 	.word	0x58020400

08100784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100784:	b480      	push	{r7}
 8100786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100788:	bf00      	nop
 810078a:	e7fd      	b.n	8100788 <NMI_Handler+0x4>

0810078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810078c:	b480      	push	{r7}
 810078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100790:	bf00      	nop
 8100792:	e7fd      	b.n	8100790 <HardFault_Handler+0x4>

08100794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100794:	b480      	push	{r7}
 8100796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100798:	bf00      	nop
 810079a:	e7fd      	b.n	8100798 <MemManage_Handler+0x4>

0810079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810079c:	b480      	push	{r7}
 810079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81007a0:	bf00      	nop
 81007a2:	e7fd      	b.n	81007a0 <BusFault_Handler+0x4>

081007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81007a4:	b480      	push	{r7}
 81007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81007a8:	bf00      	nop
 81007aa:	e7fd      	b.n	81007a8 <UsageFault_Handler+0x4>

081007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81007ac:	b480      	push	{r7}
 81007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81007b0:	bf00      	nop
 81007b2:	46bd      	mov	sp, r7
 81007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007b8:	4770      	bx	lr

081007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81007ba:	b480      	push	{r7}
 81007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81007be:	bf00      	nop
 81007c0:	46bd      	mov	sp, r7
 81007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c6:	4770      	bx	lr

081007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81007c8:	b480      	push	{r7}
 81007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81007cc:	bf00      	nop
 81007ce:	46bd      	mov	sp, r7
 81007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d4:	4770      	bx	lr

081007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81007d6:	b580      	push	{r7, lr}
 81007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81007da:	f000 f8c1 	bl	8100960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81007de:	bf00      	nop
 81007e0:	bd80      	pop	{r7, pc}
	...

081007e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81007e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810081c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81007e8:	f7ff fd76 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81007ec:	480c      	ldr	r0, [pc, #48]	@ (8100820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81007ee:	490d      	ldr	r1, [pc, #52]	@ (8100824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8100828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81007f4:	e002      	b.n	81007fc <LoopCopyDataInit>

081007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81007fa:	3304      	adds	r3, #4

081007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100800:	d3f9      	bcc.n	81007f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100802:	4a0a      	ldr	r2, [pc, #40]	@ (810082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100804:	4c0a      	ldr	r4, [pc, #40]	@ (8100830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100808:	e001      	b.n	810080e <LoopFillZerobss>

0810080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810080c:	3204      	adds	r2, #4

0810080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100810:	d3fb      	bcc.n	810080a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100812:	f002 ff59 	bl	81036c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100816:	f7ff fe5b 	bl	81004d0 <main>
  bx  lr
 810081a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810081c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100820:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100824:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8100828:	08103740 	.word	0x08103740
  ldr r2, =_sbss
 810082c:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 8100830:	10000098 	.word	0x10000098

08100834 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100834:	e7fe      	b.n	8100834 <ADC3_IRQHandler>
	...

08100838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100838:	b580      	push	{r7, lr}
 810083a:	b082      	sub	sp, #8
 810083c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810083e:	4b28      	ldr	r3, [pc, #160]	@ (81008e0 <HAL_Init+0xa8>)
 8100840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100844:	4a26      	ldr	r2, [pc, #152]	@ (81008e0 <HAL_Init+0xa8>)
 8100846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810084a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810084e:	4b24      	ldr	r3, [pc, #144]	@ (81008e0 <HAL_Init+0xa8>)
 8100850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100858:	603b      	str	r3, [r7, #0]
 810085a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810085c:	4b21      	ldr	r3, [pc, #132]	@ (81008e4 <HAL_Init+0xac>)
 810085e:	681b      	ldr	r3, [r3, #0]
 8100860:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100864:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100868:	4a1e      	ldr	r2, [pc, #120]	@ (81008e4 <HAL_Init+0xac>)
 810086a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810086e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100870:	4b1c      	ldr	r3, [pc, #112]	@ (81008e4 <HAL_Init+0xac>)
 8100872:	681b      	ldr	r3, [r3, #0]
 8100874:	4a1b      	ldr	r2, [pc, #108]	@ (81008e4 <HAL_Init+0xac>)
 8100876:	f043 0301 	orr.w	r3, r3, #1
 810087a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810087c:	2003      	movs	r0, #3
 810087e:	f000 f965 	bl	8100b4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100882:	f001 fa31 	bl	8101ce8 <HAL_RCC_GetSysClockFreq>
 8100886:	4602      	mov	r2, r0
 8100888:	4b15      	ldr	r3, [pc, #84]	@ (81008e0 <HAL_Init+0xa8>)
 810088a:	699b      	ldr	r3, [r3, #24]
 810088c:	0a1b      	lsrs	r3, r3, #8
 810088e:	f003 030f 	and.w	r3, r3, #15
 8100892:	4915      	ldr	r1, [pc, #84]	@ (81008e8 <HAL_Init+0xb0>)
 8100894:	5ccb      	ldrb	r3, [r1, r3]
 8100896:	f003 031f 	and.w	r3, r3, #31
 810089a:	fa22 f303 	lsr.w	r3, r2, r3
 810089e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81008a0:	4b0f      	ldr	r3, [pc, #60]	@ (81008e0 <HAL_Init+0xa8>)
 81008a2:	699b      	ldr	r3, [r3, #24]
 81008a4:	f003 030f 	and.w	r3, r3, #15
 81008a8:	4a0f      	ldr	r2, [pc, #60]	@ (81008e8 <HAL_Init+0xb0>)
 81008aa:	5cd3      	ldrb	r3, [r2, r3]
 81008ac:	f003 031f 	and.w	r3, r3, #31
 81008b0:	687a      	ldr	r2, [r7, #4]
 81008b2:	fa22 f303 	lsr.w	r3, r2, r3
 81008b6:	4a0d      	ldr	r2, [pc, #52]	@ (81008ec <HAL_Init+0xb4>)
 81008b8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81008ba:	4b0c      	ldr	r3, [pc, #48]	@ (81008ec <HAL_Init+0xb4>)
 81008bc:	681b      	ldr	r3, [r3, #0]
 81008be:	4a0c      	ldr	r2, [pc, #48]	@ (81008f0 <HAL_Init+0xb8>)
 81008c0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81008c2:	2000      	movs	r0, #0
 81008c4:	f000 f816 	bl	81008f4 <HAL_InitTick>
 81008c8:	4603      	mov	r3, r0
 81008ca:	2b00      	cmp	r3, #0
 81008cc:	d001      	beq.n	81008d2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81008ce:	2301      	movs	r3, #1
 81008d0:	e002      	b.n	81008d8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81008d2:	f7ff fec5 	bl	8100660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81008d6:	2300      	movs	r3, #0
}
 81008d8:	4618      	mov	r0, r3
 81008da:	3708      	adds	r7, #8
 81008dc:	46bd      	mov	sp, r7
 81008de:	bd80      	pop	{r7, pc}
 81008e0:	58024400 	.word	0x58024400
 81008e4:	40024400 	.word	0x40024400
 81008e8:	08103728 	.word	0x08103728
 81008ec:	10000004 	.word	0x10000004
 81008f0:	10000000 	.word	0x10000000

081008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008f4:	b580      	push	{r7, lr}
 81008f6:	b082      	sub	sp, #8
 81008f8:	af00      	add	r7, sp, #0
 81008fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81008fc:	4b15      	ldr	r3, [pc, #84]	@ (8100954 <HAL_InitTick+0x60>)
 81008fe:	781b      	ldrb	r3, [r3, #0]
 8100900:	2b00      	cmp	r3, #0
 8100902:	d101      	bne.n	8100908 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100904:	2301      	movs	r3, #1
 8100906:	e021      	b.n	810094c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100908:	4b13      	ldr	r3, [pc, #76]	@ (8100958 <HAL_InitTick+0x64>)
 810090a:	681a      	ldr	r2, [r3, #0]
 810090c:	4b11      	ldr	r3, [pc, #68]	@ (8100954 <HAL_InitTick+0x60>)
 810090e:	781b      	ldrb	r3, [r3, #0]
 8100910:	4619      	mov	r1, r3
 8100912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100916:	fbb3 f3f1 	udiv	r3, r3, r1
 810091a:	fbb2 f3f3 	udiv	r3, r2, r3
 810091e:	4618      	mov	r0, r3
 8100920:	f000 f939 	bl	8100b96 <HAL_SYSTICK_Config>
 8100924:	4603      	mov	r3, r0
 8100926:	2b00      	cmp	r3, #0
 8100928:	d001      	beq.n	810092e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810092a:	2301      	movs	r3, #1
 810092c:	e00e      	b.n	810094c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810092e:	687b      	ldr	r3, [r7, #4]
 8100930:	2b0f      	cmp	r3, #15
 8100932:	d80a      	bhi.n	810094a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100934:	2200      	movs	r2, #0
 8100936:	6879      	ldr	r1, [r7, #4]
 8100938:	f04f 30ff 	mov.w	r0, #4294967295
 810093c:	f000 f911 	bl	8100b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100940:	4a06      	ldr	r2, [pc, #24]	@ (810095c <HAL_InitTick+0x68>)
 8100942:	687b      	ldr	r3, [r7, #4]
 8100944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100946:	2300      	movs	r3, #0
 8100948:	e000      	b.n	810094c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810094a:	2301      	movs	r3, #1
}
 810094c:	4618      	mov	r0, r3
 810094e:	3708      	adds	r7, #8
 8100950:	46bd      	mov	sp, r7
 8100952:	bd80      	pop	{r7, pc}
 8100954:	10000010 	.word	0x10000010
 8100958:	10000000 	.word	0x10000000
 810095c:	1000000c 	.word	0x1000000c

08100960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100960:	b480      	push	{r7}
 8100962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100964:	4b06      	ldr	r3, [pc, #24]	@ (8100980 <HAL_IncTick+0x20>)
 8100966:	781b      	ldrb	r3, [r3, #0]
 8100968:	461a      	mov	r2, r3
 810096a:	4b06      	ldr	r3, [pc, #24]	@ (8100984 <HAL_IncTick+0x24>)
 810096c:	681b      	ldr	r3, [r3, #0]
 810096e:	4413      	add	r3, r2
 8100970:	4a04      	ldr	r2, [pc, #16]	@ (8100984 <HAL_IncTick+0x24>)
 8100972:	6013      	str	r3, [r2, #0]
}
 8100974:	bf00      	nop
 8100976:	46bd      	mov	sp, r7
 8100978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810097c:	4770      	bx	lr
 810097e:	bf00      	nop
 8100980:	10000010 	.word	0x10000010
 8100984:	10000094 	.word	0x10000094

08100988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100988:	b480      	push	{r7}
 810098a:	af00      	add	r7, sp, #0
  return uwTick;
 810098c:	4b03      	ldr	r3, [pc, #12]	@ (810099c <HAL_GetTick+0x14>)
 810098e:	681b      	ldr	r3, [r3, #0]
}
 8100990:	4618      	mov	r0, r3
 8100992:	46bd      	mov	sp, r7
 8100994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100998:	4770      	bx	lr
 810099a:	bf00      	nop
 810099c:	10000094 	.word	0x10000094

081009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81009a0:	b580      	push	{r7, lr}
 81009a2:	b084      	sub	sp, #16
 81009a4:	af00      	add	r7, sp, #0
 81009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81009a8:	f7ff ffee 	bl	8100988 <HAL_GetTick>
 81009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81009ae:	687b      	ldr	r3, [r7, #4]
 81009b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81009b2:	68fb      	ldr	r3, [r7, #12]
 81009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81009b8:	d005      	beq.n	81009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81009ba:	4b0a      	ldr	r3, [pc, #40]	@ (81009e4 <HAL_Delay+0x44>)
 81009bc:	781b      	ldrb	r3, [r3, #0]
 81009be:	461a      	mov	r2, r3
 81009c0:	68fb      	ldr	r3, [r7, #12]
 81009c2:	4413      	add	r3, r2
 81009c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81009c6:	bf00      	nop
 81009c8:	f7ff ffde 	bl	8100988 <HAL_GetTick>
 81009cc:	4602      	mov	r2, r0
 81009ce:	68bb      	ldr	r3, [r7, #8]
 81009d0:	1ad3      	subs	r3, r2, r3
 81009d2:	68fa      	ldr	r2, [r7, #12]
 81009d4:	429a      	cmp	r2, r3
 81009d6:	d8f7      	bhi.n	81009c8 <HAL_Delay+0x28>
  {
  }
}
 81009d8:	bf00      	nop
 81009da:	bf00      	nop
 81009dc:	3710      	adds	r7, #16
 81009de:	46bd      	mov	sp, r7
 81009e0:	bd80      	pop	{r7, pc}
 81009e2:	bf00      	nop
 81009e4:	10000010 	.word	0x10000010

081009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81009e8:	b480      	push	{r7}
 81009ea:	b085      	sub	sp, #20
 81009ec:	af00      	add	r7, sp, #0
 81009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81009f0:	687b      	ldr	r3, [r7, #4]
 81009f2:	f003 0307 	and.w	r3, r3, #7
 81009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8100a2c <__NVIC_SetPriorityGrouping+0x44>)
 81009fa:	68db      	ldr	r3, [r3, #12]
 81009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81009fe:	68ba      	ldr	r2, [r7, #8]
 8100a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100a04:	4013      	ands	r3, r2
 8100a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100a08:	68fb      	ldr	r3, [r7, #12]
 8100a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100a0c:	68bb      	ldr	r3, [r7, #8]
 8100a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100a1a:	4a04      	ldr	r2, [pc, #16]	@ (8100a2c <__NVIC_SetPriorityGrouping+0x44>)
 8100a1c:	68bb      	ldr	r3, [r7, #8]
 8100a1e:	60d3      	str	r3, [r2, #12]
}
 8100a20:	bf00      	nop
 8100a22:	3714      	adds	r7, #20
 8100a24:	46bd      	mov	sp, r7
 8100a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a2a:	4770      	bx	lr
 8100a2c:	e000ed00 	.word	0xe000ed00

08100a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100a30:	b480      	push	{r7}
 8100a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100a34:	4b04      	ldr	r3, [pc, #16]	@ (8100a48 <__NVIC_GetPriorityGrouping+0x18>)
 8100a36:	68db      	ldr	r3, [r3, #12]
 8100a38:	0a1b      	lsrs	r3, r3, #8
 8100a3a:	f003 0307 	and.w	r3, r3, #7
}
 8100a3e:	4618      	mov	r0, r3
 8100a40:	46bd      	mov	sp, r7
 8100a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a46:	4770      	bx	lr
 8100a48:	e000ed00 	.word	0xe000ed00

08100a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100a4c:	b480      	push	{r7}
 8100a4e:	b083      	sub	sp, #12
 8100a50:	af00      	add	r7, sp, #0
 8100a52:	4603      	mov	r3, r0
 8100a54:	6039      	str	r1, [r7, #0]
 8100a56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a5c:	2b00      	cmp	r3, #0
 8100a5e:	db0a      	blt.n	8100a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a60:	683b      	ldr	r3, [r7, #0]
 8100a62:	b2da      	uxtb	r2, r3
 8100a64:	490c      	ldr	r1, [pc, #48]	@ (8100a98 <__NVIC_SetPriority+0x4c>)
 8100a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a6a:	0112      	lsls	r2, r2, #4
 8100a6c:	b2d2      	uxtb	r2, r2
 8100a6e:	440b      	add	r3, r1
 8100a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100a74:	e00a      	b.n	8100a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a76:	683b      	ldr	r3, [r7, #0]
 8100a78:	b2da      	uxtb	r2, r3
 8100a7a:	4908      	ldr	r1, [pc, #32]	@ (8100a9c <__NVIC_SetPriority+0x50>)
 8100a7c:	88fb      	ldrh	r3, [r7, #6]
 8100a7e:	f003 030f 	and.w	r3, r3, #15
 8100a82:	3b04      	subs	r3, #4
 8100a84:	0112      	lsls	r2, r2, #4
 8100a86:	b2d2      	uxtb	r2, r2
 8100a88:	440b      	add	r3, r1
 8100a8a:	761a      	strb	r2, [r3, #24]
}
 8100a8c:	bf00      	nop
 8100a8e:	370c      	adds	r7, #12
 8100a90:	46bd      	mov	sp, r7
 8100a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a96:	4770      	bx	lr
 8100a98:	e000e100 	.word	0xe000e100
 8100a9c:	e000ed00 	.word	0xe000ed00

08100aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100aa0:	b480      	push	{r7}
 8100aa2:	b089      	sub	sp, #36	@ 0x24
 8100aa4:	af00      	add	r7, sp, #0
 8100aa6:	60f8      	str	r0, [r7, #12]
 8100aa8:	60b9      	str	r1, [r7, #8]
 8100aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100aac:	68fb      	ldr	r3, [r7, #12]
 8100aae:	f003 0307 	and.w	r3, r3, #7
 8100ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100ab4:	69fb      	ldr	r3, [r7, #28]
 8100ab6:	f1c3 0307 	rsb	r3, r3, #7
 8100aba:	2b04      	cmp	r3, #4
 8100abc:	bf28      	it	cs
 8100abe:	2304      	movcs	r3, #4
 8100ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100ac2:	69fb      	ldr	r3, [r7, #28]
 8100ac4:	3304      	adds	r3, #4
 8100ac6:	2b06      	cmp	r3, #6
 8100ac8:	d902      	bls.n	8100ad0 <NVIC_EncodePriority+0x30>
 8100aca:	69fb      	ldr	r3, [r7, #28]
 8100acc:	3b03      	subs	r3, #3
 8100ace:	e000      	b.n	8100ad2 <NVIC_EncodePriority+0x32>
 8100ad0:	2300      	movs	r3, #0
 8100ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8100ad8:	69bb      	ldr	r3, [r7, #24]
 8100ada:	fa02 f303 	lsl.w	r3, r2, r3
 8100ade:	43da      	mvns	r2, r3
 8100ae0:	68bb      	ldr	r3, [r7, #8]
 8100ae2:	401a      	ands	r2, r3
 8100ae4:	697b      	ldr	r3, [r7, #20]
 8100ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8100aec:	697b      	ldr	r3, [r7, #20]
 8100aee:	fa01 f303 	lsl.w	r3, r1, r3
 8100af2:	43d9      	mvns	r1, r3
 8100af4:	687b      	ldr	r3, [r7, #4]
 8100af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100af8:	4313      	orrs	r3, r2
         );
}
 8100afa:	4618      	mov	r0, r3
 8100afc:	3724      	adds	r7, #36	@ 0x24
 8100afe:	46bd      	mov	sp, r7
 8100b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b04:	4770      	bx	lr
	...

08100b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100b08:	b580      	push	{r7, lr}
 8100b0a:	b082      	sub	sp, #8
 8100b0c:	af00      	add	r7, sp, #0
 8100b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100b10:	687b      	ldr	r3, [r7, #4]
 8100b12:	3b01      	subs	r3, #1
 8100b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100b18:	d301      	bcc.n	8100b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100b1a:	2301      	movs	r3, #1
 8100b1c:	e00f      	b.n	8100b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8100b48 <SysTick_Config+0x40>)
 8100b20:	687b      	ldr	r3, [r7, #4]
 8100b22:	3b01      	subs	r3, #1
 8100b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100b26:	210f      	movs	r1, #15
 8100b28:	f04f 30ff 	mov.w	r0, #4294967295
 8100b2c:	f7ff ff8e 	bl	8100a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100b30:	4b05      	ldr	r3, [pc, #20]	@ (8100b48 <SysTick_Config+0x40>)
 8100b32:	2200      	movs	r2, #0
 8100b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100b36:	4b04      	ldr	r3, [pc, #16]	@ (8100b48 <SysTick_Config+0x40>)
 8100b38:	2207      	movs	r2, #7
 8100b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100b3c:	2300      	movs	r3, #0
}
 8100b3e:	4618      	mov	r0, r3
 8100b40:	3708      	adds	r7, #8
 8100b42:	46bd      	mov	sp, r7
 8100b44:	bd80      	pop	{r7, pc}
 8100b46:	bf00      	nop
 8100b48:	e000e010 	.word	0xe000e010

08100b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b4c:	b580      	push	{r7, lr}
 8100b4e:	b082      	sub	sp, #8
 8100b50:	af00      	add	r7, sp, #0
 8100b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100b54:	6878      	ldr	r0, [r7, #4]
 8100b56:	f7ff ff47 	bl	81009e8 <__NVIC_SetPriorityGrouping>
}
 8100b5a:	bf00      	nop
 8100b5c:	3708      	adds	r7, #8
 8100b5e:	46bd      	mov	sp, r7
 8100b60:	bd80      	pop	{r7, pc}

08100b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100b62:	b580      	push	{r7, lr}
 8100b64:	b086      	sub	sp, #24
 8100b66:	af00      	add	r7, sp, #0
 8100b68:	4603      	mov	r3, r0
 8100b6a:	60b9      	str	r1, [r7, #8]
 8100b6c:	607a      	str	r2, [r7, #4]
 8100b6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b70:	f7ff ff5e 	bl	8100a30 <__NVIC_GetPriorityGrouping>
 8100b74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b76:	687a      	ldr	r2, [r7, #4]
 8100b78:	68b9      	ldr	r1, [r7, #8]
 8100b7a:	6978      	ldr	r0, [r7, #20]
 8100b7c:	f7ff ff90 	bl	8100aa0 <NVIC_EncodePriority>
 8100b80:	4602      	mov	r2, r0
 8100b82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b86:	4611      	mov	r1, r2
 8100b88:	4618      	mov	r0, r3
 8100b8a:	f7ff ff5f 	bl	8100a4c <__NVIC_SetPriority>
}
 8100b8e:	bf00      	nop
 8100b90:	3718      	adds	r7, #24
 8100b92:	46bd      	mov	sp, r7
 8100b94:	bd80      	pop	{r7, pc}

08100b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100b96:	b580      	push	{r7, lr}
 8100b98:	b082      	sub	sp, #8
 8100b9a:	af00      	add	r7, sp, #0
 8100b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b9e:	6878      	ldr	r0, [r7, #4]
 8100ba0:	f7ff ffb2 	bl	8100b08 <SysTick_Config>
 8100ba4:	4603      	mov	r3, r0
}
 8100ba6:	4618      	mov	r0, r3
 8100ba8:	3708      	adds	r7, #8
 8100baa:	46bd      	mov	sp, r7
 8100bac:	bd80      	pop	{r7, pc}
	...

08100bb0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100bb0:	b480      	push	{r7}
 8100bb2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100bb4:	4b07      	ldr	r3, [pc, #28]	@ (8100bd4 <HAL_GetCurrentCPUID+0x24>)
 8100bb6:	681b      	ldr	r3, [r3, #0]
 8100bb8:	091b      	lsrs	r3, r3, #4
 8100bba:	f003 030f 	and.w	r3, r3, #15
 8100bbe:	2b07      	cmp	r3, #7
 8100bc0:	d101      	bne.n	8100bc6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100bc2:	2303      	movs	r3, #3
 8100bc4:	e000      	b.n	8100bc8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100bc6:	2301      	movs	r3, #1
  }
}
 8100bc8:	4618      	mov	r0, r3
 8100bca:	46bd      	mov	sp, r7
 8100bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd0:	4770      	bx	lr
 8100bd2:	bf00      	nop
 8100bd4:	e000ed00 	.word	0xe000ed00

08100bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100bd8:	b480      	push	{r7}
 8100bda:	b089      	sub	sp, #36	@ 0x24
 8100bdc:	af00      	add	r7, sp, #0
 8100bde:	6078      	str	r0, [r7, #4]
 8100be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100be2:	2300      	movs	r3, #0
 8100be4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100be6:	4b89      	ldr	r3, [pc, #548]	@ (8100e0c <HAL_GPIO_Init+0x234>)
 8100be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bea:	e194      	b.n	8100f16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100bec:	683b      	ldr	r3, [r7, #0]
 8100bee:	681a      	ldr	r2, [r3, #0]
 8100bf0:	2101      	movs	r1, #1
 8100bf2:	69fb      	ldr	r3, [r7, #28]
 8100bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8100bf8:	4013      	ands	r3, r2
 8100bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100bfc:	693b      	ldr	r3, [r7, #16]
 8100bfe:	2b00      	cmp	r3, #0
 8100c00:	f000 8186 	beq.w	8100f10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100c04:	683b      	ldr	r3, [r7, #0]
 8100c06:	685b      	ldr	r3, [r3, #4]
 8100c08:	f003 0303 	and.w	r3, r3, #3
 8100c0c:	2b01      	cmp	r3, #1
 8100c0e:	d005      	beq.n	8100c1c <HAL_GPIO_Init+0x44>
 8100c10:	683b      	ldr	r3, [r7, #0]
 8100c12:	685b      	ldr	r3, [r3, #4]
 8100c14:	f003 0303 	and.w	r3, r3, #3
 8100c18:	2b02      	cmp	r3, #2
 8100c1a:	d130      	bne.n	8100c7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100c1c:	687b      	ldr	r3, [r7, #4]
 8100c1e:	689b      	ldr	r3, [r3, #8]
 8100c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100c22:	69fb      	ldr	r3, [r7, #28]
 8100c24:	005b      	lsls	r3, r3, #1
 8100c26:	2203      	movs	r2, #3
 8100c28:	fa02 f303 	lsl.w	r3, r2, r3
 8100c2c:	43db      	mvns	r3, r3
 8100c2e:	69ba      	ldr	r2, [r7, #24]
 8100c30:	4013      	ands	r3, r2
 8100c32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100c34:	683b      	ldr	r3, [r7, #0]
 8100c36:	68da      	ldr	r2, [r3, #12]
 8100c38:	69fb      	ldr	r3, [r7, #28]
 8100c3a:	005b      	lsls	r3, r3, #1
 8100c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8100c40:	69ba      	ldr	r2, [r7, #24]
 8100c42:	4313      	orrs	r3, r2
 8100c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100c46:	687b      	ldr	r3, [r7, #4]
 8100c48:	69ba      	ldr	r2, [r7, #24]
 8100c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100c4c:	687b      	ldr	r3, [r7, #4]
 8100c4e:	685b      	ldr	r3, [r3, #4]
 8100c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100c52:	2201      	movs	r2, #1
 8100c54:	69fb      	ldr	r3, [r7, #28]
 8100c56:	fa02 f303 	lsl.w	r3, r2, r3
 8100c5a:	43db      	mvns	r3, r3
 8100c5c:	69ba      	ldr	r2, [r7, #24]
 8100c5e:	4013      	ands	r3, r2
 8100c60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100c62:	683b      	ldr	r3, [r7, #0]
 8100c64:	685b      	ldr	r3, [r3, #4]
 8100c66:	091b      	lsrs	r3, r3, #4
 8100c68:	f003 0201 	and.w	r2, r3, #1
 8100c6c:	69fb      	ldr	r3, [r7, #28]
 8100c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c72:	69ba      	ldr	r2, [r7, #24]
 8100c74:	4313      	orrs	r3, r2
 8100c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c78:	687b      	ldr	r3, [r7, #4]
 8100c7a:	69ba      	ldr	r2, [r7, #24]
 8100c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100c7e:	683b      	ldr	r3, [r7, #0]
 8100c80:	685b      	ldr	r3, [r3, #4]
 8100c82:	f003 0303 	and.w	r3, r3, #3
 8100c86:	2b03      	cmp	r3, #3
 8100c88:	d017      	beq.n	8100cba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c8a:	687b      	ldr	r3, [r7, #4]
 8100c8c:	68db      	ldr	r3, [r3, #12]
 8100c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c90:	69fb      	ldr	r3, [r7, #28]
 8100c92:	005b      	lsls	r3, r3, #1
 8100c94:	2203      	movs	r2, #3
 8100c96:	fa02 f303 	lsl.w	r3, r2, r3
 8100c9a:	43db      	mvns	r3, r3
 8100c9c:	69ba      	ldr	r2, [r7, #24]
 8100c9e:	4013      	ands	r3, r2
 8100ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100ca2:	683b      	ldr	r3, [r7, #0]
 8100ca4:	689a      	ldr	r2, [r3, #8]
 8100ca6:	69fb      	ldr	r3, [r7, #28]
 8100ca8:	005b      	lsls	r3, r3, #1
 8100caa:	fa02 f303 	lsl.w	r3, r2, r3
 8100cae:	69ba      	ldr	r2, [r7, #24]
 8100cb0:	4313      	orrs	r3, r2
 8100cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100cb4:	687b      	ldr	r3, [r7, #4]
 8100cb6:	69ba      	ldr	r2, [r7, #24]
 8100cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100cba:	683b      	ldr	r3, [r7, #0]
 8100cbc:	685b      	ldr	r3, [r3, #4]
 8100cbe:	f003 0303 	and.w	r3, r3, #3
 8100cc2:	2b02      	cmp	r3, #2
 8100cc4:	d123      	bne.n	8100d0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100cc6:	69fb      	ldr	r3, [r7, #28]
 8100cc8:	08da      	lsrs	r2, r3, #3
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	3208      	adds	r2, #8
 8100cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100cd4:	69fb      	ldr	r3, [r7, #28]
 8100cd6:	f003 0307 	and.w	r3, r3, #7
 8100cda:	009b      	lsls	r3, r3, #2
 8100cdc:	220f      	movs	r2, #15
 8100cde:	fa02 f303 	lsl.w	r3, r2, r3
 8100ce2:	43db      	mvns	r3, r3
 8100ce4:	69ba      	ldr	r2, [r7, #24]
 8100ce6:	4013      	ands	r3, r2
 8100ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100cea:	683b      	ldr	r3, [r7, #0]
 8100cec:	691a      	ldr	r2, [r3, #16]
 8100cee:	69fb      	ldr	r3, [r7, #28]
 8100cf0:	f003 0307 	and.w	r3, r3, #7
 8100cf4:	009b      	lsls	r3, r3, #2
 8100cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8100cfa:	69ba      	ldr	r2, [r7, #24]
 8100cfc:	4313      	orrs	r3, r2
 8100cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100d00:	69fb      	ldr	r3, [r7, #28]
 8100d02:	08da      	lsrs	r2, r3, #3
 8100d04:	687b      	ldr	r3, [r7, #4]
 8100d06:	3208      	adds	r2, #8
 8100d08:	69b9      	ldr	r1, [r7, #24]
 8100d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100d0e:	687b      	ldr	r3, [r7, #4]
 8100d10:	681b      	ldr	r3, [r3, #0]
 8100d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100d14:	69fb      	ldr	r3, [r7, #28]
 8100d16:	005b      	lsls	r3, r3, #1
 8100d18:	2203      	movs	r2, #3
 8100d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100d1e:	43db      	mvns	r3, r3
 8100d20:	69ba      	ldr	r2, [r7, #24]
 8100d22:	4013      	ands	r3, r2
 8100d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100d26:	683b      	ldr	r3, [r7, #0]
 8100d28:	685b      	ldr	r3, [r3, #4]
 8100d2a:	f003 0203 	and.w	r2, r3, #3
 8100d2e:	69fb      	ldr	r3, [r7, #28]
 8100d30:	005b      	lsls	r3, r3, #1
 8100d32:	fa02 f303 	lsl.w	r3, r2, r3
 8100d36:	69ba      	ldr	r2, [r7, #24]
 8100d38:	4313      	orrs	r3, r2
 8100d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100d3c:	687b      	ldr	r3, [r7, #4]
 8100d3e:	69ba      	ldr	r2, [r7, #24]
 8100d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100d42:	683b      	ldr	r3, [r7, #0]
 8100d44:	685b      	ldr	r3, [r3, #4]
 8100d46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100d4a:	2b00      	cmp	r3, #0
 8100d4c:	f000 80e0 	beq.w	8100f10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d50:	4b2f      	ldr	r3, [pc, #188]	@ (8100e10 <HAL_GPIO_Init+0x238>)
 8100d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100d56:	4a2e      	ldr	r2, [pc, #184]	@ (8100e10 <HAL_GPIO_Init+0x238>)
 8100d58:	f043 0302 	orr.w	r3, r3, #2
 8100d5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100d60:	4b2b      	ldr	r3, [pc, #172]	@ (8100e10 <HAL_GPIO_Init+0x238>)
 8100d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100d66:	f003 0302 	and.w	r3, r3, #2
 8100d6a:	60fb      	str	r3, [r7, #12]
 8100d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d6e:	4a29      	ldr	r2, [pc, #164]	@ (8100e14 <HAL_GPIO_Init+0x23c>)
 8100d70:	69fb      	ldr	r3, [r7, #28]
 8100d72:	089b      	lsrs	r3, r3, #2
 8100d74:	3302      	adds	r3, #2
 8100d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d7c:	69fb      	ldr	r3, [r7, #28]
 8100d7e:	f003 0303 	and.w	r3, r3, #3
 8100d82:	009b      	lsls	r3, r3, #2
 8100d84:	220f      	movs	r2, #15
 8100d86:	fa02 f303 	lsl.w	r3, r2, r3
 8100d8a:	43db      	mvns	r3, r3
 8100d8c:	69ba      	ldr	r2, [r7, #24]
 8100d8e:	4013      	ands	r3, r2
 8100d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d92:	687b      	ldr	r3, [r7, #4]
 8100d94:	4a20      	ldr	r2, [pc, #128]	@ (8100e18 <HAL_GPIO_Init+0x240>)
 8100d96:	4293      	cmp	r3, r2
 8100d98:	d052      	beq.n	8100e40 <HAL_GPIO_Init+0x268>
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8100e1c <HAL_GPIO_Init+0x244>)
 8100d9e:	4293      	cmp	r3, r2
 8100da0:	d031      	beq.n	8100e06 <HAL_GPIO_Init+0x22e>
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	4a1e      	ldr	r2, [pc, #120]	@ (8100e20 <HAL_GPIO_Init+0x248>)
 8100da6:	4293      	cmp	r3, r2
 8100da8:	d02b      	beq.n	8100e02 <HAL_GPIO_Init+0x22a>
 8100daa:	687b      	ldr	r3, [r7, #4]
 8100dac:	4a1d      	ldr	r2, [pc, #116]	@ (8100e24 <HAL_GPIO_Init+0x24c>)
 8100dae:	4293      	cmp	r3, r2
 8100db0:	d025      	beq.n	8100dfe <HAL_GPIO_Init+0x226>
 8100db2:	687b      	ldr	r3, [r7, #4]
 8100db4:	4a1c      	ldr	r2, [pc, #112]	@ (8100e28 <HAL_GPIO_Init+0x250>)
 8100db6:	4293      	cmp	r3, r2
 8100db8:	d01f      	beq.n	8100dfa <HAL_GPIO_Init+0x222>
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8100e2c <HAL_GPIO_Init+0x254>)
 8100dbe:	4293      	cmp	r3, r2
 8100dc0:	d019      	beq.n	8100df6 <HAL_GPIO_Init+0x21e>
 8100dc2:	687b      	ldr	r3, [r7, #4]
 8100dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8100e30 <HAL_GPIO_Init+0x258>)
 8100dc6:	4293      	cmp	r3, r2
 8100dc8:	d013      	beq.n	8100df2 <HAL_GPIO_Init+0x21a>
 8100dca:	687b      	ldr	r3, [r7, #4]
 8100dcc:	4a19      	ldr	r2, [pc, #100]	@ (8100e34 <HAL_GPIO_Init+0x25c>)
 8100dce:	4293      	cmp	r3, r2
 8100dd0:	d00d      	beq.n	8100dee <HAL_GPIO_Init+0x216>
 8100dd2:	687b      	ldr	r3, [r7, #4]
 8100dd4:	4a18      	ldr	r2, [pc, #96]	@ (8100e38 <HAL_GPIO_Init+0x260>)
 8100dd6:	4293      	cmp	r3, r2
 8100dd8:	d007      	beq.n	8100dea <HAL_GPIO_Init+0x212>
 8100dda:	687b      	ldr	r3, [r7, #4]
 8100ddc:	4a17      	ldr	r2, [pc, #92]	@ (8100e3c <HAL_GPIO_Init+0x264>)
 8100dde:	4293      	cmp	r3, r2
 8100de0:	d101      	bne.n	8100de6 <HAL_GPIO_Init+0x20e>
 8100de2:	2309      	movs	r3, #9
 8100de4:	e02d      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100de6:	230a      	movs	r3, #10
 8100de8:	e02b      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dea:	2308      	movs	r3, #8
 8100dec:	e029      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dee:	2307      	movs	r3, #7
 8100df0:	e027      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100df2:	2306      	movs	r3, #6
 8100df4:	e025      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100df6:	2305      	movs	r3, #5
 8100df8:	e023      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dfa:	2304      	movs	r3, #4
 8100dfc:	e021      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100dfe:	2303      	movs	r3, #3
 8100e00:	e01f      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100e02:	2302      	movs	r3, #2
 8100e04:	e01d      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100e06:	2301      	movs	r3, #1
 8100e08:	e01b      	b.n	8100e42 <HAL_GPIO_Init+0x26a>
 8100e0a:	bf00      	nop
 8100e0c:	580000c0 	.word	0x580000c0
 8100e10:	58024400 	.word	0x58024400
 8100e14:	58000400 	.word	0x58000400
 8100e18:	58020000 	.word	0x58020000
 8100e1c:	58020400 	.word	0x58020400
 8100e20:	58020800 	.word	0x58020800
 8100e24:	58020c00 	.word	0x58020c00
 8100e28:	58021000 	.word	0x58021000
 8100e2c:	58021400 	.word	0x58021400
 8100e30:	58021800 	.word	0x58021800
 8100e34:	58021c00 	.word	0x58021c00
 8100e38:	58022000 	.word	0x58022000
 8100e3c:	58022400 	.word	0x58022400
 8100e40:	2300      	movs	r3, #0
 8100e42:	69fa      	ldr	r2, [r7, #28]
 8100e44:	f002 0203 	and.w	r2, r2, #3
 8100e48:	0092      	lsls	r2, r2, #2
 8100e4a:	4093      	lsls	r3, r2
 8100e4c:	69ba      	ldr	r2, [r7, #24]
 8100e4e:	4313      	orrs	r3, r2
 8100e50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100e52:	4938      	ldr	r1, [pc, #224]	@ (8100f34 <HAL_GPIO_Init+0x35c>)
 8100e54:	69fb      	ldr	r3, [r7, #28]
 8100e56:	089b      	lsrs	r3, r3, #2
 8100e58:	3302      	adds	r3, #2
 8100e5a:	69ba      	ldr	r2, [r7, #24]
 8100e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100e64:	681b      	ldr	r3, [r3, #0]
 8100e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e68:	693b      	ldr	r3, [r7, #16]
 8100e6a:	43db      	mvns	r3, r3
 8100e6c:	69ba      	ldr	r2, [r7, #24]
 8100e6e:	4013      	ands	r3, r2
 8100e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100e72:	683b      	ldr	r3, [r7, #0]
 8100e74:	685b      	ldr	r3, [r3, #4]
 8100e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100e7a:	2b00      	cmp	r3, #0
 8100e7c:	d003      	beq.n	8100e86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100e7e:	69ba      	ldr	r2, [r7, #24]
 8100e80:	693b      	ldr	r3, [r7, #16]
 8100e82:	4313      	orrs	r3, r2
 8100e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100e8a:	69bb      	ldr	r3, [r7, #24]
 8100e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100e92:	685b      	ldr	r3, [r3, #4]
 8100e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e96:	693b      	ldr	r3, [r7, #16]
 8100e98:	43db      	mvns	r3, r3
 8100e9a:	69ba      	ldr	r2, [r7, #24]
 8100e9c:	4013      	ands	r3, r2
 8100e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100ea0:	683b      	ldr	r3, [r7, #0]
 8100ea2:	685b      	ldr	r3, [r3, #4]
 8100ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100ea8:	2b00      	cmp	r3, #0
 8100eaa:	d003      	beq.n	8100eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100eac:	69ba      	ldr	r2, [r7, #24]
 8100eae:	693b      	ldr	r3, [r7, #16]
 8100eb0:	4313      	orrs	r3, r2
 8100eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100eb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100eb8:	69bb      	ldr	r3, [r7, #24]
 8100eba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100ebc:	697b      	ldr	r3, [r7, #20]
 8100ebe:	685b      	ldr	r3, [r3, #4]
 8100ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ec2:	693b      	ldr	r3, [r7, #16]
 8100ec4:	43db      	mvns	r3, r3
 8100ec6:	69ba      	ldr	r2, [r7, #24]
 8100ec8:	4013      	ands	r3, r2
 8100eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100ecc:	683b      	ldr	r3, [r7, #0]
 8100ece:	685b      	ldr	r3, [r3, #4]
 8100ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8100ed4:	2b00      	cmp	r3, #0
 8100ed6:	d003      	beq.n	8100ee0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100ed8:	69ba      	ldr	r2, [r7, #24]
 8100eda:	693b      	ldr	r3, [r7, #16]
 8100edc:	4313      	orrs	r3, r2
 8100ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100ee0:	697b      	ldr	r3, [r7, #20]
 8100ee2:	69ba      	ldr	r2, [r7, #24]
 8100ee4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100ee6:	697b      	ldr	r3, [r7, #20]
 8100ee8:	681b      	ldr	r3, [r3, #0]
 8100eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100eec:	693b      	ldr	r3, [r7, #16]
 8100eee:	43db      	mvns	r3, r3
 8100ef0:	69ba      	ldr	r2, [r7, #24]
 8100ef2:	4013      	ands	r3, r2
 8100ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100ef6:	683b      	ldr	r3, [r7, #0]
 8100ef8:	685b      	ldr	r3, [r3, #4]
 8100efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8100efe:	2b00      	cmp	r3, #0
 8100f00:	d003      	beq.n	8100f0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100f02:	69ba      	ldr	r2, [r7, #24]
 8100f04:	693b      	ldr	r3, [r7, #16]
 8100f06:	4313      	orrs	r3, r2
 8100f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100f0a:	697b      	ldr	r3, [r7, #20]
 8100f0c:	69ba      	ldr	r2, [r7, #24]
 8100f0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100f10:	69fb      	ldr	r3, [r7, #28]
 8100f12:	3301      	adds	r3, #1
 8100f14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100f16:	683b      	ldr	r3, [r7, #0]
 8100f18:	681a      	ldr	r2, [r3, #0]
 8100f1a:	69fb      	ldr	r3, [r7, #28]
 8100f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8100f20:	2b00      	cmp	r3, #0
 8100f22:	f47f ae63 	bne.w	8100bec <HAL_GPIO_Init+0x14>
  }
}
 8100f26:	bf00      	nop
 8100f28:	bf00      	nop
 8100f2a:	3724      	adds	r7, #36	@ 0x24
 8100f2c:	46bd      	mov	sp, r7
 8100f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f32:	4770      	bx	lr
 8100f34:	58000400 	.word	0x58000400

08100f38 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100f38:	b480      	push	{r7}
 8100f3a:	b083      	sub	sp, #12
 8100f3c:	af00      	add	r7, sp, #0
 8100f3e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100f40:	4b05      	ldr	r3, [pc, #20]	@ (8100f58 <HAL_HSEM_ActivateNotification+0x20>)
 8100f42:	681a      	ldr	r2, [r3, #0]
 8100f44:	4904      	ldr	r1, [pc, #16]	@ (8100f58 <HAL_HSEM_ActivateNotification+0x20>)
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	4313      	orrs	r3, r2
 8100f4a:	600b      	str	r3, [r1, #0]
#endif
}
 8100f4c:	bf00      	nop
 8100f4e:	370c      	adds	r7, #12
 8100f50:	46bd      	mov	sp, r7
 8100f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f56:	4770      	bx	lr
 8100f58:	58026510 	.word	0x58026510

08100f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8100f5c:	b580      	push	{r7, lr}
 8100f5e:	b082      	sub	sp, #8
 8100f60:	af00      	add	r7, sp, #0
 8100f62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	2b00      	cmp	r3, #0
 8100f68:	d101      	bne.n	8100f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8100f6a:	2301      	movs	r3, #1
 8100f6c:	e08d      	b.n	810108a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8100f74:	b2db      	uxtb	r3, r3
 8100f76:	2b00      	cmp	r3, #0
 8100f78:	d106      	bne.n	8100f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8100f7a:	687b      	ldr	r3, [r7, #4]
 8100f7c:	2200      	movs	r2, #0
 8100f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8100f82:	6878      	ldr	r0, [r7, #4]
 8100f84:	f7ff fb94 	bl	81006b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8100f88:	687b      	ldr	r3, [r7, #4]
 8100f8a:	2224      	movs	r2, #36	@ 0x24
 8100f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8100f90:	687b      	ldr	r3, [r7, #4]
 8100f92:	681b      	ldr	r3, [r3, #0]
 8100f94:	681a      	ldr	r2, [r3, #0]
 8100f96:	687b      	ldr	r3, [r7, #4]
 8100f98:	681b      	ldr	r3, [r3, #0]
 8100f9a:	f022 0201 	bic.w	r2, r2, #1
 8100f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8100fa0:	687b      	ldr	r3, [r7, #4]
 8100fa2:	685a      	ldr	r2, [r3, #4]
 8100fa4:	687b      	ldr	r3, [r7, #4]
 8100fa6:	681b      	ldr	r3, [r3, #0]
 8100fa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8100fac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8100fae:	687b      	ldr	r3, [r7, #4]
 8100fb0:	681b      	ldr	r3, [r3, #0]
 8100fb2:	689a      	ldr	r2, [r3, #8]
 8100fb4:	687b      	ldr	r3, [r7, #4]
 8100fb6:	681b      	ldr	r3, [r3, #0]
 8100fb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8100fbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8100fbe:	687b      	ldr	r3, [r7, #4]
 8100fc0:	68db      	ldr	r3, [r3, #12]
 8100fc2:	2b01      	cmp	r3, #1
 8100fc4:	d107      	bne.n	8100fd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8100fc6:	687b      	ldr	r3, [r7, #4]
 8100fc8:	689a      	ldr	r2, [r3, #8]
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8100fd2:	609a      	str	r2, [r3, #8]
 8100fd4:	e006      	b.n	8100fe4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8100fd6:	687b      	ldr	r3, [r7, #4]
 8100fd8:	689a      	ldr	r2, [r3, #8]
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8100fe2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8100fe4:	687b      	ldr	r3, [r7, #4]
 8100fe6:	68db      	ldr	r3, [r3, #12]
 8100fe8:	2b02      	cmp	r3, #2
 8100fea:	d108      	bne.n	8100ffe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8100fec:	687b      	ldr	r3, [r7, #4]
 8100fee:	681b      	ldr	r3, [r3, #0]
 8100ff0:	685a      	ldr	r2, [r3, #4]
 8100ff2:	687b      	ldr	r3, [r7, #4]
 8100ff4:	681b      	ldr	r3, [r3, #0]
 8100ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8100ffa:	605a      	str	r2, [r3, #4]
 8100ffc:	e007      	b.n	810100e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	681b      	ldr	r3, [r3, #0]
 8101002:	685a      	ldr	r2, [r3, #4]
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	681b      	ldr	r3, [r3, #0]
 8101008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 810100c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 810100e:	687b      	ldr	r3, [r7, #4]
 8101010:	681b      	ldr	r3, [r3, #0]
 8101012:	685b      	ldr	r3, [r3, #4]
 8101014:	687a      	ldr	r2, [r7, #4]
 8101016:	6812      	ldr	r2, [r2, #0]
 8101018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810101c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101020:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101022:	687b      	ldr	r3, [r7, #4]
 8101024:	681b      	ldr	r3, [r3, #0]
 8101026:	68da      	ldr	r2, [r3, #12]
 8101028:	687b      	ldr	r3, [r7, #4]
 810102a:	681b      	ldr	r3, [r3, #0]
 810102c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	691a      	ldr	r2, [r3, #16]
 8101036:	687b      	ldr	r3, [r7, #4]
 8101038:	695b      	ldr	r3, [r3, #20]
 810103a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 810103e:	687b      	ldr	r3, [r7, #4]
 8101040:	699b      	ldr	r3, [r3, #24]
 8101042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101044:	687b      	ldr	r3, [r7, #4]
 8101046:	681b      	ldr	r3, [r3, #0]
 8101048:	430a      	orrs	r2, r1
 810104a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810104c:	687b      	ldr	r3, [r7, #4]
 810104e:	69d9      	ldr	r1, [r3, #28]
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	6a1a      	ldr	r2, [r3, #32]
 8101054:	687b      	ldr	r3, [r7, #4]
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	430a      	orrs	r2, r1
 810105a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810105c:	687b      	ldr	r3, [r7, #4]
 810105e:	681b      	ldr	r3, [r3, #0]
 8101060:	681a      	ldr	r2, [r3, #0]
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	681b      	ldr	r3, [r3, #0]
 8101066:	f042 0201 	orr.w	r2, r2, #1
 810106a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810106c:	687b      	ldr	r3, [r7, #4]
 810106e:	2200      	movs	r2, #0
 8101070:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101072:	687b      	ldr	r3, [r7, #4]
 8101074:	2220      	movs	r2, #32
 8101076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810107a:	687b      	ldr	r3, [r7, #4]
 810107c:	2200      	movs	r2, #0
 810107e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101080:	687b      	ldr	r3, [r7, #4]
 8101082:	2200      	movs	r2, #0
 8101084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8101088:	2300      	movs	r3, #0
}
 810108a:	4618      	mov	r0, r3
 810108c:	3708      	adds	r7, #8
 810108e:	46bd      	mov	sp, r7
 8101090:	bd80      	pop	{r7, pc}
	...

08101094 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8101094:	b580      	push	{r7, lr}
 8101096:	b088      	sub	sp, #32
 8101098:	af02      	add	r7, sp, #8
 810109a:	60f8      	str	r0, [r7, #12]
 810109c:	607a      	str	r2, [r7, #4]
 810109e:	461a      	mov	r2, r3
 81010a0:	460b      	mov	r3, r1
 81010a2:	817b      	strh	r3, [r7, #10]
 81010a4:	4613      	mov	r3, r2
 81010a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81010a8:	68fb      	ldr	r3, [r7, #12]
 81010aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81010ae:	b2db      	uxtb	r3, r3
 81010b0:	2b20      	cmp	r3, #32
 81010b2:	f040 80fd 	bne.w	81012b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81010b6:	68fb      	ldr	r3, [r7, #12]
 81010b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81010bc:	2b01      	cmp	r3, #1
 81010be:	d101      	bne.n	81010c4 <HAL_I2C_Master_Transmit+0x30>
 81010c0:	2302      	movs	r3, #2
 81010c2:	e0f6      	b.n	81012b2 <HAL_I2C_Master_Transmit+0x21e>
 81010c4:	68fb      	ldr	r3, [r7, #12]
 81010c6:	2201      	movs	r2, #1
 81010c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81010cc:	f7ff fc5c 	bl	8100988 <HAL_GetTick>
 81010d0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81010d2:	693b      	ldr	r3, [r7, #16]
 81010d4:	9300      	str	r3, [sp, #0]
 81010d6:	2319      	movs	r3, #25
 81010d8:	2201      	movs	r2, #1
 81010da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81010de:	68f8      	ldr	r0, [r7, #12]
 81010e0:	f000 fa0a 	bl	81014f8 <I2C_WaitOnFlagUntilTimeout>
 81010e4:	4603      	mov	r3, r0
 81010e6:	2b00      	cmp	r3, #0
 81010e8:	d001      	beq.n	81010ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 81010ea:	2301      	movs	r3, #1
 81010ec:	e0e1      	b.n	81012b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81010ee:	68fb      	ldr	r3, [r7, #12]
 81010f0:	2221      	movs	r2, #33	@ 0x21
 81010f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 81010f6:	68fb      	ldr	r3, [r7, #12]
 81010f8:	2210      	movs	r2, #16
 81010fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81010fe:	68fb      	ldr	r3, [r7, #12]
 8101100:	2200      	movs	r2, #0
 8101102:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8101104:	68fb      	ldr	r3, [r7, #12]
 8101106:	687a      	ldr	r2, [r7, #4]
 8101108:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810110a:	68fb      	ldr	r3, [r7, #12]
 810110c:	893a      	ldrh	r2, [r7, #8]
 810110e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8101110:	68fb      	ldr	r3, [r7, #12]
 8101112:	2200      	movs	r2, #0
 8101114:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101116:	68fb      	ldr	r3, [r7, #12]
 8101118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810111a:	b29b      	uxth	r3, r3
 810111c:	2bff      	cmp	r3, #255	@ 0xff
 810111e:	d906      	bls.n	810112e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8101120:	68fb      	ldr	r3, [r7, #12]
 8101122:	22ff      	movs	r2, #255	@ 0xff
 8101124:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8101126:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810112a:	617b      	str	r3, [r7, #20]
 810112c:	e007      	b.n	810113e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810112e:	68fb      	ldr	r3, [r7, #12]
 8101130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101132:	b29a      	uxth	r2, r3
 8101134:	68fb      	ldr	r3, [r7, #12]
 8101136:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8101138:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810113c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 810113e:	68fb      	ldr	r3, [r7, #12]
 8101140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101142:	2b00      	cmp	r3, #0
 8101144:	d024      	beq.n	8101190 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8101146:	68fb      	ldr	r3, [r7, #12]
 8101148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810114a:	781a      	ldrb	r2, [r3, #0]
 810114c:	68fb      	ldr	r3, [r7, #12]
 810114e:	681b      	ldr	r3, [r3, #0]
 8101150:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8101152:	68fb      	ldr	r3, [r7, #12]
 8101154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101156:	1c5a      	adds	r2, r3, #1
 8101158:	68fb      	ldr	r3, [r7, #12]
 810115a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 810115c:	68fb      	ldr	r3, [r7, #12]
 810115e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101160:	b29b      	uxth	r3, r3
 8101162:	3b01      	subs	r3, #1
 8101164:	b29a      	uxth	r2, r3
 8101166:	68fb      	ldr	r3, [r7, #12]
 8101168:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 810116a:	68fb      	ldr	r3, [r7, #12]
 810116c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810116e:	3b01      	subs	r3, #1
 8101170:	b29a      	uxth	r2, r3
 8101172:	68fb      	ldr	r3, [r7, #12]
 8101174:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8101176:	68fb      	ldr	r3, [r7, #12]
 8101178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810117a:	b2db      	uxtb	r3, r3
 810117c:	3301      	adds	r3, #1
 810117e:	b2da      	uxtb	r2, r3
 8101180:	8979      	ldrh	r1, [r7, #10]
 8101182:	4b4e      	ldr	r3, [pc, #312]	@ (81012bc <HAL_I2C_Master_Transmit+0x228>)
 8101184:	9300      	str	r3, [sp, #0]
 8101186:	697b      	ldr	r3, [r7, #20]
 8101188:	68f8      	ldr	r0, [r7, #12]
 810118a:	f000 fc05 	bl	8101998 <I2C_TransferConfig>
 810118e:	e066      	b.n	810125e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8101190:	68fb      	ldr	r3, [r7, #12]
 8101192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101194:	b2da      	uxtb	r2, r3
 8101196:	8979      	ldrh	r1, [r7, #10]
 8101198:	4b48      	ldr	r3, [pc, #288]	@ (81012bc <HAL_I2C_Master_Transmit+0x228>)
 810119a:	9300      	str	r3, [sp, #0]
 810119c:	697b      	ldr	r3, [r7, #20]
 810119e:	68f8      	ldr	r0, [r7, #12]
 81011a0:	f000 fbfa 	bl	8101998 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 81011a4:	e05b      	b.n	810125e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81011a6:	693a      	ldr	r2, [r7, #16]
 81011a8:	6a39      	ldr	r1, [r7, #32]
 81011aa:	68f8      	ldr	r0, [r7, #12]
 81011ac:	f000 f9fd 	bl	81015aa <I2C_WaitOnTXISFlagUntilTimeout>
 81011b0:	4603      	mov	r3, r0
 81011b2:	2b00      	cmp	r3, #0
 81011b4:	d001      	beq.n	81011ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 81011b6:	2301      	movs	r3, #1
 81011b8:	e07b      	b.n	81012b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81011ba:	68fb      	ldr	r3, [r7, #12]
 81011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81011be:	781a      	ldrb	r2, [r3, #0]
 81011c0:	68fb      	ldr	r3, [r7, #12]
 81011c2:	681b      	ldr	r3, [r3, #0]
 81011c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81011c6:	68fb      	ldr	r3, [r7, #12]
 81011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81011ca:	1c5a      	adds	r2, r3, #1
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81011d0:	68fb      	ldr	r3, [r7, #12]
 81011d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81011d4:	b29b      	uxth	r3, r3
 81011d6:	3b01      	subs	r3, #1
 81011d8:	b29a      	uxth	r2, r3
 81011da:	68fb      	ldr	r3, [r7, #12]
 81011dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81011de:	68fb      	ldr	r3, [r7, #12]
 81011e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81011e2:	3b01      	subs	r3, #1
 81011e4:	b29a      	uxth	r2, r3
 81011e6:	68fb      	ldr	r3, [r7, #12]
 81011e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81011ea:	68fb      	ldr	r3, [r7, #12]
 81011ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81011ee:	b29b      	uxth	r3, r3
 81011f0:	2b00      	cmp	r3, #0
 81011f2:	d034      	beq.n	810125e <HAL_I2C_Master_Transmit+0x1ca>
 81011f4:	68fb      	ldr	r3, [r7, #12]
 81011f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81011f8:	2b00      	cmp	r3, #0
 81011fa:	d130      	bne.n	810125e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81011fc:	693b      	ldr	r3, [r7, #16]
 81011fe:	9300      	str	r3, [sp, #0]
 8101200:	6a3b      	ldr	r3, [r7, #32]
 8101202:	2200      	movs	r2, #0
 8101204:	2180      	movs	r1, #128	@ 0x80
 8101206:	68f8      	ldr	r0, [r7, #12]
 8101208:	f000 f976 	bl	81014f8 <I2C_WaitOnFlagUntilTimeout>
 810120c:	4603      	mov	r3, r0
 810120e:	2b00      	cmp	r3, #0
 8101210:	d001      	beq.n	8101216 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8101212:	2301      	movs	r3, #1
 8101214:	e04d      	b.n	81012b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101216:	68fb      	ldr	r3, [r7, #12]
 8101218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810121a:	b29b      	uxth	r3, r3
 810121c:	2bff      	cmp	r3, #255	@ 0xff
 810121e:	d90e      	bls.n	810123e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8101220:	68fb      	ldr	r3, [r7, #12]
 8101222:	22ff      	movs	r2, #255	@ 0xff
 8101224:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8101226:	68fb      	ldr	r3, [r7, #12]
 8101228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810122a:	b2da      	uxtb	r2, r3
 810122c:	8979      	ldrh	r1, [r7, #10]
 810122e:	2300      	movs	r3, #0
 8101230:	9300      	str	r3, [sp, #0]
 8101232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8101236:	68f8      	ldr	r0, [r7, #12]
 8101238:	f000 fbae 	bl	8101998 <I2C_TransferConfig>
 810123c:	e00f      	b.n	810125e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810123e:	68fb      	ldr	r3, [r7, #12]
 8101240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101242:	b29a      	uxth	r2, r3
 8101244:	68fb      	ldr	r3, [r7, #12]
 8101246:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8101248:	68fb      	ldr	r3, [r7, #12]
 810124a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810124c:	b2da      	uxtb	r2, r3
 810124e:	8979      	ldrh	r1, [r7, #10]
 8101250:	2300      	movs	r3, #0
 8101252:	9300      	str	r3, [sp, #0]
 8101254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101258:	68f8      	ldr	r0, [r7, #12]
 810125a:	f000 fb9d 	bl	8101998 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 810125e:	68fb      	ldr	r3, [r7, #12]
 8101260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101262:	b29b      	uxth	r3, r3
 8101264:	2b00      	cmp	r3, #0
 8101266:	d19e      	bne.n	81011a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101268:	693a      	ldr	r2, [r7, #16]
 810126a:	6a39      	ldr	r1, [r7, #32]
 810126c:	68f8      	ldr	r0, [r7, #12]
 810126e:	f000 f9e3 	bl	8101638 <I2C_WaitOnSTOPFlagUntilTimeout>
 8101272:	4603      	mov	r3, r0
 8101274:	2b00      	cmp	r3, #0
 8101276:	d001      	beq.n	810127c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8101278:	2301      	movs	r3, #1
 810127a:	e01a      	b.n	81012b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810127c:	68fb      	ldr	r3, [r7, #12]
 810127e:	681b      	ldr	r3, [r3, #0]
 8101280:	2220      	movs	r2, #32
 8101282:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101284:	68fb      	ldr	r3, [r7, #12]
 8101286:	681b      	ldr	r3, [r3, #0]
 8101288:	6859      	ldr	r1, [r3, #4]
 810128a:	68fb      	ldr	r3, [r7, #12]
 810128c:	681a      	ldr	r2, [r3, #0]
 810128e:	4b0c      	ldr	r3, [pc, #48]	@ (81012c0 <HAL_I2C_Master_Transmit+0x22c>)
 8101290:	400b      	ands	r3, r1
 8101292:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8101294:	68fb      	ldr	r3, [r7, #12]
 8101296:	2220      	movs	r2, #32
 8101298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810129c:	68fb      	ldr	r3, [r7, #12]
 810129e:	2200      	movs	r2, #0
 81012a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81012a4:	68fb      	ldr	r3, [r7, #12]
 81012a6:	2200      	movs	r2, #0
 81012a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81012ac:	2300      	movs	r3, #0
 81012ae:	e000      	b.n	81012b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 81012b0:	2302      	movs	r3, #2
  }
}
 81012b2:	4618      	mov	r0, r3
 81012b4:	3718      	adds	r7, #24
 81012b6:	46bd      	mov	sp, r7
 81012b8:	bd80      	pop	{r7, pc}
 81012ba:	bf00      	nop
 81012bc:	80002000 	.word	0x80002000
 81012c0:	fe00e800 	.word	0xfe00e800

081012c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 81012c4:	b580      	push	{r7, lr}
 81012c6:	b088      	sub	sp, #32
 81012c8:	af02      	add	r7, sp, #8
 81012ca:	60f8      	str	r0, [r7, #12]
 81012cc:	607a      	str	r2, [r7, #4]
 81012ce:	461a      	mov	r2, r3
 81012d0:	460b      	mov	r3, r1
 81012d2:	817b      	strh	r3, [r7, #10]
 81012d4:	4613      	mov	r3, r2
 81012d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81012d8:	68fb      	ldr	r3, [r7, #12]
 81012da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81012de:	b2db      	uxtb	r3, r3
 81012e0:	2b20      	cmp	r3, #32
 81012e2:	f040 80db 	bne.w	810149c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81012e6:	68fb      	ldr	r3, [r7, #12]
 81012e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81012ec:	2b01      	cmp	r3, #1
 81012ee:	d101      	bne.n	81012f4 <HAL_I2C_Master_Receive+0x30>
 81012f0:	2302      	movs	r3, #2
 81012f2:	e0d4      	b.n	810149e <HAL_I2C_Master_Receive+0x1da>
 81012f4:	68fb      	ldr	r3, [r7, #12]
 81012f6:	2201      	movs	r2, #1
 81012f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81012fc:	f7ff fb44 	bl	8100988 <HAL_GetTick>
 8101300:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8101302:	697b      	ldr	r3, [r7, #20]
 8101304:	9300      	str	r3, [sp, #0]
 8101306:	2319      	movs	r3, #25
 8101308:	2201      	movs	r2, #1
 810130a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 810130e:	68f8      	ldr	r0, [r7, #12]
 8101310:	f000 f8f2 	bl	81014f8 <I2C_WaitOnFlagUntilTimeout>
 8101314:	4603      	mov	r3, r0
 8101316:	2b00      	cmp	r3, #0
 8101318:	d001      	beq.n	810131e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 810131a:	2301      	movs	r3, #1
 810131c:	e0bf      	b.n	810149e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810131e:	68fb      	ldr	r3, [r7, #12]
 8101320:	2222      	movs	r2, #34	@ 0x22
 8101322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8101326:	68fb      	ldr	r3, [r7, #12]
 8101328:	2210      	movs	r2, #16
 810132a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810132e:	68fb      	ldr	r3, [r7, #12]
 8101330:	2200      	movs	r2, #0
 8101332:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8101334:	68fb      	ldr	r3, [r7, #12]
 8101336:	687a      	ldr	r2, [r7, #4]
 8101338:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810133a:	68fb      	ldr	r3, [r7, #12]
 810133c:	893a      	ldrh	r2, [r7, #8]
 810133e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8101340:	68fb      	ldr	r3, [r7, #12]
 8101342:	2200      	movs	r2, #0
 8101344:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101346:	68fb      	ldr	r3, [r7, #12]
 8101348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810134a:	b29b      	uxth	r3, r3
 810134c:	2bff      	cmp	r3, #255	@ 0xff
 810134e:	d90e      	bls.n	810136e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8101350:	68fb      	ldr	r3, [r7, #12]
 8101352:	22ff      	movs	r2, #255	@ 0xff
 8101354:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8101356:	68fb      	ldr	r3, [r7, #12]
 8101358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810135a:	b2da      	uxtb	r2, r3
 810135c:	8979      	ldrh	r1, [r7, #10]
 810135e:	4b52      	ldr	r3, [pc, #328]	@ (81014a8 <HAL_I2C_Master_Receive+0x1e4>)
 8101360:	9300      	str	r3, [sp, #0]
 8101362:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8101366:	68f8      	ldr	r0, [r7, #12]
 8101368:	f000 fb16 	bl	8101998 <I2C_TransferConfig>
 810136c:	e06d      	b.n	810144a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101372:	b29a      	uxth	r2, r3
 8101374:	68fb      	ldr	r3, [r7, #12]
 8101376:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8101378:	68fb      	ldr	r3, [r7, #12]
 810137a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810137c:	b2da      	uxtb	r2, r3
 810137e:	8979      	ldrh	r1, [r7, #10]
 8101380:	4b49      	ldr	r3, [pc, #292]	@ (81014a8 <HAL_I2C_Master_Receive+0x1e4>)
 8101382:	9300      	str	r3, [sp, #0]
 8101384:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101388:	68f8      	ldr	r0, [r7, #12]
 810138a:	f000 fb05 	bl	8101998 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 810138e:	e05c      	b.n	810144a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101390:	697a      	ldr	r2, [r7, #20]
 8101392:	6a39      	ldr	r1, [r7, #32]
 8101394:	68f8      	ldr	r0, [r7, #12]
 8101396:	f000 f993 	bl	81016c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 810139a:	4603      	mov	r3, r0
 810139c:	2b00      	cmp	r3, #0
 810139e:	d001      	beq.n	81013a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 81013a0:	2301      	movs	r3, #1
 81013a2:	e07c      	b.n	810149e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81013a4:	68fb      	ldr	r3, [r7, #12]
 81013a6:	681b      	ldr	r3, [r3, #0]
 81013a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81013aa:	68fb      	ldr	r3, [r7, #12]
 81013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81013ae:	b2d2      	uxtb	r2, r2
 81013b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81013b2:	68fb      	ldr	r3, [r7, #12]
 81013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81013b6:	1c5a      	adds	r2, r3, #1
 81013b8:	68fb      	ldr	r3, [r7, #12]
 81013ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 81013bc:	68fb      	ldr	r3, [r7, #12]
 81013be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81013c0:	3b01      	subs	r3, #1
 81013c2:	b29a      	uxth	r2, r3
 81013c4:	68fb      	ldr	r3, [r7, #12]
 81013c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 81013c8:	68fb      	ldr	r3, [r7, #12]
 81013ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81013cc:	b29b      	uxth	r3, r3
 81013ce:	3b01      	subs	r3, #1
 81013d0:	b29a      	uxth	r2, r3
 81013d2:	68fb      	ldr	r3, [r7, #12]
 81013d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81013d6:	68fb      	ldr	r3, [r7, #12]
 81013d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81013da:	b29b      	uxth	r3, r3
 81013dc:	2b00      	cmp	r3, #0
 81013de:	d034      	beq.n	810144a <HAL_I2C_Master_Receive+0x186>
 81013e0:	68fb      	ldr	r3, [r7, #12]
 81013e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d130      	bne.n	810144a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81013e8:	697b      	ldr	r3, [r7, #20]
 81013ea:	9300      	str	r3, [sp, #0]
 81013ec:	6a3b      	ldr	r3, [r7, #32]
 81013ee:	2200      	movs	r2, #0
 81013f0:	2180      	movs	r1, #128	@ 0x80
 81013f2:	68f8      	ldr	r0, [r7, #12]
 81013f4:	f000 f880 	bl	81014f8 <I2C_WaitOnFlagUntilTimeout>
 81013f8:	4603      	mov	r3, r0
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d001      	beq.n	8101402 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 81013fe:	2301      	movs	r3, #1
 8101400:	e04d      	b.n	810149e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101402:	68fb      	ldr	r3, [r7, #12]
 8101404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8101406:	b29b      	uxth	r3, r3
 8101408:	2bff      	cmp	r3, #255	@ 0xff
 810140a:	d90e      	bls.n	810142a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810140c:	68fb      	ldr	r3, [r7, #12]
 810140e:	22ff      	movs	r2, #255	@ 0xff
 8101410:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8101412:	68fb      	ldr	r3, [r7, #12]
 8101414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101416:	b2da      	uxtb	r2, r3
 8101418:	8979      	ldrh	r1, [r7, #10]
 810141a:	2300      	movs	r3, #0
 810141c:	9300      	str	r3, [sp, #0]
 810141e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8101422:	68f8      	ldr	r0, [r7, #12]
 8101424:	f000 fab8 	bl	8101998 <I2C_TransferConfig>
 8101428:	e00f      	b.n	810144a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810142a:	68fb      	ldr	r3, [r7, #12]
 810142c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810142e:	b29a      	uxth	r2, r3
 8101430:	68fb      	ldr	r3, [r7, #12]
 8101432:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8101434:	68fb      	ldr	r3, [r7, #12]
 8101436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101438:	b2da      	uxtb	r2, r3
 810143a:	8979      	ldrh	r1, [r7, #10]
 810143c:	2300      	movs	r3, #0
 810143e:	9300      	str	r3, [sp, #0]
 8101440:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101444:	68f8      	ldr	r0, [r7, #12]
 8101446:	f000 faa7 	bl	8101998 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 810144a:	68fb      	ldr	r3, [r7, #12]
 810144c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810144e:	b29b      	uxth	r3, r3
 8101450:	2b00      	cmp	r3, #0
 8101452:	d19d      	bne.n	8101390 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101454:	697a      	ldr	r2, [r7, #20]
 8101456:	6a39      	ldr	r1, [r7, #32]
 8101458:	68f8      	ldr	r0, [r7, #12]
 810145a:	f000 f8ed 	bl	8101638 <I2C_WaitOnSTOPFlagUntilTimeout>
 810145e:	4603      	mov	r3, r0
 8101460:	2b00      	cmp	r3, #0
 8101462:	d001      	beq.n	8101468 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8101464:	2301      	movs	r3, #1
 8101466:	e01a      	b.n	810149e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8101468:	68fb      	ldr	r3, [r7, #12]
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	2220      	movs	r2, #32
 810146e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101470:	68fb      	ldr	r3, [r7, #12]
 8101472:	681b      	ldr	r3, [r3, #0]
 8101474:	6859      	ldr	r1, [r3, #4]
 8101476:	68fb      	ldr	r3, [r7, #12]
 8101478:	681a      	ldr	r2, [r3, #0]
 810147a:	4b0c      	ldr	r3, [pc, #48]	@ (81014ac <HAL_I2C_Master_Receive+0x1e8>)
 810147c:	400b      	ands	r3, r1
 810147e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8101480:	68fb      	ldr	r3, [r7, #12]
 8101482:	2220      	movs	r2, #32
 8101484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8101488:	68fb      	ldr	r3, [r7, #12]
 810148a:	2200      	movs	r2, #0
 810148c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101490:	68fb      	ldr	r3, [r7, #12]
 8101492:	2200      	movs	r2, #0
 8101494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101498:	2300      	movs	r3, #0
 810149a:	e000      	b.n	810149e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 810149c:	2302      	movs	r3, #2
  }
}
 810149e:	4618      	mov	r0, r3
 81014a0:	3718      	adds	r7, #24
 81014a2:	46bd      	mov	sp, r7
 81014a4:	bd80      	pop	{r7, pc}
 81014a6:	bf00      	nop
 81014a8:	80002400 	.word	0x80002400
 81014ac:	fe00e800 	.word	0xfe00e800

081014b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81014b0:	b480      	push	{r7}
 81014b2:	b083      	sub	sp, #12
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81014b8:	687b      	ldr	r3, [r7, #4]
 81014ba:	681b      	ldr	r3, [r3, #0]
 81014bc:	699b      	ldr	r3, [r3, #24]
 81014be:	f003 0302 	and.w	r3, r3, #2
 81014c2:	2b02      	cmp	r3, #2
 81014c4:	d103      	bne.n	81014ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	2200      	movs	r2, #0
 81014cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	681b      	ldr	r3, [r3, #0]
 81014d2:	699b      	ldr	r3, [r3, #24]
 81014d4:	f003 0301 	and.w	r3, r3, #1
 81014d8:	2b01      	cmp	r3, #1
 81014da:	d007      	beq.n	81014ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81014dc:	687b      	ldr	r3, [r7, #4]
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	699a      	ldr	r2, [r3, #24]
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	681b      	ldr	r3, [r3, #0]
 81014e6:	f042 0201 	orr.w	r2, r2, #1
 81014ea:	619a      	str	r2, [r3, #24]
  }
}
 81014ec:	bf00      	nop
 81014ee:	370c      	adds	r7, #12
 81014f0:	46bd      	mov	sp, r7
 81014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014f6:	4770      	bx	lr

081014f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81014f8:	b580      	push	{r7, lr}
 81014fa:	b084      	sub	sp, #16
 81014fc:	af00      	add	r7, sp, #0
 81014fe:	60f8      	str	r0, [r7, #12]
 8101500:	60b9      	str	r1, [r7, #8]
 8101502:	603b      	str	r3, [r7, #0]
 8101504:	4613      	mov	r3, r2
 8101506:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8101508:	e03b      	b.n	8101582 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810150a:	69ba      	ldr	r2, [r7, #24]
 810150c:	6839      	ldr	r1, [r7, #0]
 810150e:	68f8      	ldr	r0, [r7, #12]
 8101510:	f000 f962 	bl	81017d8 <I2C_IsErrorOccurred>
 8101514:	4603      	mov	r3, r0
 8101516:	2b00      	cmp	r3, #0
 8101518:	d001      	beq.n	810151e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810151a:	2301      	movs	r3, #1
 810151c:	e041      	b.n	81015a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810151e:	683b      	ldr	r3, [r7, #0]
 8101520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101524:	d02d      	beq.n	8101582 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8101526:	f7ff fa2f 	bl	8100988 <HAL_GetTick>
 810152a:	4602      	mov	r2, r0
 810152c:	69bb      	ldr	r3, [r7, #24]
 810152e:	1ad3      	subs	r3, r2, r3
 8101530:	683a      	ldr	r2, [r7, #0]
 8101532:	429a      	cmp	r2, r3
 8101534:	d302      	bcc.n	810153c <I2C_WaitOnFlagUntilTimeout+0x44>
 8101536:	683b      	ldr	r3, [r7, #0]
 8101538:	2b00      	cmp	r3, #0
 810153a:	d122      	bne.n	8101582 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 810153c:	68fb      	ldr	r3, [r7, #12]
 810153e:	681b      	ldr	r3, [r3, #0]
 8101540:	699a      	ldr	r2, [r3, #24]
 8101542:	68bb      	ldr	r3, [r7, #8]
 8101544:	4013      	ands	r3, r2
 8101546:	68ba      	ldr	r2, [r7, #8]
 8101548:	429a      	cmp	r2, r3
 810154a:	bf0c      	ite	eq
 810154c:	2301      	moveq	r3, #1
 810154e:	2300      	movne	r3, #0
 8101550:	b2db      	uxtb	r3, r3
 8101552:	461a      	mov	r2, r3
 8101554:	79fb      	ldrb	r3, [r7, #7]
 8101556:	429a      	cmp	r2, r3
 8101558:	d113      	bne.n	8101582 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810155a:	68fb      	ldr	r3, [r7, #12]
 810155c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810155e:	f043 0220 	orr.w	r2, r3, #32
 8101562:	68fb      	ldr	r3, [r7, #12]
 8101564:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8101566:	68fb      	ldr	r3, [r7, #12]
 8101568:	2220      	movs	r2, #32
 810156a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810156e:	68fb      	ldr	r3, [r7, #12]
 8101570:	2200      	movs	r2, #0
 8101572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8101576:	68fb      	ldr	r3, [r7, #12]
 8101578:	2200      	movs	r2, #0
 810157a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 810157e:	2301      	movs	r3, #1
 8101580:	e00f      	b.n	81015a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8101582:	68fb      	ldr	r3, [r7, #12]
 8101584:	681b      	ldr	r3, [r3, #0]
 8101586:	699a      	ldr	r2, [r3, #24]
 8101588:	68bb      	ldr	r3, [r7, #8]
 810158a:	4013      	ands	r3, r2
 810158c:	68ba      	ldr	r2, [r7, #8]
 810158e:	429a      	cmp	r2, r3
 8101590:	bf0c      	ite	eq
 8101592:	2301      	moveq	r3, #1
 8101594:	2300      	movne	r3, #0
 8101596:	b2db      	uxtb	r3, r3
 8101598:	461a      	mov	r2, r3
 810159a:	79fb      	ldrb	r3, [r7, #7]
 810159c:	429a      	cmp	r2, r3
 810159e:	d0b4      	beq.n	810150a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81015a0:	2300      	movs	r3, #0
}
 81015a2:	4618      	mov	r0, r3
 81015a4:	3710      	adds	r7, #16
 81015a6:	46bd      	mov	sp, r7
 81015a8:	bd80      	pop	{r7, pc}

081015aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81015aa:	b580      	push	{r7, lr}
 81015ac:	b084      	sub	sp, #16
 81015ae:	af00      	add	r7, sp, #0
 81015b0:	60f8      	str	r0, [r7, #12]
 81015b2:	60b9      	str	r1, [r7, #8]
 81015b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81015b6:	e033      	b.n	8101620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81015b8:	687a      	ldr	r2, [r7, #4]
 81015ba:	68b9      	ldr	r1, [r7, #8]
 81015bc:	68f8      	ldr	r0, [r7, #12]
 81015be:	f000 f90b 	bl	81017d8 <I2C_IsErrorOccurred>
 81015c2:	4603      	mov	r3, r0
 81015c4:	2b00      	cmp	r3, #0
 81015c6:	d001      	beq.n	81015cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81015c8:	2301      	movs	r3, #1
 81015ca:	e031      	b.n	8101630 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81015cc:	68bb      	ldr	r3, [r7, #8]
 81015ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81015d2:	d025      	beq.n	8101620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81015d4:	f7ff f9d8 	bl	8100988 <HAL_GetTick>
 81015d8:	4602      	mov	r2, r0
 81015da:	687b      	ldr	r3, [r7, #4]
 81015dc:	1ad3      	subs	r3, r2, r3
 81015de:	68ba      	ldr	r2, [r7, #8]
 81015e0:	429a      	cmp	r2, r3
 81015e2:	d302      	bcc.n	81015ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81015e4:	68bb      	ldr	r3, [r7, #8]
 81015e6:	2b00      	cmp	r3, #0
 81015e8:	d11a      	bne.n	8101620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81015ea:	68fb      	ldr	r3, [r7, #12]
 81015ec:	681b      	ldr	r3, [r3, #0]
 81015ee:	699b      	ldr	r3, [r3, #24]
 81015f0:	f003 0302 	and.w	r3, r3, #2
 81015f4:	2b02      	cmp	r3, #2
 81015f6:	d013      	beq.n	8101620 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81015f8:	68fb      	ldr	r3, [r7, #12]
 81015fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81015fc:	f043 0220 	orr.w	r2, r3, #32
 8101600:	68fb      	ldr	r3, [r7, #12]
 8101602:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8101604:	68fb      	ldr	r3, [r7, #12]
 8101606:	2220      	movs	r2, #32
 8101608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810160c:	68fb      	ldr	r3, [r7, #12]
 810160e:	2200      	movs	r2, #0
 8101610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8101614:	68fb      	ldr	r3, [r7, #12]
 8101616:	2200      	movs	r2, #0
 8101618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810161c:	2301      	movs	r3, #1
 810161e:	e007      	b.n	8101630 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8101620:	68fb      	ldr	r3, [r7, #12]
 8101622:	681b      	ldr	r3, [r3, #0]
 8101624:	699b      	ldr	r3, [r3, #24]
 8101626:	f003 0302 	and.w	r3, r3, #2
 810162a:	2b02      	cmp	r3, #2
 810162c:	d1c4      	bne.n	81015b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810162e:	2300      	movs	r3, #0
}
 8101630:	4618      	mov	r0, r3
 8101632:	3710      	adds	r7, #16
 8101634:	46bd      	mov	sp, r7
 8101636:	bd80      	pop	{r7, pc}

08101638 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8101638:	b580      	push	{r7, lr}
 810163a:	b084      	sub	sp, #16
 810163c:	af00      	add	r7, sp, #0
 810163e:	60f8      	str	r0, [r7, #12]
 8101640:	60b9      	str	r1, [r7, #8]
 8101642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101644:	e02f      	b.n	81016a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8101646:	687a      	ldr	r2, [r7, #4]
 8101648:	68b9      	ldr	r1, [r7, #8]
 810164a:	68f8      	ldr	r0, [r7, #12]
 810164c:	f000 f8c4 	bl	81017d8 <I2C_IsErrorOccurred>
 8101650:	4603      	mov	r3, r0
 8101652:	2b00      	cmp	r3, #0
 8101654:	d001      	beq.n	810165a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8101656:	2301      	movs	r3, #1
 8101658:	e02d      	b.n	81016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810165a:	f7ff f995 	bl	8100988 <HAL_GetTick>
 810165e:	4602      	mov	r2, r0
 8101660:	687b      	ldr	r3, [r7, #4]
 8101662:	1ad3      	subs	r3, r2, r3
 8101664:	68ba      	ldr	r2, [r7, #8]
 8101666:	429a      	cmp	r2, r3
 8101668:	d302      	bcc.n	8101670 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810166a:	68bb      	ldr	r3, [r7, #8]
 810166c:	2b00      	cmp	r3, #0
 810166e:	d11a      	bne.n	81016a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8101670:	68fb      	ldr	r3, [r7, #12]
 8101672:	681b      	ldr	r3, [r3, #0]
 8101674:	699b      	ldr	r3, [r3, #24]
 8101676:	f003 0320 	and.w	r3, r3, #32
 810167a:	2b20      	cmp	r3, #32
 810167c:	d013      	beq.n	81016a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810167e:	68fb      	ldr	r3, [r7, #12]
 8101680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8101682:	f043 0220 	orr.w	r2, r3, #32
 8101686:	68fb      	ldr	r3, [r7, #12]
 8101688:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810168a:	68fb      	ldr	r3, [r7, #12]
 810168c:	2220      	movs	r2, #32
 810168e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8101692:	68fb      	ldr	r3, [r7, #12]
 8101694:	2200      	movs	r2, #0
 8101696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810169a:	68fb      	ldr	r3, [r7, #12]
 810169c:	2200      	movs	r2, #0
 810169e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 81016a2:	2301      	movs	r3, #1
 81016a4:	e007      	b.n	81016b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81016a6:	68fb      	ldr	r3, [r7, #12]
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	699b      	ldr	r3, [r3, #24]
 81016ac:	f003 0320 	and.w	r3, r3, #32
 81016b0:	2b20      	cmp	r3, #32
 81016b2:	d1c8      	bne.n	8101646 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81016b4:	2300      	movs	r3, #0
}
 81016b6:	4618      	mov	r0, r3
 81016b8:	3710      	adds	r7, #16
 81016ba:	46bd      	mov	sp, r7
 81016bc:	bd80      	pop	{r7, pc}
	...

081016c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81016c0:	b580      	push	{r7, lr}
 81016c2:	b086      	sub	sp, #24
 81016c4:	af00      	add	r7, sp, #0
 81016c6:	60f8      	str	r0, [r7, #12]
 81016c8:	60b9      	str	r1, [r7, #8]
 81016ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81016cc:	2300      	movs	r3, #0
 81016ce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 81016d0:	e071      	b.n	81017b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81016d2:	687a      	ldr	r2, [r7, #4]
 81016d4:	68b9      	ldr	r1, [r7, #8]
 81016d6:	68f8      	ldr	r0, [r7, #12]
 81016d8:	f000 f87e 	bl	81017d8 <I2C_IsErrorOccurred>
 81016dc:	4603      	mov	r3, r0
 81016de:	2b00      	cmp	r3, #0
 81016e0:	d001      	beq.n	81016e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 81016e2:	2301      	movs	r3, #1
 81016e4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 81016e6:	68fb      	ldr	r3, [r7, #12]
 81016e8:	681b      	ldr	r3, [r3, #0]
 81016ea:	699b      	ldr	r3, [r3, #24]
 81016ec:	f003 0320 	and.w	r3, r3, #32
 81016f0:	2b20      	cmp	r3, #32
 81016f2:	d13b      	bne.n	810176c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 81016f4:	7dfb      	ldrb	r3, [r7, #23]
 81016f6:	2b00      	cmp	r3, #0
 81016f8:	d138      	bne.n	810176c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 81016fa:	68fb      	ldr	r3, [r7, #12]
 81016fc:	681b      	ldr	r3, [r3, #0]
 81016fe:	699b      	ldr	r3, [r3, #24]
 8101700:	f003 0304 	and.w	r3, r3, #4
 8101704:	2b04      	cmp	r3, #4
 8101706:	d105      	bne.n	8101714 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8101708:	68fb      	ldr	r3, [r7, #12]
 810170a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810170c:	2b00      	cmp	r3, #0
 810170e:	d001      	beq.n	8101714 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8101710:	2300      	movs	r3, #0
 8101712:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8101714:	68fb      	ldr	r3, [r7, #12]
 8101716:	681b      	ldr	r3, [r3, #0]
 8101718:	699b      	ldr	r3, [r3, #24]
 810171a:	f003 0310 	and.w	r3, r3, #16
 810171e:	2b10      	cmp	r3, #16
 8101720:	d121      	bne.n	8101766 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8101722:	68fb      	ldr	r3, [r7, #12]
 8101724:	681b      	ldr	r3, [r3, #0]
 8101726:	2210      	movs	r2, #16
 8101728:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 810172a:	68fb      	ldr	r3, [r7, #12]
 810172c:	2204      	movs	r2, #4
 810172e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8101730:	68fb      	ldr	r3, [r7, #12]
 8101732:	681b      	ldr	r3, [r3, #0]
 8101734:	2220      	movs	r2, #32
 8101736:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8101738:	68fb      	ldr	r3, [r7, #12]
 810173a:	681b      	ldr	r3, [r3, #0]
 810173c:	6859      	ldr	r1, [r3, #4]
 810173e:	68fb      	ldr	r3, [r7, #12]
 8101740:	681a      	ldr	r2, [r3, #0]
 8101742:	4b24      	ldr	r3, [pc, #144]	@ (81017d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8101744:	400b      	ands	r3, r1
 8101746:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8101748:	68fb      	ldr	r3, [r7, #12]
 810174a:	2220      	movs	r2, #32
 810174c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8101750:	68fb      	ldr	r3, [r7, #12]
 8101752:	2200      	movs	r2, #0
 8101754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8101758:	68fb      	ldr	r3, [r7, #12]
 810175a:	2200      	movs	r2, #0
 810175c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8101760:	2301      	movs	r3, #1
 8101762:	75fb      	strb	r3, [r7, #23]
 8101764:	e002      	b.n	810176c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101766:	68fb      	ldr	r3, [r7, #12]
 8101768:	2200      	movs	r2, #0
 810176a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 810176c:	f7ff f90c 	bl	8100988 <HAL_GetTick>
 8101770:	4602      	mov	r2, r0
 8101772:	687b      	ldr	r3, [r7, #4]
 8101774:	1ad3      	subs	r3, r2, r3
 8101776:	68ba      	ldr	r2, [r7, #8]
 8101778:	429a      	cmp	r2, r3
 810177a:	d302      	bcc.n	8101782 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 810177c:	68bb      	ldr	r3, [r7, #8]
 810177e:	2b00      	cmp	r3, #0
 8101780:	d119      	bne.n	81017b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8101782:	7dfb      	ldrb	r3, [r7, #23]
 8101784:	2b00      	cmp	r3, #0
 8101786:	d116      	bne.n	81017b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8101788:	68fb      	ldr	r3, [r7, #12]
 810178a:	681b      	ldr	r3, [r3, #0]
 810178c:	699b      	ldr	r3, [r3, #24]
 810178e:	f003 0304 	and.w	r3, r3, #4
 8101792:	2b04      	cmp	r3, #4
 8101794:	d00f      	beq.n	81017b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8101796:	68fb      	ldr	r3, [r7, #12]
 8101798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810179a:	f043 0220 	orr.w	r2, r3, #32
 810179e:	68fb      	ldr	r3, [r7, #12]
 81017a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81017a2:	68fb      	ldr	r3, [r7, #12]
 81017a4:	2220      	movs	r2, #32
 81017a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81017aa:	68fb      	ldr	r3, [r7, #12]
 81017ac:	2200      	movs	r2, #0
 81017ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 81017b2:	2301      	movs	r3, #1
 81017b4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 81017b6:	68fb      	ldr	r3, [r7, #12]
 81017b8:	681b      	ldr	r3, [r3, #0]
 81017ba:	699b      	ldr	r3, [r3, #24]
 81017bc:	f003 0304 	and.w	r3, r3, #4
 81017c0:	2b04      	cmp	r3, #4
 81017c2:	d002      	beq.n	81017ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 81017c4:	7dfb      	ldrb	r3, [r7, #23]
 81017c6:	2b00      	cmp	r3, #0
 81017c8:	d083      	beq.n	81016d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 81017ca:	7dfb      	ldrb	r3, [r7, #23]
}
 81017cc:	4618      	mov	r0, r3
 81017ce:	3718      	adds	r7, #24
 81017d0:	46bd      	mov	sp, r7
 81017d2:	bd80      	pop	{r7, pc}
 81017d4:	fe00e800 	.word	0xfe00e800

081017d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81017d8:	b580      	push	{r7, lr}
 81017da:	b08a      	sub	sp, #40	@ 0x28
 81017dc:	af00      	add	r7, sp, #0
 81017de:	60f8      	str	r0, [r7, #12]
 81017e0:	60b9      	str	r1, [r7, #8]
 81017e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81017e4:	2300      	movs	r3, #0
 81017e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81017ea:	68fb      	ldr	r3, [r7, #12]
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	699b      	ldr	r3, [r3, #24]
 81017f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81017f2:	2300      	movs	r3, #0
 81017f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81017fa:	69bb      	ldr	r3, [r7, #24]
 81017fc:	f003 0310 	and.w	r3, r3, #16
 8101800:	2b00      	cmp	r3, #0
 8101802:	d068      	beq.n	81018d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8101804:	68fb      	ldr	r3, [r7, #12]
 8101806:	681b      	ldr	r3, [r3, #0]
 8101808:	2210      	movs	r2, #16
 810180a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810180c:	e049      	b.n	81018a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810180e:	68bb      	ldr	r3, [r7, #8]
 8101810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101814:	d045      	beq.n	81018a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8101816:	f7ff f8b7 	bl	8100988 <HAL_GetTick>
 810181a:	4602      	mov	r2, r0
 810181c:	69fb      	ldr	r3, [r7, #28]
 810181e:	1ad3      	subs	r3, r2, r3
 8101820:	68ba      	ldr	r2, [r7, #8]
 8101822:	429a      	cmp	r2, r3
 8101824:	d302      	bcc.n	810182c <I2C_IsErrorOccurred+0x54>
 8101826:	68bb      	ldr	r3, [r7, #8]
 8101828:	2b00      	cmp	r3, #0
 810182a:	d13a      	bne.n	81018a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810182c:	68fb      	ldr	r3, [r7, #12]
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	685b      	ldr	r3, [r3, #4]
 8101832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8101838:	68fb      	ldr	r3, [r7, #12]
 810183a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 810183e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8101840:	68fb      	ldr	r3, [r7, #12]
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	699b      	ldr	r3, [r3, #24]
 8101846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810184a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810184e:	d121      	bne.n	8101894 <I2C_IsErrorOccurred+0xbc>
 8101850:	697b      	ldr	r3, [r7, #20]
 8101852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101856:	d01d      	beq.n	8101894 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8101858:	7cfb      	ldrb	r3, [r7, #19]
 810185a:	2b20      	cmp	r3, #32
 810185c:	d01a      	beq.n	8101894 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 810185e:	68fb      	ldr	r3, [r7, #12]
 8101860:	681b      	ldr	r3, [r3, #0]
 8101862:	685a      	ldr	r2, [r3, #4]
 8101864:	68fb      	ldr	r3, [r7, #12]
 8101866:	681b      	ldr	r3, [r3, #0]
 8101868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810186c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 810186e:	f7ff f88b 	bl	8100988 <HAL_GetTick>
 8101872:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101874:	e00e      	b.n	8101894 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8101876:	f7ff f887 	bl	8100988 <HAL_GetTick>
 810187a:	4602      	mov	r2, r0
 810187c:	69fb      	ldr	r3, [r7, #28]
 810187e:	1ad3      	subs	r3, r2, r3
 8101880:	2b19      	cmp	r3, #25
 8101882:	d907      	bls.n	8101894 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8101884:	6a3b      	ldr	r3, [r7, #32]
 8101886:	f043 0320 	orr.w	r3, r3, #32
 810188a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 810188c:	2301      	movs	r3, #1
 810188e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8101892:	e006      	b.n	81018a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8101894:	68fb      	ldr	r3, [r7, #12]
 8101896:	681b      	ldr	r3, [r3, #0]
 8101898:	699b      	ldr	r3, [r3, #24]
 810189a:	f003 0320 	and.w	r3, r3, #32
 810189e:	2b20      	cmp	r3, #32
 81018a0:	d1e9      	bne.n	8101876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81018a2:	68fb      	ldr	r3, [r7, #12]
 81018a4:	681b      	ldr	r3, [r3, #0]
 81018a6:	699b      	ldr	r3, [r3, #24]
 81018a8:	f003 0320 	and.w	r3, r3, #32
 81018ac:	2b20      	cmp	r3, #32
 81018ae:	d003      	beq.n	81018b8 <I2C_IsErrorOccurred+0xe0>
 81018b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81018b4:	2b00      	cmp	r3, #0
 81018b6:	d0aa      	beq.n	810180e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81018b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81018bc:	2b00      	cmp	r3, #0
 81018be:	d103      	bne.n	81018c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81018c0:	68fb      	ldr	r3, [r7, #12]
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	2220      	movs	r2, #32
 81018c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81018c8:	6a3b      	ldr	r3, [r7, #32]
 81018ca:	f043 0304 	orr.w	r3, r3, #4
 81018ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81018d0:	2301      	movs	r3, #1
 81018d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81018d6:	68fb      	ldr	r3, [r7, #12]
 81018d8:	681b      	ldr	r3, [r3, #0]
 81018da:	699b      	ldr	r3, [r3, #24]
 81018dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81018de:	69bb      	ldr	r3, [r7, #24]
 81018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81018e4:	2b00      	cmp	r3, #0
 81018e6:	d00b      	beq.n	8101900 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81018e8:	6a3b      	ldr	r3, [r7, #32]
 81018ea:	f043 0301 	orr.w	r3, r3, #1
 81018ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81018f0:	68fb      	ldr	r3, [r7, #12]
 81018f2:	681b      	ldr	r3, [r3, #0]
 81018f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81018f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81018fa:	2301      	movs	r3, #1
 81018fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8101900:	69bb      	ldr	r3, [r7, #24]
 8101902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101906:	2b00      	cmp	r3, #0
 8101908:	d00b      	beq.n	8101922 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810190a:	6a3b      	ldr	r3, [r7, #32]
 810190c:	f043 0308 	orr.w	r3, r3, #8
 8101910:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8101912:	68fb      	ldr	r3, [r7, #12]
 8101914:	681b      	ldr	r3, [r3, #0]
 8101916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810191a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810191c:	2301      	movs	r3, #1
 810191e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8101922:	69bb      	ldr	r3, [r7, #24]
 8101924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101928:	2b00      	cmp	r3, #0
 810192a:	d00b      	beq.n	8101944 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810192c:	6a3b      	ldr	r3, [r7, #32]
 810192e:	f043 0302 	orr.w	r3, r3, #2
 8101932:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8101934:	68fb      	ldr	r3, [r7, #12]
 8101936:	681b      	ldr	r3, [r3, #0]
 8101938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810193c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810193e:	2301      	movs	r3, #1
 8101940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8101944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101948:	2b00      	cmp	r3, #0
 810194a:	d01c      	beq.n	8101986 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 810194c:	68f8      	ldr	r0, [r7, #12]
 810194e:	f7ff fdaf 	bl	81014b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101952:	68fb      	ldr	r3, [r7, #12]
 8101954:	681b      	ldr	r3, [r3, #0]
 8101956:	6859      	ldr	r1, [r3, #4]
 8101958:	68fb      	ldr	r3, [r7, #12]
 810195a:	681a      	ldr	r2, [r3, #0]
 810195c:	4b0d      	ldr	r3, [pc, #52]	@ (8101994 <I2C_IsErrorOccurred+0x1bc>)
 810195e:	400b      	ands	r3, r1
 8101960:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8101962:	68fb      	ldr	r3, [r7, #12]
 8101964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8101966:	6a3b      	ldr	r3, [r7, #32]
 8101968:	431a      	orrs	r2, r3
 810196a:	68fb      	ldr	r3, [r7, #12]
 810196c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 810196e:	68fb      	ldr	r3, [r7, #12]
 8101970:	2220      	movs	r2, #32
 8101972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8101976:	68fb      	ldr	r3, [r7, #12]
 8101978:	2200      	movs	r2, #0
 810197a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810197e:	68fb      	ldr	r3, [r7, #12]
 8101980:	2200      	movs	r2, #0
 8101982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8101986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 810198a:	4618      	mov	r0, r3
 810198c:	3728      	adds	r7, #40	@ 0x28
 810198e:	46bd      	mov	sp, r7
 8101990:	bd80      	pop	{r7, pc}
 8101992:	bf00      	nop
 8101994:	fe00e800 	.word	0xfe00e800

08101998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8101998:	b480      	push	{r7}
 810199a:	b087      	sub	sp, #28
 810199c:	af00      	add	r7, sp, #0
 810199e:	60f8      	str	r0, [r7, #12]
 81019a0:	607b      	str	r3, [r7, #4]
 81019a2:	460b      	mov	r3, r1
 81019a4:	817b      	strh	r3, [r7, #10]
 81019a6:	4613      	mov	r3, r2
 81019a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81019aa:	897b      	ldrh	r3, [r7, #10]
 81019ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81019b0:	7a7b      	ldrb	r3, [r7, #9]
 81019b2:	041b      	lsls	r3, r3, #16
 81019b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81019b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81019be:	6a3b      	ldr	r3, [r7, #32]
 81019c0:	4313      	orrs	r3, r2
 81019c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81019c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81019c8:	68fb      	ldr	r3, [r7, #12]
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	685a      	ldr	r2, [r3, #4]
 81019ce:	6a3b      	ldr	r3, [r7, #32]
 81019d0:	0d5b      	lsrs	r3, r3, #21
 81019d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 81019d6:	4b08      	ldr	r3, [pc, #32]	@ (81019f8 <I2C_TransferConfig+0x60>)
 81019d8:	430b      	orrs	r3, r1
 81019da:	43db      	mvns	r3, r3
 81019dc:	ea02 0103 	and.w	r1, r2, r3
 81019e0:	68fb      	ldr	r3, [r7, #12]
 81019e2:	681b      	ldr	r3, [r3, #0]
 81019e4:	697a      	ldr	r2, [r7, #20]
 81019e6:	430a      	orrs	r2, r1
 81019e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81019ea:	bf00      	nop
 81019ec:	371c      	adds	r7, #28
 81019ee:	46bd      	mov	sp, r7
 81019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019f4:	4770      	bx	lr
 81019f6:	bf00      	nop
 81019f8:	03ff63ff 	.word	0x03ff63ff

081019fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81019fc:	b480      	push	{r7}
 81019fe:	b083      	sub	sp, #12
 8101a00:	af00      	add	r7, sp, #0
 8101a02:	6078      	str	r0, [r7, #4]
 8101a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101a0c:	b2db      	uxtb	r3, r3
 8101a0e:	2b20      	cmp	r3, #32
 8101a10:	d138      	bne.n	8101a84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101a18:	2b01      	cmp	r3, #1
 8101a1a:	d101      	bne.n	8101a20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101a1c:	2302      	movs	r3, #2
 8101a1e:	e032      	b.n	8101a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101a20:	687b      	ldr	r3, [r7, #4]
 8101a22:	2201      	movs	r2, #1
 8101a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101a28:	687b      	ldr	r3, [r7, #4]
 8101a2a:	2224      	movs	r2, #36	@ 0x24
 8101a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	681a      	ldr	r2, [r3, #0]
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	f022 0201 	bic.w	r2, r2, #1
 8101a3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8101a40:	687b      	ldr	r3, [r7, #4]
 8101a42:	681b      	ldr	r3, [r3, #0]
 8101a44:	681a      	ldr	r2, [r3, #0]
 8101a46:	687b      	ldr	r3, [r7, #4]
 8101a48:	681b      	ldr	r3, [r3, #0]
 8101a4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8101a4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	681b      	ldr	r3, [r3, #0]
 8101a54:	6819      	ldr	r1, [r3, #0]
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	681b      	ldr	r3, [r3, #0]
 8101a5a:	683a      	ldr	r2, [r7, #0]
 8101a5c:	430a      	orrs	r2, r1
 8101a5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	681b      	ldr	r3, [r3, #0]
 8101a64:	681a      	ldr	r2, [r3, #0]
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	681b      	ldr	r3, [r3, #0]
 8101a6a:	f042 0201 	orr.w	r2, r2, #1
 8101a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101a70:	687b      	ldr	r3, [r7, #4]
 8101a72:	2220      	movs	r2, #32
 8101a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	2200      	movs	r2, #0
 8101a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101a80:	2300      	movs	r3, #0
 8101a82:	e000      	b.n	8101a86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8101a84:	2302      	movs	r3, #2
  }
}
 8101a86:	4618      	mov	r0, r3
 8101a88:	370c      	adds	r7, #12
 8101a8a:	46bd      	mov	sp, r7
 8101a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a90:	4770      	bx	lr

08101a92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8101a92:	b480      	push	{r7}
 8101a94:	b085      	sub	sp, #20
 8101a96:	af00      	add	r7, sp, #0
 8101a98:	6078      	str	r0, [r7, #4]
 8101a9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101aa2:	b2db      	uxtb	r3, r3
 8101aa4:	2b20      	cmp	r3, #32
 8101aa6:	d139      	bne.n	8101b1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101aae:	2b01      	cmp	r3, #1
 8101ab0:	d101      	bne.n	8101ab6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101ab2:	2302      	movs	r3, #2
 8101ab4:	e033      	b.n	8101b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8101ab6:	687b      	ldr	r3, [r7, #4]
 8101ab8:	2201      	movs	r2, #1
 8101aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	2224      	movs	r2, #36	@ 0x24
 8101ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	681b      	ldr	r3, [r3, #0]
 8101aca:	681a      	ldr	r2, [r3, #0]
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	681b      	ldr	r3, [r3, #0]
 8101ad0:	f022 0201 	bic.w	r2, r2, #1
 8101ad4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	681b      	ldr	r3, [r3, #0]
 8101adc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101ade:	68fb      	ldr	r3, [r7, #12]
 8101ae0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101ae4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8101ae6:	683b      	ldr	r3, [r7, #0]
 8101ae8:	021b      	lsls	r3, r3, #8
 8101aea:	68fa      	ldr	r2, [r7, #12]
 8101aec:	4313      	orrs	r3, r2
 8101aee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101af0:	687b      	ldr	r3, [r7, #4]
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	68fa      	ldr	r2, [r7, #12]
 8101af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	681b      	ldr	r3, [r3, #0]
 8101afc:	681a      	ldr	r2, [r3, #0]
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	f042 0201 	orr.w	r2, r2, #1
 8101b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	2220      	movs	r2, #32
 8101b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	2200      	movs	r2, #0
 8101b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101b18:	2300      	movs	r3, #0
 8101b1a:	e000      	b.n	8101b1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8101b1c:	2302      	movs	r3, #2
  }
}
 8101b1e:	4618      	mov	r0, r3
 8101b20:	3714      	adds	r7, #20
 8101b22:	46bd      	mov	sp, r7
 8101b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b28:	4770      	bx	lr
	...

08101b2c <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8101b2c:	b480      	push	{r7}
 8101b2e:	b083      	sub	sp, #12
 8101b30:	af00      	add	r7, sp, #0
 8101b32:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	2b00      	cmp	r3, #0
 8101b38:	d035      	beq.n	8101ba6 <HAL_PWR_ConfigPVD+0x7a>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8101b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8101bb4 <HAL_PWR_ConfigPVD+0x88>)
 8101b3c:	681b      	ldr	r3, [r3, #0]
 8101b3e:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	491b      	ldr	r1, [pc, #108]	@ (8101bb4 <HAL_PWR_ConfigPVD+0x88>)
 8101b48:	4313      	orrs	r3, r2
 8101b4a:	600b      	str	r3, [r1, #0]
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8101b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101b50:	681b      	ldr	r3, [r3, #0]
 8101b52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101b5a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8101b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101b60:	685b      	ldr	r3, [r3, #4]
 8101b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101b6a:	6053      	str	r3, [r2, #4]
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	685b      	ldr	r3, [r3, #4]
 8101b70:	f003 0301 	and.w	r3, r3, #1
 8101b74:	2b00      	cmp	r3, #0
 8101b76:	d007      	beq.n	8101b88 <HAL_PWR_ConfigPVD+0x5c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8101b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101b86:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	685b      	ldr	r3, [r3, #4]
 8101b8c:	f003 0302 	and.w	r3, r3, #2
 8101b90:	2b00      	cmp	r3, #0
 8101b92:	d009      	beq.n	8101ba8 <HAL_PWR_ConfigPVD+0x7c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8101b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101b98:	685b      	ldr	r3, [r3, #4]
 8101b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101ba2:	6053      	str	r3, [r2, #4]
 8101ba4:	e000      	b.n	8101ba8 <HAL_PWR_ConfigPVD+0x7c>
    return;
 8101ba6:	bf00      	nop
  }
}
 8101ba8:	370c      	adds	r7, #12
 8101baa:	46bd      	mov	sp, r7
 8101bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb0:	4770      	bx	lr
 8101bb2:	bf00      	nop
 8101bb4:	58024800 	.word	0x58024800

08101bb8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8101bb8:	b480      	push	{r7}
 8101bba:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8101bbc:	4b05      	ldr	r3, [pc, #20]	@ (8101bd4 <HAL_PWR_EnablePVD+0x1c>)
 8101bbe:	681b      	ldr	r3, [r3, #0]
 8101bc0:	4a04      	ldr	r2, [pc, #16]	@ (8101bd4 <HAL_PWR_EnablePVD+0x1c>)
 8101bc2:	f043 0310 	orr.w	r3, r3, #16
 8101bc6:	6013      	str	r3, [r2, #0]
}
 8101bc8:	bf00      	nop
 8101bca:	46bd      	mov	sp, r7
 8101bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd0:	4770      	bx	lr
 8101bd2:	bf00      	nop
 8101bd4:	58024800 	.word	0x58024800

08101bd8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101bd8:	b580      	push	{r7, lr}
 8101bda:	b084      	sub	sp, #16
 8101bdc:	af00      	add	r7, sp, #0
 8101bde:	60f8      	str	r0, [r7, #12]
 8101be0:	460b      	mov	r3, r1
 8101be2:	607a      	str	r2, [r7, #4]
 8101be4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101be6:	4b37      	ldr	r3, [pc, #220]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	f023 0201 	bic.w	r2, r3, #1
 8101bee:	4935      	ldr	r1, [pc, #212]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101bf0:	68fb      	ldr	r3, [r7, #12]
 8101bf2:	4313      	orrs	r3, r2
 8101bf4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	2b00      	cmp	r3, #0
 8101bfa:	d123      	bne.n	8101c44 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101bfc:	f7fe ffd8 	bl	8100bb0 <HAL_GetCurrentCPUID>
 8101c00:	4603      	mov	r3, r0
 8101c02:	2b03      	cmp	r3, #3
 8101c04:	d158      	bne.n	8101cb8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101c06:	4b2f      	ldr	r3, [pc, #188]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c08:	691b      	ldr	r3, [r3, #16]
 8101c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c0c:	f023 0301 	bic.w	r3, r3, #1
 8101c10:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c12:	4b2d      	ldr	r3, [pc, #180]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c14:	691b      	ldr	r3, [r3, #16]
 8101c16:	4a2c      	ldr	r2, [pc, #176]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c18:	f043 0304 	orr.w	r3, r3, #4
 8101c1c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101c1e:	f3bf 8f4f 	dsb	sy
}
 8101c22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101c24:	f3bf 8f6f 	isb	sy
}
 8101c28:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101c2a:	7afb      	ldrb	r3, [r7, #11]
 8101c2c:	2b01      	cmp	r3, #1
 8101c2e:	d101      	bne.n	8101c34 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101c30:	bf30      	wfi
 8101c32:	e000      	b.n	8101c36 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101c34:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c36:	4b24      	ldr	r3, [pc, #144]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c38:	691b      	ldr	r3, [r3, #16]
 8101c3a:	4a23      	ldr	r2, [pc, #140]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c3c:	f023 0304 	bic.w	r3, r3, #4
 8101c40:	6113      	str	r3, [r2, #16]
 8101c42:	e03c      	b.n	8101cbe <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	2b01      	cmp	r3, #1
 8101c48:	d123      	bne.n	8101c92 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101c4a:	f7fe ffb1 	bl	8100bb0 <HAL_GetCurrentCPUID>
 8101c4e:	4603      	mov	r3, r0
 8101c50:	2b01      	cmp	r3, #1
 8101c52:	d133      	bne.n	8101cbc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101c54:	4b1b      	ldr	r3, [pc, #108]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c56:	695b      	ldr	r3, [r3, #20]
 8101c58:	4a1a      	ldr	r2, [pc, #104]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c5a:	f023 0302 	bic.w	r3, r3, #2
 8101c5e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c60:	4b19      	ldr	r3, [pc, #100]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c62:	691b      	ldr	r3, [r3, #16]
 8101c64:	4a18      	ldr	r2, [pc, #96]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c66:	f043 0304 	orr.w	r3, r3, #4
 8101c6a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101c6c:	f3bf 8f4f 	dsb	sy
}
 8101c70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101c72:	f3bf 8f6f 	isb	sy
}
 8101c76:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101c78:	7afb      	ldrb	r3, [r7, #11]
 8101c7a:	2b01      	cmp	r3, #1
 8101c7c:	d101      	bne.n	8101c82 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101c7e:	bf30      	wfi
 8101c80:	e000      	b.n	8101c84 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101c82:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c84:	4b10      	ldr	r3, [pc, #64]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c86:	691b      	ldr	r3, [r3, #16]
 8101c88:	4a0f      	ldr	r2, [pc, #60]	@ (8101cc8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c8a:	f023 0304 	bic.w	r3, r3, #4
 8101c8e:	6113      	str	r3, [r2, #16]
 8101c90:	e015      	b.n	8101cbe <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101c92:	f7fe ff8d 	bl	8100bb0 <HAL_GetCurrentCPUID>
 8101c96:	4603      	mov	r3, r0
 8101c98:	2b03      	cmp	r3, #3
 8101c9a:	d106      	bne.n	8101caa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101c9c:	4b09      	ldr	r3, [pc, #36]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c9e:	691b      	ldr	r3, [r3, #16]
 8101ca0:	4a08      	ldr	r2, [pc, #32]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ca2:	f023 0304 	bic.w	r3, r3, #4
 8101ca6:	6113      	str	r3, [r2, #16]
 8101ca8:	e009      	b.n	8101cbe <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101caa:	4b06      	ldr	r3, [pc, #24]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cac:	695b      	ldr	r3, [r3, #20]
 8101cae:	4a05      	ldr	r2, [pc, #20]	@ (8101cc4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cb0:	f023 0304 	bic.w	r3, r3, #4
 8101cb4:	6153      	str	r3, [r2, #20]
 8101cb6:	e002      	b.n	8101cbe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101cb8:	bf00      	nop
 8101cba:	e000      	b.n	8101cbe <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101cbc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101cbe:	3710      	adds	r7, #16
 8101cc0:	46bd      	mov	sp, r7
 8101cc2:	bd80      	pop	{r7, pc}
 8101cc4:	58024800 	.word	0x58024800
 8101cc8:	e000ed00 	.word	0xe000ed00

08101ccc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101ccc:	b580      	push	{r7, lr}
 8101cce:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101cd0:	f7fe ff6e 	bl	8100bb0 <HAL_GetCurrentCPUID>
 8101cd4:	4603      	mov	r3, r0
 8101cd6:	2b03      	cmp	r3, #3
 8101cd8:	d101      	bne.n	8101cde <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101cda:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101cdc:	e001      	b.n	8101ce2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101cde:	bf40      	sev
    __WFE ();
 8101ce0:	bf20      	wfe
}
 8101ce2:	bf00      	nop
 8101ce4:	bd80      	pop	{r7, pc}
	...

08101ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101ce8:	b480      	push	{r7}
 8101cea:	b089      	sub	sp, #36	@ 0x24
 8101cec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101cee:	4bb3      	ldr	r3, [pc, #716]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101cf0:	691b      	ldr	r3, [r3, #16]
 8101cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101cf6:	2b18      	cmp	r3, #24
 8101cf8:	f200 8155 	bhi.w	8101fa6 <HAL_RCC_GetSysClockFreq+0x2be>
 8101cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8101d04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101d02:	bf00      	nop
 8101d04:	08101d69 	.word	0x08101d69
 8101d08:	08101fa7 	.word	0x08101fa7
 8101d0c:	08101fa7 	.word	0x08101fa7
 8101d10:	08101fa7 	.word	0x08101fa7
 8101d14:	08101fa7 	.word	0x08101fa7
 8101d18:	08101fa7 	.word	0x08101fa7
 8101d1c:	08101fa7 	.word	0x08101fa7
 8101d20:	08101fa7 	.word	0x08101fa7
 8101d24:	08101d8f 	.word	0x08101d8f
 8101d28:	08101fa7 	.word	0x08101fa7
 8101d2c:	08101fa7 	.word	0x08101fa7
 8101d30:	08101fa7 	.word	0x08101fa7
 8101d34:	08101fa7 	.word	0x08101fa7
 8101d38:	08101fa7 	.word	0x08101fa7
 8101d3c:	08101fa7 	.word	0x08101fa7
 8101d40:	08101fa7 	.word	0x08101fa7
 8101d44:	08101d95 	.word	0x08101d95
 8101d48:	08101fa7 	.word	0x08101fa7
 8101d4c:	08101fa7 	.word	0x08101fa7
 8101d50:	08101fa7 	.word	0x08101fa7
 8101d54:	08101fa7 	.word	0x08101fa7
 8101d58:	08101fa7 	.word	0x08101fa7
 8101d5c:	08101fa7 	.word	0x08101fa7
 8101d60:	08101fa7 	.word	0x08101fa7
 8101d64:	08101d9b 	.word	0x08101d9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101d68:	4b94      	ldr	r3, [pc, #592]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d6a:	681b      	ldr	r3, [r3, #0]
 8101d6c:	f003 0320 	and.w	r3, r3, #32
 8101d70:	2b00      	cmp	r3, #0
 8101d72:	d009      	beq.n	8101d88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101d74:	4b91      	ldr	r3, [pc, #580]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d76:	681b      	ldr	r3, [r3, #0]
 8101d78:	08db      	lsrs	r3, r3, #3
 8101d7a:	f003 0303 	and.w	r3, r3, #3
 8101d7e:	4a90      	ldr	r2, [pc, #576]	@ (8101fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101d80:	fa22 f303 	lsr.w	r3, r2, r3
 8101d84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101d86:	e111      	b.n	8101fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101d88:	4b8d      	ldr	r3, [pc, #564]	@ (8101fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101d8a:	61bb      	str	r3, [r7, #24]
      break;
 8101d8c:	e10e      	b.n	8101fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8101fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101d90:	61bb      	str	r3, [r7, #24]
      break;
 8101d92:	e10b      	b.n	8101fac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101d94:	4b8c      	ldr	r3, [pc, #560]	@ (8101fc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101d96:	61bb      	str	r3, [r7, #24]
      break;
 8101d98:	e108      	b.n	8101fac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101d9a:	4b88      	ldr	r3, [pc, #544]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101d9e:	f003 0303 	and.w	r3, r3, #3
 8101da2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101da4:	4b85      	ldr	r3, [pc, #532]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101da8:	091b      	lsrs	r3, r3, #4
 8101daa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101dae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101db0:	4b82      	ldr	r3, [pc, #520]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101db4:	f003 0301 	and.w	r3, r3, #1
 8101db8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101dba:	4b80      	ldr	r3, [pc, #512]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101dbe:	08db      	lsrs	r3, r3, #3
 8101dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101dc4:	68fa      	ldr	r2, [r7, #12]
 8101dc6:	fb02 f303 	mul.w	r3, r2, r3
 8101dca:	ee07 3a90 	vmov	s15, r3
 8101dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101dd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101dd6:	693b      	ldr	r3, [r7, #16]
 8101dd8:	2b00      	cmp	r3, #0
 8101dda:	f000 80e1 	beq.w	8101fa0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101dde:	697b      	ldr	r3, [r7, #20]
 8101de0:	2b02      	cmp	r3, #2
 8101de2:	f000 8083 	beq.w	8101eec <HAL_RCC_GetSysClockFreq+0x204>
 8101de6:	697b      	ldr	r3, [r7, #20]
 8101de8:	2b02      	cmp	r3, #2
 8101dea:	f200 80a1 	bhi.w	8101f30 <HAL_RCC_GetSysClockFreq+0x248>
 8101dee:	697b      	ldr	r3, [r7, #20]
 8101df0:	2b00      	cmp	r3, #0
 8101df2:	d003      	beq.n	8101dfc <HAL_RCC_GetSysClockFreq+0x114>
 8101df4:	697b      	ldr	r3, [r7, #20]
 8101df6:	2b01      	cmp	r3, #1
 8101df8:	d056      	beq.n	8101ea8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101dfa:	e099      	b.n	8101f30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dfe:	681b      	ldr	r3, [r3, #0]
 8101e00:	f003 0320 	and.w	r3, r3, #32
 8101e04:	2b00      	cmp	r3, #0
 8101e06:	d02d      	beq.n	8101e64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101e08:	4b6c      	ldr	r3, [pc, #432]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	08db      	lsrs	r3, r3, #3
 8101e0e:	f003 0303 	and.w	r3, r3, #3
 8101e12:	4a6b      	ldr	r2, [pc, #428]	@ (8101fc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e14:	fa22 f303 	lsr.w	r3, r2, r3
 8101e18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	ee07 3a90 	vmov	s15, r3
 8101e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e24:	693b      	ldr	r3, [r7, #16]
 8101e26:	ee07 3a90 	vmov	s15, r3
 8101e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e32:	4b62      	ldr	r3, [pc, #392]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e3a:	ee07 3a90 	vmov	s15, r3
 8101e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8101e46:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101e62:	e087      	b.n	8101f74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101e64:	693b      	ldr	r3, [r7, #16]
 8101e66:	ee07 3a90 	vmov	s15, r3
 8101e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e6e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101fd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e76:	4b51      	ldr	r3, [pc, #324]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e7e:	ee07 3a90 	vmov	s15, r3
 8101e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8101e8a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101ea6:	e065      	b.n	8101f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101ea8:	693b      	ldr	r3, [r7, #16]
 8101eaa:	ee07 3a90 	vmov	s15, r3
 8101eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101eb2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101eba:	4b40      	ldr	r3, [pc, #256]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ec2:	ee07 3a90 	vmov	s15, r3
 8101ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ece:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101eea:	e043      	b.n	8101f74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101eec:	693b      	ldr	r3, [r7, #16]
 8101eee:	ee07 3a90 	vmov	s15, r3
 8101ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ef6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101fd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101efe:	4b2f      	ldr	r3, [pc, #188]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f06:	ee07 3a90 	vmov	s15, r3
 8101f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f12:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101f2e:	e021      	b.n	8101f74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101f30:	693b      	ldr	r3, [r7, #16]
 8101f32:	ee07 3a90 	vmov	s15, r3
 8101f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f3a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101fd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f42:	4b1e      	ldr	r3, [pc, #120]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f4a:	ee07 3a90 	vmov	s15, r3
 8101f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f56:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101fcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101f72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101f74:	4b11      	ldr	r3, [pc, #68]	@ (8101fbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101f78:	0a5b      	lsrs	r3, r3, #9
 8101f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101f7e:	3301      	adds	r3, #1
 8101f80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101f82:	683b      	ldr	r3, [r7, #0]
 8101f84:	ee07 3a90 	vmov	s15, r3
 8101f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101f8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8101f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101f98:	ee17 3a90 	vmov	r3, s15
 8101f9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101f9e:	e005      	b.n	8101fac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101fa0:	2300      	movs	r3, #0
 8101fa2:	61bb      	str	r3, [r7, #24]
      break;
 8101fa4:	e002      	b.n	8101fac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101fa6:	4b07      	ldr	r3, [pc, #28]	@ (8101fc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101fa8:	61bb      	str	r3, [r7, #24]
      break;
 8101faa:	bf00      	nop
  }

  return sysclockfreq;
 8101fac:	69bb      	ldr	r3, [r7, #24]
}
 8101fae:	4618      	mov	r0, r3
 8101fb0:	3724      	adds	r7, #36	@ 0x24
 8101fb2:	46bd      	mov	sp, r7
 8101fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb8:	4770      	bx	lr
 8101fba:	bf00      	nop
 8101fbc:	58024400 	.word	0x58024400
 8101fc0:	03d09000 	.word	0x03d09000
 8101fc4:	003d0900 	.word	0x003d0900
 8101fc8:	017d7840 	.word	0x017d7840
 8101fcc:	46000000 	.word	0x46000000
 8101fd0:	4c742400 	.word	0x4c742400
 8101fd4:	4a742400 	.word	0x4a742400
 8101fd8:	4bbebc20 	.word	0x4bbebc20

08101fdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101fe0:	b0ca      	sub	sp, #296	@ 0x128
 8101fe2:	af00      	add	r7, sp, #0
 8101fe4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101fe8:	2300      	movs	r3, #0
 8101fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101fee:	2300      	movs	r3, #0
 8101ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ffc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102000:	2500      	movs	r5, #0
 8102002:	ea54 0305 	orrs.w	r3, r4, r5
 8102006:	d049      	beq.n	810209c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810200c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810200e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102012:	d02f      	beq.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102014:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102018:	d828      	bhi.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810201a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810201e:	d01a      	beq.n	8102056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102024:	d822      	bhi.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102026:	2b00      	cmp	r3, #0
 8102028:	d003      	beq.n	8102032 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810202a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810202e:	d007      	beq.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102030:	e01c      	b.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102032:	4bb8      	ldr	r3, [pc, #736]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102036:	4ab7      	ldr	r2, [pc, #732]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810203c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810203e:	e01a      	b.n	8102076 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102044:	3308      	adds	r3, #8
 8102046:	2102      	movs	r1, #2
 8102048:	4618      	mov	r0, r3
 810204a:	f001 f9d1 	bl	81033f0 <RCCEx_PLL2_Config>
 810204e:	4603      	mov	r3, r0
 8102050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102054:	e00f      	b.n	8102076 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810205a:	3328      	adds	r3, #40	@ 0x28
 810205c:	2102      	movs	r1, #2
 810205e:	4618      	mov	r0, r3
 8102060:	f001 fa78 	bl	8103554 <RCCEx_PLL3_Config>
 8102064:	4603      	mov	r3, r0
 8102066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810206a:	e004      	b.n	8102076 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810206c:	2301      	movs	r3, #1
 810206e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102072:	e000      	b.n	8102076 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8102074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810207a:	2b00      	cmp	r3, #0
 810207c:	d10a      	bne.n	8102094 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810207e:	4ba5      	ldr	r3, [pc, #660]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102082:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810208a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810208c:	4aa1      	ldr	r2, [pc, #644]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810208e:	430b      	orrs	r3, r1
 8102090:	6513      	str	r3, [r2, #80]	@ 0x50
 8102092:	e003      	b.n	810209c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810209c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81020a8:	f04f 0900 	mov.w	r9, #0
 81020ac:	ea58 0309 	orrs.w	r3, r8, r9
 81020b0:	d047      	beq.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81020b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81020b8:	2b04      	cmp	r3, #4
 81020ba:	d82a      	bhi.n	8102112 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81020bc:	a201      	add	r2, pc, #4	@ (adr r2, 81020c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020c2:	bf00      	nop
 81020c4:	081020d9 	.word	0x081020d9
 81020c8:	081020e7 	.word	0x081020e7
 81020cc:	081020fd 	.word	0x081020fd
 81020d0:	0810211b 	.word	0x0810211b
 81020d4:	0810211b 	.word	0x0810211b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81020d8:	4b8e      	ldr	r3, [pc, #568]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81020dc:	4a8d      	ldr	r2, [pc, #564]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81020de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81020e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81020e4:	e01a      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81020e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020ea:	3308      	adds	r3, #8
 81020ec:	2100      	movs	r1, #0
 81020ee:	4618      	mov	r0, r3
 81020f0:	f001 f97e 	bl	81033f0 <RCCEx_PLL2_Config>
 81020f4:	4603      	mov	r3, r0
 81020f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81020fa:	e00f      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81020fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102100:	3328      	adds	r3, #40	@ 0x28
 8102102:	2100      	movs	r1, #0
 8102104:	4618      	mov	r0, r3
 8102106:	f001 fa25 	bl	8103554 <RCCEx_PLL3_Config>
 810210a:	4603      	mov	r3, r0
 810210c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102110:	e004      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102112:	2301      	movs	r3, #1
 8102114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102118:	e000      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810211a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810211c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102120:	2b00      	cmp	r3, #0
 8102122:	d10a      	bne.n	810213a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102124:	4b7b      	ldr	r3, [pc, #492]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102128:	f023 0107 	bic.w	r1, r3, #7
 810212c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102132:	4a78      	ldr	r2, [pc, #480]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102134:	430b      	orrs	r3, r1
 8102136:	6513      	str	r3, [r2, #80]	@ 0x50
 8102138:	e003      	b.n	8102142 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810213a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810213e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102146:	e9d3 2300 	ldrd	r2, r3, [r3]
 810214a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810214e:	f04f 0b00 	mov.w	fp, #0
 8102152:	ea5a 030b 	orrs.w	r3, sl, fp
 8102156:	d04c      	beq.n	81021f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810215e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102162:	d030      	beq.n	81021c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102168:	d829      	bhi.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810216a:	2bc0      	cmp	r3, #192	@ 0xc0
 810216c:	d02d      	beq.n	81021ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810216e:	2bc0      	cmp	r3, #192	@ 0xc0
 8102170:	d825      	bhi.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102172:	2b80      	cmp	r3, #128	@ 0x80
 8102174:	d018      	beq.n	81021a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102176:	2b80      	cmp	r3, #128	@ 0x80
 8102178:	d821      	bhi.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810217a:	2b00      	cmp	r3, #0
 810217c:	d002      	beq.n	8102184 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810217e:	2b40      	cmp	r3, #64	@ 0x40
 8102180:	d007      	beq.n	8102192 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102182:	e01c      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102184:	4b63      	ldr	r3, [pc, #396]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102188:	4a62      	ldr	r2, [pc, #392]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810218a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810218e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102190:	e01c      	b.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102196:	3308      	adds	r3, #8
 8102198:	2100      	movs	r1, #0
 810219a:	4618      	mov	r0, r3
 810219c:	f001 f928 	bl	81033f0 <RCCEx_PLL2_Config>
 81021a0:	4603      	mov	r3, r0
 81021a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81021a6:	e011      	b.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81021a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021ac:	3328      	adds	r3, #40	@ 0x28
 81021ae:	2100      	movs	r1, #0
 81021b0:	4618      	mov	r0, r3
 81021b2:	f001 f9cf 	bl	8103554 <RCCEx_PLL3_Config>
 81021b6:	4603      	mov	r3, r0
 81021b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81021bc:	e006      	b.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021be:	2301      	movs	r3, #1
 81021c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81021c4:	e002      	b.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81021c6:	bf00      	nop
 81021c8:	e000      	b.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81021ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021d0:	2b00      	cmp	r3, #0
 81021d2:	d10a      	bne.n	81021ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81021d4:	4b4f      	ldr	r3, [pc, #316]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81021d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81021dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81021e2:	4a4c      	ldr	r2, [pc, #304]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021e4:	430b      	orrs	r3, r1
 81021e6:	6513      	str	r3, [r2, #80]	@ 0x50
 81021e8:	e003      	b.n	81021f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81021f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81021fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81021fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8102202:	2300      	movs	r3, #0
 8102204:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102208:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810220c:	460b      	mov	r3, r1
 810220e:	4313      	orrs	r3, r2
 8102210:	d053      	beq.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102216:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810221a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810221e:	d035      	beq.n	810228c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102220:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102224:	d82e      	bhi.n	8102284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102226:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810222a:	d031      	beq.n	8102290 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810222c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102230:	d828      	bhi.n	8102284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102232:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102236:	d01a      	beq.n	810226e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810223c:	d822      	bhi.n	8102284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810223e:	2b00      	cmp	r3, #0
 8102240:	d003      	beq.n	810224a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102242:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102246:	d007      	beq.n	8102258 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102248:	e01c      	b.n	8102284 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810224a:	4b32      	ldr	r3, [pc, #200]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810224e:	4a31      	ldr	r2, [pc, #196]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102254:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102256:	e01c      	b.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810225c:	3308      	adds	r3, #8
 810225e:	2100      	movs	r1, #0
 8102260:	4618      	mov	r0, r3
 8102262:	f001 f8c5 	bl	81033f0 <RCCEx_PLL2_Config>
 8102266:	4603      	mov	r3, r0
 8102268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810226c:	e011      	b.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810226e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102272:	3328      	adds	r3, #40	@ 0x28
 8102274:	2100      	movs	r1, #0
 8102276:	4618      	mov	r0, r3
 8102278:	f001 f96c 	bl	8103554 <RCCEx_PLL3_Config>
 810227c:	4603      	mov	r3, r0
 810227e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102282:	e006      	b.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102284:	2301      	movs	r3, #1
 8102286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810228a:	e002      	b.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810228c:	bf00      	nop
 810228e:	e000      	b.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102296:	2b00      	cmp	r3, #0
 8102298:	d10b      	bne.n	81022b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810229a:	4b1e      	ldr	r3, [pc, #120]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810229e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 81022a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81022aa:	4a1a      	ldr	r2, [pc, #104]	@ (8102314 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022ac:	430b      	orrs	r3, r1
 81022ae:	6593      	str	r3, [r2, #88]	@ 0x58
 81022b0:	e003      	b.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81022ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 81022c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 81022ca:	2300      	movs	r3, #0
 81022cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 81022d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 81022d4:	460b      	mov	r3, r1
 81022d6:	4313      	orrs	r3, r2
 81022d8:	d056      	beq.n	8102388 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81022da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81022e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81022e6:	d038      	beq.n	810235a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81022e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81022ec:	d831      	bhi.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81022ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81022f2:	d034      	beq.n	810235e <HAL_RCCEx_PeriphCLKConfig+0x382>
 81022f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81022f8:	d82b      	bhi.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81022fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81022fe:	d01d      	beq.n	810233c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102304:	d825      	bhi.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102306:	2b00      	cmp	r3, #0
 8102308:	d006      	beq.n	8102318 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810230a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810230e:	d00a      	beq.n	8102326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102310:	e01f      	b.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102312:	bf00      	nop
 8102314:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102318:	4ba2      	ldr	r3, [pc, #648]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810231a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810231c:	4aa1      	ldr	r2, [pc, #644]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810231e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102322:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102324:	e01c      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810232a:	3308      	adds	r3, #8
 810232c:	2100      	movs	r1, #0
 810232e:	4618      	mov	r0, r3
 8102330:	f001 f85e 	bl	81033f0 <RCCEx_PLL2_Config>
 8102334:	4603      	mov	r3, r0
 8102336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810233a:	e011      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810233c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102340:	3328      	adds	r3, #40	@ 0x28
 8102342:	2100      	movs	r1, #0
 8102344:	4618      	mov	r0, r3
 8102346:	f001 f905 	bl	8103554 <RCCEx_PLL3_Config>
 810234a:	4603      	mov	r3, r0
 810234c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102350:	e006      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102352:	2301      	movs	r3, #1
 8102354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102358:	e002      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810235a:	bf00      	nop
 810235c:	e000      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810235e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102364:	2b00      	cmp	r3, #0
 8102366:	d10b      	bne.n	8102380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102368:	4b8e      	ldr	r3, [pc, #568]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810236a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810236c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102374:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102378:	4a8a      	ldr	r2, [pc, #552]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810237a:	430b      	orrs	r3, r1
 810237c:	6593      	str	r3, [r2, #88]	@ 0x58
 810237e:	e003      	b.n	8102388 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102390:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102394:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102398:	2300      	movs	r3, #0
 810239a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810239e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81023a2:	460b      	mov	r3, r1
 81023a4:	4313      	orrs	r3, r2
 81023a6:	d03a      	beq.n	810241e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81023a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81023ae:	2b30      	cmp	r3, #48	@ 0x30
 81023b0:	d01f      	beq.n	81023f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81023b2:	2b30      	cmp	r3, #48	@ 0x30
 81023b4:	d819      	bhi.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81023b6:	2b20      	cmp	r3, #32
 81023b8:	d00c      	beq.n	81023d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81023ba:	2b20      	cmp	r3, #32
 81023bc:	d815      	bhi.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81023be:	2b00      	cmp	r3, #0
 81023c0:	d019      	beq.n	81023f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81023c2:	2b10      	cmp	r3, #16
 81023c4:	d111      	bne.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023c6:	4b77      	ldr	r3, [pc, #476]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81023c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81023ca:	4a76      	ldr	r2, [pc, #472]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81023d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81023d2:	e011      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81023d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023d8:	3308      	adds	r3, #8
 81023da:	2102      	movs	r1, #2
 81023dc:	4618      	mov	r0, r3
 81023de:	f001 f807 	bl	81033f0 <RCCEx_PLL2_Config>
 81023e2:	4603      	mov	r3, r0
 81023e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81023e8:	e006      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81023ea:	2301      	movs	r3, #1
 81023ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81023f0:	e002      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81023f2:	bf00      	nop
 81023f4:	e000      	b.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81023f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81023f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023fc:	2b00      	cmp	r3, #0
 81023fe:	d10a      	bne.n	8102416 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102400:	4b68      	ldr	r3, [pc, #416]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102404:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810240e:	4a65      	ldr	r2, [pc, #404]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102410:	430b      	orrs	r3, r1
 8102412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102414:	e003      	b.n	810241e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810241a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810241e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102426:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810242a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810242e:	2300      	movs	r3, #0
 8102430:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8102434:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102438:	460b      	mov	r3, r1
 810243a:	4313      	orrs	r3, r2
 810243c:	d051      	beq.n	81024e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810243e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102448:	d035      	beq.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810244a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810244e:	d82e      	bhi.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102450:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102454:	d031      	beq.n	81024ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102456:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810245a:	d828      	bhi.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810245c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102460:	d01a      	beq.n	8102498 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102466:	d822      	bhi.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102468:	2b00      	cmp	r3, #0
 810246a:	d003      	beq.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810246c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102470:	d007      	beq.n	8102482 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102472:	e01c      	b.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102474:	4b4b      	ldr	r3, [pc, #300]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102478:	4a4a      	ldr	r2, [pc, #296]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810247a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810247e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102480:	e01c      	b.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102486:	3308      	adds	r3, #8
 8102488:	2100      	movs	r1, #0
 810248a:	4618      	mov	r0, r3
 810248c:	f000 ffb0 	bl	81033f0 <RCCEx_PLL2_Config>
 8102490:	4603      	mov	r3, r0
 8102492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102496:	e011      	b.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810249c:	3328      	adds	r3, #40	@ 0x28
 810249e:	2100      	movs	r1, #0
 81024a0:	4618      	mov	r0, r3
 81024a2:	f001 f857 	bl	8103554 <RCCEx_PLL3_Config>
 81024a6:	4603      	mov	r3, r0
 81024a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81024ac:	e006      	b.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81024ae:	2301      	movs	r3, #1
 81024b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81024b4:	e002      	b.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81024b6:	bf00      	nop
 81024b8:	e000      	b.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81024ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81024bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d10a      	bne.n	81024da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81024c4:	4b37      	ldr	r3, [pc, #220]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81024c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 81024cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81024d2:	4a34      	ldr	r2, [pc, #208]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024d4:	430b      	orrs	r3, r1
 81024d6:	6513      	str	r3, [r2, #80]	@ 0x50
 81024d8:	e003      	b.n	81024e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81024e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81024ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 81024f2:	2300      	movs	r3, #0
 81024f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 81024f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 81024fc:	460b      	mov	r3, r1
 81024fe:	4313      	orrs	r3, r2
 8102500:	d056      	beq.n	81025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810250c:	d033      	beq.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810250e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102512:	d82c      	bhi.n	810256e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102514:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102518:	d02f      	beq.n	810257a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810251a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810251e:	d826      	bhi.n	810256e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102520:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102524:	d02b      	beq.n	810257e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102526:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810252a:	d820      	bhi.n	810256e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810252c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102530:	d012      	beq.n	8102558 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102532:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102536:	d81a      	bhi.n	810256e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102538:	2b00      	cmp	r3, #0
 810253a:	d022      	beq.n	8102582 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810253c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102540:	d115      	bne.n	810256e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102546:	3308      	adds	r3, #8
 8102548:	2101      	movs	r1, #1
 810254a:	4618      	mov	r0, r3
 810254c:	f000 ff50 	bl	81033f0 <RCCEx_PLL2_Config>
 8102550:	4603      	mov	r3, r0
 8102552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102556:	e015      	b.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810255c:	3328      	adds	r3, #40	@ 0x28
 810255e:	2101      	movs	r1, #1
 8102560:	4618      	mov	r0, r3
 8102562:	f000 fff7 	bl	8103554 <RCCEx_PLL3_Config>
 8102566:	4603      	mov	r3, r0
 8102568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810256c:	e00a      	b.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810256e:	2301      	movs	r3, #1
 8102570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102574:	e006      	b.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102576:	bf00      	nop
 8102578:	e004      	b.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810257a:	bf00      	nop
 810257c:	e002      	b.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810257e:	bf00      	nop
 8102580:	e000      	b.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102588:	2b00      	cmp	r3, #0
 810258a:	d10d      	bne.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810258c:	4b05      	ldr	r3, [pc, #20]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810258e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102590:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810259a:	4a02      	ldr	r2, [pc, #8]	@ (81025a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810259c:	430b      	orrs	r3, r1
 810259e:	6513      	str	r3, [r2, #80]	@ 0x50
 81025a0:	e006      	b.n	81025b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81025a2:	bf00      	nop
 81025a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81025b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 81025bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 81025c0:	2300      	movs	r3, #0
 81025c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 81025c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 81025ca:	460b      	mov	r3, r1
 81025cc:	4313      	orrs	r3, r2
 81025ce:	d055      	beq.n	810267c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81025d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81025d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81025dc:	d033      	beq.n	8102646 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81025de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81025e2:	d82c      	bhi.n	810263e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81025e8:	d02f      	beq.n	810264a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81025ee:	d826      	bhi.n	810263e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81025f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81025f4:	d02b      	beq.n	810264e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81025f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81025fa:	d820      	bhi.n	810263e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81025fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102600:	d012      	beq.n	8102628 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102602:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102606:	d81a      	bhi.n	810263e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102608:	2b00      	cmp	r3, #0
 810260a:	d022      	beq.n	8102652 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810260c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102610:	d115      	bne.n	810263e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102616:	3308      	adds	r3, #8
 8102618:	2101      	movs	r1, #1
 810261a:	4618      	mov	r0, r3
 810261c:	f000 fee8 	bl	81033f0 <RCCEx_PLL2_Config>
 8102620:	4603      	mov	r3, r0
 8102622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102626:	e015      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810262c:	3328      	adds	r3, #40	@ 0x28
 810262e:	2101      	movs	r1, #1
 8102630:	4618      	mov	r0, r3
 8102632:	f000 ff8f 	bl	8103554 <RCCEx_PLL3_Config>
 8102636:	4603      	mov	r3, r0
 8102638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810263c:	e00a      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810263e:	2301      	movs	r3, #1
 8102640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102644:	e006      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102646:	bf00      	nop
 8102648:	e004      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810264a:	bf00      	nop
 810264c:	e002      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810264e:	bf00      	nop
 8102650:	e000      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102658:	2b00      	cmp	r3, #0
 810265a:	d10b      	bne.n	8102674 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810265c:	4ba4      	ldr	r3, [pc, #656]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102660:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810266c:	4aa0      	ldr	r2, [pc, #640]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810266e:	430b      	orrs	r3, r1
 8102670:	6593      	str	r3, [r2, #88]	@ 0x58
 8102672:	e003      	b.n	810267c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102678:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810267c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102684:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810268c:	2300      	movs	r3, #0
 810268e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102692:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102696:	460b      	mov	r3, r1
 8102698:	4313      	orrs	r3, r2
 810269a:	d037      	beq.n	810270c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810269c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81026a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81026a6:	d00e      	beq.n	81026c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81026a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81026ac:	d816      	bhi.n	81026dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 81026ae:	2b00      	cmp	r3, #0
 81026b0:	d018      	beq.n	81026e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 81026b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81026b6:	d111      	bne.n	81026dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026b8:	4b8d      	ldr	r3, [pc, #564]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81026ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81026bc:	4a8c      	ldr	r2, [pc, #560]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81026be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81026c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81026c4:	e00f      	b.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81026c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ca:	3308      	adds	r3, #8
 81026cc:	2101      	movs	r1, #1
 81026ce:	4618      	mov	r0, r3
 81026d0:	f000 fe8e 	bl	81033f0 <RCCEx_PLL2_Config>
 81026d4:	4603      	mov	r3, r0
 81026d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81026da:	e004      	b.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81026dc:	2301      	movs	r3, #1
 81026de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81026e2:	e000      	b.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81026e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026ea:	2b00      	cmp	r3, #0
 81026ec:	d10a      	bne.n	8102704 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81026ee:	4b80      	ldr	r3, [pc, #512]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81026f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81026f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 81026f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81026fc:	4a7c      	ldr	r2, [pc, #496]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81026fe:	430b      	orrs	r3, r1
 8102700:	6513      	str	r3, [r2, #80]	@ 0x50
 8102702:	e003      	b.n	810270c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102704:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102708:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810270c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102714:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810271c:	2300      	movs	r3, #0
 810271e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8102722:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8102726:	460b      	mov	r3, r1
 8102728:	4313      	orrs	r3, r2
 810272a:	d039      	beq.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810272c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102732:	2b03      	cmp	r3, #3
 8102734:	d81c      	bhi.n	8102770 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8102736:	a201      	add	r2, pc, #4	@ (adr r2, 810273c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8102738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810273c:	08102779 	.word	0x08102779
 8102740:	0810274d 	.word	0x0810274d
 8102744:	0810275b 	.word	0x0810275b
 8102748:	08102779 	.word	0x08102779
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810274c:	4b68      	ldr	r3, [pc, #416]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102750:	4a67      	ldr	r2, [pc, #412]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8102758:	e00f      	b.n	810277a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810275a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810275e:	3308      	adds	r3, #8
 8102760:	2102      	movs	r1, #2
 8102762:	4618      	mov	r0, r3
 8102764:	f000 fe44 	bl	81033f0 <RCCEx_PLL2_Config>
 8102768:	4603      	mov	r3, r0
 810276a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 810276e:	e004      	b.n	810277a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102770:	2301      	movs	r3, #1
 8102772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102776:	e000      	b.n	810277a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8102778:	bf00      	nop
    }

    if (ret == HAL_OK)
 810277a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810277e:	2b00      	cmp	r3, #0
 8102780:	d10a      	bne.n	8102798 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102782:	4b5b      	ldr	r3, [pc, #364]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102786:	f023 0103 	bic.w	r1, r3, #3
 810278a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810278e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102790:	4a57      	ldr	r2, [pc, #348]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102792:	430b      	orrs	r3, r1
 8102794:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102796:	e003      	b.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810279c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81027ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81027b0:	2300      	movs	r3, #0
 81027b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81027b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81027ba:	460b      	mov	r3, r1
 81027bc:	4313      	orrs	r3, r2
 81027be:	f000 809f 	beq.w	8102900 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81027c2:	4b4c      	ldr	r3, [pc, #304]	@ (81028f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81027c4:	681b      	ldr	r3, [r3, #0]
 81027c6:	4a4b      	ldr	r2, [pc, #300]	@ (81028f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81027c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81027cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81027ce:	f7fe f8db 	bl	8100988 <HAL_GetTick>
 81027d2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81027d6:	e00b      	b.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81027d8:	f7fe f8d6 	bl	8100988 <HAL_GetTick>
 81027dc:	4602      	mov	r2, r0
 81027de:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81027e2:	1ad3      	subs	r3, r2, r3
 81027e4:	2b64      	cmp	r3, #100	@ 0x64
 81027e6:	d903      	bls.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81027e8:	2303      	movs	r3, #3
 81027ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81027ee:	e005      	b.n	81027fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81027f0:	4b40      	ldr	r3, [pc, #256]	@ (81028f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81027f8:	2b00      	cmp	r3, #0
 81027fa:	d0ed      	beq.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81027fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102800:	2b00      	cmp	r3, #0
 8102802:	d179      	bne.n	81028f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102804:	4b3a      	ldr	r3, [pc, #232]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102806:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810280c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102810:	4053      	eors	r3, r2
 8102812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102816:	2b00      	cmp	r3, #0
 8102818:	d015      	beq.n	8102846 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810281a:	4b35      	ldr	r3, [pc, #212]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810281e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8102822:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102826:	4b32      	ldr	r3, [pc, #200]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810282a:	4a31      	ldr	r2, [pc, #196]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810282c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102830:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102832:	4b2f      	ldr	r3, [pc, #188]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102836:	4a2e      	ldr	r2, [pc, #184]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810283c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810283e:	4a2c      	ldr	r2, [pc, #176]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102840:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102844:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810284a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810284e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102852:	d118      	bne.n	8102886 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102854:	f7fe f898 	bl	8100988 <HAL_GetTick>
 8102858:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810285c:	e00d      	b.n	810287a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810285e:	f7fe f893 	bl	8100988 <HAL_GetTick>
 8102862:	4602      	mov	r2, r0
 8102864:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102868:	1ad2      	subs	r2, r2, r3
 810286a:	f241 3388 	movw	r3, #5000	@ 0x1388
 810286e:	429a      	cmp	r2, r3
 8102870:	d903      	bls.n	810287a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8102872:	2303      	movs	r3, #3
 8102874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8102878:	e005      	b.n	8102886 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810287a:	4b1d      	ldr	r3, [pc, #116]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810287e:	f003 0302 	and.w	r3, r3, #2
 8102882:	2b00      	cmp	r3, #0
 8102884:	d0eb      	beq.n	810285e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8102886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810288a:	2b00      	cmp	r3, #0
 810288c:	d12b      	bne.n	81028e6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810288e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102892:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810289a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810289e:	d110      	bne.n	81028c2 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81028a0:	4b13      	ldr	r3, [pc, #76]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028a2:	691b      	ldr	r3, [r3, #16]
 81028a4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81028a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81028b0:	091b      	lsrs	r3, r3, #4
 81028b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81028b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81028ba:	4a0d      	ldr	r2, [pc, #52]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028bc:	430b      	orrs	r3, r1
 81028be:	6113      	str	r3, [r2, #16]
 81028c0:	e005      	b.n	81028ce <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81028c2:	4b0b      	ldr	r3, [pc, #44]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028c4:	691b      	ldr	r3, [r3, #16]
 81028c6:	4a0a      	ldr	r2, [pc, #40]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81028cc:	6113      	str	r3, [r2, #16]
 81028ce:	4b08      	ldr	r3, [pc, #32]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028d0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81028d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81028da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81028de:	4a04      	ldr	r2, [pc, #16]	@ (81028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028e0:	430b      	orrs	r3, r1
 81028e2:	6713      	str	r3, [r2, #112]	@ 0x70
 81028e4:	e00c      	b.n	8102900 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81028e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81028ee:	e007      	b.n	8102900 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81028f0:	58024400 	.word	0x58024400
 81028f4:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102908:	f002 0301 	and.w	r3, r2, #1
 810290c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102910:	2300      	movs	r3, #0
 8102912:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8102916:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810291a:	460b      	mov	r3, r1
 810291c:	4313      	orrs	r3, r2
 810291e:	f000 8089 	beq.w	8102a34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102926:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102928:	2b28      	cmp	r3, #40	@ 0x28
 810292a:	d86b      	bhi.n	8102a04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810292c:	a201      	add	r2, pc, #4	@ (adr r2, 8102934 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102932:	bf00      	nop
 8102934:	08102a0d 	.word	0x08102a0d
 8102938:	08102a05 	.word	0x08102a05
 810293c:	08102a05 	.word	0x08102a05
 8102940:	08102a05 	.word	0x08102a05
 8102944:	08102a05 	.word	0x08102a05
 8102948:	08102a05 	.word	0x08102a05
 810294c:	08102a05 	.word	0x08102a05
 8102950:	08102a05 	.word	0x08102a05
 8102954:	081029d9 	.word	0x081029d9
 8102958:	08102a05 	.word	0x08102a05
 810295c:	08102a05 	.word	0x08102a05
 8102960:	08102a05 	.word	0x08102a05
 8102964:	08102a05 	.word	0x08102a05
 8102968:	08102a05 	.word	0x08102a05
 810296c:	08102a05 	.word	0x08102a05
 8102970:	08102a05 	.word	0x08102a05
 8102974:	081029ef 	.word	0x081029ef
 8102978:	08102a05 	.word	0x08102a05
 810297c:	08102a05 	.word	0x08102a05
 8102980:	08102a05 	.word	0x08102a05
 8102984:	08102a05 	.word	0x08102a05
 8102988:	08102a05 	.word	0x08102a05
 810298c:	08102a05 	.word	0x08102a05
 8102990:	08102a05 	.word	0x08102a05
 8102994:	08102a0d 	.word	0x08102a0d
 8102998:	08102a05 	.word	0x08102a05
 810299c:	08102a05 	.word	0x08102a05
 81029a0:	08102a05 	.word	0x08102a05
 81029a4:	08102a05 	.word	0x08102a05
 81029a8:	08102a05 	.word	0x08102a05
 81029ac:	08102a05 	.word	0x08102a05
 81029b0:	08102a05 	.word	0x08102a05
 81029b4:	08102a0d 	.word	0x08102a0d
 81029b8:	08102a05 	.word	0x08102a05
 81029bc:	08102a05 	.word	0x08102a05
 81029c0:	08102a05 	.word	0x08102a05
 81029c4:	08102a05 	.word	0x08102a05
 81029c8:	08102a05 	.word	0x08102a05
 81029cc:	08102a05 	.word	0x08102a05
 81029d0:	08102a05 	.word	0x08102a05
 81029d4:	08102a0d 	.word	0x08102a0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81029d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029dc:	3308      	adds	r3, #8
 81029de:	2101      	movs	r1, #1
 81029e0:	4618      	mov	r0, r3
 81029e2:	f000 fd05 	bl	81033f0 <RCCEx_PLL2_Config>
 81029e6:	4603      	mov	r3, r0
 81029e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81029ec:	e00f      	b.n	8102a0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81029ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029f2:	3328      	adds	r3, #40	@ 0x28
 81029f4:	2101      	movs	r1, #1
 81029f6:	4618      	mov	r0, r3
 81029f8:	f000 fdac 	bl	8103554 <RCCEx_PLL3_Config>
 81029fc:	4603      	mov	r3, r0
 81029fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102a02:	e004      	b.n	8102a0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a04:	2301      	movs	r3, #1
 8102a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a0a:	e000      	b.n	8102a0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a12:	2b00      	cmp	r3, #0
 8102a14:	d10a      	bne.n	8102a2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102a16:	4bbf      	ldr	r3, [pc, #764]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102a1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102a24:	4abb      	ldr	r2, [pc, #748]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102a26:	430b      	orrs	r3, r1
 8102a28:	6553      	str	r3, [r2, #84]	@ 0x54
 8102a2a:	e003      	b.n	8102a34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a3c:	f002 0302 	and.w	r3, r2, #2
 8102a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8102a44:	2300      	movs	r3, #0
 8102a46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8102a4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102a4e:	460b      	mov	r3, r1
 8102a50:	4313      	orrs	r3, r2
 8102a52:	d041      	beq.n	8102ad8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102a5a:	2b05      	cmp	r3, #5
 8102a5c:	d824      	bhi.n	8102aa8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8102a64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a64:	08102ab1 	.word	0x08102ab1
 8102a68:	08102a7d 	.word	0x08102a7d
 8102a6c:	08102a93 	.word	0x08102a93
 8102a70:	08102ab1 	.word	0x08102ab1
 8102a74:	08102ab1 	.word	0x08102ab1
 8102a78:	08102ab1 	.word	0x08102ab1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a80:	3308      	adds	r3, #8
 8102a82:	2101      	movs	r1, #1
 8102a84:	4618      	mov	r0, r3
 8102a86:	f000 fcb3 	bl	81033f0 <RCCEx_PLL2_Config>
 8102a8a:	4603      	mov	r3, r0
 8102a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102a90:	e00f      	b.n	8102ab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a96:	3328      	adds	r3, #40	@ 0x28
 8102a98:	2101      	movs	r1, #1
 8102a9a:	4618      	mov	r0, r3
 8102a9c:	f000 fd5a 	bl	8103554 <RCCEx_PLL3_Config>
 8102aa0:	4603      	mov	r3, r0
 8102aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102aa6:	e004      	b.n	8102ab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102aa8:	2301      	movs	r3, #1
 8102aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102aae:	e000      	b.n	8102ab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ab6:	2b00      	cmp	r3, #0
 8102ab8:	d10a      	bne.n	8102ad0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102aba:	4b96      	ldr	r3, [pc, #600]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102abe:	f023 0107 	bic.w	r1, r3, #7
 8102ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102ac8:	4a92      	ldr	r2, [pc, #584]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102aca:	430b      	orrs	r3, r1
 8102acc:	6553      	str	r3, [r2, #84]	@ 0x54
 8102ace:	e003      	b.n	8102ad8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ae0:	f002 0304 	and.w	r3, r2, #4
 8102ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102ae8:	2300      	movs	r3, #0
 8102aea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102aee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102af2:	460b      	mov	r3, r1
 8102af4:	4313      	orrs	r3, r2
 8102af6:	d044      	beq.n	8102b82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102b00:	2b05      	cmp	r3, #5
 8102b02:	d825      	bhi.n	8102b50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102b04:	a201      	add	r2, pc, #4	@ (adr r2, 8102b0c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8102b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b0a:	bf00      	nop
 8102b0c:	08102b59 	.word	0x08102b59
 8102b10:	08102b25 	.word	0x08102b25
 8102b14:	08102b3b 	.word	0x08102b3b
 8102b18:	08102b59 	.word	0x08102b59
 8102b1c:	08102b59 	.word	0x08102b59
 8102b20:	08102b59 	.word	0x08102b59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b28:	3308      	adds	r3, #8
 8102b2a:	2101      	movs	r1, #1
 8102b2c:	4618      	mov	r0, r3
 8102b2e:	f000 fc5f 	bl	81033f0 <RCCEx_PLL2_Config>
 8102b32:	4603      	mov	r3, r0
 8102b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102b38:	e00f      	b.n	8102b5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b3e:	3328      	adds	r3, #40	@ 0x28
 8102b40:	2101      	movs	r1, #1
 8102b42:	4618      	mov	r0, r3
 8102b44:	f000 fd06 	bl	8103554 <RCCEx_PLL3_Config>
 8102b48:	4603      	mov	r3, r0
 8102b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102b4e:	e004      	b.n	8102b5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b50:	2301      	movs	r3, #1
 8102b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b56:	e000      	b.n	8102b5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8102b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b5e:	2b00      	cmp	r3, #0
 8102b60:	d10b      	bne.n	8102b7a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102b62:	4b6c      	ldr	r3, [pc, #432]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102b66:	f023 0107 	bic.w	r1, r3, #7
 8102b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102b72:	4a68      	ldr	r2, [pc, #416]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102b74:	430b      	orrs	r3, r1
 8102b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8102b78:	e003      	b.n	8102b82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b8a:	f002 0320 	and.w	r3, r2, #32
 8102b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102b92:	2300      	movs	r3, #0
 8102b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102b98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102b9c:	460b      	mov	r3, r1
 8102b9e:	4313      	orrs	r3, r2
 8102ba0:	d055      	beq.n	8102c4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102bae:	d033      	beq.n	8102c18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102bb4:	d82c      	bhi.n	8102c10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102bba:	d02f      	beq.n	8102c1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102bc0:	d826      	bhi.n	8102c10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102bc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102bc6:	d02b      	beq.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102bc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102bcc:	d820      	bhi.n	8102c10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102bce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102bd2:	d012      	beq.n	8102bfa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102bd8:	d81a      	bhi.n	8102c10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102bda:	2b00      	cmp	r3, #0
 8102bdc:	d022      	beq.n	8102c24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102be2:	d115      	bne.n	8102c10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102be8:	3308      	adds	r3, #8
 8102bea:	2100      	movs	r1, #0
 8102bec:	4618      	mov	r0, r3
 8102bee:	f000 fbff 	bl	81033f0 <RCCEx_PLL2_Config>
 8102bf2:	4603      	mov	r3, r0
 8102bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102bf8:	e015      	b.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bfe:	3328      	adds	r3, #40	@ 0x28
 8102c00:	2102      	movs	r1, #2
 8102c02:	4618      	mov	r0, r3
 8102c04:	f000 fca6 	bl	8103554 <RCCEx_PLL3_Config>
 8102c08:	4603      	mov	r3, r0
 8102c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102c0e:	e00a      	b.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c10:	2301      	movs	r3, #1
 8102c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c16:	e006      	b.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102c18:	bf00      	nop
 8102c1a:	e004      	b.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102c1c:	bf00      	nop
 8102c1e:	e002      	b.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102c20:	bf00      	nop
 8102c22:	e000      	b.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c2a:	2b00      	cmp	r3, #0
 8102c2c:	d10b      	bne.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102c2e:	4b39      	ldr	r3, [pc, #228]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102c3e:	4a35      	ldr	r2, [pc, #212]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102c40:	430b      	orrs	r3, r1
 8102c42:	6553      	str	r3, [r2, #84]	@ 0x54
 8102c44:	e003      	b.n	8102c4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8102c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102c5e:	2300      	movs	r3, #0
 8102c60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102c64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102c68:	460b      	mov	r3, r1
 8102c6a:	4313      	orrs	r3, r2
 8102c6c:	d058      	beq.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102c76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102c7a:	d033      	beq.n	8102ce4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102c7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102c80:	d82c      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102c86:	d02f      	beq.n	8102ce8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8102c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102c8c:	d826      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102c8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102c92:	d02b      	beq.n	8102cec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102c94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102c98:	d820      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102c9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102c9e:	d012      	beq.n	8102cc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102ca4:	d81a      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102ca6:	2b00      	cmp	r3, #0
 8102ca8:	d022      	beq.n	8102cf0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8102caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102cae:	d115      	bne.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cb4:	3308      	adds	r3, #8
 8102cb6:	2100      	movs	r1, #0
 8102cb8:	4618      	mov	r0, r3
 8102cba:	f000 fb99 	bl	81033f0 <RCCEx_PLL2_Config>
 8102cbe:	4603      	mov	r3, r0
 8102cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102cc4:	e015      	b.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cca:	3328      	adds	r3, #40	@ 0x28
 8102ccc:	2102      	movs	r1, #2
 8102cce:	4618      	mov	r0, r3
 8102cd0:	f000 fc40 	bl	8103554 <RCCEx_PLL3_Config>
 8102cd4:	4603      	mov	r3, r0
 8102cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102cda:	e00a      	b.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102cdc:	2301      	movs	r3, #1
 8102cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102ce2:	e006      	b.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102ce4:	bf00      	nop
 8102ce6:	e004      	b.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102ce8:	bf00      	nop
 8102cea:	e002      	b.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102cec:	bf00      	nop
 8102cee:	e000      	b.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cf6:	2b00      	cmp	r3, #0
 8102cf8:	d10e      	bne.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102cfa:	4b06      	ldr	r3, [pc, #24]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102cfe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102d0a:	4a02      	ldr	r2, [pc, #8]	@ (8102d14 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102d0c:	430b      	orrs	r3, r1
 8102d0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102d10:	e006      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102d12:	bf00      	nop
 8102d14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d28:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8102d2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102d30:	2300      	movs	r3, #0
 8102d32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8102d36:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8102d3a:	460b      	mov	r3, r1
 8102d3c:	4313      	orrs	r3, r2
 8102d3e:	d055      	beq.n	8102dec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8102d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102d48:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102d4c:	d033      	beq.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102d4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102d52:	d82c      	bhi.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102d58:	d02f      	beq.n	8102dba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8102d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102d5e:	d826      	bhi.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102d60:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102d64:	d02b      	beq.n	8102dbe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8102d66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102d6a:	d820      	bhi.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102d70:	d012      	beq.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8102d72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102d76:	d81a      	bhi.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102d78:	2b00      	cmp	r3, #0
 8102d7a:	d022      	beq.n	8102dc2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102d80:	d115      	bne.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d86:	3308      	adds	r3, #8
 8102d88:	2100      	movs	r1, #0
 8102d8a:	4618      	mov	r0, r3
 8102d8c:	f000 fb30 	bl	81033f0 <RCCEx_PLL2_Config>
 8102d90:	4603      	mov	r3, r0
 8102d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102d96:	e015      	b.n	8102dc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d9c:	3328      	adds	r3, #40	@ 0x28
 8102d9e:	2102      	movs	r1, #2
 8102da0:	4618      	mov	r0, r3
 8102da2:	f000 fbd7 	bl	8103554 <RCCEx_PLL3_Config>
 8102da6:	4603      	mov	r3, r0
 8102da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102dac:	e00a      	b.n	8102dc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102dae:	2301      	movs	r3, #1
 8102db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102db4:	e006      	b.n	8102dc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102db6:	bf00      	nop
 8102db8:	e004      	b.n	8102dc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102dba:	bf00      	nop
 8102dbc:	e002      	b.n	8102dc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102dbe:	bf00      	nop
 8102dc0:	e000      	b.n	8102dc4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dc8:	2b00      	cmp	r3, #0
 8102dca:	d10b      	bne.n	8102de4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102dd0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102ddc:	4a9d      	ldr	r2, [pc, #628]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102dde:	430b      	orrs	r3, r1
 8102de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8102de2:	e003      	b.n	8102dec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102df4:	f002 0308 	and.w	r3, r2, #8
 8102df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8102dfc:	2300      	movs	r3, #0
 8102dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102e02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102e06:	460b      	mov	r3, r1
 8102e08:	4313      	orrs	r3, r2
 8102e0a:	d01e      	beq.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8102e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102e18:	d10c      	bne.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e1e:	3328      	adds	r3, #40	@ 0x28
 8102e20:	2102      	movs	r1, #2
 8102e22:	4618      	mov	r0, r3
 8102e24:	f000 fb96 	bl	8103554 <RCCEx_PLL3_Config>
 8102e28:	4603      	mov	r3, r0
 8102e2a:	2b00      	cmp	r3, #0
 8102e2c:	d002      	beq.n	8102e34 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8102e2e:	2301      	movs	r3, #1
 8102e30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102e34:	4b87      	ldr	r3, [pc, #540]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102e38:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8102e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102e44:	4a83      	ldr	r2, [pc, #524]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102e46:	430b      	orrs	r3, r1
 8102e48:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e52:	f002 0310 	and.w	r3, r2, #16
 8102e56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8102e5a:	2300      	movs	r3, #0
 8102e5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8102e60:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8102e64:	460b      	mov	r3, r1
 8102e66:	4313      	orrs	r3, r2
 8102e68:	d01e      	beq.n	8102ea8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102e76:	d10c      	bne.n	8102e92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e7c:	3328      	adds	r3, #40	@ 0x28
 8102e7e:	2102      	movs	r1, #2
 8102e80:	4618      	mov	r0, r3
 8102e82:	f000 fb67 	bl	8103554 <RCCEx_PLL3_Config>
 8102e86:	4603      	mov	r3, r0
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d002      	beq.n	8102e92 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8102e8c:	2301      	movs	r3, #1
 8102e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102e92:	4b70      	ldr	r3, [pc, #448]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102e96:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102ea2:	4a6c      	ldr	r2, [pc, #432]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102ea4:	430b      	orrs	r3, r1
 8102ea6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102eb0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102eb8:	2300      	movs	r3, #0
 8102eba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102ebe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102ec2:	460b      	mov	r3, r1
 8102ec4:	4313      	orrs	r3, r2
 8102ec6:	d03e      	beq.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102ed4:	d022      	beq.n	8102f1c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8102ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102eda:	d81b      	bhi.n	8102f14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102edc:	2b00      	cmp	r3, #0
 8102ede:	d003      	beq.n	8102ee8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102ee4:	d00b      	beq.n	8102efe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8102ee6:	e015      	b.n	8102f14 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eec:	3308      	adds	r3, #8
 8102eee:	2100      	movs	r1, #0
 8102ef0:	4618      	mov	r0, r3
 8102ef2:	f000 fa7d 	bl	81033f0 <RCCEx_PLL2_Config>
 8102ef6:	4603      	mov	r3, r0
 8102ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102efc:	e00f      	b.n	8102f1e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f02:	3328      	adds	r3, #40	@ 0x28
 8102f04:	2102      	movs	r1, #2
 8102f06:	4618      	mov	r0, r3
 8102f08:	f000 fb24 	bl	8103554 <RCCEx_PLL3_Config>
 8102f0c:	4603      	mov	r3, r0
 8102f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102f12:	e004      	b.n	8102f1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f14:	2301      	movs	r3, #1
 8102f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102f1a:	e000      	b.n	8102f1e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8102f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f22:	2b00      	cmp	r3, #0
 8102f24:	d10b      	bne.n	8102f3e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102f26:	4b4b      	ldr	r3, [pc, #300]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102f2a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8102f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102f36:	4a47      	ldr	r2, [pc, #284]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f38:	430b      	orrs	r3, r1
 8102f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8102f3c:	e003      	b.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f4e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8102f52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102f54:	2300      	movs	r3, #0
 8102f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102f58:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8102f5c:	460b      	mov	r3, r1
 8102f5e:	4313      	orrs	r3, r2
 8102f60:	d03b      	beq.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8102f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102f6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102f6e:	d01f      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102f70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102f74:	d818      	bhi.n	8102fa8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8102f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102f7a:	d003      	beq.n	8102f84 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102f7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102f80:	d007      	beq.n	8102f92 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102f82:	e011      	b.n	8102fa8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f84:	4b33      	ldr	r3, [pc, #204]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f88:	4a32      	ldr	r2, [pc, #200]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102f90:	e00f      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f96:	3328      	adds	r3, #40	@ 0x28
 8102f98:	2101      	movs	r1, #1
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	f000 fada 	bl	8103554 <RCCEx_PLL3_Config>
 8102fa0:	4603      	mov	r3, r0
 8102fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8102fa6:	e004      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102fa8:	2301      	movs	r3, #1
 8102faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102fae:	e000      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fb6:	2b00      	cmp	r3, #0
 8102fb8:	d10b      	bne.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102fba:	4b26      	ldr	r3, [pc, #152]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102fbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102fca:	4a22      	ldr	r2, [pc, #136]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102fcc:	430b      	orrs	r3, r1
 8102fce:	6553      	str	r3, [r2, #84]	@ 0x54
 8102fd0:	e003      	b.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fe2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8102fe6:	673b      	str	r3, [r7, #112]	@ 0x70
 8102fe8:	2300      	movs	r3, #0
 8102fea:	677b      	str	r3, [r7, #116]	@ 0x74
 8102fec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102ff0:	460b      	mov	r3, r1
 8102ff2:	4313      	orrs	r3, r2
 8102ff4:	d034      	beq.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d003      	beq.n	8103008 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103004:	d007      	beq.n	8103016 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8103006:	e011      	b.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103008:	4b12      	ldr	r3, [pc, #72]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810300c:	4a11      	ldr	r2, [pc, #68]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810300e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103014:	e00e      	b.n	8103034 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810301a:	3308      	adds	r3, #8
 810301c:	2102      	movs	r1, #2
 810301e:	4618      	mov	r0, r3
 8103020:	f000 f9e6 	bl	81033f0 <RCCEx_PLL2_Config>
 8103024:	4603      	mov	r3, r0
 8103026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810302a:	e003      	b.n	8103034 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810302c:	2301      	movs	r3, #1
 810302e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103038:	2b00      	cmp	r3, #0
 810303a:	d10d      	bne.n	8103058 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810303c:	4b05      	ldr	r3, [pc, #20]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810303e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103040:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810304a:	4a02      	ldr	r2, [pc, #8]	@ (8103054 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810304c:	430b      	orrs	r3, r1
 810304e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103050:	e006      	b.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8103052:	bf00      	nop
 8103054:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810305c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103068:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 810306c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810306e:	2300      	movs	r3, #0
 8103070:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8103072:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8103076:	460b      	mov	r3, r1
 8103078:	4313      	orrs	r3, r2
 810307a:	d00c      	beq.n	8103096 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103080:	3328      	adds	r3, #40	@ 0x28
 8103082:	2102      	movs	r1, #2
 8103084:	4618      	mov	r0, r3
 8103086:	f000 fa65 	bl	8103554 <RCCEx_PLL3_Config>
 810308a:	4603      	mov	r3, r0
 810308c:	2b00      	cmp	r3, #0
 810308e:	d002      	beq.n	8103096 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103090:	2301      	movs	r3, #1
 8103092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810309e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81030a2:	663b      	str	r3, [r7, #96]	@ 0x60
 81030a4:	2300      	movs	r3, #0
 81030a6:	667b      	str	r3, [r7, #100]	@ 0x64
 81030a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81030ac:	460b      	mov	r3, r1
 81030ae:	4313      	orrs	r3, r2
 81030b0:	d038      	beq.n	8103124 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81030ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81030be:	d018      	beq.n	81030f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81030c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81030c4:	d811      	bhi.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81030c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81030ca:	d014      	beq.n	81030f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81030cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81030d0:	d80b      	bhi.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81030d2:	2b00      	cmp	r3, #0
 81030d4:	d011      	beq.n	81030fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81030d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81030da:	d106      	bne.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030dc:	4bc3      	ldr	r3, [pc, #780]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81030de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030e0:	4ac2      	ldr	r2, [pc, #776]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81030e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81030e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81030e8:	e008      	b.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81030ea:	2301      	movs	r3, #1
 81030ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81030f0:	e004      	b.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81030f2:	bf00      	nop
 81030f4:	e002      	b.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81030f6:	bf00      	nop
 81030f8:	e000      	b.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81030fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103100:	2b00      	cmp	r3, #0
 8103102:	d10b      	bne.n	810311c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103104:	4bb9      	ldr	r3, [pc, #740]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103108:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810310c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103114:	4ab5      	ldr	r2, [pc, #724]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103116:	430b      	orrs	r3, r1
 8103118:	6553      	str	r3, [r2, #84]	@ 0x54
 810311a:	e003      	b.n	8103124 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810311c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103128:	e9d3 2300 	ldrd	r2, r3, [r3]
 810312c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8103130:	65bb      	str	r3, [r7, #88]	@ 0x58
 8103132:	2300      	movs	r3, #0
 8103134:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103136:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810313a:	460b      	mov	r3, r1
 810313c:	4313      	orrs	r3, r2
 810313e:	d009      	beq.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103140:	4baa      	ldr	r3, [pc, #680]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103144:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810314c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810314e:	4aa7      	ldr	r2, [pc, #668]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103150:	430b      	orrs	r3, r1
 8103152:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103158:	e9d3 2300 	ldrd	r2, r3, [r3]
 810315c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103160:	653b      	str	r3, [r7, #80]	@ 0x50
 8103162:	2300      	movs	r3, #0
 8103164:	657b      	str	r3, [r7, #84]	@ 0x54
 8103166:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 810316a:	460b      	mov	r3, r1
 810316c:	4313      	orrs	r3, r2
 810316e:	d00a      	beq.n	8103186 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103170:	4b9e      	ldr	r3, [pc, #632]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103172:	691b      	ldr	r3, [r3, #16]
 8103174:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8103178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810317c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103180:	4a9a      	ldr	r2, [pc, #616]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103182:	430b      	orrs	r3, r1
 8103184:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810318e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103192:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103194:	2300      	movs	r3, #0
 8103196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103198:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810319c:	460b      	mov	r3, r1
 810319e:	4313      	orrs	r3, r2
 81031a0:	d009      	beq.n	81031b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81031a2:	4b92      	ldr	r3, [pc, #584]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81031a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81031aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81031b0:	4a8e      	ldr	r2, [pc, #568]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031b2:	430b      	orrs	r3, r1
 81031b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81031c2:	643b      	str	r3, [r7, #64]	@ 0x40
 81031c4:	2300      	movs	r3, #0
 81031c6:	647b      	str	r3, [r7, #68]	@ 0x44
 81031c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81031cc:	460b      	mov	r3, r1
 81031ce:	4313      	orrs	r3, r2
 81031d0:	d00e      	beq.n	81031f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81031d2:	4b86      	ldr	r3, [pc, #536]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031d4:	691b      	ldr	r3, [r3, #16]
 81031d6:	4a85      	ldr	r2, [pc, #532]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 81031dc:	6113      	str	r3, [r2, #16]
 81031de:	4b83      	ldr	r3, [pc, #524]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031e0:	6919      	ldr	r1, [r3, #16]
 81031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81031ea:	4a80      	ldr	r2, [pc, #512]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81031ec:	430b      	orrs	r3, r1
 81031ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 81031fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 81031fe:	2300      	movs	r3, #0
 8103200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103202:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103206:	460b      	mov	r3, r1
 8103208:	4313      	orrs	r3, r2
 810320a:	d009      	beq.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810320c:	4b77      	ldr	r3, [pc, #476]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810320e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103210:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810321a:	4a74      	ldr	r2, [pc, #464]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810321c:	430b      	orrs	r3, r1
 810321e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103228:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810322c:	633b      	str	r3, [r7, #48]	@ 0x30
 810322e:	2300      	movs	r3, #0
 8103230:	637b      	str	r3, [r7, #52]	@ 0x34
 8103232:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8103236:	460b      	mov	r3, r1
 8103238:	4313      	orrs	r3, r2
 810323a:	d00a      	beq.n	8103252 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810323c:	4b6b      	ldr	r3, [pc, #428]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810323e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103240:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103248:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810324c:	4a67      	ldr	r2, [pc, #412]	@ (81033ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810324e:	430b      	orrs	r3, r1
 8103250:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8103252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103256:	e9d3 2300 	ldrd	r2, r3, [r3]
 810325a:	2100      	movs	r1, #0
 810325c:	62b9      	str	r1, [r7, #40]	@ 0x28
 810325e:	f003 0301 	and.w	r3, r3, #1
 8103262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103264:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8103268:	460b      	mov	r3, r1
 810326a:	4313      	orrs	r3, r2
 810326c:	d011      	beq.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103272:	3308      	adds	r3, #8
 8103274:	2100      	movs	r1, #0
 8103276:	4618      	mov	r0, r3
 8103278:	f000 f8ba 	bl	81033f0 <RCCEx_PLL2_Config>
 810327c:	4603      	mov	r3, r0
 810327e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103286:	2b00      	cmp	r3, #0
 8103288:	d003      	beq.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810328a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810328e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103296:	e9d3 2300 	ldrd	r2, r3, [r3]
 810329a:	2100      	movs	r1, #0
 810329c:	6239      	str	r1, [r7, #32]
 810329e:	f003 0302 	and.w	r3, r3, #2
 81032a2:	627b      	str	r3, [r7, #36]	@ 0x24
 81032a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81032a8:	460b      	mov	r3, r1
 81032aa:	4313      	orrs	r3, r2
 81032ac:	d011      	beq.n	81032d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032b2:	3308      	adds	r3, #8
 81032b4:	2101      	movs	r1, #1
 81032b6:	4618      	mov	r0, r3
 81032b8:	f000 f89a 	bl	81033f0 <RCCEx_PLL2_Config>
 81032bc:	4603      	mov	r3, r0
 81032be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81032c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d003      	beq.n	81032d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032da:	2100      	movs	r1, #0
 81032dc:	61b9      	str	r1, [r7, #24]
 81032de:	f003 0304 	and.w	r3, r3, #4
 81032e2:	61fb      	str	r3, [r7, #28]
 81032e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81032e8:	460b      	mov	r3, r1
 81032ea:	4313      	orrs	r3, r2
 81032ec:	d011      	beq.n	8103312 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81032ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032f2:	3308      	adds	r3, #8
 81032f4:	2102      	movs	r1, #2
 81032f6:	4618      	mov	r0, r3
 81032f8:	f000 f87a 	bl	81033f0 <RCCEx_PLL2_Config>
 81032fc:	4603      	mov	r3, r0
 81032fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103306:	2b00      	cmp	r3, #0
 8103308:	d003      	beq.n	8103312 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810330a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810330e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103316:	e9d3 2300 	ldrd	r2, r3, [r3]
 810331a:	2100      	movs	r1, #0
 810331c:	6139      	str	r1, [r7, #16]
 810331e:	f003 0308 	and.w	r3, r3, #8
 8103322:	617b      	str	r3, [r7, #20]
 8103324:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103328:	460b      	mov	r3, r1
 810332a:	4313      	orrs	r3, r2
 810332c:	d011      	beq.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103332:	3328      	adds	r3, #40	@ 0x28
 8103334:	2100      	movs	r1, #0
 8103336:	4618      	mov	r0, r3
 8103338:	f000 f90c 	bl	8103554 <RCCEx_PLL3_Config>
 810333c:	4603      	mov	r3, r0
 810333e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8103342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103346:	2b00      	cmp	r3, #0
 8103348:	d003      	beq.n	8103352 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810334a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810334e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103356:	e9d3 2300 	ldrd	r2, r3, [r3]
 810335a:	2100      	movs	r1, #0
 810335c:	60b9      	str	r1, [r7, #8]
 810335e:	f003 0310 	and.w	r3, r3, #16
 8103362:	60fb      	str	r3, [r7, #12]
 8103364:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103368:	460b      	mov	r3, r1
 810336a:	4313      	orrs	r3, r2
 810336c:	d011      	beq.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103372:	3328      	adds	r3, #40	@ 0x28
 8103374:	2101      	movs	r1, #1
 8103376:	4618      	mov	r0, r3
 8103378:	f000 f8ec 	bl	8103554 <RCCEx_PLL3_Config>
 810337c:	4603      	mov	r3, r0
 810337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103386:	2b00      	cmp	r3, #0
 8103388:	d003      	beq.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810338a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810338e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103396:	e9d3 2300 	ldrd	r2, r3, [r3]
 810339a:	2100      	movs	r1, #0
 810339c:	6039      	str	r1, [r7, #0]
 810339e:	f003 0320 	and.w	r3, r3, #32
 81033a2:	607b      	str	r3, [r7, #4]
 81033a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81033a8:	460b      	mov	r3, r1
 81033aa:	4313      	orrs	r3, r2
 81033ac:	d011      	beq.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033b2:	3328      	adds	r3, #40	@ 0x28
 81033b4:	2102      	movs	r1, #2
 81033b6:	4618      	mov	r0, r3
 81033b8:	f000 f8cc 	bl	8103554 <RCCEx_PLL3_Config>
 81033bc:	4603      	mov	r3, r0
 81033be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81033c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033c6:	2b00      	cmp	r3, #0
 81033c8:	d003      	beq.n	81033d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 81033d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	d101      	bne.n	81033de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81033da:	2300      	movs	r3, #0
 81033dc:	e000      	b.n	81033e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81033de:	2301      	movs	r3, #1
}
 81033e0:	4618      	mov	r0, r3
 81033e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 81033e6:	46bd      	mov	sp, r7
 81033e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81033ec:	58024400 	.word	0x58024400

081033f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81033f0:	b580      	push	{r7, lr}
 81033f2:	b084      	sub	sp, #16
 81033f4:	af00      	add	r7, sp, #0
 81033f6:	6078      	str	r0, [r7, #4]
 81033f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81033fa:	2300      	movs	r3, #0
 81033fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81033fe:	4b54      	ldr	r3, [pc, #336]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103402:	f003 0303 	and.w	r3, r3, #3
 8103406:	2b03      	cmp	r3, #3
 8103408:	d101      	bne.n	810340e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810340a:	2301      	movs	r3, #1
 810340c:	e09b      	b.n	8103546 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810340e:	4b50      	ldr	r3, [pc, #320]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	4a4f      	ldr	r2, [pc, #316]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103414:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810341a:	f7fd fab5 	bl	8100988 <HAL_GetTick>
 810341e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103420:	e008      	b.n	8103434 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103422:	f7fd fab1 	bl	8100988 <HAL_GetTick>
 8103426:	4602      	mov	r2, r0
 8103428:	68bb      	ldr	r3, [r7, #8]
 810342a:	1ad3      	subs	r3, r2, r3
 810342c:	2b02      	cmp	r3, #2
 810342e:	d901      	bls.n	8103434 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103430:	2303      	movs	r3, #3
 8103432:	e088      	b.n	8103546 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103434:	4b46      	ldr	r3, [pc, #280]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810343c:	2b00      	cmp	r3, #0
 810343e:	d1f0      	bne.n	8103422 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103440:	4b43      	ldr	r3, [pc, #268]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103444:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	031b      	lsls	r3, r3, #12
 810344e:	4940      	ldr	r1, [pc, #256]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103450:	4313      	orrs	r3, r2
 8103452:	628b      	str	r3, [r1, #40]	@ 0x28
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	685b      	ldr	r3, [r3, #4]
 8103458:	3b01      	subs	r3, #1
 810345a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	689b      	ldr	r3, [r3, #8]
 8103462:	3b01      	subs	r3, #1
 8103464:	025b      	lsls	r3, r3, #9
 8103466:	b29b      	uxth	r3, r3
 8103468:	431a      	orrs	r2, r3
 810346a:	687b      	ldr	r3, [r7, #4]
 810346c:	68db      	ldr	r3, [r3, #12]
 810346e:	3b01      	subs	r3, #1
 8103470:	041b      	lsls	r3, r3, #16
 8103472:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103476:	431a      	orrs	r2, r3
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	691b      	ldr	r3, [r3, #16]
 810347c:	3b01      	subs	r3, #1
 810347e:	061b      	lsls	r3, r3, #24
 8103480:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103484:	4932      	ldr	r1, [pc, #200]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103486:	4313      	orrs	r3, r2
 8103488:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810348a:	4b31      	ldr	r3, [pc, #196]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 810348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810348e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	695b      	ldr	r3, [r3, #20]
 8103496:	492e      	ldr	r1, [pc, #184]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103498:	4313      	orrs	r3, r2
 810349a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810349c:	4b2c      	ldr	r3, [pc, #176]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 810349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034a0:	f023 0220 	bic.w	r2, r3, #32
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	699b      	ldr	r3, [r3, #24]
 81034a8:	4929      	ldr	r1, [pc, #164]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034aa:	4313      	orrs	r3, r2
 81034ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81034ae:	4b28      	ldr	r3, [pc, #160]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034b2:	4a27      	ldr	r2, [pc, #156]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034b4:	f023 0310 	bic.w	r3, r3, #16
 81034b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81034ba:	4b25      	ldr	r3, [pc, #148]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81034be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81034c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81034c6:	687a      	ldr	r2, [r7, #4]
 81034c8:	69d2      	ldr	r2, [r2, #28]
 81034ca:	00d2      	lsls	r2, r2, #3
 81034cc:	4920      	ldr	r1, [pc, #128]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034ce:	4313      	orrs	r3, r2
 81034d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034d6:	4a1e      	ldr	r2, [pc, #120]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034d8:	f043 0310 	orr.w	r3, r3, #16
 81034dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81034de:	683b      	ldr	r3, [r7, #0]
 81034e0:	2b00      	cmp	r3, #0
 81034e2:	d106      	bne.n	81034f2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81034e4:	4b1a      	ldr	r3, [pc, #104]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034e8:	4a19      	ldr	r2, [pc, #100]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81034ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81034f0:	e00f      	b.n	8103512 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81034f2:	683b      	ldr	r3, [r7, #0]
 81034f4:	2b01      	cmp	r3, #1
 81034f6:	d106      	bne.n	8103506 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81034f8:	4b15      	ldr	r3, [pc, #84]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81034fc:	4a14      	ldr	r2, [pc, #80]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 81034fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103504:	e005      	b.n	8103512 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103506:	4b12      	ldr	r3, [pc, #72]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810350a:	4a11      	ldr	r2, [pc, #68]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 810350c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103510:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103512:	4b0f      	ldr	r3, [pc, #60]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a0e      	ldr	r2, [pc, #56]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 8103518:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810351c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810351e:	f7fd fa33 	bl	8100988 <HAL_GetTick>
 8103522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103524:	e008      	b.n	8103538 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103526:	f7fd fa2f 	bl	8100988 <HAL_GetTick>
 810352a:	4602      	mov	r2, r0
 810352c:	68bb      	ldr	r3, [r7, #8]
 810352e:	1ad3      	subs	r3, r2, r3
 8103530:	2b02      	cmp	r3, #2
 8103532:	d901      	bls.n	8103538 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103534:	2303      	movs	r3, #3
 8103536:	e006      	b.n	8103546 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103538:	4b05      	ldr	r3, [pc, #20]	@ (8103550 <RCCEx_PLL2_Config+0x160>)
 810353a:	681b      	ldr	r3, [r3, #0]
 810353c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103540:	2b00      	cmp	r3, #0
 8103542:	d0f0      	beq.n	8103526 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103544:	7bfb      	ldrb	r3, [r7, #15]
}
 8103546:	4618      	mov	r0, r3
 8103548:	3710      	adds	r7, #16
 810354a:	46bd      	mov	sp, r7
 810354c:	bd80      	pop	{r7, pc}
 810354e:	bf00      	nop
 8103550:	58024400 	.word	0x58024400

08103554 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103554:	b580      	push	{r7, lr}
 8103556:	b084      	sub	sp, #16
 8103558:	af00      	add	r7, sp, #0
 810355a:	6078      	str	r0, [r7, #4]
 810355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810355e:	2300      	movs	r3, #0
 8103560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103562:	4b54      	ldr	r3, [pc, #336]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103566:	f003 0303 	and.w	r3, r3, #3
 810356a:	2b03      	cmp	r3, #3
 810356c:	d101      	bne.n	8103572 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810356e:	2301      	movs	r3, #1
 8103570:	e09b      	b.n	81036aa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103572:	4b50      	ldr	r3, [pc, #320]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a4f      	ldr	r2, [pc, #316]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810357c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810357e:	f7fd fa03 	bl	8100988 <HAL_GetTick>
 8103582:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103584:	e008      	b.n	8103598 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103586:	f7fd f9ff 	bl	8100988 <HAL_GetTick>
 810358a:	4602      	mov	r2, r0
 810358c:	68bb      	ldr	r3, [r7, #8]
 810358e:	1ad3      	subs	r3, r2, r3
 8103590:	2b02      	cmp	r3, #2
 8103592:	d901      	bls.n	8103598 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103594:	2303      	movs	r3, #3
 8103596:	e088      	b.n	81036aa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103598:	4b46      	ldr	r3, [pc, #280]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810359a:	681b      	ldr	r3, [r3, #0]
 810359c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81035a0:	2b00      	cmp	r3, #0
 81035a2:	d1f0      	bne.n	8103586 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81035a4:	4b43      	ldr	r3, [pc, #268]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 81035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81035a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81035ac:	687b      	ldr	r3, [r7, #4]
 81035ae:	681b      	ldr	r3, [r3, #0]
 81035b0:	051b      	lsls	r3, r3, #20
 81035b2:	4940      	ldr	r1, [pc, #256]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 81035b4:	4313      	orrs	r3, r2
 81035b6:	628b      	str	r3, [r1, #40]	@ 0x28
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	685b      	ldr	r3, [r3, #4]
 81035bc:	3b01      	subs	r3, #1
 81035be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	689b      	ldr	r3, [r3, #8]
 81035c6:	3b01      	subs	r3, #1
 81035c8:	025b      	lsls	r3, r3, #9
 81035ca:	b29b      	uxth	r3, r3
 81035cc:	431a      	orrs	r2, r3
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	68db      	ldr	r3, [r3, #12]
 81035d2:	3b01      	subs	r3, #1
 81035d4:	041b      	lsls	r3, r3, #16
 81035d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81035da:	431a      	orrs	r2, r3
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	691b      	ldr	r3, [r3, #16]
 81035e0:	3b01      	subs	r3, #1
 81035e2:	061b      	lsls	r3, r3, #24
 81035e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81035e8:	4932      	ldr	r1, [pc, #200]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 81035ea:	4313      	orrs	r3, r2
 81035ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81035ee:	4b31      	ldr	r3, [pc, #196]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 81035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	695b      	ldr	r3, [r3, #20]
 81035fa:	492e      	ldr	r1, [pc, #184]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 81035fc:	4313      	orrs	r3, r2
 81035fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103600:	4b2c      	ldr	r3, [pc, #176]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103604:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	699b      	ldr	r3, [r3, #24]
 810360c:	4929      	ldr	r1, [pc, #164]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810360e:	4313      	orrs	r3, r2
 8103610:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103612:	4b28      	ldr	r3, [pc, #160]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103616:	4a27      	ldr	r2, [pc, #156]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810361c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810361e:	4b25      	ldr	r3, [pc, #148]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103626:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810362a:	687a      	ldr	r2, [r7, #4]
 810362c:	69d2      	ldr	r2, [r2, #28]
 810362e:	00d2      	lsls	r2, r2, #3
 8103630:	4920      	ldr	r1, [pc, #128]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103632:	4313      	orrs	r3, r2
 8103634:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103636:	4b1f      	ldr	r3, [pc, #124]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810363a:	4a1e      	ldr	r2, [pc, #120]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810363c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103640:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103642:	683b      	ldr	r3, [r7, #0]
 8103644:	2b00      	cmp	r3, #0
 8103646:	d106      	bne.n	8103656 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103648:	4b1a      	ldr	r3, [pc, #104]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810364c:	4a19      	ldr	r2, [pc, #100]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810364e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8103652:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103654:	e00f      	b.n	8103676 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103656:	683b      	ldr	r3, [r7, #0]
 8103658:	2b01      	cmp	r3, #1
 810365a:	d106      	bne.n	810366a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810365c:	4b15      	ldr	r3, [pc, #84]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103660:	4a14      	ldr	r2, [pc, #80]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103662:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103668:	e005      	b.n	8103676 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810366a:	4b12      	ldr	r3, [pc, #72]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810366e:	4a11      	ldr	r2, [pc, #68]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103670:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103674:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103676:	4b0f      	ldr	r3, [pc, #60]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4a0e      	ldr	r2, [pc, #56]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810367c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8103680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103682:	f7fd f981 	bl	8100988 <HAL_GetTick>
 8103686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103688:	e008      	b.n	810369c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810368a:	f7fd f97d 	bl	8100988 <HAL_GetTick>
 810368e:	4602      	mov	r2, r0
 8103690:	68bb      	ldr	r3, [r7, #8]
 8103692:	1ad3      	subs	r3, r2, r3
 8103694:	2b02      	cmp	r3, #2
 8103696:	d901      	bls.n	810369c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103698:	2303      	movs	r3, #3
 810369a:	e006      	b.n	81036aa <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810369c:	4b05      	ldr	r3, [pc, #20]	@ (81036b4 <RCCEx_PLL3_Config+0x160>)
 810369e:	681b      	ldr	r3, [r3, #0]
 81036a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81036a4:	2b00      	cmp	r3, #0
 81036a6:	d0f0      	beq.n	810368a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 81036aa:	4618      	mov	r0, r3
 81036ac:	3710      	adds	r7, #16
 81036ae:	46bd      	mov	sp, r7
 81036b0:	bd80      	pop	{r7, pc}
 81036b2:	bf00      	nop
 81036b4:	58024400 	.word	0x58024400

081036b8 <memset>:
 81036b8:	4402      	add	r2, r0
 81036ba:	4603      	mov	r3, r0
 81036bc:	4293      	cmp	r3, r2
 81036be:	d100      	bne.n	81036c2 <memset+0xa>
 81036c0:	4770      	bx	lr
 81036c2:	f803 1b01 	strb.w	r1, [r3], #1
 81036c6:	e7f9      	b.n	81036bc <memset+0x4>

081036c8 <__libc_init_array>:
 81036c8:	b570      	push	{r4, r5, r6, lr}
 81036ca:	4d0d      	ldr	r5, [pc, #52]	@ (8103700 <__libc_init_array+0x38>)
 81036cc:	4c0d      	ldr	r4, [pc, #52]	@ (8103704 <__libc_init_array+0x3c>)
 81036ce:	1b64      	subs	r4, r4, r5
 81036d0:	10a4      	asrs	r4, r4, #2
 81036d2:	2600      	movs	r6, #0
 81036d4:	42a6      	cmp	r6, r4
 81036d6:	d109      	bne.n	81036ec <__libc_init_array+0x24>
 81036d8:	4d0b      	ldr	r5, [pc, #44]	@ (8103708 <__libc_init_array+0x40>)
 81036da:	4c0c      	ldr	r4, [pc, #48]	@ (810370c <__libc_init_array+0x44>)
 81036dc:	f000 f818 	bl	8103710 <_init>
 81036e0:	1b64      	subs	r4, r4, r5
 81036e2:	10a4      	asrs	r4, r4, #2
 81036e4:	2600      	movs	r6, #0
 81036e6:	42a6      	cmp	r6, r4
 81036e8:	d105      	bne.n	81036f6 <__libc_init_array+0x2e>
 81036ea:	bd70      	pop	{r4, r5, r6, pc}
 81036ec:	f855 3b04 	ldr.w	r3, [r5], #4
 81036f0:	4798      	blx	r3
 81036f2:	3601      	adds	r6, #1
 81036f4:	e7ee      	b.n	81036d4 <__libc_init_array+0xc>
 81036f6:	f855 3b04 	ldr.w	r3, [r5], #4
 81036fa:	4798      	blx	r3
 81036fc:	3601      	adds	r6, #1
 81036fe:	e7f2      	b.n	81036e6 <__libc_init_array+0x1e>
 8103700:	08103738 	.word	0x08103738
 8103704:	08103738 	.word	0x08103738
 8103708:	08103738 	.word	0x08103738
 810370c:	0810373c 	.word	0x0810373c

08103710 <_init>:
 8103710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103712:	bf00      	nop
 8103714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103716:	bc08      	pop	{r3}
 8103718:	469e      	mov	lr, r3
 810371a:	4770      	bx	lr

0810371c <_fini>:
 810371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810371e:	bf00      	nop
 8103720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103722:	bc08      	pop	{r3}
 8103724:	469e      	mov	lr, r3
 8103726:	4770      	bx	lr
