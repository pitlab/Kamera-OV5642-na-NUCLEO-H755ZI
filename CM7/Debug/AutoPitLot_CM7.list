
AutoPitLot_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001676c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001838  08016a10  08016a10  00017a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018248  08018248  0001a208  2**0
                  CONTENTS
  4 .ARM          00000008  08018248  08018248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018250  08018250  0001a208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018250  08018250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018254  08018254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  24000000  08018258  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000756c0  24000208  08018460  0001a208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240758c8  08018460  0001a8c8  2**0
                  ALLOC
 11 .lwip_sec     00040200  30000000  30000000  0001b000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0001a208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000325de  00000000  00000000  0001a236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006020  00000000  00000000  0004c814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002350  00000000  00000000  00052838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b88  00000000  00000000  00054b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000418c2  00000000  00000000  00056710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032a8d  00000000  00000000  00097fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019e525  00000000  00000000  000caa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00268f84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a568  00000000  00000000  00268fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00273530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080169f4 	.word	0x080169f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	080169f4 	.word	0x080169f4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <InitProtokol>:
// chIn - odbierany bajt
// chInterfejs - identyfikator interfejsu odbierająceg znak
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t InitProtokol(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	//odczytaj z konfiguracji i ustaw własny adres sieciowy
	chAdresLokalny = 2;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <InitProtokol+0x18>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	701a      	strb	r2, [r3, #0]
	return ERR_OK;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	24000233 	.word	0x24000233

080007c8 <USART3_IRQHandler>:
// Parametry:
// huart - wskaźnik na uchwyt portu
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void USART3_IRQHandler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	if (USART3->ISR & USART_ISR_RXNE_RXFNE )	//RX not empty
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <USART3_IRQHandler+0x70>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d017      	beq.n	8000808 <USART3_IRQHandler+0x40>
	{
		chBufKom[chWskNap] = USART3->RDR;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <USART3_IRQHandler+0x70>)
 80007da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <USART3_IRQHandler+0x74>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	b2c9      	uxtb	r1, r1
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <USART3_IRQHandler+0x78>)
 80007e8:	5499      	strb	r1, [r3, r2]
		chWskNap++;
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <USART3_IRQHandler+0x74>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <USART3_IRQHandler+0x74>)
 80007f6:	701a      	strb	r2, [r3, #0]
		chWskNap &= ROZM_BUF_KOL-1;
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <USART3_IRQHandler+0x74>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <USART3_IRQHandler+0x74>)
 8000806:	701a      	strb	r2, [r3, #0]
		//BSP_LED_Toggle(LED_RED);
	}

	if (USART3->ISR & USART_ISR_ORE )		//overrun
 8000808:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <USART3_IRQHandler+0x70>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <USART3_IRQHandler+0x52>
		USART3->ICR = USART_ICR_ORECF;		//overrun clear flag
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <USART3_IRQHandler+0x70>)
 8000816:	2208      	movs	r2, #8
 8000818:	621a      	str	r2, [r3, #32]

	if (USART3->ISR & USART_ISR_TC )		//transmission Complete
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <USART3_IRQHandler+0x70>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <USART3_IRQHandler+0x64>
		USART3->ICR = USART_ICR_TCCF;
 8000826:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <USART3_IRQHandler+0x70>)
 8000828:	2240      	movs	r2, #64	@ 0x40
 800082a:	621a      	str	r2, [r3, #32]

	//if (USART3->ISR & USART_ISR_TXE_TXFNF )		//
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40004800 	.word	0x40004800
 800083c:	24000360 	.word	0x24000360
 8000840:	24000340 	.word	0x24000340

08000844 <StartKomUart>:
// Opróżnia napełniany w przerwaniu bufor kołowy
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void StartKomUart(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	chWskNap = chWskOpr = 0;
 800084c:	2100      	movs	r1, #0
 800084e:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <StartKomUart+0x9c>)
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <StartKomUart+0xa0>)
 8000856:	460a      	mov	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
	uint8_t chTimeout;

	HAL_NVIC_EnableIRQ(USART3_IRQn);	//włącz obsługę przerwań
 800085a:	2027      	movs	r0, #39	@ 0x27
 800085c:	f005 fa00 	bl	8005c60 <HAL_NVIC_EnableIRQ>
	USART3->CR1 = USART_CR1_UE | USART_CR1_RE | USART_CR1_TE | USART_CR1_RXNEIE_RXFNEIE;	//włacz przerwanie odbiorcze
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <StartKomUart+0xa4>)
 8000862:	222d      	movs	r2, #45	@ 0x2d
 8000864:	601a      	str	r2, [r3, #0]

	//HAL_UART_Receive_DMA (&hcom_uart[0], chBufKom, 1);	//odbieraj do bufora
	HAL_UART_Receive_IT(&hcom_uart[0], chBufKom, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	4920      	ldr	r1, [pc, #128]	@ (80008ec <StartKomUart+0xa8>)
 800086a:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <StartKomUart+0xac>)
 800086c:	f00e fe9e 	bl	800f5ac <HAL_UART_Receive_IT>
	while(1)
	{
		osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f011 fa60 	bl	8011d36 <osDelay>

		while (chWskNap != chWskOpr)
 8000876:	e01d      	b.n	80008b4 <StartKomUart+0x70>
		{
			AnalizujDaneKom(chBufKom[chWskOpr], INTERF_UART);
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <StartKomUart+0x9c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <StartKomUart+0xa8>)
 8000882:	5c9b      	ldrb	r3, [r3, r2]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f836 	bl	80008f8 <AnalizujDaneKom>
			chWskOpr++;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <StartKomUart+0x9c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <StartKomUart+0x9c>)
 8000898:	701a      	strb	r2, [r3, #0]
			chWskOpr &= ROZM_BUF_KOL-1;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <StartKomUart+0x9c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 031f 	and.w	r3, r3, #31
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <StartKomUart+0x9c>)
 80008a8:	701a      	strb	r2, [r3, #0]
			BSP_LED_Toggle(LED_GREEN);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f004 feda 	bl	8005664 <BSP_LED_Toggle>
			chTimeout = 50;
 80008b0:	2332      	movs	r3, #50	@ 0x32
 80008b2:	73fb      	strb	r3, [r7, #15]
		while (chWskNap != chWskOpr)
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <StartKomUart+0xa0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <StartKomUart+0x9c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d1d9      	bne.n	8000878 <StartKomUart+0x34>
		}


		//po upływie timeoutu resetuj stan protokołu aby następną ramkę zaczął dekodować od nagłówka
		if (chTimeout)
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <StartKomUart+0x8e>
			chTimeout--;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e002      	b.n	80008d8 <StartKomUart+0x94>
		else
			chStanProtokolu[INTERF_UART] = PR_ODBIOR_NAGL;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <StartKomUart+0xb0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	705a      	strb	r2, [r3, #1]

		BSP_LED_Off(LED_YELLOW);
 80008d8:	2001      	movs	r0, #1
 80008da:	f004 fe99 	bl	8005610 <BSP_LED_Off>
		osDelay(1);
 80008de:	e7c7      	b.n	8000870 <StartKomUart+0x2c>
 80008e0:	24000361 	.word	0x24000361
 80008e4:	24000360 	.word	0x24000360
 80008e8:	40004800 	.word	0x40004800
 80008ec:	24000340 	.word	0x24000340
 80008f0:	2407198c 	.word	0x2407198c
 80008f4:	2400022c 	.word	0x2400022c

080008f8 <AnalizujDaneKom>:
// chIn - odbierany bajt
// chInterfejs - identyfikator interfejsu odbierająceg znak
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t AnalizujDaneKom(uint8_t chWe, uint8_t chInterfejs)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af04      	add	r7, sp, #16
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
    uint32_t nOffsetDanych;
    static uint8_t chPolecenie;
    static uint8_t chRozmDanych;
    static uint8_t chDane[ROZM_DANYCH_UART];

    chErr = DekodujRamke(chWe, &chAdresZdalny[chInterfejs], &chZnakCzasu[chInterfejs], &chPolecenie, &chRozmDanych, chDane, chInterfejs);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	4a86      	ldr	r2, [pc, #536]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 800090c:	1899      	adds	r1, r3, r2
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4a85      	ldr	r2, [pc, #532]	@ (8000b28 <AnalizujDaneKom+0x230>)
 8000912:	441a      	add	r2, r3
 8000914:	79f8      	ldrb	r0, [r7, #7]
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	4b84      	ldr	r3, [pc, #528]	@ (8000b2c <AnalizujDaneKom+0x234>)
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	4b84      	ldr	r3, [pc, #528]	@ (8000b30 <AnalizujDaneKom+0x238>)
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	4b84      	ldr	r3, [pc, #528]	@ (8000b34 <AnalizujDaneKom+0x23c>)
 8000924:	f000 f918 	bl	8000b58 <DekodujRamke>
 8000928:	4603      	mov	r3, r0
 800092a:	73bb      	strb	r3, [r7, #14]
    if (chErr == ERR_RAMKA_GOTOWA)
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	2b0d      	cmp	r3, #13
 8000930:	f040 80f2 	bne.w	8000b18 <AnalizujDaneKom+0x220>
    {
		switch (chPolecenie)
 8000934:	4b7f      	ldr	r3, [pc, #508]	@ (8000b34 <AnalizujDaneKom+0x23c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b09      	cmp	r3, #9
 800093a:	f200 80ed 	bhi.w	8000b18 <AnalizujDaneKom+0x220>
 800093e:	a201      	add	r2, pc, #4	@ (adr r2, 8000944 <AnalizujDaneKom+0x4c>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	0800096d 	.word	0x0800096d
 8000948:	08000b19 	.word	0x08000b19
 800094c:	0800097b 	.word	0x0800097b
 8000950:	080009c1 	.word	0x080009c1
 8000954:	080009e3 	.word	0x080009e3
 8000958:	08000a27 	.word	0x08000a27
 800095c:	08000a31 	.word	0x08000a31
 8000960:	08000a53 	.word	0x08000a53
 8000964:	08000a69 	.word	0x08000a69
 8000968:	08000acb 	.word	0x08000acb
		{
		case PK_OK:	//odeslij polecenie OK
			chErr = Wyslij_OK(chInterfejs);
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 faf6 	bl	8000f60 <Wyslij_OK>
 8000974:	4603      	mov	r3, r0
 8000976:	73bb      	strb	r3, [r7, #14]
			break;
 8000978:	e0ce      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_ZROB_ZDJECIE:		//polecenie wykonania zdjęcia. We: [0..1] - sSzerokosc zdjecia, [2..3] - wysokość zdjecia
			sSzerZdjecia = (uint16_t)chDane[1] * 0x100 + chDane[0];
 800097a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b2c <AnalizujDaneKom+0x234>)
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	4a6a      	ldr	r2, [pc, #424]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	4413      	add	r3, r2
 8000988:	b29b      	uxth	r3, r3
 800098a:	b21a      	sxth	r2, r3
 800098c:	4b6a      	ldr	r3, [pc, #424]	@ (8000b38 <AnalizujDaneKom+0x240>)
 800098e:	801a      	strh	r2, [r3, #0]
			sWysZdjecia  = (uint16_t)chDane[3] * 0x100 + chDane[2];
 8000990:	4b66      	ldr	r3, [pc, #408]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000992:	78db      	ldrb	r3, [r3, #3]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	4a64      	ldr	r2, [pc, #400]	@ (8000b2c <AnalizujDaneKom+0x234>)
 800099a:	7892      	ldrb	r2, [r2, #2]
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	4b66      	ldr	r3, [pc, #408]	@ (8000b3c <AnalizujDaneKom+0x244>)
 80009a4:	801a      	strh	r2, [r3, #0]
			chTrybPracy = TP_ZDJECIE;
 80009a6:	4b66      	ldr	r3, [pc, #408]	@ (8000b40 <AnalizujDaneKom+0x248>)
 80009a8:	2214      	movs	r2, #20
 80009aa:	701a      	strb	r2, [r3, #0]
			chStatusZdjecia = SGZ_CZEKA;	//oczekiwania na wykonanie zdjęcia
 80009ac:	4b65      	ldr	r3, [pc, #404]	@ (8000b44 <AnalizujDaneKom+0x24c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
			chErr = Wyslij_OK(chInterfejs);
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fad3 	bl	8000f60 <Wyslij_OK>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73bb      	strb	r3, [r7, #14]
			break;
 80009be:	e0ab      	b.n	8000b18 <AnalizujDaneKom+0x220>
				{
					sPix = (x*2) & 0xFFFF;
					nBuforKamery[x] = (sPix+1)*0x10000 + sPix;
				}
			}*/
			chDane[0] = chStatusZdjecia;
 80009c0:	4b60      	ldr	r3, [pc, #384]	@ (8000b44 <AnalizujDaneKom+0x24c>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b59      	ldr	r3, [pc, #356]	@ (8000b2c <AnalizujDaneKom+0x234>)
 80009c6:	701a      	strb	r2, [r3, #0]
			chErr = WyslijRamke(chAdresZdalny[chInterfejs], PK_POB_STAT_ZDJECIA, 1, chDane, chInterfejs);
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	4a56      	ldr	r2, [pc, #344]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 80009cc:	5cd0      	ldrb	r0, [r2, r3]
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	4b56      	ldr	r3, [pc, #344]	@ (8000b2c <AnalizujDaneKom+0x234>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	2103      	movs	r1, #3
 80009d8:	f000 fa58 	bl	8000e8c <WyslijRamke>
 80009dc:	4603      	mov	r3, r0
 80009de:	73bb      	strb	r3, [r7, #14]
			break;
 80009e0:	e09a      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_POBIERZ_ZDJECIE:		//polecenie przesłania fragmentu zdjecia. We: [0..3] - wskaźnik na pozycje bufora, [4] - rozmiar danych do przesłania
			for (n=0; n<4; n++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e008      	b.n	80009fa <AnalizujDaneKom+0x102>
				un8_32.dane8[n] = chDane[n];
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	494f      	ldr	r1, [pc, #316]	@ (8000b2c <AnalizujDaneKom+0x234>)
 80009ee:	5c89      	ldrb	r1, [r1, r2]
 80009f0:	4a55      	ldr	r2, [pc, #340]	@ (8000b48 <AnalizujDaneKom+0x250>)
 80009f2:	54d1      	strb	r1, [r2, r3]
			for (n=0; n<4; n++)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	3301      	adds	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d9f3      	bls.n	80009e8 <AnalizujDaneKom+0xf0>
			nOffsetDanych = un8_32.dane32;
 8000a00:	4b51      	ldr	r3, [pc, #324]	@ (8000b48 <AnalizujDaneKom+0x250>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60bb      	str	r3, [r7, #8]
			WyslijRamke(chAdresZdalny[chInterfejs], PK_POBIERZ_ZDJECIE, chDane[4], (uint8_t*)(nBuforKamery + nOffsetDanych),  chInterfejs);
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	4a46      	ldr	r2, [pc, #280]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 8000a0a:	5cd0      	ldrb	r0, [r2, r3]
 8000a0c:	4b47      	ldr	r3, [pc, #284]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a0e:	791a      	ldrb	r2, [r3, #4]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	494d      	ldr	r1, [pc, #308]	@ (8000b4c <AnalizujDaneKom+0x254>)
 8000a16:	4419      	add	r1, r3
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	2104      	movs	r1, #4
 8000a20:	f000 fa34 	bl	8000e8c <WyslijRamke>
			break;
 8000a24:	e078      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_USTAW_ID:		//ustawia identyfikator/adres urządzenia
			chAdresLokalny = chDane[0];
 8000a26:	4b41      	ldr	r3, [pc, #260]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b49      	ldr	r3, [pc, #292]	@ (8000b50 <AnalizujDaneKom+0x258>)
 8000a2c:	701a      	strb	r2, [r3, #0]
			break;
 8000a2e:	e073      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_POBIERZ_ID:		//pobiera identyfikator/adres urządzenia
			chDane[0] = chAdresLokalny;
 8000a30:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <AnalizujDaneKom+0x258>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b3d      	ldr	r3, [pc, #244]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a36:	701a      	strb	r2, [r3, #0]
			chErr = WyslijRamke(chAdresZdalny[chInterfejs], PK_POBIERZ_ID, 1, chDane, chInterfejs);
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 8000a3c:	5cd0      	ldrb	r0, [r2, r3]
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4b3a      	ldr	r3, [pc, #232]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	2106      	movs	r1, #6
 8000a48:	f000 fa20 	bl	8000e8c <WyslijRamke>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73bb      	strb	r3, [r7, #14]
			break;
 8000a50:	e062      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_UST_TR_PRACY:	//ustaw tryb pracy
			chTrybPracy = chDane[0];
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <AnalizujDaneKom+0x248>)
 8000a58:	701a      	strb	r2, [r3, #0]
			chErr = Wyslij_OK(chInterfejs);
 8000a5a:	79bb      	ldrb	r3, [r7, #6]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fa7f 	bl	8000f60 <Wyslij_OK>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73bb      	strb	r3, [r7, #14]
			break;
 8000a66:	e057      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_POB_PAR_KAMERY:	//pobierz parametry pracy kamery
			chDane[0] = (uint8_t)(KonfKam.sSzerWy / SKALA_ROZDZ_KAM);
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a74:	701a      	strb	r2, [r3, #0]
			chDane[1] = (uint8_t)(KonfKam.sWysWy / SKALA_ROZDZ_KAM);
 8000a76:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a78:	88db      	ldrh	r3, [r3, #6]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a82:	705a      	strb	r2, [r3, #1]
			chDane[2] = (uint8_t)(KonfKam.sSzerWe / SKALA_ROZDZ_KAM);
 8000a84:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a90:	709a      	strb	r2, [r3, #2]
			chDane[3] = (uint8_t)(KonfKam.sWysWe / SKALA_ROZDZ_KAM);
 8000a92:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a94:	885b      	ldrh	r3, [r3, #2]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a9e:	70da      	strb	r2, [r3, #3]
			chDane[4] = KonfKam.chTrybDiagn;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000aa2:	7a1a      	ldrb	r2, [r3, #8]
 8000aa4:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000aa6:	711a      	strb	r2, [r3, #4]
			chDane[5] = KonfKam.chFlagi;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000aaa:	7a5a      	ldrb	r2, [r3, #9]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000aae:	715a      	strb	r2, [r3, #5]
			chErr = WyslijRamke(chAdresZdalny[chInterfejs], PK_POB_PAR_KAMERY, 6, chDane, chInterfejs);
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 8000ab4:	5cd0      	ldrb	r0, [r2, r3]
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000abc:	2206      	movs	r2, #6
 8000abe:	2108      	movs	r1, #8
 8000ac0:	f000 f9e4 	bl	8000e8c <WyslijRamke>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73bb      	strb	r3, [r7, #14]
			break;
 8000ac8:	e026      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_UST_PAR_KAMERY:	//ustaw parametry pracy kamery
			KonfKam.sSzerWy = chDane[0] * SKALA_ROZDZ_KAM;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000ad4:	809a      	strh	r2, [r3, #4]
			KonfKam.sWysWy = chDane[1] * SKALA_ROZDZ_KAM;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000ae0:	80da      	strh	r2, [r3, #6]
			KonfKam.sSzerWe = chDane[2] * SKALA_ROZDZ_KAM;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000ae4:	789b      	ldrb	r3, [r3, #2]
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000aec:	801a      	strh	r2, [r3, #0]
			KonfKam.sWysWe = chDane[3] * SKALA_ROZDZ_KAM;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000af0:	78db      	ldrb	r3, [r3, #3]
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000af8:	805a      	strh	r2, [r3, #2]
			KonfKam.chTrybDiagn = chDane[4];
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000afc:	791a      	ldrb	r2, [r3, #4]
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000b00:	721a      	strb	r2, [r3, #8]
			KonfKam.chFlagi = chDane[5];
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000b04:	795a      	ldrb	r2, [r3, #5]
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000b08:	725a      	strb	r2, [r3, #9]
			chErr = Wyslij_OK(chInterfejs);
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fa27 	bl	8000f60 <Wyslij_OK>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73bb      	strb	r3, [r7, #14]
			break;
 8000b16:	bf00      	nop
		}
    }
    return chErr;
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24000230 	.word	0x24000230
 8000b28:	24000238 	.word	0x24000238
 8000b2c:	2400036c 	.word	0x2400036c
 8000b30:	24000368 	.word	0x24000368
 8000b34:	24000367 	.word	0x24000367
 8000b38:	24000362 	.word	0x24000362
 8000b3c:	24000364 	.word	0x24000364
 8000b40:	24000008 	.word	0x24000008
 8000b44:	24000366 	.word	0x24000366
 8000b48:	24000228 	.word	0x24000228
 8000b4c:	24000cfc 	.word	0x24000cfc
 8000b50:	24000233 	.word	0x24000233
 8000b54:	2404bd00 	.word	0x2404bd00

08000b58 <DekodujRamke>:
// *chData - wskaźnik na dane do polecenia
// *chDataSize - ilość danych do polecenia
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t DekodujRamke(uint8_t chWe, uint8_t *chAdrZdalny, uint8_t *chZnakCzasu, uint8_t *chPolecenie, uint8_t *chRozmDanych, uint8_t *chDane, uint8_t chInterfejs)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	4603      	mov	r3, r0
 8000b66:	73fb      	strb	r3, [r7, #15]
	uint8_t n, chErr = ERR_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	75bb      	strb	r3, [r7, #22]
    //if (chProtoTimeout[chInterfejs] == 0)
   // {
     //   chProtoState[chInterfejs] = PR_ODB_NAGL;
    //}

    switch (chStanProtokolu[chInterfejs])
 8000b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b70:	4a73      	ldr	r2, [pc, #460]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000b72:	5cd3      	ldrb	r3, [r2, r3]
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	f200 80d5 	bhi.w	8000d24 <DekodujRamke+0x1cc>
 8000b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <DekodujRamke+0x28>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000ba5 	.word	0x08000ba5
 8000b84:	08000bdf 	.word	0x08000bdf
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000bf1 	.word	0x08000bf1
 8000b90:	08000c03 	.word	0x08000c03
 8000b94:	08000c15 	.word	0x08000c15
 8000b98:	08000c45 	.word	0x08000c45
 8000b9c:	08000c83 	.word	0x08000c83
 8000ba0:	08000c9b 	.word	0x08000c9b
    {
    case PR_ODBIOR_NAGL:	//testuj czy odebrano nagłówek
	if (chWe == NAGLOWEK)
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2baa      	cmp	r3, #170	@ 0xaa
 8000ba8:	d105      	bne.n	8000bb6 <DekodujRamke+0x5e>
	{
		chStanProtokolu[chInterfejs] = PR_ADRES_ODB;
 8000baa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bae:	4a64      	ldr	r2, [pc, #400]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	54d1      	strb	r1, [r2, r3]
            //chProtoTimeout[chInterfejs] = 30; //30ms
            //NVIC_ISER0 =  (1 << ((unsigned int)(RIT_IRQn) & 0x1F));     //włącz przerwanie RIT
	}
	else
	    chErr = ERR_ZLY_NAGL;
	break;
 8000bb4:	e0bf      	b.n	8000d36 <DekodujRamke+0x1de>
	    chErr = ERR_ZLY_NAGL;
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	75bb      	strb	r3, [r7, #22]
	break;
 8000bba:	e0bc      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ADRES_ODB:
    	if (chWe == chAdresLokalny)				//czy odebraliśmy własny adres sieciowy
 8000bbc:	4b61      	ldr	r3, [pc, #388]	@ (8000d44 <DekodujRamke+0x1ec>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d105      	bne.n	8000bd2 <DekodujRamke+0x7a>
    		chStanProtokolu[chInterfejs] = PR_ADRES_NAD;
 8000bc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bca:	4a5d      	ldr	r2, [pc, #372]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	54d1      	strb	r1, [r2, r3]
    	else
    		chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
    	break;
 8000bd0:	e0b1      	b.n	8000d36 <DekodujRamke+0x1de>
    		chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
 8000bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	54d1      	strb	r1, [r2, r3]
    	break;
 8000bdc:	e0ab      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ADRES_NAD:			//adres sieciowy strony zdalnej
    	*chAdrZdalny = chWe;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	701a      	strb	r2, [r3, #0]
    	chStanProtokolu[chInterfejs] = PR_ZNAK_CZASU;
 8000be4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000be8:	4a55      	ldr	r2, [pc, #340]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bea:	2103      	movs	r1, #3
 8000bec:	54d1      	strb	r1, [r2, r3]
    	break;
 8000bee:	e0a2      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ZNAK_CZASU:   //odbierz znacznik czasu
        *chZnakCzasu = chWe;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	701a      	strb	r2, [r3, #0]
        chStanProtokolu[chInterfejs] = PR_POLECENIE;
 8000bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bfa:	4a51      	ldr	r2, [pc, #324]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	54d1      	strb	r1, [r2, r3]
        break;
 8000c00:	e099      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_POLECENIE:
    	*chPolecenie = chWe;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	701a      	strb	r2, [r3, #0]
    	chStanProtokolu[chInterfejs] = PR_ROZM_DANYCH;
 8000c08:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c0e:	2105      	movs	r1, #5
 8000c10:	54d1      	strb	r1, [r2, r3]
    	break;
 8000c12:	e090      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ROZM_DANYCH:	//odebrano rozmiar danych
    	*chRozmDanych = chWe;
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	701a      	strb	r2, [r3, #0]
    	chLicznikDanych[chInterfejs] = 0;
 8000c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	54d1      	strb	r1, [r2, r3]
    	if (*chRozmDanych > 0)
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d005      	beq.n	8000c38 <DekodujRamke+0xe0>
    		chStanProtokolu[chInterfejs] = PR_DANE;
 8000c2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c30:	4a43      	ldr	r2, [pc, #268]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c32:	2106      	movs	r1, #6
 8000c34:	54d1      	strb	r1, [r2, r3]
    	else
    		chStanProtokolu[chInterfejs] = PR_CRC16_1;
    	break;
 8000c36:	e07e      	b.n	8000d36 <DekodujRamke+0x1de>
    		chStanProtokolu[chInterfejs] = PR_CRC16_1;
 8000c38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c3c:	4a40      	ldr	r2, [pc, #256]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c3e:	2107      	movs	r1, #7
 8000c40:	54d1      	strb	r1, [r2, r3]
    	break;
 8000c42:	e078      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_DANE:
    	*(chDane + chLicznikDanych[chInterfejs]) = chWe;
 8000c44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c48:	4a3f      	ldr	r2, [pc, #252]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	4413      	add	r3, r2
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	701a      	strb	r2, [r3, #0]
    	chLicznikDanych[chInterfejs]++;
 8000c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c5c:	5cd2      	ldrb	r2, [r2, r3]
 8000c5e:	3201      	adds	r2, #1
 8000c60:	b2d1      	uxtb	r1, r2
 8000c62:	4a39      	ldr	r2, [pc, #228]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c64:	54d1      	strb	r1, [r2, r3]
    	if (chLicznikDanych[chInterfejs] == *chRozmDanych)
 8000c66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c6a:	4a37      	ldr	r2, [pc, #220]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c6c:	5cd2      	ldrb	r2, [r2, r3]
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d15e      	bne.n	8000d34 <DekodujRamke+0x1dc>
    	{
    		chStanProtokolu[chInterfejs] = PR_CRC16_1;
 8000c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c7a:	4a31      	ldr	r2, [pc, #196]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	54d1      	strb	r1, [r2, r3]
    	}
    	break;
 8000c80:	e058      	b.n	8000d34 <DekodujRamke+0x1dc>

    case PR_CRC16_1:
    	sCrc16We = chWe * 0x100;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000c8c:	801a      	strh	r2, [r3, #0]
    	chStanProtokolu[chInterfejs] = PR_CRC16_2;
 8000c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c92:	4a2b      	ldr	r2, [pc, #172]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c94:	2108      	movs	r1, #8
 8000c96:	54d1      	strb	r1, [r2, r3]
    	break;
 8000c98:	e04d      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_CRC16_2:
    	sCrc16We += chWe;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000ca8:	801a      	strh	r2, [r3, #0]
		chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
 8000caa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cae:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	54d1      	strb	r1, [r2, r3]
		//dodać blokadę zasobu CRC
		InicjujCRC16(0, WIELOMIAN_CRC);
 8000cb4:	f241 0121 	movw	r1, #4129	@ 0x1021
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f84b 	bl	8000d54 <InicjujCRC16>
		*((volatile uint8_t *)&CRC->DR) = chAdresLokalny;
 8000cbe:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cc0:	4a20      	ldr	r2, [pc, #128]	@ (8000d44 <DekodujRamke+0x1ec>)
 8000cc2:	7812      	ldrb	r2, [r2, #0]
 8000cc4:	701a      	strb	r2, [r3, #0]
		*((volatile uint8_t *)&CRC->DR) = *chAdrZdalny;
 8000cc6:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	7013      	strb	r3, [r2, #0]
		*((volatile uint8_t *)&CRC->DR) = *chZnakCzasu;
 8000cce:	4a20      	ldr	r2, [pc, #128]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	7013      	strb	r3, [r2, #0]
		*((volatile uint8_t *)&CRC->DR) = *chPolecenie;
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	7013      	strb	r3, [r2, #0]
		*((volatile uint8_t *)&CRC->DR) = *chRozmDanych;
 8000cde:	4a1c      	ldr	r2, [pc, #112]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	7013      	strb	r3, [r2, #0]
		for (n=0; n<*chRozmDanych; n++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75fb      	strb	r3, [r7, #23]
 8000cea:	e008      	b.n	8000cfe <DekodujRamke+0x1a6>
			*((volatile uint8_t *)&CRC->DR) = *(chDane + n);
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	7013      	strb	r3, [r2, #0]
		for (n=0; n<*chRozmDanych; n++)
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	75fb      	strb	r3, [r7, #23]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	7dfa      	ldrb	r2, [r7, #23]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3f1      	bcc.n	8000cec <DekodujRamke+0x194>
		sCrc16Obl = (uint16_t)CRC->DR;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	82bb      	strh	r3, [r7, #20]
		//zdjąć blokadę zasobu CRC

		if (sCrc16We == sCrc16Obl)
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	8aba      	ldrh	r2, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d102      	bne.n	8000d1e <DekodujRamke+0x1c6>
			chErr = ERR_RAMKA_GOTOWA;
 8000d18:	230d      	movs	r3, #13
 8000d1a:	75bb      	strb	r3, [r7, #22]
		else
			chErr = ERR_CRC;
		break;
 8000d1c:	e00b      	b.n	8000d36 <DekodujRamke+0x1de>
			chErr = ERR_CRC;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	75bb      	strb	r3, [r7, #22]
		break;
 8000d22:	e008      	b.n	8000d36 <DekodujRamke+0x1de>

    default:
    	chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
 8000d24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d28:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	54d1      	strb	r1, [r2, r3]
    	chErr = ERR_ZLY_STAN_PROT;
 8000d2e:	230f      	movs	r3, #15
 8000d30:	75bb      	strb	r3, [r7, #22]
    	break;
 8000d32:	e000      	b.n	8000d36 <DekodujRamke+0x1de>
    	break;
 8000d34:	bf00      	nop
    }

    return chErr;
 8000d36:	7dbb      	ldrb	r3, [r7, #22]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2400022c 	.word	0x2400022c
 8000d44:	24000233 	.word	0x24000233
 8000d48:	24000234 	.word	0x24000234
 8000d4c:	2400023c 	.word	0x2400023c
 8000d50:	58024c00 	.word	0x58024c00

08000d54 <InicjujCRC16>:
// sInit - wartość inicjująca lizzenie
// sWielomian - wielomian CRC
//Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void InicjujCRC16(uint16_t sInit, uint16_t sWielomian)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	80fb      	strh	r3, [r7, #6]
 8000d60:	4613      	mov	r3, r2
 8000d62:	80bb      	strh	r3, [r7, #4]
	CRC->INIT = sInit;
 8000d64:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <InicjujCRC16+0x30>)
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	6113      	str	r3, [r2, #16]
	CRC->POL = sWielomian;
 8000d6a:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <InicjujCRC16+0x30>)
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	6153      	str	r3, [r2, #20]
	CRC->CR = CRC_CR_RESET | CRC_CR_POLYSIZE_0;
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <InicjujCRC16+0x30>)
 8000d72:	2209      	movs	r2, #9
 8000d74:	609a      	str	r2, [r3, #8]
	//CRC->CR = CRC_CR_RESET | CRC_CR_POLYSIZE_0 | CRC_CR_REV_IN_0;
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	58024c00 	.word	0x58024c00

08000d88 <PrzygotujRamke>:
// chDlugosc - ilość danych do polecenia
// *chRamka - wskaźnik na ramkę do wysłania
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t PrzygotujRamke(uint8_t chAdrZdalny, uint8_t chAdrLokalny,  uint8_t chZnakCzasu, uint8_t chPolecenie, uint8_t chRozmDanych, uint8_t *chDane, uint8_t *chRamka)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4608      	mov	r0, r1
 8000d92:	4611      	mov	r1, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	4623      	mov	r3, r4
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71bb      	strb	r3, [r7, #6]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	717b      	strb	r3, [r7, #5]
 8000da2:	4613      	mov	r3, r2
 8000da4:	713b      	strb	r3, [r7, #4]
    if (chRozmDanych > ROZM_DANYCH_UART)
 8000da6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000daa:	2bf6      	cmp	r3, #246	@ 0xf6
 8000dac:	d901      	bls.n	8000db2 <PrzygotujRamke+0x2a>
    	return(ERR_ZLA_ILOSC_DANYCH);
 8000dae:	2304      	movs	r3, #4
 8000db0:	e063      	b.n	8000e7a <PrzygotujRamke+0xf2>

    if ((chPolecenie & ~0x80) > PK_ILOSC_POLECEN)
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000db8:	2b0a      	cmp	r3, #10
 8000dba:	dd01      	ble.n	8000dc0 <PrzygotujRamke+0x38>
    	return(ERR_ZLE_POLECENIE);
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	e05c      	b.n	8000e7a <PrzygotujRamke+0xf2>

    *(chRamka++) = NAGLOWEK;
 8000dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dc6:	22aa      	movs	r2, #170	@ 0xaa
 8000dc8:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chAdrZdalny;		//ADRES ODBIORCY
 8000dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chAdrLokalny;	//ADERS NADAWCY
 8000dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dda:	79ba      	ldrb	r2, [r7, #6]
 8000ddc:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chZnakCzasu;
 8000dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000de4:	797a      	ldrb	r2, [r7, #5]
 8000de6:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chPolecenie;
 8000de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dee:	793a      	ldrb	r2, [r7, #4]
 8000df0:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chRozmDanych;
 8000df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000df8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dfc:	701a      	strb	r2, [r3, #0]

    //dodać blokadę zasobu CRC
    InicjujCRC16(0, WIELOMIAN_CRC);
 8000dfe:	f241 0121 	movw	r1, #4129	@ 0x1021
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ffa6 	bl	8000d54 <InicjujCRC16>
    CRC->DR = chAdrZdalny;
 8000e08:	4a1e      	ldr	r2, [pc, #120]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	6013      	str	r3, [r2, #0]
	CRC->DR = chAdrLokalny;
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	6013      	str	r3, [r2, #0]
	CRC->DR = chZnakCzasu;
 8000e14:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	6013      	str	r3, [r2, #0]
	CRC->DR = chPolecenie;
 8000e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e1c:	793b      	ldrb	r3, [r7, #4]
 8000e1e:	6013      	str	r3, [r2, #0]
	CRC->DR = chRozmDanych;
 8000e20:	4a18      	ldr	r2, [pc, #96]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e26:	6013      	str	r3, [r2, #0]

    for (uint8_t n=0; n<chRozmDanych; n++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e00e      	b.n	8000e4c <PrzygotujRamke+0xc4>
    	*(chRamka++) = CRC->DR =  *(chDane + n);
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e32:	4413      	add	r3, r2
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e38:	4611      	mov	r1, r2
 8000e3a:	6019      	str	r1, [r3, #0]
 8000e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
    for (uint8_t n=0; n<chRozmDanych; n++)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3eb      	bcc.n	8000e2e <PrzygotujRamke+0xa6>

    un8_16.dane16 = (uint16_t)CRC->DR;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <PrzygotujRamke+0x100>)
 8000e5e:	801a      	strh	r2, [r3, #0]
    //zdjąć blokadę zasobu CRC

    *(chRamka++) = un8_16.dane8[1];	//starszy
 8000e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <PrzygotujRamke+0x100>)
 8000e68:	7852      	ldrb	r2, [r2, #1]
 8000e6a:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = un8_16.dane8[0];	//młodszy
 8000e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <PrzygotujRamke+0x100>)
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	701a      	strb	r2, [r3, #0]
    return ERR_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58024c00 	.word	0x58024c00
 8000e88:	24000224 	.word	0x24000224

08000e8c <WyslijRamke>:
// *chFrame - wskaźnik na ramkę do wysłania
// chLen - ilość danych do polecenia
// Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t WyslijRamke(uint8_t chAdrZdalny, uint8_t chPolecenie, uint8_t chRozmDanych, uint8_t *chDane, uint8_t chInterfejs)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	71bb      	strb	r3, [r7, #6]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	717b      	strb	r3, [r7, #5]
	uint8_t chErr;
	uint8_t chLokalnyZnakCzasu = (nCzasSystemowy / 10) & 0xFF;
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <WyslijRamke+0xbc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a29      	ldr	r2, [pc, #164]	@ (8000f4c <WyslijRamke+0xc0>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	73bb      	strb	r3, [r7, #14]

    if (chPolecenie & 0x80)
 8000eae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da10      	bge.n	8000ed8 <WyslijRamke+0x4c>
    	chErr = PrzygotujRamke(chAdrZdalny, chAdresLokalny,  chLokalnyZnakCzasu, chPolecenie, chRozmDanych, chDane, chRamkaWyj);	//ramka telemetryczna
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <WyslijRamke+0xc4>)
 8000eb8:	7819      	ldrb	r1, [r3, #0]
 8000eba:	79bc      	ldrb	r4, [r7, #6]
 8000ebc:	7bba      	ldrb	r2, [r7, #14]
 8000ebe:	79f8      	ldrb	r0, [r7, #7]
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <WyslijRamke+0xc8>)
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	797b      	ldrb	r3, [r7, #5]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4623      	mov	r3, r4
 8000ece:	f7ff ff5b 	bl	8000d88 <PrzygotujRamke>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e012      	b.n	8000efe <WyslijRamke+0x72>
    else
    	chErr = PrzygotujRamke(chAdrZdalny, chAdresLokalny,  chZnakCzasu[chInterfejs], chPolecenie, chRozmDanych, chDane, chRamkaWyj);	//ramka odpowiedzi
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <WyslijRamke+0xc4>)
 8000eda:	7819      	ldrb	r1, [r3, #0]
 8000edc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <WyslijRamke+0xcc>)
 8000ee2:	5cd2      	ldrb	r2, [r2, r3]
 8000ee4:	79bc      	ldrb	r4, [r7, #6]
 8000ee6:	79f8      	ldrb	r0, [r7, #7]
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <WyslijRamke+0xc8>)
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	797b      	ldrb	r3, [r7, #5]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	f7ff ff47 	bl	8000d88 <PrzygotujRamke>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]

    if (chErr == ERR_OK)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11b      	bne.n	8000f3c <WyslijRamke+0xb0>
    {
    	switch (chInterfejs)
 8000f04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d014      	beq.n	8000f36 <WyslijRamke+0xaa>
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	dc0f      	bgt.n	8000f30 <WyslijRamke+0xa4>
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d002      	beq.n	8000f1a <WyslijRamke+0x8e>
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d010      	beq.n	8000f3a <WyslijRamke+0xae>
 8000f18:	e00a      	b.n	8000f30 <WyslijRamke+0xa4>
    	{
    	case INTERF_UART:	HAL_UART_Transmit(&hcom_uart [0],  chRamkaWyj, chRozmDanych + ROZM_CIALA_RAMKI, COM_POLL_TIMEOUT);	break;
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3308      	adds	r3, #8
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	490b      	ldr	r1, [pc, #44]	@ (8000f54 <WyslijRamke+0xc8>)
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <WyslijRamke+0xd0>)
 8000f2a:	f00e fab1 	bl	800f490 <HAL_UART_Transmit>
 8000f2e:	e005      	b.n	8000f3c <WyslijRamke+0xb0>
    	case INTERF_ETH:	break;
    	case INTERF_USB:	break;
    	default: chErr = ERR_ZLY_INTERFEJS;	break;
 8000f30:	2311      	movs	r3, #17
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e002      	b.n	8000f3c <WyslijRamke+0xb0>
    	case INTERF_USB:	break;
 8000f36:	bf00      	nop
 8000f38:	e000      	b.n	8000f3c <WyslijRamke+0xb0>
    	case INTERF_ETH:	break;
 8000f3a:	bf00      	nop
    	}
    }
    return chErr;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2404c120 	.word	0x2404c120
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	24000233 	.word	0x24000233
 8000f54:	24000240 	.word	0x24000240
 8000f58:	24000238 	.word	0x24000238
 8000f5c:	2407198c 	.word	0x2407198c

08000f60 <Wyslij_OK>:
// Parametry:
// [i] chInterfejs - interfejs komunikacyjny przez który ma być przesłana ramka
// Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t Wyslij_OK(uint8_t chInterfejs)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    return WyslijRamke(chAdresZdalny[chInterfejs], PK_OK, 0, 0, chInterfejs);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <Wyslij_OK+0x28>)
 8000f6e:	5cd0      	ldrb	r0, [r2, r3]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f7ff ff87 	bl	8000e8c <WyslijRamke>
 8000f7e:	4603      	mov	r3, r0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	24000230 	.word	0x24000230

08000f8c <HistogramRGB565>:
// [wy] histB - 32 elementowy, 16-bitowy histogram
// [we] rozmiar - ilość pikseli do analizy
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void HistogramRGB565(uint8_t *obrazRGB565, uint8_t *histR, uint8_t *histG, uint8_t *histB, uint32_t rozmiar)
{
 8000f8c:	b490      	push	{r4, r7}
 8000f8e:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8000f98:	f5a4 7405 	sub.w	r4, r4, #532	@ 0x214
 8000f9c:	6020      	str	r0, [r4, #0]
 8000f9e:	f507 7008 	add.w	r0, r7, #544	@ 0x220
 8000fa2:	f5a0 7006 	sub.w	r0, r0, #536	@ 0x218
 8000fa6:	6001      	str	r1, [r0, #0]
 8000fa8:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8000fac:	f5a1 7107 	sub.w	r1, r1, #540	@ 0x21c
 8000fb0:	600a      	str	r2, [r1, #0]
 8000fb2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000fb6:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8000fba:	6013      	str	r3, [r2, #0]
	uint8_t pix1, pix2;
	uint32_t histogramR[32], histogramG[64], histogramB[32], temp;

	for (uint8_t n=0; n<32; n++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 8000fc2:	e02a      	b.n	800101a <HistogramRGB565+0x8e>
	{
		histogramR[n] = 0;
 8000fc4:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8000fce:	443b      	add	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f843 2c90 	str.w	r2, [r3, #-144]
		histogramG[n] = 0;
 8000fd6:	f897 221b 	ldrb.w	r2, [r7, #539]	@ 0x21b
 8000fda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fde:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		histogramG[n+32] = 0;
 8000fe8:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8000fec:	f103 0220 	add.w	r2, r3, #32
 8000ff0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000ff4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		histogramB[n] = 0;
 8000ffe:	f897 221b 	ldrb.w	r2, [r7, #539]	@ 0x21b
 8001002:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001006:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800100a:	2100      	movs	r1, #0
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint8_t n=0; n<32; n++)
 8001010:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8001014:	3301      	adds	r3, #1
 8001016:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 800101a:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 800101e:	2b1f      	cmp	r3, #31
 8001020:	d9d0      	bls.n	8000fc4 <HistogramRGB565+0x38>
	}

	for (uint32_t n=0; n<rozmiar; n++)
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8001028:	e057      	b.n	80010da <HistogramRGB565+0x14e>
	{
		pix1 = *(obrazRGB565 + 2 * n + 0);		//B+G
 800102a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001034:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
		pix2 = *(obrazRGB565 + 2 * n + 1);		//G+R
 8001042:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	3301      	adds	r3, #1
 800104a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800104e:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210

		//bity czerwony i niebieski mają skalę 5-bitową (32), zielony 6-bitową (64).
		histogramR[pix1 >> 3]++;
 800105c:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8001060:	08db      	lsrs	r3, r3, #3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	0093      	lsls	r3, r2, #2
 8001068:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800106c:	443b      	add	r3, r7
 800106e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8001072:	1c59      	adds	r1, r3, #1
 8001074:	0093      	lsls	r3, r2, #2
 8001076:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800107a:	443b      	add	r3, r7
 800107c:	f843 1c90 	str.w	r1, [r3, #-144]
		histogramG[(pix2 & 0x1F) + ((pix1 & 0x07) << 3)]++;
 8001080:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001092:	4413      	add	r3, r2
 8001094:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001098:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 800109c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010a0:	1c51      	adds	r1, r2, #1
 80010a2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80010a6:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 80010aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		histogramB[pix2 >> 5]++;
 80010ae:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80010ba:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80010be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c2:	1c51      	adds	r1, r2, #1
 80010c4:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80010c8:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80010cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t n=0; n<rozmiar; n++)
 80010d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80010d4:	3301      	adds	r3, #1
 80010d6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80010da:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80010de:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d3a1      	bcc.n	800102a <HistogramRGB565+0x9e>
	}

	for (uint8_t n=0; n<32; n++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
 80010ec:	e040      	b.n	8001170 <HistogramRGB565+0x1e4>
	{
		temp = histogramR[n] / DZIELNIK_HIST_RGB;
 80010ee:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80010f8:	443b      	add	r3, r7
 80010fa:	f853 3c90 	ldr.w	r3, [r3, #-144]
 80010fe:	09db      	lsrs	r3, r3, #7
 8001100:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
		if (temp > 255)
 8001104:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001108:	2bff      	cmp	r3, #255	@ 0xff
 800110a:	d902      	bls.n	8001112 <HistogramRGB565+0x186>
			temp = 255;
 800110c:	23ff      	movs	r3, #255	@ 0xff
 800110e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
		*(histR+n) = temp;
 8001112:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8001116:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800111a:	f5a2 7206 	sub.w	r2, r2, #536	@ 0x218
 800111e:	6812      	ldr	r2, [r2, #0]
 8001120:	4413      	add	r3, r2
 8001122:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	701a      	strb	r2, [r3, #0]

		temp = histogramB[n] / DZIELNIK_HIST_RGB;
 800112a:	f897 2213 	ldrb.w	r2, [r7, #531]	@ 0x213
 800112e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001132:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113a:	09db      	lsrs	r3, r3, #7
 800113c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
		if (temp > 255)
 8001140:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001144:	2bff      	cmp	r3, #255	@ 0xff
 8001146:	d902      	bls.n	800114e <HistogramRGB565+0x1c2>
			temp = 255;
 8001148:	23ff      	movs	r3, #255	@ 0xff
 800114a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
		*(histB+n) = temp;
 800114e:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8001152:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8001156:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4413      	add	r3, r2
 800115e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
	for (uint8_t n=0; n<32; n++)
 8001166:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 800116a:	3301      	adds	r3, #1
 800116c:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
 8001170:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8001174:	2b1f      	cmp	r3, #31
 8001176:	d9ba      	bls.n	80010ee <HistogramRGB565+0x162>
	}

	for (uint8_t n=0; n<64; n++)
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 800117e:	e022      	b.n	80011c6 <HistogramRGB565+0x23a>
	{
		temp = histogramG[n] / DZIELNIK_HIST_RGB;
 8001180:	f897 2212 	ldrb.w	r2, [r7, #530]	@ 0x212
 8001184:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001188:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	09db      	lsrs	r3, r3, #7
 8001192:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
		if (temp > 255)
 8001196:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d902      	bls.n	80011a4 <HistogramRGB565+0x218>
			temp = 255;
 800119e:	23ff      	movs	r3, #255	@ 0xff
 80011a0:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
		*(histG+n) = temp;
 80011a4:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80011a8:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80011ac:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	701a      	strb	r2, [r3, #0]
	for (uint8_t n=0; n<64; n++)
 80011bc:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80011c0:	3301      	adds	r3, #1
 80011c2:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 80011c6:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 80011ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80011cc:	d9d8      	bls.n	8001180 <HistogramRGB565+0x1f4>
	}
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc90      	pop	{r4, r7}
 80011da:	4770      	bx	lr

080011dc <InitEth>:
// Inicjalizuje moduł ethernetowy
// Parametry: *pEth - wskaźnik na instancję modułu ethetrnetowego
// Zwraca: systemowy kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t  InitEth(ETH_HandleTypeDef* pEth)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]




	//stan = pEth->gState;
	HAL_ETH_Start(pEth);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f008 fd7f 	bl	8009ce8 <HAL_ETH_Start>
	//stan = pEth->gState;
	//ETH_DMADESCTTypeDef DMARxDescTabp
	//pEth->
	return ERR_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <AnalizujEth>:
// Odczytuje ramk ethernetową
// Parametry: *pEth - wskaźnik na instancję modułu ethetrnetowego
// Zwraca: systemowy kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t  AnalizujEth(ETH_HandleTypeDef* pEth)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	static uint8_t chPakiet[ETH_MAX_PACKET_SIZE];
	//uint32_t nRozmiar;
	HAL_ETH_ReadData(pEth, (void **)&chPakiet);
 80011fc:	4906      	ldr	r1, [pc, #24]	@ (8001218 <AnalizujEth+0x24>)
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f008 fdd4 	bl	8009dac <HAL_ETH_ReadData>

	WyswietlAnalizeEth(&chPakiet[8], &chPakiet[14]);
 8001204:	4905      	ldr	r1, [pc, #20]	@ (800121c <AnalizujEth+0x28>)
 8001206:	4806      	ldr	r0, [pc, #24]	@ (8001220 <AnalizujEth+0x2c>)
 8001208:	f004 f8ec 	bl	80053e4 <WyswietlAnalizeEth>
	return ERR_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	24000464 	.word	0x24000464
 800121c:	24000472 	.word	0x24000472
 8001220:	2400046c 	.word	0x2400046c

08001224 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <vApplicationGetIdleTaskMemory+0x2c>)
 8001234:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <vApplicationGetIdleTaskMemory+0x30>)
 800123a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	24000a5c 	.word	0x24000a5c
 8001254:	24000afc 	.word	0x24000afc

08001258 <KameraInit>:
// Inicjalizacja pracy kamery
// Parametry: brak
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef KameraInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]

	__HAL_RCC_DCMI_CLK_ENABLE();
 8001262:	4b46      	ldr	r3, [pc, #280]	@ (800137c <KameraInit+0x124>)
 8001264:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001268:	4a44      	ldr	r2, [pc, #272]	@ (800137c <KameraInit+0x124>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001272:	4b42      	ldr	r3, [pc, #264]	@ (800137c <KameraInit+0x124>)
 8001274:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001280:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <KameraInit+0x124>)
 8001282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001286:	4a3d      	ldr	r2, [pc, #244]	@ (800137c <KameraInit+0x124>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001290:	4b3a      	ldr	r3, [pc, #232]	@ (800137c <KameraInit+0x124>)
 8001292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

	//zegar timera taktowany jest z APB1 = 120MHz, prescaler = 0
	//kamera wymaga zegara 24MHz (6-27MHz), więc zegar trzeba podzielić na 5
	TIM14->CR1 |= TIM_CR1_CEN;		//włącz timer taktujacy kamerę
 800129e:	4b38      	ldr	r3, [pc, #224]	@ (8001380 <KameraInit+0x128>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a37      	ldr	r2, [pc, #220]	@ (8001380 <KameraInit+0x128>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]
	TIM14->ARR = KAMERA_DZIELNIK_ZEGARA - 1;		//częstotliwość PWM
 80012aa:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <KameraInit+0x128>)
 80012ac:	2205      	movs	r2, #5
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM14->CCR1 = KAMERA_WYPELN_PWM;			//wypełnienie PWM
 80012b0:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <KameraInit+0x128>)
 80012b2:	2203      	movs	r2, #3
 80012b4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM14->CCER |= TIM_CCER_CC1E;	//włącz wyjście timera
 80012b6:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <KameraInit+0x128>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a31      	ldr	r2, [pc, #196]	@ (8001380 <KameraInit+0x128>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6213      	str	r3, [r2, #32]

	KameraPWDN(GPIO_PIN_SET);		//włącz PWND
 80012c2:	2001      	movs	r0, #1
 80012c4:	f001 f86c 	bl	80023a0 <KameraPWDN>
	HAL_Delay(10);	//power on period
 80012c8:	200a      	movs	r0, #10
 80012ca:	f004 fbb3 	bl	8005a34 <HAL_Delay>
	KameraPWDN(GPIO_PIN_RESET);		//wyłącz PWND
 80012ce:	2000      	movs	r0, #0
 80012d0:	f001 f866 	bl	80023a0 <KameraPWDN>
	HAL_Delay(30);
 80012d4:	201e      	movs	r0, #30
 80012d6:	f004 fbad 	bl	8005a34 <HAL_Delay>

	err = SprawdzKamere();		//sprawdź czy mamy kontakt z kamerą
 80012da:	f000 fb89 	bl	80019f0 <SprawdzKamere>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
	if (err)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <KameraInit+0x94>
		return err;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	e043      	b.n	8001374 <KameraInit+0x11c>

	Wyslij_I2C_Kamera(0x3103, 0x93);	//PLL clock select: [1] PLL input clock: 1=from pre-divider
 80012ec:	2193      	movs	r1, #147	@ 0x93
 80012ee:	f243 1003 	movw	r0, #12547	@ 0x3103
 80012f2:	f000 fad1 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3008, 0x82);	//system control 00: [7] software reset mode, [6] software power down mode {def=0x02}
 80012f6:	2182      	movs	r1, #130	@ 0x82
 80012f8:	f243 0008 	movw	r0, #12296	@ 0x3008
 80012fc:	f000 facc 	bl	8001898 <Wyslij_I2C_Kamera>
	HAL_Delay(30);
 8001300:	201e      	movs	r0, #30
 8001302:	f004 fb97 	bl	8005a34 <HAL_Delay>
	/*err = Wyslij_Blok_Kamera(ov5642_dvp_fmt_global_init);		//174ms @ 20MHz
	if (err)
		return err;*/
	err = Wyslij_Blok_Kamera(OV5642_RGB_QVGA);					//150ms @ 20MHz
 8001306:	481f      	ldr	r0, [pc, #124]	@ (8001384 <KameraInit+0x12c>)
 8001308:	f000 fb16 	bl	8001938 <Wyslij_Blok_Kamera>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
	if (err)
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <KameraInit+0xc2>
		return err;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	e02c      	b.n	8001374 <KameraInit+0x11c>

	//ustaw domyślne parametry pracy kamery
	KonfKam.sSzerWe = 1280;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <KameraInit+0x130>)
 800131c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001320:	801a      	strh	r2, [r3, #0]
	KonfKam.sWysWe = 960;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <KameraInit+0x130>)
 8001324:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8001328:	805a      	strh	r2, [r3, #2]
	KonfKam.sSzerWy = 320;
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <KameraInit+0x130>)
 800132c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001330:	809a      	strh	r2, [r3, #4]
	KonfKam.sWysWy = 240;
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <KameraInit+0x130>)
 8001334:	22f0      	movs	r2, #240	@ 0xf0
 8001336:	80da      	strh	r2, [r3, #6]
	KonfKam.chTrybDiagn = 0;	//brak trybu diagnostycznego
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <KameraInit+0x130>)
 800133a:	2200      	movs	r2, #0
 800133c:	721a      	strb	r2, [r3, #8]
	KonfKam.chFlagi = 0;
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <KameraInit+0x130>)
 8001340:	2200      	movs	r2, #0
 8001342:	725a      	strb	r2, [r3, #9]

	err = UstawKamere(&KonfKam);
 8001344:	4810      	ldr	r0, [pc, #64]	@ (8001388 <KameraInit+0x130>)
 8001346:	f000 f821 	bl	800138c <UstawKamere>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
	if (err)
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <KameraInit+0x100>
		return err;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	e00d      	b.n	8001374 <KameraInit+0x11c>

	Wyslij_I2C_Kamera(0x4300, 0x6F);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 8001358:	216f      	movs	r1, #111	@ 0x6f
 800135a:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800135e:	f000 fa9b 	bl	8001898 <Wyslij_I2C_Kamera>

	return RozpocznijPraceDCMI(KonfKam.chFlagi & FUK1_ZDJ_FILM);	//1 = zdjecie, 0 = film (tylko ten jeden bit)
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <KameraInit+0x130>)
 8001364:	7a5b      	ldrb	r3, [r3, #9]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f881 	bl	8001474 <RozpocznijPraceDCMI>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	58024400 	.word	0x58024400
 8001380:	40002000 	.word	0x40002000
 8001384:	08016d60 	.word	0x08016d60
 8001388:	2404bd00 	.word	0x2404bd00

0800138c <UstawKamere>:
// konfiguruje wybrane parametry kamery
// Parametry: konf - struktura konfiguracji kamery
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef UstawKamere(typKonfKam *konf)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	//uint8_t chReg;

	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 8001394:	217f      	movs	r1, #127	@ 0x7f
 8001396:	f245 0001 	movw	r0, #20481	@ 0x5001
 800139a:	f000 fa7d 	bl	8001898 <Wyslij_I2C_Kamera>

	//ustaw rozdzielczość wejściową
	Wyslij_I2C_Kamera(0x3804, (uint8_t)(konf->sSzerWe>>8));		//Timing HW: [3:0] Horizontal width high byte 0x500=1280,  0x280=640, 0x140=320 (scale input}
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	0a1b      	lsrs	r3, r3, #8
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4619      	mov	r1, r3
 80013aa:	f643 0004 	movw	r0, #14340	@ 0x3804
 80013ae:	f000 fa73 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, (uint8_t)(konf->sSzerWe & 0xFF));	//Timing HW: [7:0] Horizontal width low byte
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4619      	mov	r1, r3
 80013ba:	f643 0005 	movw	r0, #14341	@ 0x3805
 80013be:	f000 fa6b 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, (uint8_t)(konf->sWysWe>>8));			//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480, 0x0F0=240
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	885b      	ldrh	r3, [r3, #2]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	f643 0006 	movw	r0, #14342	@ 0x3806
 80013d2:	f000 fa61 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, (uint8_t)(konf->sWysWe & 0xFF));		//Timing VH: [7:0] HREF vertical height low byte
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	885b      	ldrh	r3, [r3, #2]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	f643 0007 	movw	r0, #14343	@ 0x3807
 80013e2:	f000 fa59 	bl	8001898 <Wyslij_I2C_Kamera>

	//ustaw rozdzielczość wyjściową
	Wyslij_I2C_Kamera(0x3808, (uint8_t)(konf->sSzerWy>>8));		//Timing DVPHO: [3:0] output horizontal width high byte [11:8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	889b      	ldrh	r3, [r3, #4]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4619      	mov	r1, r3
 80013f2:	f643 0008 	movw	r0, #14344	@ 0x3808
 80013f6:	f000 fa4f 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3809, (uint8_t)(konf->sSzerWy & 0xFF));	//Timing DVPHO: [7:0] output horizontal width low byte [7:0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	889b      	ldrh	r3, [r3, #4]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	f643 0009 	movw	r0, #14345	@ 0x3809
 8001406:	f000 fa47 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380a, (uint8_t)(konf->sWysWy>>8));			//Timing DVPVO: [3:0] output vertical height high byte [11:8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	88db      	ldrh	r3, [r3, #6]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	f643 000a 	movw	r0, #14346	@ 0x380a
 800141a:	f000 fa3d 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380b, (uint8_t)(konf->sWysWy & 0xFF));		//Timing DVPVO: [7:0] output vertical height low byte [7:0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	88db      	ldrh	r3, [r3, #6]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	f643 000b 	movw	r0, #14347	@ 0x380b
 800142a:	f000 fa35 	bl	8001898 <Wyslij_I2C_Kamera>

	//wzór testowy
	switch(konf->chTrybDiagn)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7a1b      	ldrb	r3, [r3, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d002      	beq.n	800143c <UstawKamere+0xb0>
 8001436:	2b02      	cmp	r3, #2
 8001438:	d00b      	beq.n	8001452 <UstawKamere+0xc6>
 800143a:	e015      	b.n	8001468 <UstawKamere+0xdc>
	{
	case TDK_KRATA_CB:	//czarnobiała karata
		Wyslij_I2C_Kamera(0x503d , 0x85);	//test pattern: B/W square
 800143c:	2185      	movs	r1, #133	@ 0x85
 800143e:	f245 003d 	movw	r0, #20541	@ 0x503d
 8001442:	f000 fa29 	bl	8001898 <Wyslij_I2C_Kamera>
		Wyslij_I2C_Kamera(0x503e, 0x1a);	//PRE ISP TEST SETTING2 [7] reserved, [6:4] 1=random data pattern seed enable, [3] 1=test pattern square b/w mode, [2] 1=add test pattern on image data, [1:0] 0=color bar, 1=random data, 2=square data, 3=black image
 8001446:	211a      	movs	r1, #26
 8001448:	f245 003e 	movw	r0, #20542	@ 0x503e
 800144c:	f000 fa24 	bl	8001898 <Wyslij_I2C_Kamera>
		break;
 8001450:	e00a      	b.n	8001468 <UstawKamere+0xdc>

	case TDK_PASKI:		//7 pionowych pasków
		Wyslij_I2C_Kamera(0x503d , 0x80);	//test pattern: color bar
 8001452:	2180      	movs	r1, #128	@ 0x80
 8001454:	f245 003d 	movw	r0, #20541	@ 0x503d
 8001458:	f000 fa1e 	bl	8001898 <Wyslij_I2C_Kamera>
		Wyslij_I2C_Kamera(0x503e, 0x00);	//PRE ISP TEST SETTING2 [7] reserved, [6:4] 1=random data pattern seed enable, [3] 1=test pattern square b/w mode, [2] 1=add test pattern on image data, [1:0] 0=color bar, 1=random data, 2=square data, 3=black image
 800145c:	2100      	movs	r1, #0
 800145e:	f245 003e 	movw	r0, #20542	@ 0x503e
 8001462:	f000 fa19 	bl	8001898 <Wyslij_I2C_Kamera>
		break;
 8001466:	bf00      	nop

	case TDK_PRACA:		//normalna praca
	default:
	}

	return 0;
 8001468:	2300      	movs	r3, #0
	//ustaw rotację w poziomie i pionie
	//chReg = 0x80 + ((konf->chFlagi && FUK1_OBR_PION) << 6) +  ((konf->chFlagi && FUK1_OBR_POZ) << 5);
	//return Wyslij_I2C_Kamera(0x3818, chReg);	//TIMING TC REG18: [6] mirror, [5] Vertial flip, [4] 1=thumbnail mode,  [3] 1=compression, [1] vertical subsample 1/4, [0] vertical subsample 1/2  <def:0x80>
	//for the mirror function it is necessary to set registers 0x3621 [5:4] and 0x3801
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <RozpocznijPraceDCMI>:
// uruchamia DCMI w trybie pojedyńczego zdjęcia jako aparat lub ciagłej pracy jako kamera
// Parametry: chAparat - 1 = tryb pojedyńczego zdjęcia, 0 = tryb filmu
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef RozpocznijPraceDCMI(uint8_t chAparat)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef err;

	hdcmi.Instance = DCMI;
 800147e:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 8001480:	4a3f      	ldr	r2, [pc, #252]	@ (8001580 <RozpocznijPraceDCMI+0x10c>)
 8001482:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001490:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001496:	4b39      	ldr	r3, [pc, #228]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 8001498:	2240      	movs	r2, #64	@ 0x40
 800149a:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800149c:	4b37      	ldr	r3, [pc, #220]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80014a2:	4b36      	ldr	r3, [pc, #216]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80014ae:	4b33      	ldr	r3, [pc, #204]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80014b4:	4b31      	ldr	r3, [pc, #196]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80014ba:	4b30      	ldr	r3, [pc, #192]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014bc:	2200      	movs	r2, #0
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80014c0:	4b2e      	ldr	r3, [pc, #184]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	631a      	str	r2, [r3, #48]	@ 0x30
	hdcmi.Instance->IER = DCMI_IT_FRAME | DCMI_IT_OVR | DCMI_IT_ERR | DCMI_IT_VSYNC | DCMI_IT_LINE;
 80014c6:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	221f      	movs	r2, #31
 80014cc:	60da      	str	r2, [r3, #12]
	err = HAL_DCMI_Init(&hdcmi);
 80014ce:	482b      	ldr	r0, [pc, #172]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 80014d0:	f004 fd52 	bl	8005f78 <HAL_DCMI_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
	if (err)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <RozpocznijPraceDCMI+0x6e>
		return err;
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	e047      	b.n	8001572 <RozpocznijPraceDCMI+0xfe>

	//konfiguracja DMA do DCMI
	hdma_dcmi.Instance = DMA1_Stream0;
 80014e2:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 80014e4:	4a28      	ldr	r2, [pc, #160]	@ (8001588 <RozpocznijPraceDCMI+0x114>)
 80014e6:	601a      	str	r2, [r3, #0]
	hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80014e8:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 80014ea:	224b      	movs	r2, #75	@ 0x4b
 80014ec:	605a      	str	r2, [r3, #4]
	hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ee:	4b25      	ldr	r3, [pc, #148]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
	hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
	hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 80014fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001500:	611a      	str	r2, [r3, #16]
	hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 8001504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001508:	615a      	str	r2, [r3, #20]
	hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 800150c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001510:	619a      	str	r2, [r3, #24]
	if (chAparat)		//1 = zdjecie, 0 = film
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <RozpocznijPraceDCMI+0xac>
		hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
 800151e:	e003      	b.n	8001528 <RozpocznijPraceDCMI+0xb4>
	else
		hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 8001522:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001526:	61da      	str	r2, [r3, #28]
	hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 800152a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800152e:	621a      	str	r2, [r3, #32]
	hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
	err = HAL_DMA_Init(&hdma_dcmi);
 8001536:	4813      	ldr	r0, [pc, #76]	@ (8001584 <RozpocznijPraceDCMI+0x110>)
 8001538:	f004 ffec 	bl	8006514 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
	if (err)
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <RozpocznijPraceDCMI+0xd6>
		return err;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	e013      	b.n	8001572 <RozpocznijPraceDCMI+0xfe>

	//Konfiguracja transferu DMA z DCMI do pamięci
	if (chAparat)		//1 = zdjecie, 0 = film
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <RozpocznijPraceDCMI+0xee>
		return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 8001550:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <RozpocznijPraceDCMI+0x118>)
 8001552:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001556:	2102      	movs	r1, #2
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 800155a:	f004 fd87 	bl	800606c <HAL_DCMI_Start_DMA>
 800155e:	4603      	mov	r3, r0
 8001560:	e007      	b.n	8001572 <RozpocznijPraceDCMI+0xfe>
	else
		return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <RozpocznijPraceDCMI+0x118>)
 8001564:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001568:	2100      	movs	r1, #0
 800156a:	4804      	ldr	r0, [pc, #16]	@ (800157c <RozpocznijPraceDCMI+0x108>)
 800156c:	f004 fd7e 	bl	800606c <HAL_DCMI_Start_DMA>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2404bd7c 	.word	0x2404bd7c
 8001580:	48020000 	.word	0x48020000
 8001584:	2404bdcc 	.word	0x2404bdcc
 8001588:	40020010 	.word	0x40020010
 800158c:	24000cfc 	.word	0x24000cfc

08001590 <InitKamera5>:
}



HAL_StatusTypeDef InitKamera5(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err;

	TIM14->CR1 |= TIM_CR1_CEN;		//włącz timer taktujacy kamerę
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <InitKamera5+0x168>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a57      	ldr	r2, [pc, #348]	@ (80016f8 <InitKamera5+0x168>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]
	TIM14->ARR = KAMERA_DZIELNIK_ZEGARA - 1;	//częstotliwość PWM
 80015a2:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <InitKamera5+0x168>)
 80015a4:	2205      	movs	r2, #5
 80015a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM14->CCR1 = KAMERA_WYPELN_PWM;			//wypełnienie PWM
 80015a8:	4b53      	ldr	r3, [pc, #332]	@ (80016f8 <InitKamera5+0x168>)
 80015aa:	2203      	movs	r2, #3
 80015ac:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM14->CCER |= TIM_CCER_CC1E;	//włącz wyjście timera
 80015ae:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <InitKamera5+0x168>)
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	4a51      	ldr	r2, [pc, #324]	@ (80016f8 <InitKamera5+0x168>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6213      	str	r3, [r2, #32]

	Wyslij_I2C_Kamera(0x3103, 0x93);	//PLL clock select: [1] PLL input clock: 1=from pre-divider
 80015ba:	2193      	movs	r1, #147	@ 0x93
 80015bc:	f243 1003 	movw	r0, #12547	@ 0x3103
 80015c0:	f000 f96a 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3008, 0x82);	//system control 00: [7] software reset mode, [6] software power down mode {def=0x02}
 80015c4:	2182      	movs	r1, #130	@ 0x82
 80015c6:	f243 0008 	movw	r0, #12296	@ 0x3008
 80015ca:	f000 f965 	bl	8001898 <Wyslij_I2C_Kamera>
	HAL_Delay(100);
 80015ce:	2064      	movs	r0, #100	@ 0x64
 80015d0:	f004 fa30 	bl	8005a34 <HAL_Delay>
	//Wyslij_Blok_Kamera(ov5642_dvp_fmt_global_init);
	err = Wyslij_Blok_Kamera(OV5642_RGB_QVGA);					//150ms
 80015d4:	4849      	ldr	r0, [pc, #292]	@ (80016fc <InitKamera5+0x16c>)
 80015d6:	f000 f9af 	bl	8001938 <Wyslij_Blok_Kamera>
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	if (err)
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <InitKamera5+0x58>
		return err;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	e083      	b.n	80016f0 <InitKamera5+0x160>
	//Wyslij_I2C_Kamera(0x4300, 0x61);
	//Wyslij_I2C_Kamera(0x4745, 0x02);	//data order [1:0]: 0=D[9:0], 1=D[7:0],D[9:8], 2=D[1:0],D[9:2]
	//Wyslij_I2C_Kamera(0x4741, 0x07);	//test pattern [2] test pattern enable, [1] pattern 0/1, [0] 0=pattern 10-bit, 1=8-bit
	//Wyslij_I2C_Kamera(0x4741 , 0x4);	//test pattern: DLI

	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 80015e8:	217f      	movs	r1, #127	@ 0x7f
 80015ea:	f245 0001 	movw	r0, #20481	@ 0x5001
 80015ee:	f000 f953 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3804, 0x05);	//Timing HW: [3:0] Horizontal width high byte 0x500=1280,  0x280=640, 0x140=320 (scale input}
 80015f2:	2105      	movs	r1, #5
 80015f4:	f643 0004 	movw	r0, #14340	@ 0x3804
 80015f8:	f000 f94e 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, 0x00);	//Timing HW: [7:0] Horizontal width low byte
 80015fc:	2100      	movs	r1, #0
 80015fe:	f643 0005 	movw	r0, #14341	@ 0x3805
 8001602:	f000 f949 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, 0x03);	//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480, 0x0F0=240
 8001606:	2103      	movs	r1, #3
 8001608:	f643 0006 	movw	r0, #14342	@ 0x3806
 800160c:	f000 f944 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, 0xC0);	//Timing VH: [7:0] HREF vertical height low byte
 8001610:	21c0      	movs	r1, #192	@ 0xc0
 8001612:	f643 0007 	movw	r0, #14343	@ 0x3807
 8001616:	f000 f93f 	bl	8001898 <Wyslij_I2C_Kamera>

	Wyslij_I2C_Kamera(0x4300, 0x6F);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 800161a:	216f      	movs	r1, #111	@ 0x6f
 800161c:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8001620:	f000 f93a 	bl	8001898 <Wyslij_I2C_Kamera>

	//konfiguracja DCMI
	hdcmi.Instance = DCMI;
 8001624:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <InitKamera5+0x170>)
 8001626:	4a37      	ldr	r2, [pc, #220]	@ (8001704 <InitKamera5+0x174>)
 8001628:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800162a:	4b35      	ldr	r3, [pc, #212]	@ (8001700 <InitKamera5+0x170>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001630:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <InitKamera5+0x170>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001636:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <InitKamera5+0x170>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800163c:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <InitKamera5+0x170>)
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <InitKamera5+0x170>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <InitKamera5+0x170>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800164e:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <InitKamera5+0x170>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <InitKamera5+0x170>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <InitKamera5+0x170>)
 800165c:	2200      	movs	r2, #0
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <InitKamera5+0x170>)
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <InitKamera5+0x170>)
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	@ 0x30
	hdcmi.Instance->IER = DCMI_IT_FRAME | DCMI_IT_OVR | DCMI_IT_ERR | DCMI_IT_VSYNC | DCMI_IT_LINE;
 800166c:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <InitKamera5+0x170>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	221f      	movs	r2, #31
 8001672:	60da      	str	r2, [r3, #12]
	err = HAL_DCMI_Init(&hdcmi);
 8001674:	4822      	ldr	r0, [pc, #136]	@ (8001700 <InitKamera5+0x170>)
 8001676:	f004 fc7f 	bl	8005f78 <HAL_DCMI_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
	if (err)
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <InitKamera5+0xf8>
		return err;
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	e033      	b.n	80016f0 <InitKamera5+0x160>

    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <InitKamera5+0x178>)
 800168a:	4a20      	ldr	r2, [pc, #128]	@ (800170c <InitKamera5+0x17c>)
 800168c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <InitKamera5+0x178>)
 8001690:	224b      	movs	r2, #75	@ 0x4b
 8001692:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <InitKamera5+0x178>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <InitKamera5+0x178>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <InitKamera5+0x178>)
 80016a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016a6:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <InitKamera5+0x178>)
 80016aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016ae:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <InitKamera5+0x178>)
 80016b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <InitKamera5+0x178>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <InitKamera5+0x178>)
 80016c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016c4:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <InitKamera5+0x178>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	@ 0x24
    err = HAL_DMA_Init(&hdma_dcmi);
 80016cc:	480e      	ldr	r0, [pc, #56]	@ (8001708 <InitKamera5+0x178>)
 80016ce:	f004 ff21 	bl	8006514 <HAL_DMA_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	if (err)
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <InitKamera5+0x150>
		return err;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	e007      	b.n	80016f0 <InitKamera5+0x160>

	//Konfiguracja transferu DMA z DCMI do pamięci
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 80016e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <InitKamera5+0x180>)
 80016e2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80016e6:	2100      	movs	r1, #0
 80016e8:	4805      	ldr	r0, [pc, #20]	@ (8001700 <InitKamera5+0x170>)
 80016ea:	f004 fcbf 	bl	800606c <HAL_DCMI_Start_DMA>
 80016ee:	4603      	mov	r3, r0
	//return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM); */
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40002000 	.word	0x40002000
 80016fc:	08016d60 	.word	0x08016d60
 8001700:	2404bd7c 	.word	0x2404bd7c
 8001704:	48020000 	.word	0x48020000
 8001708:	2404bdcc 	.word	0x2404bdcc
 800170c:	40020010 	.word	0x40020010
 8001710:	24000cfc 	.word	0x24000cfc

08001714 <ZrobZdjecie>:
// [i] - sSzerokosc - szerokość zdjecia w pikselach
// [i] - sWysokosc - wysokość zdjęcia w pikselach
// Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef ZrobZdjecie(int16_t sSzerokosc, uint16_t sWysokosc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	460a      	mov	r2, r1
 800171e:	80fb      	strh	r3, [r7, #6]
 8001720:	4613      	mov	r3, r2
 8001722:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef err;

	err = HAL_DCMI_Stop(&hdcmi);
 8001724:	4829      	ldr	r0, [pc, #164]	@ (80017cc <ZrobZdjecie+0xb8>)
 8001726:	f004 fd63 	bl	80061f0 <HAL_DCMI_Stop>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]
	if (err)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <ZrobZdjecie+0x24>
		return err;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	e045      	b.n	80017c4 <ZrobZdjecie+0xb0>

	//skalowanie obrazu
	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 8001738:	217f      	movs	r1, #127	@ 0x7f
 800173a:	f245 0001 	movw	r0, #20481	@ 0x5001
 800173e:	f000 f8ab 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3804, 0x05);	//Timing HW: [3:0] Horizontal width high byte 0x500=1280,  0x280=640, 0x140=320 (scale input}
 8001742:	2105      	movs	r1, #5
 8001744:	f643 0004 	movw	r0, #14340	@ 0x3804
 8001748:	f000 f8a6 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, 0x00);	//Timing HW: [7:0] Horizontal width low byte
 800174c:	2100      	movs	r1, #0
 800174e:	f643 0005 	movw	r0, #14341	@ 0x3805
 8001752:	f000 f8a1 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, 0x03);	//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480, 0x0F0=240
 8001756:	2103      	movs	r1, #3
 8001758:	f643 0006 	movw	r0, #14342	@ 0x3806
 800175c:	f000 f89c 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, 0xC0);	//Timing VH: [7:0] HREF vertical height low byte
 8001760:	21c0      	movs	r1, #192	@ 0xc0
 8001762:	f643 0007 	movw	r0, #14343	@ 0x3807
 8001766:	f000 f897 	bl	8001898 <Wyslij_I2C_Kamera>

	//ustaw rozmiar obrazu
	Wyslij_I2C_Kamera(0x3808, (sSzerokosc & 0xFF00)>>8);	//Timing DVPHO: [3:0] output horizontal width high byte [11:8]
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	121b      	asrs	r3, r3, #8
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4619      	mov	r1, r3
 8001774:	f643 0008 	movw	r0, #14344	@ 0x3808
 8001778:	f000 f88e 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3809, (sSzerokosc & 0x00FF));		//Timing DVPHO: [7:0] output horizontal width low byte [7:0]
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4619      	mov	r1, r3
 8001782:	f643 0009 	movw	r0, #14345	@ 0x3809
 8001786:	f000 f887 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380a, (sWysokosc & 0xFF00)>>8);		//Timing DVPVO: [3:0] output vertical height high byte [11:8]
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b29b      	uxth	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	4619      	mov	r1, r3
 8001794:	f643 000a 	movw	r0, #14346	@ 0x380a
 8001798:	f000 f87e 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380b, (sWysokosc & 0x00FF));		//Timing DVPVO: [7:0] output vertical height low byte [7:0]
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	4619      	mov	r1, r3
 80017a2:	f643 000b 	movw	r0, #14347	@ 0x380b
 80017a6:	f000 f877 	bl	8001898 <Wyslij_I2C_Kamera>

	Wyslij_I2C_Kamera(0x4300, 0x6F);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 80017aa:	216f      	movs	r1, #111	@ 0x6f
 80017ac:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 80017b0:	f000 f872 	bl	8001898 <Wyslij_I2C_Kamera>

	//Konfiguracja transferu DMA z DCMI do pamięci
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 80017b4:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <ZrobZdjecie+0xbc>)
 80017b6:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80017ba:	2102      	movs	r1, #2
 80017bc:	4803      	ldr	r0, [pc, #12]	@ (80017cc <ZrobZdjecie+0xb8>)
 80017be:	f004 fc55 	bl	800606c <HAL_DCMI_Start_DMA>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2404bd7c 	.word	0x2404bd7c
 80017d0:	24000cfc 	.word	0x24000cfc

080017d4 <ZrobZdjecie2>:

HAL_StatusTypeDef ZrobZdjecie2(int16_t sSzerokosc, uint16_t sWysokosc, uint8_t rej)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	460b      	mov	r3, r1
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef err;

	err = HAL_DCMI_Stop(&hdcmi);
 80017e6:	482a      	ldr	r0, [pc, #168]	@ (8001890 <ZrobZdjecie2+0xbc>)
 80017e8:	f004 fd02 	bl	80061f0 <HAL_DCMI_Stop>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
	if (err)
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <ZrobZdjecie2+0x26>
		return err;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	e046      	b.n	8001888 <ZrobZdjecie2+0xb4>

	//skalowanie obrazu
	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 80017fa:	217f      	movs	r1, #127	@ 0x7f
 80017fc:	f245 0001 	movw	r0, #20481	@ 0x5001
 8001800:	f000 f84a 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3804, 0x05);	//Timing HW: [3:0] Horizontal width high byte 0x500=1280,  0x280=640, 0x140=320 (scale input}
 8001804:	2105      	movs	r1, #5
 8001806:	f643 0004 	movw	r0, #14340	@ 0x3804
 800180a:	f000 f845 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, 0x00);	//Timing HW: [7:0] Horizontal width low byte
 800180e:	2100      	movs	r1, #0
 8001810:	f643 0005 	movw	r0, #14341	@ 0x3805
 8001814:	f000 f840 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, 0x03);	//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480, 0x0F0=240
 8001818:	2103      	movs	r1, #3
 800181a:	f643 0006 	movw	r0, #14342	@ 0x3806
 800181e:	f000 f83b 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, 0xC0);	//Timing VH: [7:0] HREF vertical height low byte
 8001822:	21c0      	movs	r1, #192	@ 0xc0
 8001824:	f643 0007 	movw	r0, #14343	@ 0x3807
 8001828:	f000 f836 	bl	8001898 <Wyslij_I2C_Kamera>

	//ustaw rozmiar obrazu
	Wyslij_I2C_Kamera(0x3808, (sSzerokosc & 0xFF00)>>8);	//Timing DVPHO: [3:0] output horizontal width high byte [11:8]
 800182c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001830:	121b      	asrs	r3, r3, #8
 8001832:	b2db      	uxtb	r3, r3
 8001834:	4619      	mov	r1, r3
 8001836:	f643 0008 	movw	r0, #14344	@ 0x3808
 800183a:	f000 f82d 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3809, (sSzerokosc & 0x00FF));		//Timing DVPHO: [7:0] output horizontal width low byte [7:0]
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	f643 0009 	movw	r0, #14345	@ 0x3809
 8001848:	f000 f826 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380a, (sWysokosc & 0xFF00)>>8);		//Timing DVPVO: [3:0] output vertical height high byte [11:8]
 800184c:	88bb      	ldrh	r3, [r7, #4]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	f643 000a 	movw	r0, #14346	@ 0x380a
 800185a:	f000 f81d 	bl	8001898 <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380b, (sWysokosc & 0x00FF));		//Timing DVPVO: [7:0] output vertical height low byte [7:0]
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	f643 000b 	movw	r0, #14347	@ 0x380b
 8001868:	f000 f816 	bl	8001898 <Wyslij_I2C_Kamera>

	Wyslij_I2C_Kamera(0x4300, rej);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	4619      	mov	r1, r3
 8001870:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8001874:	f000 f810 	bl	8001898 <Wyslij_I2C_Kamera>

	//Konfiguracja transferu DMA z DCMI do pamięci
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 8001878:	4a06      	ldr	r2, [pc, #24]	@ (8001894 <ZrobZdjecie2+0xc0>)
 800187a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800187e:	2102      	movs	r1, #2
 8001880:	4803      	ldr	r0, [pc, #12]	@ (8001890 <ZrobZdjecie2+0xbc>)
 8001882:	f004 fbf3 	bl	800606c <HAL_DCMI_Start_DMA>
 8001886:	4603      	mov	r3, r0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2404bd7c 	.word	0x2404bd7c
 8001894:	24000cfc 	.word	0x24000cfc

08001898 <Wyslij_I2C_Kamera>:
//  rejestr - 16 bitowy adres rejestru kamery
//  dane - dane zapisywane do rejestru
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef Wyslij_I2C_Kamera(uint16_t rejestr, uint8_t dane)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af02      	add	r7, sp, #8
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	80fb      	strh	r3, [r7, #6]
 80018a4:	4613      	mov	r3, r2
 80018a6:	717b      	strb	r3, [r7, #5]
	uint8_t dane_wy[3];

	dane_wy[0] = (rejestr & 0xFF00) >> 8;
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	0a1b      	lsrs	r3, r3, #8
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	733b      	strb	r3, [r7, #12]
	dane_wy[1] = (rejestr & 0x00FF);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	737b      	strb	r3, [r7, #13]
	dane_wy[2] = dane;
 80018b8:	797b      	ldrb	r3, [r7, #5]
 80018ba:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(&hi2c4, OV5642_I2C_ADR, dane_wy, 3, KAMERA_TIMEOUT);
 80018bc:	f107 020c 	add.w	r2, r7, #12
 80018c0:	2301      	movs	r3, #1
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2303      	movs	r3, #3
 80018c6:	2178      	movs	r1, #120	@ 0x78
 80018c8:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <Wyslij_I2C_Kamera+0x40>)
 80018ca:	f009 fa0f 	bl	800acec <HAL_I2C_Master_Transmit>
 80018ce:	4603      	mov	r3, r0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2404bef4 	.word	0x2404bef4

080018dc <Czytaj_I2C_Kamera>:
//  rejestr - 16 bitowy adres rejestru kamery
//  dane - dane zapisywane do rejestru
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef Czytaj_I2C_Kamera(uint16_t rejestr, uint8_t *dane)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	80fb      	strh	r3, [r7, #6]
	uint8_t dane_wy[2];
	HAL_StatusTypeDef err;

	dane_wy[0] = (rejestr & 0xFF00) >> 8;
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	733b      	strb	r3, [r7, #12]
	dane_wy[1] = (rejestr & 0x00FF);
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	737b      	strb	r3, [r7, #13]
	err = HAL_I2C_Master_Transmit(&hi2c4, OV5642_I2C_ADR, dane_wy, 2, KAMERA_TIMEOUT);
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	2301      	movs	r3, #1
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2302      	movs	r3, #2
 8001902:	2178      	movs	r1, #120	@ 0x78
 8001904:	480b      	ldr	r0, [pc, #44]	@ (8001934 <Czytaj_I2C_Kamera+0x58>)
 8001906:	f009 f9f1 	bl	800acec <HAL_I2C_Master_Transmit>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]
	if (err == 0)
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <Czytaj_I2C_Kamera+0x4c>
		err = HAL_I2C_Master_Receive(&hi2c4, OV5642_I2C_ADR, dane, 1, KAMERA_TIMEOUT);
 8001914:	2301      	movs	r3, #1
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	2178      	movs	r1, #120	@ 0x78
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <Czytaj_I2C_Kamera+0x58>)
 8001920:	f009 fafc 	bl	800af1c <HAL_I2C_Master_Receive>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
	return err;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2404bef4 	.word	0x2404bef4

08001938 <Wyslij_Blok_Kamera>:
//  rejestr - 16 bitowy adres rejestru kamery
//  dane - dane zapisywane do rejestru
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef Wyslij_Blok_Kamera(const struct sensor_reg reglist[])
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	const struct sensor_reg *next = reglist;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef err;

	while ((next->reg != 0xFFFF) && (err == 0))
 8001944:	e00c      	b.n	8001960 <Wyslij_Blok_Kamera+0x28>
	{
		err = Wyslij_I2C_Kamera(next->reg, next->val);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	789b      	ldrb	r3, [r3, #2]
 800194e:	4619      	mov	r1, r3
 8001950:	4610      	mov	r0, r2
 8001952:	f7ff ffa1 	bl	8001898 <Wyslij_I2C_Kamera>
 8001956:	4603      	mov	r3, r0
 8001958:	72fb      	strb	r3, [r7, #11]
		next++;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3304      	adds	r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
	while ((next->reg != 0xFFFF) && (err == 0))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001968:	4293      	cmp	r3, r2
 800196a:	d002      	beq.n	8001972 <Wyslij_Blok_Kamera+0x3a>
 800196c:	7afb      	ldrb	r3, [r7, #11]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0e9      	beq.n	8001946 <Wyslij_Blok_Kamera+0xe>
	}
	return err;
 8001972:	7afb      	ldrb	r3, [r7, #11]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_DCMI_LineEventCallback>:
// Parametry:
//  hdcmi - wskaźnik na interfejs DCMI
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	sLicznikLiniiKamery++;
 8001984:	4b05      	ldr	r3, [pc, #20]	@ (800199c <HAL_DCMI_LineEventCallback+0x20>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_DCMI_LineEventCallback+0x20>)
 800198e:	801a      	strh	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	2404bcfc 	.word	0x2404bcfc

080019a0 <HAL_DCMI_VsyncEventCallback>:
// Parametry:
//  hdcmi - wskaźnik na interfejs DCMI
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_DCMI_FrameEventCallback>:
// Parametry:
//  hdcmi - wskaźnik na interfejs DCMI
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	chNowyObrazKamery = 1;
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_DCMI_FrameEventCallback+0x20>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
	sLicznikLiniiKamery= 0;
 80019c2:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_DCMI_FrameEventCallback+0x24>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	2404c11c 	.word	0x2404c11c
 80019d8:	2404bcfc 	.word	0x2404bcfc

080019dc <HAL_DCMI_ErrorCallback>:


void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <SprawdzKamere>:
// Sprawdź czy mamy kontakt z kamerą
// Parametry: brak
// Zwraca: systemowy kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t	SprawdzKamere(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	uint16_t DaneH;
	uint8_t daneL, powtorz = 10;
 80019f6:	230a      	movs	r3, #10
 80019f8:	71fb      	strb	r3, [r7, #7]

	do
	{
		Czytaj_I2C_Kamera(0x300A, (uint8_t*)&DaneH);	//Chip ID High Byte = 0x56
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	f243 000a 	movw	r0, #12298	@ 0x300a
 8001a02:	f7ff ff6b 	bl	80018dc <Czytaj_I2C_Kamera>
		Czytaj_I2C_Kamera(0x300B, &daneL);	//Chip ID Low Byte = 0x42
 8001a06:	1cfb      	adds	r3, r7, #3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f243 000b 	movw	r0, #12299	@ 0x300b
 8001a0e:	f7ff ff65 	bl	80018dc <Czytaj_I2C_Kamera>
		powtorz--;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f004 f80b 	bl	8005a34 <HAL_Delay>
		DaneH <<= 8;
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	80bb      	strh	r3, [r7, #4]
		DaneH |= daneL;
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	80bb      	strh	r3, [r7, #4]
	}
	while ((DaneH != OV5642_ID) && powtorz);
 8001a32:	88bb      	ldrh	r3, [r7, #4]
 8001a34:	f245 6242 	movw	r2, #22082	@ 0x5642
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d002      	beq.n	8001a42 <SprawdzKamere+0x52>
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1db      	bne.n	80019fa <SprawdzKamere+0xa>
	if (powtorz == 0)
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <SprawdzKamere+0x5c>
		return ERR_BRAK_KAMERY;
 8001a48:	231f      	movs	r3, #31
 8001a4a:	e000      	b.n	8001a4e <SprawdzKamere+0x5e>
	else
		return ERR_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b094      	sub	sp, #80	@ 0x50
 8001a5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001a5e:	f000 ff89 	bl	8002974 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001a62:	4b97      	ldr	r3, [pc, #604]	@ (8001cc0 <main+0x268>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d11b      	bne.n	8001aa6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6e:	f3bf 8f4f 	dsb	sy
}
 8001a72:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a74:	f3bf 8f6f 	isb	sy
}
 8001a78:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a7a:	4b91      	ldr	r3, [pc, #580]	@ (8001cc0 <main+0x268>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a82:	f3bf 8f4f 	dsb	sy
}
 8001a86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a88:	f3bf 8f6f 	isb	sy
}
 8001a8c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a8e:	4b8c      	ldr	r3, [pc, #560]	@ (8001cc0 <main+0x268>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	4a8b      	ldr	r2, [pc, #556]	@ (8001cc0 <main+0x268>)
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a98:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a9a:	f3bf 8f4f 	dsb	sy
}
 8001a9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001aa0:	f3bf 8f6f 	isb	sy
}
 8001aa4:	e000      	b.n	8001aa8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001aa6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001aa8:	4b85      	ldr	r3, [pc, #532]	@ (8001cc0 <main+0x268>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d138      	bne.n	8001b26 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ab4:	4b82      	ldr	r3, [pc, #520]	@ (8001cc0 <main+0x268>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001abc:	f3bf 8f4f 	dsb	sy
}
 8001ac0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cc0 <main+0x268>)
 8001ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac8:	64bb      	str	r3, [r7, #72]	@ 0x48

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001acc:	0b5b      	lsrs	r3, r3, #13
 8001ace:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ad2:	647b      	str	r3, [r7, #68]	@ 0x44
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001adc:	643b      	str	r3, [r7, #64]	@ 0x40
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001ae6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ae8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001aea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001aec:	4974      	ldr	r1, [pc, #464]	@ (8001cc0 <main+0x268>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001af4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af6:	1e5a      	subs	r2, r3, #1
 8001af8:	643a      	str	r2, [r7, #64]	@ 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ef      	bne.n	8001ade <main+0x86>
    } while(sets-- != 0U);
 8001afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b00:	1e5a      	subs	r2, r3, #1
 8001b02:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e5      	bne.n	8001ad4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b08:	f3bf 8f4f 	dsb	sy
}
 8001b0c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001b0e:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc0 <main+0x268>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	4a6b      	ldr	r2, [pc, #428]	@ (8001cc0 <main+0x268>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b18:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b1a:	f3bf 8f4f 	dsb	sy
}
 8001b1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b20:	f3bf 8f6f 	isb	sy
}
 8001b24:	e000      	b.n	8001b28 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001b26:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001b28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001b2e:	bf00      	nop
 8001b30:	4b64      	ldr	r3, [pc, #400]	@ (8001cc4 <main+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d004      	beq.n	8001b46 <main+0xee>
 8001b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	dcf4      	bgt.n	8001b30 <main+0xd8>
  if ( timeout < 0 )
 8001b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da01      	bge.n	8001b50 <main+0xf8>
  {
  Error_Handler();
 8001b4c:	f000 ff8a 	bl	8002a64 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b50:	f003 ff14 	bl	800597c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b54:	f000 f8cc 	bl	8001cf0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001b58:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc4 <main+0x26c>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b5e:	4a59      	ldr	r2, [pc, #356]	@ (8001cc4 <main+0x26c>)
 8001b60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b68:	4b56      	ldr	r3, [pc, #344]	@ (8001cc4 <main+0x26c>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f008 ffee 	bl	800ab58 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f009 f804 	bl	800ab8c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001b84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001b8a:	bf00      	nop
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc4 <main+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d104      	bne.n	8001ba2 <main+0x14a>
 8001b98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dcf4      	bgt.n	8001b8c <main+0x134>
if ( timeout < 0 )
 8001ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	da01      	bge.n	8001bac <main+0x154>
{
Error_Handler();
 8001ba8:	f000 ff5c 	bl	8002a64 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bac:	f000 fad0 	bl	8002150 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bb0:	f000 faae 	bl	8002110 <MX_DMA_Init>
  MX_TIM14_Init();
 8001bb4:	f000 f9c8 	bl	8001f48 <MX_TIM14_Init>
  //MX_DCMI_Init();		//jest inicjowany w funkcji KameraInit()
  MX_I2C4_Init();
 8001bb8:	f000 f988 	bl	8001ecc <MX_I2C4_Init>
  MX_ETH_Init();
 8001bbc:	f000 f93a 	bl	8001e34 <MX_ETH_Init>
  MX_CRC_Init();
 8001bc0:	f000 f916 	bl	8001df0 <MX_CRC_Init>
  MX_UART7_Init();
 8001bc4:	f000 fa0c 	bl	8001fe0 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8001bc8:	f000 fa56 	bl	8002078 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  chErr  = KameraInit();
 8001bcc:	f7ff fb44 	bl	8001258 <KameraInit>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc8 <main+0x270>)
 8001bd6:	701a      	strb	r2, [r3, #0]
  chErr += InitEth(&heth);
 8001bd8:	483c      	ldr	r0, [pc, #240]	@ (8001ccc <main+0x274>)
 8001bda:	f7ff faff 	bl	80011dc <InitEth>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b39      	ldr	r3, [pc, #228]	@ (8001cc8 <main+0x270>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b37      	ldr	r3, [pc, #220]	@ (8001cc8 <main+0x270>)
 8001bec:	701a      	strb	r2, [r3, #0]
  InitDisplay();
 8001bee:	f002 fde7 	bl	80047c0 <InitDisplay>
  InitProtokol();
 8001bf2:	f7fe fddb 	bl	80007ac <InitProtokol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001bf6:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <main+0x278>)
 8001bf8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001bfc:	461d      	mov	r5, r3
 8001bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f010 f844 	bl	8011c9e <osThreadCreate>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <main+0x27c>)
 8001c1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of wftKomUart */
  osThreadDef(wftKomUart, StartKomUart, osPriorityBelowNormal, 0, 128);
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <main+0x280>)
 8001c1e:	f107 0408 	add.w	r4, r7, #8
 8001c22:	461d      	mov	r5, r3
 8001c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  wftKomUartHandle = osThreadCreate(osThread(wftKomUart), NULL);
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f010 f831 	bl	8011c9e <osThreadCreate>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4a27      	ldr	r2, [pc, #156]	@ (8001cdc <main+0x284>)
 8001c40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f003 fc44 	bl	80054d0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f003 fc41 	bl	80054d0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f003 fc3e 	bl	80054d0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001c54:	2101      	movs	r1, #1
 8001c56:	2000      	movs	r0, #0
 8001c58:	f003 fd2e 	bl	80056b8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001c5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <main+0x288>)
 8001c5e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c62:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce0 <main+0x288>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <main+0x288>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <main+0x288>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <main+0x288>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001c7c:	4918      	ldr	r1, [pc, #96]	@ (8001ce0 <main+0x288>)
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f003 fd9e 	bl	80057c0 <BSP_COM_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <main+0x236>
  {
    Error_Handler();
 8001c8a:	f000 feeb 	bl	8002a64 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("\n\rAutoPitLot melduje gotowosc do pracy\n\r");
 8001c8e:	4815      	ldr	r0, [pc, #84]	@ (8001ce4 <main+0x28c>)
 8001c90:	f011 ff70 	bl	8013b74 <iprintf>
  printf("SysCLK = %lu MHz\n\r", (uint32_t)HAL_RCC_GetSysClockFreq()/1000000);
 8001c94:	f00a fc5a 	bl	800c54c <HAL_RCC_GetSysClockFreq>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <main+0x290>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	0c9b      	lsrs	r3, r3, #18
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4811      	ldr	r0, [pc, #68]	@ (8001cec <main+0x294>)
 8001ca6:	f011 ff65 	bl	8013b74 <iprintf>



  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f003 fc86 	bl	80055bc <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f003 fc83 	bl	80055bc <BSP_LED_On>
  //BSP_LED_On(LED_RED);
  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 8001cb6:	f00f ffeb 	bl	8011c90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cba:	bf00      	nop
 8001cbc:	e7fd      	b.n	8001cba <main+0x262>
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	2404c0c5 	.word	0x2404c0c5
 8001ccc:	2404be44 	.word	0x2404be44
 8001cd0:	08016a5c 	.word	0x08016a5c
 8001cd4:	2404c0bc 	.word	0x2404c0bc
 8001cd8:	08016a84 	.word	0x08016a84
 8001cdc:	2404c0c0 	.word	0x2404c0c0
 8001ce0:	2404bd44 	.word	0x2404bd44
 8001ce4:	08016a10 	.word	0x08016a10
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	08016a3c 	.word	0x08016a3c

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b09c      	sub	sp, #112	@ 0x70
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfa:	224c      	movs	r2, #76	@ 0x4c
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f011 ffad 	bl	8013c5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2220      	movs	r2, #32
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f011 ffa7 	bl	8013c5e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001d10:	2004      	movs	r0, #4
 8001d12:	f009 fdb1 	bl	800b878 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <SystemClock_Config+0xf8>)
 8001d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1e:	4a32      	ldr	r2, [pc, #200]	@ (8001de8 <SystemClock_Config+0xf8>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001d26:	4b30      	ldr	r3, [pc, #192]	@ (8001de8 <SystemClock_Config+0xf8>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4b2e      	ldr	r3, [pc, #184]	@ (8001dec <SystemClock_Config+0xfc>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	@ (8001dec <SystemClock_Config+0xfc>)
 8001d36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001dec <SystemClock_Config+0xfc>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d48:	bf00      	nop
 8001d4a:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <SystemClock_Config+0xfc>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d56:	d1f8      	bne.n	8001d4a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d60:	2340      	movs	r3, #64	@ 0x40
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d70:	2300      	movs	r3, #0
 8001d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d74:	2304      	movs	r3, #4
 8001d76:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d78:	2332      	movs	r3, #50	@ 0x32
 8001d7a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8001d84:	2304      	movs	r3, #4
 8001d86:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d88:	230c      	movs	r3, #12
 8001d8a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f009 fdc7 	bl	800b92c <HAL_RCC_OscConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001da4:	f000 fe5e 	bl	8002a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da8:	233f      	movs	r3, #63	@ 0x3f
 8001daa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dac:	2303      	movs	r3, #3
 8001dae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001db4:	2308      	movs	r3, #8
 8001db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001db8:	2340      	movs	r3, #64	@ 0x40
 8001dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001dbc:	2340      	movs	r3, #64	@ 0x40
 8001dbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001dc6:	2340      	movs	r3, #64	@ 0x40
 8001dc8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2102      	movs	r1, #2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f00a fa06 	bl	800c1e0 <HAL_RCC_ClockConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001dda:	f000 fe43 	bl	8002a64 <Error_Handler>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3770      	adds	r7, #112	@ 0x70
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	58000400 	.word	0x58000400
 8001dec:	58024800 	.word	0x58024800

08001df0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <MX_CRC_Init+0x3c>)
 8001df6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e30 <MX_CRC_Init+0x40>)
 8001df8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <MX_CRC_Init+0x3c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001e00:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <MX_CRC_Init+0x3c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <MX_CRC_Init+0x3c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <MX_CRC_Init+0x3c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <MX_CRC_Init+0x3c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e18:	4804      	ldr	r0, [pc, #16]	@ (8001e2c <MX_CRC_Init+0x3c>)
 8001e1a:	f003 ffbb 	bl	8005d94 <HAL_CRC_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001e24:	f000 fe1e 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2404bd58 	.word	0x2404bd58
 8001e30:	58024c00 	.word	0x58024c00

08001e34 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <MX_ETH_Init+0x80>)
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <MX_ETH_Init+0x84>)
 8001e3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <MX_ETH_Init+0x88>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <MX_ETH_Init+0x88>)
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <MX_ETH_Init+0x88>)
 8001e4c:	22e1      	movs	r2, #225	@ 0xe1
 8001e4e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <MX_ETH_Init+0x88>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001e56:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <MX_ETH_Init+0x88>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <MX_ETH_Init+0x88>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <MX_ETH_Init+0x80>)
 8001e64:	4a15      	ldr	r2, [pc, #84]	@ (8001ebc <MX_ETH_Init+0x88>)
 8001e66:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <MX_ETH_Init+0x80>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <MX_ETH_Init+0x80>)
 8001e70:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <MX_ETH_Init+0x8c>)
 8001e72:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <MX_ETH_Init+0x80>)
 8001e76:	4a13      	ldr	r2, [pc, #76]	@ (8001ec4 <MX_ETH_Init+0x90>)
 8001e78:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <MX_ETH_Init+0x80>)
 8001e7c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001e80:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001e82:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <MX_ETH_Init+0x80>)
 8001e84:	f007 fe32 	bl	8009aec <HAL_ETH_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001e8e:	f000 fde9 	bl	8002a64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001e92:	2238      	movs	r2, #56	@ 0x38
 8001e94:	2100      	movs	r1, #0
 8001e96:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <MX_ETH_Init+0x94>)
 8001e98:	f011 fee1 	bl	8013c5e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <MX_ETH_Init+0x94>)
 8001e9e:	2221      	movs	r2, #33	@ 0x21
 8001ea0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <MX_ETH_Init+0x94>)
 8001ea4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ea8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <MX_ETH_Init+0x94>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2404be44 	.word	0x2404be44
 8001eb8:	40028000 	.word	0x40028000
 8001ebc:	2404c0c8 	.word	0x2404c0c8
 8001ec0:	30040060 	.word	0x30040060
 8001ec4:	30040000 	.word	0x30040000
 8001ec8:	2404bd0c 	.word	0x2404bd0c

08001ecc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f44 <MX_I2C4_Init+0x78>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001ed8:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001edc:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ef6:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001efc:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f02:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001f08:	480d      	ldr	r0, [pc, #52]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001f0a:	f008 fe53 	bl	800abb4 <HAL_I2C_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_I2C4_Init+0x4c>
  {
    Error_Handler();
 8001f14:	f000 fda6 	bl	8002a64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4809      	ldr	r0, [pc, #36]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001f1c:	f009 fb9a 	bl	800b654 <HAL_I2CEx_ConfigAnalogFilter>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8001f26:	f000 fd9d 	bl	8002a64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4804      	ldr	r0, [pc, #16]	@ (8001f40 <MX_I2C4_Init+0x74>)
 8001f2e:	f009 fbdc 	bl	800b6ea <HAL_I2CEx_ConfigDigitalFilter>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8001f38:	f000 fd94 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2404bef4 	.word	0x2404bef4
 8001f44:	58001c00 	.word	0x58001c00

08001f48 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f62:	4a1e      	ldr	r2, [pc, #120]	@ (8001fdc <MX_TIM14_Init+0x94>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f74:	2205      	movs	r2, #5
 8001f76:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f80:	2280      	movs	r2, #128	@ 0x80
 8001f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f84:	4814      	ldr	r0, [pc, #80]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f86:	f00c fb25 	bl	800e5d4 <HAL_TIM_Base_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8001f90:	f000 fd68 	bl	8002a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001f94:	4810      	ldr	r0, [pc, #64]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001f96:	f00c fbed 	bl	800e774 <HAL_TIM_PWM_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8001fa0:	f000 fd60 	bl	8002a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa4:	2360      	movs	r3, #96	@ 0x60
 8001fa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001fbc:	f00c fd42 	bl	800ea44 <HAL_TIM_PWM_ConfigChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8001fc6:	f000 fd4d 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001fca:	4803      	ldr	r0, [pc, #12]	@ (8001fd8 <MX_TIM14_Init+0x90>)
 8001fcc:	f001 f828 	bl	8003020 <HAL_TIM_MspPostInit>

}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2404bf48 	.word	0x2404bf48
 8001fdc:	40002000 	.word	0x40002000

08001fe0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <MX_UART7_Init+0x90>)
 8001fe6:	4a23      	ldr	r2, [pc, #140]	@ (8002074 <MX_UART7_Init+0x94>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <MX_UART7_Init+0x90>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <MX_UART7_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <MX_UART7_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <MX_UART7_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <MX_UART7_Init+0x90>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <MX_UART7_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <MX_UART7_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <MX_UART7_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800201c:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <MX_UART7_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002022:	4b13      	ldr	r3, [pc, #76]	@ (8002070 <MX_UART7_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002028:	4811      	ldr	r0, [pc, #68]	@ (8002070 <MX_UART7_Init+0x90>)
 800202a:	f00d f9e1 	bl	800f3f0 <HAL_UART_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002034:	f000 fd16 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	2100      	movs	r1, #0
 800203a:	480d      	ldr	r0, [pc, #52]	@ (8002070 <MX_UART7_Init+0x90>)
 800203c:	f00f fd45 	bl	8011aca <HAL_UARTEx_SetTxFifoThreshold>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002046:	f000 fd0d 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204a:	2100      	movs	r1, #0
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <MX_UART7_Init+0x90>)
 800204e:	f00f fd7a 	bl	8011b46 <HAL_UARTEx_SetRxFifoThreshold>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002058:	f000 fd04 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	@ (8002070 <MX_UART7_Init+0x90>)
 800205e:	f00f fcfb 	bl	8011a58 <HAL_UARTEx_DisableFifoMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002068:	f000 fcfc 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2404bf94 	.word	0x2404bf94
 8002074:	40007800 	.word	0x40007800

08002078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800207c:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 800207e:	4a23      	ldr	r2, [pc, #140]	@ (800210c <MX_USART2_UART_Init+0x94>)
 8002080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002096:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ae:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ba:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c0:	4811      	ldr	r0, [pc, #68]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020c2:	f00d f995 	bl	800f3f0 <HAL_UART_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80020cc:	f000 fcca 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	480d      	ldr	r0, [pc, #52]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020d4:	f00f fcf9 	bl	8011aca <HAL_UARTEx_SetTxFifoThreshold>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80020de:	f000 fcc1 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	4808      	ldr	r0, [pc, #32]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020e6:	f00f fd2e 	bl	8011b46 <HAL_UARTEx_SetRxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020f0:	f000 fcb8 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	@ (8002108 <MX_USART2_UART_Init+0x90>)
 80020f6:	f00f fcaf 	bl	8011a58 <HAL_UARTEx_DisableFifoMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002100:	f000 fcb0 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2404c028 	.word	0x2404c028
 800210c:	40004400 	.word	0x40004400

08002110 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <MX_DMA_Init+0x3c>)
 8002118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800211c:	4a0b      	ldr	r2, [pc, #44]	@ (800214c <MX_DMA_Init+0x3c>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <MX_DMA_Init+0x3c>)
 8002128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2105      	movs	r1, #5
 8002138:	200b      	movs	r0, #11
 800213a:	f003 fd77 	bl	8005c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800213e:	200b      	movs	r0, #11
 8002140:	f003 fd8e 	bl	8005c60 <HAL_NVIC_EnableIRQ>

}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	58024400 	.word	0x58024400

08002150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	@ 0x30
 8002154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002156:	f107 031c 	add.w	r3, r7, #28
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002166:	4b86      	ldr	r3, [pc, #536]	@ (8002380 <MX_GPIO_Init+0x230>)
 8002168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216c:	4a84      	ldr	r2, [pc, #528]	@ (8002380 <MX_GPIO_Init+0x230>)
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002176:	4b82      	ldr	r3, [pc, #520]	@ (8002380 <MX_GPIO_Init+0x230>)
 8002178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002184:	4b7e      	ldr	r3, [pc, #504]	@ (8002380 <MX_GPIO_Init+0x230>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218a:	4a7d      	ldr	r2, [pc, #500]	@ (8002380 <MX_GPIO_Init+0x230>)
 800218c:	f043 0320 	orr.w	r3, r3, #32
 8002190:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002194:	4b7a      	ldr	r3, [pc, #488]	@ (8002380 <MX_GPIO_Init+0x230>)
 8002196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b77      	ldr	r3, [pc, #476]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a8:	4a75      	ldr	r2, [pc, #468]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b2:	4b73      	ldr	r3, [pc, #460]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e4:	4a66      	ldr	r2, [pc, #408]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ee:	4b64      	ldr	r3, [pc, #400]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fc:	4b60      	ldr	r3, [pc, #384]	@ (8002380 <MX_GPIO_Init+0x230>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002202:	4a5f      	ldr	r2, [pc, #380]	@ (8002380 <MX_GPIO_Init+0x230>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800220c:	4b5c      	ldr	r3, [pc, #368]	@ (8002380 <MX_GPIO_Init+0x230>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800221a:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <MX_GPIO_Init+0x230>)
 800221c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002220:	4a57      	ldr	r2, [pc, #348]	@ (8002380 <MX_GPIO_Init+0x230>)
 8002222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002226:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800222a:	4b55      	ldr	r3, [pc, #340]	@ (8002380 <MX_GPIO_Init+0x230>)
 800222c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_WR_Pin|LCD_RST_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8002238:	2200      	movs	r2, #0
 800223a:	210d      	movs	r1, #13
 800223c:	4851      	ldr	r0, [pc, #324]	@ (8002384 <MX_GPIO_Init+0x234>)
 800223e:	f008 fc57 	bl	800aaf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8002248:	484f      	ldr	r0, [pc, #316]	@ (8002388 <MX_GPIO_Init+0x238>)
 800224a:	f008 fc51 	bl	800aaf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	2102      	movs	r1, #2
 8002252:	484e      	ldr	r0, [pc, #312]	@ (800238c <MX_GPIO_Init+0x23c>)
 8002254:	f008 fc4c 	bl	800aaf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_PWDN_GPIO_Port, CAM_PWDN_Pin, GPIO_PIN_RESET);
 8002258:	2200      	movs	r2, #0
 800225a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800225e:	484c      	ldr	r0, [pc, #304]	@ (8002390 <MX_GPIO_Init+0x240>)
 8002260:	f008 fc46 	bl	800aaf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D5_Pin|LCD_D3_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 800226a:	484a      	ldr	r0, [pc, #296]	@ (8002394 <MX_GPIO_Init+0x244>)
 800226c:	f008 fc40 	bl	800aaf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002276:	4848      	ldr	r0, [pc, #288]	@ (8002398 <MX_GPIO_Init+0x248>)
 8002278:	f008 fc3a 	bl	800aaf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D0_Pin|LCD_D7_Pin|LCD_D2_Pin, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 41a4 	mov.w	r1, #20992	@ 0x5200
 8002282:	4846      	ldr	r0, [pc, #280]	@ (800239c <MX_GPIO_Init+0x24c>)
 8002284:	f008 fc34 	bl	800aaf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_WR_Pin LCD_RST_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RST_Pin|LCD_RS_Pin;
 8002288:	230d      	movs	r3, #13
 800228a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	4839      	ldr	r0, [pc, #228]	@ (8002384 <MX_GPIO_Init+0x234>)
 80022a0:	f008 fa76 	bl	800a790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_D6_Pin;
 80022a4:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 031c 	add.w	r3, r7, #28
 80022ba:	4619      	mov	r1, r3
 80022bc:	4832      	ldr	r0, [pc, #200]	@ (8002388 <MX_GPIO_Init+0x238>)
 80022be:	f008 fa67 	bl	800a790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c6:	2301      	movs	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	482c      	ldr	r0, [pc, #176]	@ (800238c <MX_GPIO_Init+0x23c>)
 80022da:	f008 fa59 	bl	800a790 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_PWDN_Pin */
  GPIO_InitStruct.Pin = CAM_PWDN_Pin;
 80022de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAM_PWDN_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	4619      	mov	r1, r3
 80022f6:	4826      	ldr	r0, [pc, #152]	@ (8002390 <MX_GPIO_Init+0x240>)
 80022f8:	f008 fa4a 	bl	800a790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D5_Pin LCD_D3_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_D3_Pin|LCD_D4_Pin;
 80022fc:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	481f      	ldr	r0, [pc, #124]	@ (8002394 <MX_GPIO_Init+0x244>)
 8002316:	f008 fa3b 	bl	800a790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin;
 800231a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800231e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_D1_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	4819      	ldr	r0, [pc, #100]	@ (8002398 <MX_GPIO_Init+0x248>)
 8002334:	f008 fa2c 	bl	800a790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002338:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800233c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800234a:	230a      	movs	r3, #10
 800234c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	480c      	ldr	r0, [pc, #48]	@ (8002388 <MX_GPIO_Init+0x238>)
 8002356:	f008 fa1b 	bl	800a790 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D7_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D7_Pin|LCD_D2_Pin;
 800235a:	f44f 43a4 	mov.w	r3, #20992	@ 0x5200
 800235e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4619      	mov	r1, r3
 8002372:	480a      	ldr	r0, [pc, #40]	@ (800239c <MX_GPIO_Init+0x24c>)
 8002374:	f008 fa0c 	bl	800a790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002378:	bf00      	nop
 800237a:	3730      	adds	r7, #48	@ 0x30
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	58024400 	.word	0x58024400
 8002384:	58020800 	.word	0x58020800
 8002388:	58020000 	.word	0x58020000
 800238c:	58020400 	.word	0x58020400
 8002390:	58021400 	.word	0x58021400
 8002394:	58021000 	.word	0x58021000
 8002398:	58020c00 	.word	0x58020c00
 800239c:	58021800 	.word	0x58021800

080023a0 <KameraPWDN>:
// Sterowanie pinem Powwer Down kamery
// Parametry: akcja do wykonania na pinie: GPIO_PIN_SET lub GPIO_PIN_RESET
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
void KameraPWDN(uint32_t SetReset)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CAM_PWDN_GPIO_Port, CAM_PWDN_Pin, SetReset);		//włącz PWDN
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023b2:	4803      	ldr	r0, [pc, #12]	@ (80023c0 <KameraPWDN+0x20>)
 80023b4:	f008 fb9c 	bl	800aaf0 <HAL_GPIO_WritePin>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	58021400 	.word	0x58021400

080023c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0ac      	sub	sp, #176	@ 0xb0
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	extern volatile uint8_t chObrazGotowy;
	uint8_t chRejKam[7] ={0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x6F};
 80023cc:	4ab9      	ldr	r2, [pc, #740]	@ (80026b4 <StartDefaultTask+0x2f0>)
 80023ce:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80023d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d6:	6018      	str	r0, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	8019      	strh	r1, [r3, #0]
 80023dc:	3302      	adds	r3, #2
 80023de:	0c0a      	lsrs	r2, r1, #16
 80023e0:	701a      	strb	r2, [r3, #0]
	uint8_t chWskRej = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	uint8_t chWskLicz = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
  /* Infinite loop */
	Menu(chPozycjaMenu);
 80023ee:	4bb2      	ldr	r3, [pc, #712]	@ (80026b8 <StartDefaultTask+0x2f4>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 f9f0 	bl	80047d8 <Menu>
	for(;;)
	{
	  	//obsługa przycisku
	  	if (BspButtonState == BUTTON_PRESSED)
 80023f8:	4bb0      	ldr	r3, [pc, #704]	@ (80026bc <StartDefaultTask+0x2f8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d119      	bne.n	8002434 <StartDefaultTask+0x70>
	  	{
	  		BspButtonState = BUTTON_RELEASED;
 8002400:	4bae      	ldr	r3, [pc, #696]	@ (80026bc <StartDefaultTask+0x2f8>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
	  		if (chTrybPracy != TP_MENU)
 8002406:	4bae      	ldr	r3, [pc, #696]	@ (80026c0 <StartDefaultTask+0x2fc>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b0a      	cmp	r3, #10
 800240c:	d002      	beq.n	8002414 <StartDefaultTask+0x50>
	  		  chRysujRaz = 1;
 800240e:	4bad      	ldr	r3, [pc, #692]	@ (80026c4 <StartDefaultTask+0x300>)
 8002410:	2201      	movs	r2, #1
 8002412:	701a      	strb	r2, [r3, #0]
	  		chPozycjaMenu = Menu(chPozycjaMenu);
 8002414:	4ba8      	ldr	r3, [pc, #672]	@ (80026b8 <StartDefaultTask+0x2f4>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f002 f9dd 	bl	80047d8 <Menu>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	4ba5      	ldr	r3, [pc, #660]	@ (80026b8 <StartDefaultTask+0x2f4>)
 8002424:	701a      	strb	r2, [r3, #0]
	  		chTrybPracy = TP_MENU;
 8002426:	4ba6      	ldr	r3, [pc, #664]	@ (80026c0 <StartDefaultTask+0x2fc>)
 8002428:	220a      	movs	r2, #10
 800242a:	701a      	strb	r2, [r3, #0]
	  		sMenuTimer = 3000;	//czas w [ms]
 800242c:	4ba6      	ldr	r3, [pc, #664]	@ (80026c8 <StartDefaultTask+0x304>)
 800242e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002432:	801a      	strh	r2, [r3, #0]
	  	}

	  	//obsługa trybów pracy
	      switch(chTrybPracy)
 8002434:	4ba2      	ldr	r3, [pc, #648]	@ (80026c0 <StartDefaultTask+0x2fc>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b14      	cmp	r3, #20
 800243a:	f200 8273 	bhi.w	8002924 <StartDefaultTask+0x560>
 800243e:	a201      	add	r2, pc, #4	@ (adr r2, 8002444 <StartDefaultTask+0x80>)
 8002440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002444:	080024cb 	.word	0x080024cb
 8002448:	080024fd 	.word	0x080024fd
 800244c:	08002529 	.word	0x08002529
 8002450:	0800253f 	.word	0x0800253f
 8002454:	08002563 	.word	0x08002563
 8002458:	080026f9 	.word	0x080026f9
 800245c:	080028a7 	.word	0x080028a7
 8002460:	080028c9 	.word	0x080028c9
 8002464:	080028cf 	.word	0x080028cf
 8002468:	08002925 	.word	0x08002925
 800246c:	08002499 	.word	0x08002499
 8002470:	08002925 	.word	0x08002925
 8002474:	08002925 	.word	0x08002925
 8002478:	08002925 	.word	0x08002925
 800247c:	08002925 	.word	0x08002925
 8002480:	08002925 	.word	0x08002925
 8002484:	08002925 	.word	0x08002925
 8002488:	08002925 	.word	0x08002925
 800248c:	08002925 	.word	0x08002925
 8002490:	08002925 	.word	0x08002925
 8002494:	080028d5 	.word	0x080028d5
	      {
	      	case TP_MENU:
	      		if (sMenuTimer)
 8002498:	4b8b      	ldr	r3, [pc, #556]	@ (80026c8 <StartDefaultTask+0x304>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <StartDefaultTask+0xf2>
	  				RysujMenuTimer(sMenuTimer/10);
 80024a0:	4b89      	ldr	r3, [pc, #548]	@ (80026c8 <StartDefaultTask+0x304>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	4a89      	ldr	r2, [pc, #548]	@ (80026cc <StartDefaultTask+0x308>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fa96 	bl	80049e0 <RysujMenuTimer>
	  			{
	  				chTrybPracy = chPozycjaMenu;
	  				LCD_clear();
	  				chRysujRaz = 1;
	  			}
	  			break;
 80024b4:	e241      	b.n	800293a <StartDefaultTask+0x576>
	  				chTrybPracy = chPozycjaMenu;
 80024b6:	4b80      	ldr	r3, [pc, #512]	@ (80026b8 <StartDefaultTask+0x2f4>)
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	4b81      	ldr	r3, [pc, #516]	@ (80026c0 <StartDefaultTask+0x2fc>)
 80024bc:	701a      	strb	r2, [r3, #0]
	  				LCD_clear();
 80024be:	f001 fb1d 	bl	8003afc <LCD_clear>
	  				chRysujRaz = 1;
 80024c2:	4b80      	ldr	r3, [pc, #512]	@ (80026c4 <StartDefaultTask+0x300>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
	  			break;
 80024c8:	e237      	b.n	800293a <StartDefaultTask+0x576>

	      	case TP_KAMERA_RGB:
	      		if (chNowyObrazKamery)
 80024ca:	4b81      	ldr	r3, [pc, #516]	@ (80026d0 <StartDefaultTask+0x30c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 822a 	beq.w	8002928 <StartDefaultTask+0x564>
	  			{
	  				drawBitmap(0, 0, 320, 240, (const unsigned short*)nBuforKamery);	//214ms
 80024d4:	4b7f      	ldr	r3, [pc, #508]	@ (80026d4 <StartDefaultTask+0x310>)
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	23f0      	movs	r3, #240	@ 0xf0
 80024da:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80024de:	2100      	movs	r1, #0
 80024e0:	2000      	movs	r0, #0
 80024e2:	f002 f8cf 	bl	8004684 <drawBitmap>
	  				chNowyObrazKamery = 0;
 80024e6:	4b7a      	ldr	r3, [pc, #488]	@ (80026d0 <StartDefaultTask+0x30c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]

	  					hdcmi.Instance->CR |= DCMI_CR_CAPTURE;
	  					err = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
	  				}*/
	  				//WyswietlDane8("Format control", CzytajKamInit(), 220);	//wyświetla zawartość rejestru kamery
	  				WyswietlKodBledu(chErr, 10, 220);
 80024ec:	4b7a      	ldr	r3, [pc, #488]	@ (80026d8 <StartDefaultTask+0x314>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	22dc      	movs	r2, #220	@ 0xdc
 80024f2:	210a      	movs	r1, #10
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 faf5 	bl	8004ae4 <WyswietlKodBledu>
	  			}
	  			break;
 80024fa:	e215      	b.n	8002928 <StartDefaultTask+0x564>

	      	case TP_CAN_MAGN:
				WyswietlDaneFloat("mag X", 0, 100);
 80024fc:	2164      	movs	r1, #100	@ 0x64
 80024fe:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 80026dc <StartDefaultTask+0x318>
 8002502:	4877      	ldr	r0, [pc, #476]	@ (80026e0 <StartDefaultTask+0x31c>)
 8002504:	f002 fac8 	bl	8004a98 <WyswietlDaneFloat>
				WyswietlDaneFloat("mag Y", 1, 140);
 8002508:	218c      	movs	r1, #140	@ 0x8c
 800250a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800250e:	4875      	ldr	r0, [pc, #468]	@ (80026e4 <StartDefaultTask+0x320>)
 8002510:	f002 fac2 	bl	8004a98 <WyswietlDaneFloat>
				WyswietlDaneFloat("mag Z", 2, 180);
 8002514:	21b4      	movs	r1, #180	@ 0xb4
 8002516:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800251a:	4873      	ldr	r0, [pc, #460]	@ (80026e8 <StartDefaultTask+0x324>)
 800251c:	f002 fabc 	bl	8004a98 <WyswietlDaneFloat>
				HAL_Delay(100);
 8002520:	2064      	movs	r0, #100	@ 0x64
 8002522:	f003 fa87 	bl	8005a34 <HAL_Delay>
	  			break;
 8002526:	e208      	b.n	800293a <StartDefaultTask+0x576>

	      	case TP_ANALIZA_ETH:
      			chErr = AnalizujEth(&heth);
 8002528:	4870      	ldr	r0, [pc, #448]	@ (80026ec <StartDefaultTask+0x328>)
 800252a:	f7fe fe63 	bl	80011f4 <AnalizujEth>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4b69      	ldr	r3, [pc, #420]	@ (80026d8 <StartDefaultTask+0x314>)
 8002534:	701a      	strb	r2, [r3, #0]
	      		HAL_Delay(100);
 8002536:	2064      	movs	r0, #100	@ 0x64
 8002538:	f003 fa7c 	bl	8005a34 <HAL_Delay>
	  			break;
 800253c:	e1fd      	b.n	800293a <StartDefaultTask+0x576>

	      	case TP_KAM_SET2:
	      		if (chRysujRaz)
 800253e:	4b61      	ldr	r3, [pc, #388]	@ (80026c4 <StartDefaultTask+0x300>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 81f2 	beq.w	800292c <StartDefaultTask+0x568>
	  			{
	      			//chErr = InitKamera2();
	      			chErr = KameraInit();
 8002548:	f7fe fe86 	bl	8001258 <KameraInit>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	4b61      	ldr	r3, [pc, #388]	@ (80026d8 <StartDefaultTask+0x314>)
 8002552:	701a      	strb	r2, [r3, #0]
	  				chRysujRaz = 0;
 8002554:	4b5b      	ldr	r3, [pc, #364]	@ (80026c4 <StartDefaultTask+0x300>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
	  				chTrybPracy = TP_KAMERA_RGB;
 800255a:	4b59      	ldr	r3, [pc, #356]	@ (80026c0 <StartDefaultTask+0x2fc>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 8002560:	e1e4      	b.n	800292c <StartDefaultTask+0x568>

	      	case TP_HIST_RGB:		//histogram obrazu RGB565
				uint8_t histR[32], histG[64], histB[32];
				chObrazGotowy = 0;
 8002562:	4b63      	ldr	r3, [pc, #396]	@ (80026f0 <StartDefaultTask+0x32c>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
				uint32_t nCzas;
				chErr = ZrobZdjecie(320, 240);
 8002568:	21f0      	movs	r1, #240	@ 0xf0
 800256a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800256e:	f7ff f8d1 	bl	8001714 <ZrobZdjecie>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <StartDefaultTask+0x314>)
 8002578:	701a      	strb	r2, [r3, #0]
				if (!chErr)
 800257a:	4b57      	ldr	r3, [pc, #348]	@ (80026d8 <StartDefaultTask+0x314>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 81d6 	bne.w	8002930 <StartDefaultTask+0x56c>
				{
					do; while (!chObrazGotowy);	//czekaj na zakończenie transferu DMA
 8002584:	4b5a      	ldr	r3, [pc, #360]	@ (80026f0 <StartDefaultTask+0x32c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0fa      	beq.n	8002584 <StartDefaultTask+0x1c0>
					drawBitmap(0, 0, 320, 240, (unsigned short*)nBuforKamery);	//214ms
 800258e:	4b51      	ldr	r3, [pc, #324]	@ (80026d4 <StartDefaultTask+0x310>)
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	23f0      	movs	r3, #240	@ 0xf0
 8002594:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002598:	2100      	movs	r1, #0
 800259a:	2000      	movs	r0, #0
 800259c:	f002 f872 	bl	8004684 <drawBitmap>
					nCzas = HAL_GetTick();
 80025a0:	f003 fa3c 	bl	8005a1c <HAL_GetTick>
 80025a4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					HistogramRGB565((uint8_t*)nBuforKamery, histR, histG, histB, 320*240);
 80025a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ac:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80025b0:	f107 0108 	add.w	r1, r7, #8
 80025b4:	f44f 3096 	mov.w	r0, #76800	@ 0x12c00
 80025b8:	9000      	str	r0, [sp, #0]
 80025ba:	4846      	ldr	r0, [pc, #280]	@ (80026d4 <StartDefaultTask+0x310>)
 80025bc:	f7fe fce6 	bl	8000f8c <HistogramRGB565>
					nCzas = MinalCzas(nCzas);
 80025c0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80025c4:	f002 fe7a 	bl	80052bc <MinalCzas>
 80025c8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

					//rysuj histogram na  ekranie
					setColor(RED);
 80025cc:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80025d0:	f001 fc22 	bl	8003e18 <setColor>
					for (uint8_t x=0; x<32; x++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 80025da:	e016      	b.n	800260a <StartDefaultTask+0x246>
						fillRect(x*2, 240-histR[x], x*2+1, 240);
 80025dc:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80025e0:	0058      	lsls	r0, r3, #1
 80025e2:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80025e6:	33a8      	adds	r3, #168	@ 0xa8
 80025e8:	443b      	add	r3, r7
 80025ea:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 80025ee:	f1c3 01f0 	rsb	r1, r3, #240	@ 0xf0
 80025f2:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	23f0      	movs	r3, #240	@ 0xf0
 80025fc:	f001 fc4e 	bl	8003e9c <fillRect>
					for (uint8_t x=0; x<32; x++)
 8002600:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8002604:	3301      	adds	r3, #1
 8002606:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 800260a:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 800260e:	2b1f      	cmp	r3, #31
 8002610:	d9e4      	bls.n	80025dc <StartDefaultTask+0x218>
					setColor(GREEN);
 8002612:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8002616:	f001 fbff 	bl	8003e18 <setColor>
					for (uint8_t x=0; x<64; x++)
 800261a:	2300      	movs	r3, #0
 800261c:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8002620:	e018      	b.n	8002654 <StartDefaultTask+0x290>
						fillRect(x*2+64, 240-histG[x], x*2+65, 240);
 8002622:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8002626:	3320      	adds	r3, #32
 8002628:	0058      	lsls	r0, r3, #1
 800262a:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 800262e:	33a8      	adds	r3, #168	@ 0xa8
 8002630:	443b      	add	r3, r7
 8002632:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8002636:	f1c3 01f0 	rsb	r1, r3, #240	@ 0xf0
 800263a:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	f103 0241 	add.w	r2, r3, #65	@ 0x41
 8002644:	23f0      	movs	r3, #240	@ 0xf0
 8002646:	f001 fc29 	bl	8003e9c <fillRect>
					for (uint8_t x=0; x<64; x++)
 800264a:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 800264e:	3301      	adds	r3, #1
 8002650:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8002654:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8002658:	2b3f      	cmp	r3, #63	@ 0x3f
 800265a:	d9e2      	bls.n	8002622 <StartDefaultTask+0x25e>
					setColor(BLUE);
 800265c:	201f      	movs	r0, #31
 800265e:	f001 fbdb 	bl	8003e18 <setColor>
					for (uint8_t x=0; x<32; x++)
 8002662:	2300      	movs	r3, #0
 8002664:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 8002668:	e018      	b.n	800269c <StartDefaultTask+0x2d8>
						fillRect(x*2+192, 240-histB[x], x*2+193, 240);
 800266a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800266e:	3360      	adds	r3, #96	@ 0x60
 8002670:	0058      	lsls	r0, r3, #1
 8002672:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002676:	33a8      	adds	r3, #168	@ 0xa8
 8002678:	443b      	add	r3, r7
 800267a:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800267e:	f1c3 01f0 	rsb	r1, r3, #240	@ 0xf0
 8002682:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	f103 02c1 	add.w	r2, r3, #193	@ 0xc1
 800268c:	23f0      	movs	r3, #240	@ 0xf0
 800268e:	f001 fc05 	bl	8003e9c <fillRect>
					for (uint8_t x=0; x<32; x++)
 8002692:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8002696:	3301      	adds	r3, #1
 8002698:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 800269c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	d9e2      	bls.n	800266a <StartDefaultTask+0x2a6>
					WyswietlDane32("t", nCzas, 10);		//czas liczenia histogramu
 80026a4:	220a      	movs	r2, #10
 80026a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026aa:	4812      	ldr	r0, [pc, #72]	@ (80026f4 <StartDefaultTask+0x330>)
 80026ac:	f002 f9d6 	bl	8004a5c <WyswietlDane32>
	  			}
	  			break;
 80026b0:	e13e      	b.n	8002930 <StartDefaultTask+0x56c>
 80026b2:	bf00      	nop
 80026b4:	08016ad4 	.word	0x08016ad4
 80026b8:	2404c0c4 	.word	0x2404c0c4
 80026bc:	2404bd54 	.word	0x2404bd54
 80026c0:	24000008 	.word	0x24000008
 80026c4:	24000014 	.word	0x24000014
 80026c8:	2400000a 	.word	0x2400000a
 80026cc:	cccccccd 	.word	0xcccccccd
 80026d0:	2404c11c 	.word	0x2404c11c
 80026d4:	24000cfc 	.word	0x24000cfc
 80026d8:	2404c0c5 	.word	0x2404c0c5
 80026dc:	00000000 	.word	0x00000000
 80026e0:	08016aa0 	.word	0x08016aa0
 80026e4:	08016aa8 	.word	0x08016aa8
 80026e8:	08016ab0 	.word	0x08016ab0
 80026ec:	2404be44 	.word	0x2404be44
 80026f0:	2404c124 	.word	0x2404c124
 80026f4:	08016ab8 	.word	0x08016ab8

	      	case TP_HIST_BIT:		//histogram bitów obrazu kamery
	      		uint16_t m, pix;
				uint32_t histogram[16];

				chObrazGotowy = 0;
 80026f8:	4b93      	ldr	r3, [pc, #588]	@ (8002948 <StartDefaultTask+0x584>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
				chWskLicz++;
 80026fe:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8002702:	3301      	adds	r3, #1
 8002704:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
				if (chWskLicz > 10)
 8002708:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 800270c:	2b0a      	cmp	r3, #10
 800270e:	d90e      	bls.n	800272e <StartDefaultTask+0x36a>
				{
					chWskLicz = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
					chWskRej++;
 8002716:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800271a:	3301      	adds	r3, #1
 800271c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (chWskRej > 6)
 8002720:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002724:	2b06      	cmp	r3, #6
 8002726:	d902      	bls.n	800272e <StartDefaultTask+0x36a>
						chWskRej = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}


				//chErr = ZrobZdjecie(320, 240);
				chErr = ZrobZdjecie2(320, 240, chRejKam[chWskRej]);
 800272e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002732:	33a8      	adds	r3, #168	@ 0xa8
 8002734:	443b      	add	r3, r7
 8002736:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800273a:	461a      	mov	r2, r3
 800273c:	21f0      	movs	r1, #240	@ 0xf0
 800273e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8002742:	f7ff f847 	bl	80017d4 <ZrobZdjecie2>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	4b80      	ldr	r3, [pc, #512]	@ (800294c <StartDefaultTask+0x588>)
 800274c:	701a      	strb	r2, [r3, #0]
				if (!chErr)
 800274e:	4b7f      	ldr	r3, [pc, #508]	@ (800294c <StartDefaultTask+0x588>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80ee 	bne.w	8002934 <StartDefaultTask+0x570>
				{
					do; while (!chObrazGotowy);	//czekaj na zakończenie transferu DMA
 8002758:	4b7b      	ldr	r3, [pc, #492]	@ (8002948 <StartDefaultTask+0x584>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0fa      	beq.n	8002758 <StartDefaultTask+0x394>
					drawBitmap(0, 0, 320, 240, (unsigned short*)nBuforKamery);	//214ms
 8002762:	4b7b      	ldr	r3, [pc, #492]	@ (8002950 <StartDefaultTask+0x58c>)
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	23f0      	movs	r3, #240	@ 0xf0
 8002768:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800276c:	2100      	movs	r1, #0
 800276e:	2000      	movs	r0, #0
 8002770:	f001 ff88 	bl	8004684 <drawBitmap>
					for (uint32_t n=0; n<320*240; n++)
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800277a:	e031      	b.n	80027e0 <StartDefaultTask+0x41c>
					{
						pix = *((uint16_t*)nBuforKamery + n);
 800277c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4a73      	ldr	r2, [pc, #460]	@ (8002950 <StartDefaultTask+0x58c>)
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
						for (m=0; m<16; m++)
 800278c:	2300      	movs	r3, #0
 800278e:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8002792:	e01c      	b.n	80027ce <StartDefaultTask+0x40a>
						{
							pix >>= 1;
 8002794:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
							if (pix & 0x01)
 800279e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <StartDefaultTask+0x400>
								histogram[m]++;
 80027aa:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	@ 0xa0
 80027ae:	0093      	lsls	r3, r2, #2
 80027b0:	33a8      	adds	r3, #168	@ 0xa8
 80027b2:	443b      	add	r3, r7
 80027b4:	f853 3c60 	ldr.w	r3, [r3, #-96]
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	0093      	lsls	r3, r2, #2
 80027bc:	33a8      	adds	r3, #168	@ 0xa8
 80027be:	443b      	add	r3, r7
 80027c0:	f843 1c60 	str.w	r1, [r3, #-96]
						for (m=0; m<16; m++)
 80027c4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80027c8:	3301      	adds	r3, #1
 80027ca:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 80027ce:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	d9de      	bls.n	8002794 <StartDefaultTask+0x3d0>
					for (uint32_t n=0; n<320*240; n++)
 80027d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027e4:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80027e8:	d3c8      	bcc.n	800277c <StartDefaultTask+0x3b8>
						}
					}

					//normalizacja histogramu
					for (uint8_t x=0; x<16; x++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80027f0:	e024      	b.n	800283c <StartDefaultTask+0x478>
					{
						histogram[x] >>= 9;
 80027f2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	33a8      	adds	r3, #168	@ 0xa8
 80027fa:	443b      	add	r3, r7
 80027fc:	f853 2c60 	ldr.w	r2, [r3, #-96]
 8002800:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002804:	0a52      	lsrs	r2, r2, #9
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	33a8      	adds	r3, #168	@ 0xa8
 800280a:	443b      	add	r3, r7
 800280c:	f843 2c60 	str.w	r2, [r3, #-96]
						if (histogram[x] > 0xFF)
 8002810:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	33a8      	adds	r3, #168	@ 0xa8
 8002818:	443b      	add	r3, r7
 800281a:	f853 3c60 	ldr.w	r3, [r3, #-96]
 800281e:	2bff      	cmp	r3, #255	@ 0xff
 8002820:	d907      	bls.n	8002832 <StartDefaultTask+0x46e>
							histogram[x] = 0xFF;
 8002822:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	33a8      	adds	r3, #168	@ 0xa8
 800282a:	443b      	add	r3, r7
 800282c:	22ff      	movs	r2, #255	@ 0xff
 800282e:	f843 2c60 	str.w	r2, [r3, #-96]
					for (uint8_t x=0; x<16; x++)
 8002832:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002836:	3301      	adds	r3, #1
 8002838:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800283c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d9d6      	bls.n	80027f2 <StartDefaultTask+0x42e>
					}

					//rysuj histogram na  ekranie
					setColor(GREEN);
 8002844:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8002848:	f001 fae6 	bl	8003e18 <setColor>
					WyswietlDane8("Rej", chRejKam[chWskRej], 10);
 800284c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002850:	33a8      	adds	r3, #168	@ 0xa8
 8002852:	443b      	add	r3, r7
 8002854:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002858:	220a      	movs	r2, #10
 800285a:	4619      	mov	r1, r3
 800285c:	483d      	ldr	r0, [pc, #244]	@ (8002954 <StartDefaultTask+0x590>)
 800285e:	f002 f8dd 	bl	8004a1c <WyswietlDane8>
					for (uint8_t x=0; x<16; x++)
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8002868:	e018      	b.n	800289c <StartDefaultTask+0x4d8>
						fillRect(x*8, 240-histogram[x], x*8+6, 240);
 800286a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800286e:	00d8      	lsls	r0, r3, #3
 8002870:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	33a8      	adds	r3, #168	@ 0xa8
 8002878:	443b      	add	r3, r7
 800287a:	f853 3c60 	ldr.w	r3, [r3, #-96]
 800287e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002882:	4619      	mov	r1, r3
 8002884:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	1d9a      	adds	r2, r3, #6
 800288c:	23f0      	movs	r3, #240	@ 0xf0
 800288e:	f001 fb05 	bl	8003e9c <fillRect>
					for (uint8_t x=0; x<16; x++)
 8002892:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002896:	3301      	adds	r3, #1
 8002898:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800289c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d9e2      	bls.n	800286a <StartDefaultTask+0x4a6>
				}
	  			break;
 80028a4:	e046      	b.n	8002934 <StartDefaultTask+0x570>

	      	case TP_KAM_SET5:
	      		if (chRysujRaz)
 80028a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002958 <StartDefaultTask+0x594>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d044      	beq.n	8002938 <StartDefaultTask+0x574>
	  			{
	      			chErr = InitKamera5();
 80028ae:	f7fe fe6f 	bl	8001590 <InitKamera5>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b25      	ldr	r3, [pc, #148]	@ (800294c <StartDefaultTask+0x588>)
 80028b8:	701a      	strb	r2, [r3, #0]
	  				chRysujRaz = 0;
 80028ba:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <StartDefaultTask+0x594>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
	  				chTrybPracy = TP_KAMERA_RGB;
 80028c0:	4b26      	ldr	r3, [pc, #152]	@ (800295c <StartDefaultTask+0x598>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 80028c6:	e037      	b.n	8002938 <StartDefaultTask+0x574>

	      	case TP_FRAKTAL:	FraktalDemo();		break;
 80028c8:	f002 fab2 	bl	8004e30 <FraktalDemo>
 80028cc:	e035      	b.n	800293a <StartDefaultTask+0x576>
	      	case TP_POMOC:		WyswietlPomoc();	break;
 80028ce:	f002 fd0f 	bl	80052f0 <WyswietlPomoc>
 80028d2:	e032      	b.n	800293a <StartDefaultTask+0x576>

	      	case TP_ZDJECIE:		//wykonaj zdjęcie o podanych rozmiarach
	      		chErr = ZrobZdjecie(sSzerZdjecia, sWysZdjecia);
 80028d4:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <StartDefaultTask+0x59c>)
 80028d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028da:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <StartDefaultTask+0x5a0>)
 80028dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80028e0:	b292      	uxth	r2, r2
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe ff15 	bl	8001714 <ZrobZdjecie>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b17      	ldr	r3, [pc, #92]	@ (800294c <StartDefaultTask+0x588>)
 80028f0:	701a      	strb	r2, [r3, #0]
	      		if (chErr)
 80028f2:	4b16      	ldr	r3, [pc, #88]	@ (800294c <StartDefaultTask+0x588>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <StartDefaultTask+0x53e>
	      			chStatusZdjecia = SGZ_BLAD;		//wystapił błąd wykonania zdjecia
 80028fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <StartDefaultTask+0x5a4>)
 80028fc:	2202      	movs	r2, #2
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e002      	b.n	8002908 <StartDefaultTask+0x544>
	      		else
	      			chStatusZdjecia = SGZ_GOTOWE;	//Zdjecie gotowe, można je pobrać
 8002902:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <StartDefaultTask+0x5a4>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
	      		WyswietlDane8("Wykonano zdjecie: ", chErr, 220);
 8002908:	4b10      	ldr	r3, [pc, #64]	@ (800294c <StartDefaultTask+0x588>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	22dc      	movs	r2, #220	@ 0xdc
 800290e:	4619      	mov	r1, r3
 8002910:	4816      	ldr	r0, [pc, #88]	@ (800296c <StartDefaultTask+0x5a8>)
 8002912:	f002 f883 	bl	8004a1c <WyswietlDane8>
	      		chTrybPracy = TP_KAMERA_RGB;		//wróć do wyświetlania obrazu
 8002916:	4b11      	ldr	r3, [pc, #68]	@ (800295c <StartDefaultTask+0x598>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
	      		chNowyObrazKamery = 1;
 800291c:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <StartDefaultTask+0x5ac>)
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
	      		break;
 8002922:	e00a      	b.n	800293a <StartDefaultTask+0x576>


	      	default:			break;
 8002924:	bf00      	nop
 8002926:	e008      	b.n	800293a <StartDefaultTask+0x576>
	  			break;
 8002928:	bf00      	nop
 800292a:	e006      	b.n	800293a <StartDefaultTask+0x576>
	  			break;
 800292c:	bf00      	nop
 800292e:	e004      	b.n	800293a <StartDefaultTask+0x576>
	  			break;
 8002930:	bf00      	nop
 8002932:	e002      	b.n	800293a <StartDefaultTask+0x576>
	  			break;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <StartDefaultTask+0x576>
	  			break;
 8002938:	bf00      	nop
	      }

	      /* USER CODE BEGIN 3 */
	      //BSP_LED_Toggle(LED_YELLOW);
	      BSP_LED_On(LED_YELLOW);
 800293a:	2001      	movs	r0, #1
 800293c:	f002 fe3e 	bl	80055bc <BSP_LED_On>

	      osDelay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f00f f9f8 	bl	8011d36 <osDelay>
	  	if (BspButtonState == BUTTON_PRESSED)
 8002946:	e557      	b.n	80023f8 <StartDefaultTask+0x34>
 8002948:	2404c124 	.word	0x2404c124
 800294c:	2404c0c5 	.word	0x2404c0c5
 8002950:	24000cfc 	.word	0x24000cfc
 8002954:	08016abc 	.word	0x08016abc
 8002958:	24000014 	.word	0x24000014
 800295c:	24000008 	.word	0x24000008
 8002960:	24000362 	.word	0x24000362
 8002964:	24000364 	.word	0x24000364
 8002968:	24000366 	.word	0x24000366
 800296c:	08016ac0 	.word	0x08016ac0
 8002970:	2404c11c 	.word	0x2404c11c

08002974 <MPU_Config>:


 /* MPU Configuration */

void MPU_Config(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800297a:	463b      	mov	r3, r7
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002986:	f003 f979 	bl	8005c7c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800298a:	2301      	movs	r3, #1
 800298c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800298e:	2300      	movs	r3, #0
 8002990:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002996:	231f      	movs	r3, #31
 8002998:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800299a:	2387      	movs	r3, #135	@ 0x87
 800299c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800299e:	2300      	movs	r3, #0
 80029a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80029a2:	2300      	movs	r3, #0
 80029a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80029a6:	2301      	movs	r3, #1
 80029a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80029b6:	463b      	mov	r3, r7
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 f997 	bl	8005cec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80029be:	2301      	movs	r3, #1
 80029c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80029c2:	4b13      	ldr	r3, [pc, #76]	@ (8002a10 <MPU_Config+0x9c>)
 80029c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80029c6:	2310      	movs	r3, #16
 80029c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80029d2:	2303      	movs	r3, #3
 80029d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80029da:	463b      	mov	r3, r7
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 f985 	bl	8005cec <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80029e2:	2302      	movs	r3, #2
 80029e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <MPU_Config+0xa0>)
 80029e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80029ea:	2307      	movs	r3, #7
 80029ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80029fa:	463b      	mov	r3, r7
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 f975 	bl	8005cec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002a02:	2004      	movs	r0, #4
 8002a04:	f003 f952 	bl	8005cac <HAL_MPU_Enable>

}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	30020000 	.word	0x30020000
 8002a14:	30040000 	.word	0x30040000

08002a18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a2a:	f002 ffe3 	bl	80059f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40001000 	.word	0x40001000

08002a3c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <BSP_PB_Callback+0x24>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	601a      	str	r2, [r3, #0]
  }
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	2404bd54 	.word	0x2404bd54

08002a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
}
 8002a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <Error_Handler+0x8>

08002a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <HAL_MspInit+0x58>)
 8002a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a86:	4a10      	ldr	r2, [pc, #64]	@ (8002ac8 <HAL_MspInit+0x58>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a90:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_MspInit+0x58>)
 8002a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	210f      	movs	r1, #15
 8002aa2:	f06f 0001 	mvn.w	r0, #1
 8002aa6:	f003 f8c1 	bl	8005c2c <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f008 fe88 	bl	800b7cc <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002abc:	f008 fecc 	bl	800b858 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58024400 	.word	0x58024400

08002acc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b08 <HAL_CRC_MspInit+0x3c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d10e      	bne.n	8002afc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_CRC_MspInit+0x40>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae4:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_CRC_MspInit+0x40>)
 8002ae6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002aee:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_CRC_MspInit+0x40>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	58024c00 	.word	0x58024c00
 8002b0c:	58024400 	.word	0x58024400

08002b10 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08e      	sub	sp, #56	@ 0x38
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7e      	ldr	r2, [pc, #504]	@ (8002d28 <HAL_DCMI_MspInit+0x218>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	f040 80f6 	bne.w	8002d20 <HAL_DCMI_MspInit+0x210>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002b34:	4b7d      	ldr	r3, [pc, #500]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002b44:	4b79      	ldr	r3, [pc, #484]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	623b      	str	r3, [r7, #32]
 8002b50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b52:	4b76      	ldr	r3, [pc, #472]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b58:	4a74      	ldr	r2, [pc, #464]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b5a:	f043 0310 	orr.w	r3, r3, #16
 8002b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b62:	4b72      	ldr	r3, [pc, #456]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b6e      	ldr	r3, [pc, #440]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b76:	4a6d      	ldr	r2, [pc, #436]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b80:	4b6a      	ldr	r3, [pc, #424]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8e:	4b67      	ldr	r3, [pc, #412]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b94:	4a65      	ldr	r2, [pc, #404]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002b96:	f043 0304 	orr.w	r3, r3, #4
 8002b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b9e:	4b63      	ldr	r3, [pc, #396]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bac:	4b5f      	ldr	r3, [pc, #380]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	4b58      	ldr	r3, [pc, #352]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bd0:	4a56      	ldr	r2, [pc, #344]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002bd2:	f043 0302 	orr.w	r3, r3, #2
 8002bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bda:	4b54      	ldr	r3, [pc, #336]	@ (8002d2c <HAL_DCMI_MspInit+0x21c>)
 8002bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002be8:	2370      	movs	r3, #112	@ 0x70
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bf8:	230d      	movs	r3, #13
 8002bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c00:	4619      	mov	r1, r3
 8002c02:	484b      	ldr	r0, [pc, #300]	@ (8002d30 <HAL_DCMI_MspInit+0x220>)
 8002c04:	f007 fdc4 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c08:	2310      	movs	r3, #16
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c10:	2302      	movs	r3, #2
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c14:	2302      	movs	r3, #2
 8002c16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c18:	230d      	movs	r3, #13
 8002c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c20:	4619      	mov	r1, r3
 8002c22:	4844      	ldr	r0, [pc, #272]	@ (8002d34 <HAL_DCMI_MspInit+0x224>)
 8002c24:	f007 fdb4 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c28:	2340      	movs	r3, #64	@ 0x40
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c34:	2302      	movs	r3, #2
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c38:	230d      	movs	r3, #13
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	483c      	ldr	r0, [pc, #240]	@ (8002d34 <HAL_DCMI_MspInit+0x224>)
 8002c44:	f007 fda4 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c48:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c52:	2302      	movs	r3, #2
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c56:	2302      	movs	r3, #2
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c5a:	230d      	movs	r3, #13
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c62:	4619      	mov	r1, r3
 8002c64:	4834      	ldr	r0, [pc, #208]	@ (8002d38 <HAL_DCMI_MspInit+0x228>)
 8002c66:	f007 fd93 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c72:	2302      	movs	r3, #2
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c76:	2302      	movs	r3, #2
 8002c78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c7a:	230d      	movs	r3, #13
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c82:	4619      	mov	r1, r3
 8002c84:	482d      	ldr	r0, [pc, #180]	@ (8002d3c <HAL_DCMI_MspInit+0x22c>)
 8002c86:	f007 fd83 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c96:	2302      	movs	r3, #2
 8002c98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002c9a:	230d      	movs	r3, #13
 8002c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4826      	ldr	r0, [pc, #152]	@ (8002d40 <HAL_DCMI_MspInit+0x230>)
 8002ca6:	f007 fd73 	bl	800a790 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB7_FMP);
 8002caa:	2020      	movs	r0, #32
 8002cac:	f008 fd6a 	bl	800b784 <HAL_I2CEx_EnableFastModePlus>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8002cb0:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cb2:	4a25      	ldr	r2, [pc, #148]	@ (8002d48 <HAL_DCMI_MspInit+0x238>)
 8002cb4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8002cb6:	4b23      	ldr	r3, [pc, #140]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cb8:	224b      	movs	r2, #75	@ 0x4b
 8002cba:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cbc:	4b21      	ldr	r3, [pc, #132]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc2:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cce:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cd6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cde:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002ce0:	4b18      	ldr	r3, [pc, #96]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8002ce6:	4b17      	ldr	r3, [pc, #92]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002ce8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cec:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002cf4:	4813      	ldr	r0, [pc, #76]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002cf6:	f003 fc0d 	bl	8006514 <HAL_DMA_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_DCMI_MspInit+0x1f4>
    {
      Error_Handler();
 8002d00:	f7ff feb0 	bl	8002a64 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a0f      	ldr	r2, [pc, #60]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002d08:	649a      	str	r2, [r3, #72]	@ 0x48
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d44 <HAL_DCMI_MspInit+0x234>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002d10:	2200      	movs	r2, #0
 8002d12:	2105      	movs	r1, #5
 8002d14:	204e      	movs	r0, #78	@ 0x4e
 8002d16:	f002 ff89 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8002d1a:	204e      	movs	r0, #78	@ 0x4e
 8002d1c:	f002 ffa0 	bl	8005c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002d20:	bf00      	nop
 8002d22:	3738      	adds	r7, #56	@ 0x38
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	48020000 	.word	0x48020000
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	58021000 	.word	0x58021000
 8002d34:	58020000 	.word	0x58020000
 8002d38:	58020800 	.word	0x58020800
 8002d3c:	58020c00 	.word	0x58020c00
 8002d40:	58020400 	.word	0x58020400
 8002d44:	2404bdcc 	.word	0x2404bdcc
 8002d48:	40020010 	.word	0x40020010

08002d4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08e      	sub	sp, #56	@ 0x38
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a61      	ldr	r2, [pc, #388]	@ (8002ef0 <HAL_ETH_MspInit+0x1a4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	f040 80bb 	bne.w	8002ee6 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002d70:	4b60      	ldr	r3, [pc, #384]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d76:	4a5f      	ldr	r2, [pc, #380]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d80:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002d82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002d8e:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d94:	4a57      	ldr	r2, [pc, #348]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d9e:	4b55      	ldr	r3, [pc, #340]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002dac:	4b51      	ldr	r3, [pc, #324]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002db2:	4a50      	ldr	r2, [pc, #320]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dca:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd0:	4a48      	ldr	r2, [pc, #288]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dda:	4b46      	ldr	r3, [pc, #280]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de8:	4b42      	ldr	r3, [pc, #264]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dee:	4a41      	ldr	r2, [pc, #260]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e0c:	4a39      	ldr	r2, [pc, #228]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e16:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e24:	4b33      	ldr	r3, [pc, #204]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e2a:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e34:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef4 <HAL_ETH_MspInit+0x1a8>)
 8002e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e42:	2302      	movs	r3, #2
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e52:	230b      	movs	r3, #11
 8002e54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4826      	ldr	r0, [pc, #152]	@ (8002ef8 <HAL_ETH_MspInit+0x1ac>)
 8002e5e:	f007 fc97 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002e62:	2386      	movs	r3, #134	@ 0x86
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e72:	230b      	movs	r3, #11
 8002e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	481f      	ldr	r0, [pc, #124]	@ (8002efc <HAL_ETH_MspInit+0x1b0>)
 8002e7e:	f007 fc87 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e82:	2330      	movs	r3, #48	@ 0x30
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e86:	2302      	movs	r3, #2
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e92:	230b      	movs	r3, #11
 8002e94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4816      	ldr	r0, [pc, #88]	@ (8002ef8 <HAL_ETH_MspInit+0x1ac>)
 8002e9e:	f007 fc77 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002eb4:	230b      	movs	r3, #11
 8002eb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4810      	ldr	r0, [pc, #64]	@ (8002f00 <HAL_ETH_MspInit+0x1b4>)
 8002ec0:	f007 fc66 	bl	800a790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002ec4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ed6:	230b      	movs	r3, #11
 8002ed8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4808      	ldr	r0, [pc, #32]	@ (8002f04 <HAL_ETH_MspInit+0x1b8>)
 8002ee2:	f007 fc55 	bl	800a790 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002ee6:	bf00      	nop
 8002ee8:	3738      	adds	r7, #56	@ 0x38
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40028000 	.word	0x40028000
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	58020800 	.word	0x58020800
 8002efc:	58020000 	.word	0x58020000
 8002f00:	58020400 	.word	0x58020400
 8002f04:	58021800 	.word	0x58021800

08002f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f20:	f107 0310 	add.w	r3, r7, #16
 8002f24:	22c0      	movs	r2, #192	@ 0xc0
 8002f26:	2100      	movs	r1, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f010 fe98 	bl	8013c5e <memset>
  if(hi2c->Instance==I2C4)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a27      	ldr	r2, [pc, #156]	@ (8002fd0 <HAL_I2C_MspInit+0xc8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d147      	bne.n	8002fc8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002f38:	f04f 0210 	mov.w	r2, #16
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8002f44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	4618      	mov	r0, r3
 8002f52:	f009 fd13 	bl	800c97c <HAL_RCCEx_PeriphCLKConfig>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002f5c:	f7ff fd82 	bl	8002a64 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f60:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <HAL_I2C_MspInit+0xcc>)
 8002f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f66:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd4 <HAL_I2C_MspInit+0xcc>)
 8002f68:	f043 0320 	orr.w	r3, r3, #32
 8002f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <HAL_I2C_MspInit+0xcc>)
 8002f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f7e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f86:	2312      	movs	r3, #18
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002f98:	2304      	movs	r3, #4
 8002f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	480c      	ldr	r0, [pc, #48]	@ (8002fd8 <HAL_I2C_MspInit+0xd0>)
 8002fa6:	f007 fbf3 	bl	800a790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_I2C_MspInit+0xcc>)
 8002fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fb0:	4a08      	ldr	r2, [pc, #32]	@ (8002fd4 <HAL_I2C_MspInit+0xcc>)
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_I2C_MspInit+0xcc>)
 8002fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002fc8:	bf00      	nop
 8002fca:	37e8      	adds	r7, #232	@ 0xe8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	58001c00 	.word	0x58001c00
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	58021400 	.word	0x58021400

08002fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8003018 <HAL_TIM_Base_MspInit+0x3c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002fee:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_TIM_Base_MspInit+0x40>)
 8002ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ff4:	4a09      	ldr	r2, [pc, #36]	@ (800301c <HAL_TIM_Base_MspInit+0x40>)
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ffe:	4b07      	ldr	r3, [pc, #28]	@ (800301c <HAL_TIM_Base_MspInit+0x40>)
 8003000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40002000 	.word	0x40002000
 800301c:	58024400 	.word	0x58024400

08003020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	@ (800308c <HAL_TIM_MspPostInit+0x6c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d11f      	bne.n	8003082 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003042:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <HAL_TIM_MspPostInit+0x70>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003048:	4a11      	ldr	r2, [pc, #68]	@ (8003090 <HAL_TIM_MspPostInit+0x70>)
 800304a:	f043 0320 	orr.w	r3, r3, #32
 800304e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003052:	4b0f      	ldr	r3, [pc, #60]	@ (8003090 <HAL_TIM_MspPostInit+0x70>)
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003064:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003072:	2309      	movs	r3, #9
 8003074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	4619      	mov	r1, r3
 800307c:	4805      	ldr	r0, [pc, #20]	@ (8003094 <HAL_TIM_MspPostInit+0x74>)
 800307e:	f007 fb87 	bl	800a790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003082:	bf00      	nop
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40002000 	.word	0x40002000
 8003090:	58024400 	.word	0x58024400
 8003094:	58021400 	.word	0x58021400

08003098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b0bc      	sub	sp, #240	@ 0xf0
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b0:	f107 0318 	add.w	r3, r7, #24
 80030b4:	22c0      	movs	r2, #192	@ 0xc0
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f010 fdd0 	bl	8013c5e <memset>
  if(huart->Instance==UART7)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a54      	ldr	r2, [pc, #336]	@ (8003214 <HAL_UART_MspInit+0x17c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d14e      	bne.n	8003166 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80030c8:	f04f 0202 	mov.w	r2, #2
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030da:	f107 0318 	add.w	r3, r7, #24
 80030de:	4618      	mov	r0, r3
 80030e0:	f009 fc4c 	bl	800c97c <HAL_RCCEx_PeriphCLKConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80030ea:	f7ff fcbb 	bl	8002a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80030ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003218 <HAL_UART_MspInit+0x180>)
 80030f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030f4:	4a48      	ldr	r2, [pc, #288]	@ (8003218 <HAL_UART_MspInit+0x180>)
 80030f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030fe:	4b46      	ldr	r3, [pc, #280]	@ (8003218 <HAL_UART_MspInit+0x180>)
 8003100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003104:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800310c:	4b42      	ldr	r3, [pc, #264]	@ (8003218 <HAL_UART_MspInit+0x180>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003112:	4a41      	ldr	r2, [pc, #260]	@ (8003218 <HAL_UART_MspInit+0x180>)
 8003114:	f043 0320 	orr.w	r3, r3, #32
 8003118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800311c:	4b3e      	ldr	r3, [pc, #248]	@ (8003218 <HAL_UART_MspInit+0x180>)
 800311e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800312a:	23c0      	movs	r3, #192	@ 0xc0
 800312c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003142:	2307      	movs	r3, #7
 8003144:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003148:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800314c:	4619      	mov	r1, r3
 800314e:	4833      	ldr	r0, [pc, #204]	@ (800321c <HAL_UART_MspInit+0x184>)
 8003150:	f007 fb1e 	bl	800a790 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2105      	movs	r1, #5
 8003158:	2052      	movs	r0, #82	@ 0x52
 800315a:	f002 fd67 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800315e:	2052      	movs	r0, #82	@ 0x52
 8003160:	f002 fd7e 	bl	8005c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003164:	e052      	b.n	800320c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2d      	ldr	r2, [pc, #180]	@ (8003220 <HAL_UART_MspInit+0x188>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d14d      	bne.n	800320c <HAL_UART_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003170:	f04f 0202 	mov.w	r2, #2
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003182:	f107 0318 	add.w	r3, r7, #24
 8003186:	4618      	mov	r0, r3
 8003188:	f009 fbf8 	bl	800c97c <HAL_RCCEx_PeriphCLKConfig>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8003192:	f7ff fc67 	bl	8002a64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003196:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <HAL_UART_MspInit+0x180>)
 8003198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800319c:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <HAL_UART_MspInit+0x180>)
 800319e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <HAL_UART_MspInit+0x180>)
 80031a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031b4:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <HAL_UART_MspInit+0x180>)
 80031b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ba:	4a17      	ldr	r2, [pc, #92]	@ (8003218 <HAL_UART_MspInit+0x180>)
 80031bc:	f043 0308 	orr.w	r3, r3, #8
 80031c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c4:	4b14      	ldr	r3, [pc, #80]	@ (8003218 <HAL_UART_MspInit+0x180>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031d2:	2360      	movs	r3, #96	@ 0x60
 80031d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e4:	2300      	movs	r3, #0
 80031e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ea:	2307      	movs	r3, #7
 80031ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031f4:	4619      	mov	r1, r3
 80031f6:	480b      	ldr	r0, [pc, #44]	@ (8003224 <HAL_UART_MspInit+0x18c>)
 80031f8:	f007 faca 	bl	800a790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2105      	movs	r1, #5
 8003200:	2026      	movs	r0, #38	@ 0x26
 8003202:	f002 fd13 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003206:	2026      	movs	r0, #38	@ 0x26
 8003208:	f002 fd2a 	bl	8005c60 <HAL_NVIC_EnableIRQ>
}
 800320c:	bf00      	nop
 800320e:	37f0      	adds	r7, #240	@ 0xf0
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40007800 	.word	0x40007800
 8003218:	58024400 	.word	0x58024400
 800321c:	58021400 	.word	0x58021400
 8003220:	40004400 	.word	0x40004400
 8003224:	58020c00 	.word	0x58020c00

08003228 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b090      	sub	sp, #64	@ 0x40
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	d827      	bhi.n	8003286 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003236:	2200      	movs	r2, #0
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	2036      	movs	r0, #54	@ 0x36
 800323c:	f002 fcf6 	bl	8005c2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003240:	2036      	movs	r0, #54	@ 0x36
 8003242:	f002 fd0d 	bl	8005c60 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003246:	4a29      	ldr	r2, [pc, #164]	@ (80032ec <HAL_InitTick+0xc4>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800324c:	4b28      	ldr	r3, [pc, #160]	@ (80032f0 <HAL_InitTick+0xc8>)
 800324e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003252:	4a27      	ldr	r2, [pc, #156]	@ (80032f0 <HAL_InitTick+0xc8>)
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800325c:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <HAL_InitTick+0xc8>)
 800325e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800326a:	f107 0210 	add.w	r2, r7, #16
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f009 fb3f 	bl	800c8f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800327a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	2b00      	cmp	r3, #0
 8003282:	d106      	bne.n	8003292 <HAL_InitTick+0x6a>
 8003284:	e001      	b.n	800328a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e02b      	b.n	80032e2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800328a:	f009 fb09 	bl	800c8a0 <HAL_RCC_GetPCLK1Freq>
 800328e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003290:	e004      	b.n	800329c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003292:	f009 fb05 	bl	800c8a0 <HAL_RCC_GetPCLK1Freq>
 8003296:	4603      	mov	r3, r0
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800329c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329e:	4a15      	ldr	r2, [pc, #84]	@ (80032f4 <HAL_InitTick+0xcc>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	0c9b      	lsrs	r3, r3, #18
 80032a6:	3b01      	subs	r3, #1
 80032a8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032aa:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <HAL_InitTick+0xd0>)
 80032ac:	4a13      	ldr	r2, [pc, #76]	@ (80032fc <HAL_InitTick+0xd4>)
 80032ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032b0:	4b11      	ldr	r3, [pc, #68]	@ (80032f8 <HAL_InitTick+0xd0>)
 80032b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032b8:	4a0f      	ldr	r2, [pc, #60]	@ (80032f8 <HAL_InitTick+0xd0>)
 80032ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032be:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <HAL_InitTick+0xd0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c4:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <HAL_InitTick+0xd0>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80032ca:	480b      	ldr	r0, [pc, #44]	@ (80032f8 <HAL_InitTick+0xd0>)
 80032cc:	f00b f982 	bl	800e5d4 <HAL_TIM_Base_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80032d6:	4808      	ldr	r0, [pc, #32]	@ (80032f8 <HAL_InitTick+0xd0>)
 80032d8:	f00b f9d4 	bl	800e684 <HAL_TIM_Base_Start_IT>
 80032dc:	4603      	mov	r3, r0
 80032de:	e000      	b.n	80032e2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3740      	adds	r7, #64	@ 0x40
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	24000034 	.word	0x24000034
 80032f0:	58024400 	.word	0x58024400
 80032f4:	431bde83 	.word	0x431bde83
 80032f8:	2404c0d0 	.word	0x2404c0d0
 80032fc:	40001000 	.word	0x40001000

08003300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <NMI_Handler+0x4>

08003308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <HardFault_Handler+0x4>

08003310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <MemManage_Handler+0x4>

08003318 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <BusFault_Handler+0x4>

08003320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <UsageFault_Handler+0x4>

08003328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800333c:	4803      	ldr	r0, [pc, #12]	@ (800334c <DMA1_Stream0_IRQHandler+0x14>)
 800333e:	f004 fc13 	bl	8007b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  chObrazGotowy = 1;
 8003342:	4b03      	ldr	r3, [pc, #12]	@ (8003350 <DMA1_Stream0_IRQHandler+0x18>)
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}
 800334c:	2404bdcc 	.word	0x2404bdcc
 8003350:	2404c124 	.word	0x2404c124

08003354 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003358:	4802      	ldr	r0, [pc, #8]	@ (8003364 <USART2_IRQHandler+0x10>)
 800335a:	f00c f973 	bl	800f644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2404c028 	.word	0x2404c028

08003368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800336c:	2000      	movs	r0, #0
 800336e:	f002 fa15 	bl	800579c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800337c:	4809      	ldr	r0, [pc, #36]	@ (80033a4 <TIM6_DAC_IRQHandler+0x2c>)
 800337e:	f00b fa5a 	bl	800e836 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  if (sMenuTimer)
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <TIM6_DAC_IRQHandler+0x30>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <TIM6_DAC_IRQHandler+0x1e>
	  sMenuTimer--;
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <TIM6_DAC_IRQHandler+0x30>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <TIM6_DAC_IRQHandler+0x30>)
 8003394:	801a      	strh	r2, [r3, #0]
  nCzasSystemowy++;		//odmierza znacznik czasu ramek komunikacyjnych
 8003396:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <TIM6_DAC_IRQHandler+0x34>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	4a03      	ldr	r2, [pc, #12]	@ (80033ac <TIM6_DAC_IRQHandler+0x34>)
 800339e:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2404c0d0 	.word	0x2404c0d0
 80033a8:	2400000a 	.word	0x2400000a
 80033ac:	2404c120 	.word	0x2404c120

080033b0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
	//BSP_LED_Toggle(LED_RED);
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80033b4:	4802      	ldr	r0, [pc, #8]	@ (80033c0 <DCMI_IRQHandler+0x10>)
 80033b6:	f002 ff7b 	bl	80062b0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  //NowyObrazKamery = 1;
  /* USER CODE END DCMI_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2404bd7c 	.word	0x2404bd7c

080033c4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80033c8:	4802      	ldr	r0, [pc, #8]	@ (80033d4 <UART7_IRQHandler+0x10>)
 80033ca:	f00c f93b 	bl	800f644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2404bf94 	.word	0x2404bf94

080033d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return 1;
 80033dc:	2301      	movs	r3, #1
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_kill>:

int _kill(int pid, int sig)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033f2:	f010 fcdd 	bl	8013db0 <__errno>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2216      	movs	r2, #22
 80033fa:	601a      	str	r2, [r3, #0]
  return -1;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_exit>:

void _exit (int status)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003410:	f04f 31ff 	mov.w	r1, #4294967295
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ffe7 	bl	80033e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <_exit+0x12>

0800341e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e00a      	b.n	8003446 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003430:	f3af 8000 	nop.w
 8003434:	4601      	mov	r1, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	60ba      	str	r2, [r7, #8]
 800343c:	b2ca      	uxtb	r2, r1
 800343e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3301      	adds	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	dbf0      	blt.n	8003430 <_read+0x12>
  }

  return len;
 800344e:	687b      	ldr	r3, [r7, #4]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	e009      	b.n	800347e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	60ba      	str	r2, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f002 fa06 	bl	8005884 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3301      	adds	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	dbf1      	blt.n	800346a <_write+0x12>
  }
  return len;
 8003486:	687b      	ldr	r3, [r7, #4]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_close>:

int _close(int file)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034b8:	605a      	str	r2, [r3, #4]
  return 0;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <_isatty>:

int _isatty(int file)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003500:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <_sbrk+0x5c>)
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <_sbrk+0x60>)
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <_sbrk+0x64>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <_sbrk+0x64>)
 8003516:	4a12      	ldr	r2, [pc, #72]	@ (8003560 <_sbrk+0x68>)
 8003518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <_sbrk+0x64>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	429a      	cmp	r2, r3
 8003526:	d207      	bcs.n	8003538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003528:	f010 fc42 	bl	8013db0 <__errno>
 800352c:	4603      	mov	r3, r0
 800352e:	220c      	movs	r2, #12
 8003530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	e009      	b.n	800354c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003538:	4b08      	ldr	r3, [pc, #32]	@ (800355c <_sbrk+0x64>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <_sbrk+0x64>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4413      	add	r3, r2
 8003546:	4a05      	ldr	r2, [pc, #20]	@ (800355c <_sbrk+0x64>)
 8003548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800354a:	68fb      	ldr	r3, [r7, #12]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	24080000 	.word	0x24080000
 8003558:	00000400 	.word	0x00000400
 800355c:	2404c128 	.word	0x2404c128
 8003560:	240758c8 	.word	0x240758c8

08003564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003564:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800359c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003568:	f7fd f88a 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800356c:	480c      	ldr	r0, [pc, #48]	@ (80035a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800356e:	490d      	ldr	r1, [pc, #52]	@ (80035a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003570:	4a0d      	ldr	r2, [pc, #52]	@ (80035a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003574:	e002      	b.n	800357c <LoopCopyDataInit>

08003576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357a:	3304      	adds	r3, #4

0800357c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800357c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800357e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003580:	d3f9      	bcc.n	8003576 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003582:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003584:	4c0a      	ldr	r4, [pc, #40]	@ (80035b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003588:	e001      	b.n	800358e <LoopFillZerobss>

0800358a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800358c:	3204      	adds	r2, #4

0800358e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800358e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003590:	d3fb      	bcc.n	800358a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003592:	f010 fc13 	bl	8013dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003596:	f7fe fa5f 	bl	8001a58 <main>
  bx  lr
 800359a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800359c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80035a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80035a4:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 80035a8:	08018258 	.word	0x08018258
  ldr r2, =_sbss
 80035ac:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 80035b0:	240758c8 	.word	0x240758c8

080035b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b4:	e7fe      	b.n	80035b4 <ADC3_IRQHandler>
	...

080035b8 <LCD_write_com>:
// Wysy�a polecenie do wy�wietlacza LCD
// Parametry: chDane
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void LCD_write_com(unsigned char chData)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));							//PB1=CS=0
 80035c2:	4b37      	ldr	r3, [pc, #220]	@ (80036a0 <LCD_write_com+0xe8>)
 80035c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035c8:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<(LCD_RS+CLEAR)) + (1<<(LCD_WR+CLEAR));	//PC3=RS=0
 80035ca:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <LCD_write_com+0xec>)
 80035cc:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80035d0:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = (1<<LCD_RD);									//PA3=RD=1
 80035d2:	4b35      	ldr	r3, [pc, #212]	@ (80036a8 <LCD_write_com+0xf0>)
 80035d4:	2208      	movs	r2, #8
 80035d6:	619a      	str	r2, [r3, #24]

	//dane są rozsiane po różnych portach, więc poskładaj je
	GPIOA->BSRR = (1<<(8+ ((chData & 0x40) != 0x40)*CLEAR)); 	//D6 @ PA.8
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <LCD_write_com+0x30>
 80035e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035e6:	e001      	b.n	80035ec <LCD_write_com+0x34>
 80035e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ec:	4a2e      	ldr	r2, [pc, #184]	@ (80036a8 <LCD_write_com+0xf0>)
 80035ee:	6193      	str	r3, [r2, #24]
	GPIOD->BSRR = (1<<(15+((chData & 0x02) != 0x02)*CLEAR)); 	//D1 @ PD.15
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <LCD_write_com+0x48>
 80035fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80035fe:	e001      	b.n	8003604 <LCD_write_com+0x4c>
 8003600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003604:	4a29      	ldr	r2, [pc, #164]	@ (80036ac <LCD_write_com+0xf4>)
 8003606:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <LCD_write_com+0x60>
 8003612:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003616:	e001      	b.n	800361c <LCD_write_com+0x64>
 8003618:	f44f 6200 	mov.w	r2, #2048	@ 0x800
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <LCD_write_com+0x74>
 8003626:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800362a:	e001      	b.n	8003630 <LCD_write_com+0x78>
 800362c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003630:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x10) != 0x10)*CLEAR));	//D4 @ PE.14
 8003632:	79fa      	ldrb	r2, [r7, #7]
 8003634:	f002 0210 	and.w	r2, r2, #16
 8003638:	2a00      	cmp	r2, #0
 800363a:	d102      	bne.n	8003642 <LCD_write_com+0x8a>
 800363c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003640:	e001      	b.n	8003646 <LCD_write_com+0x8e>
 8003642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 8003646:	431a      	orrs	r2, r3
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003648:	4b19      	ldr	r3, [pc, #100]	@ (80036b0 <LCD_write_com+0xf8>)
 800364a:	619a      	str	r2, [r3, #24]
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <LCD_write_com+0xa4>
 8003656:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800365a:	e001      	b.n	8003660 <LCD_write_com+0xa8>
 800365c:	f44f 7200 	mov.w	r2, #512	@ 0x200
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 8003660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003664:	2b00      	cmp	r3, #0
 8003666:	db02      	blt.n	800366e <LCD_write_com+0xb6>
 8003668:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800366c:	e001      	b.n	8003672 <LCD_write_com+0xba>
 800366e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003672:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x04) != 0x04)*CLEAR));	//D2 @ PG.14
 8003674:	79fa      	ldrb	r2, [r7, #7]
 8003676:	f002 0204 	and.w	r2, r2, #4
 800367a:	2a00      	cmp	r2, #0
 800367c:	d102      	bne.n	8003684 <LCD_write_com+0xcc>
 800367e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003682:	e001      	b.n	8003688 <LCD_write_com+0xd0>
 8003684:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 8003688:	431a      	orrs	r2, r3
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 800368a:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <LCD_write_com+0xfc>)
 800368c:	619a      	str	r2, [r3, #24]

	GPIOC->BSRR = (1<<LCD_WR);				//PC0=WR=1
 800368e:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <LCD_write_com+0xec>)
 8003690:	2201      	movs	r2, #1
 8003692:	619a      	str	r2, [r3, #24]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	58020400 	.word	0x58020400
 80036a4:	58020800 	.word	0x58020800
 80036a8:	58020000 	.word	0x58020000
 80036ac:	58020c00 	.word	0x58020c00
 80036b0:	58021000 	.word	0x58021000
 80036b4:	58021800 	.word	0x58021800

080036b8 <LCD_write_dat>:
// Wysyła dane do wyświetlacza LCD
// Parametry: chDane
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void LCD_write_dat(unsigned char chData)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));					//PB1=CS=0
 80036c2:	4b37      	ldr	r3, [pc, #220]	@ (80037a0 <LCD_write_dat+0xe8>)
 80036c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036c8:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<LCD_RS) + (1<<(LCD_WR+CLEAR));	//PC3=RS=1 + PC0=WR=0
 80036ca:	4b36      	ldr	r3, [pc, #216]	@ (80037a4 <LCD_write_dat+0xec>)
 80036cc:	4a36      	ldr	r2, [pc, #216]	@ (80037a8 <LCD_write_dat+0xf0>)
 80036ce:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = (1<<LCD_RD);							//PA3=RD=1
 80036d0:	4b36      	ldr	r3, [pc, #216]	@ (80037ac <LCD_write_dat+0xf4>)
 80036d2:	2208      	movs	r2, #8
 80036d4:	619a      	str	r2, [r3, #24]

	//dane są rozsiane po różnych portach, więc poskładaj je
	GPIOA->BSRR = (1<<(8+ ((chData & 0x40) != 0x40)*CLEAR)); 	//D6 @ PA.8
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <LCD_write_dat+0x2e>
 80036e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036e4:	e001      	b.n	80036ea <LCD_write_dat+0x32>
 80036e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ea:	4a30      	ldr	r2, [pc, #192]	@ (80037ac <LCD_write_dat+0xf4>)
 80036ec:	6193      	str	r3, [r2, #24]
	GPIOD->BSRR = (1<<(15+((chData & 0x02) != 0x02)*CLEAR)); 	//D1 @ PD.15
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <LCD_write_dat+0x46>
 80036f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80036fc:	e001      	b.n	8003702 <LCD_write_dat+0x4a>
 80036fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003702:	4a2b      	ldr	r2, [pc, #172]	@ (80037b0 <LCD_write_dat+0xf8>)
 8003704:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <LCD_write_dat+0x5e>
 8003710:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003714:	e001      	b.n	800371a <LCD_write_dat+0x62>
 8003716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <LCD_write_dat+0x72>
 8003724:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003728:	e001      	b.n	800372e <LCD_write_dat+0x76>
 800372a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 800372e:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x10) != 0x10)*CLEAR));	//D4 @ PE.14
 8003730:	79fa      	ldrb	r2, [r7, #7]
 8003732:	f002 0210 	and.w	r2, r2, #16
 8003736:	2a00      	cmp	r2, #0
 8003738:	d102      	bne.n	8003740 <LCD_write_dat+0x88>
 800373a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800373e:	e001      	b.n	8003744 <LCD_write_dat+0x8c>
 8003740:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 8003744:	431a      	orrs	r2, r3
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003746:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <LCD_write_dat+0xfc>)
 8003748:	619a      	str	r2, [r3, #24]
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <LCD_write_dat+0xa2>
 8003754:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003758:	e001      	b.n	800375e <LCD_write_dat+0xa6>
 800375a:	f44f 7200 	mov.w	r2, #512	@ 0x200
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db02      	blt.n	800376c <LCD_write_dat+0xb4>
 8003766:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800376a:	e001      	b.n	8003770 <LCD_write_dat+0xb8>
 800376c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003770:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x04) != 0x04)*CLEAR));	//D2 @ PG.14
 8003772:	79fa      	ldrb	r2, [r7, #7]
 8003774:	f002 0204 	and.w	r2, r2, #4
 8003778:	2a00      	cmp	r2, #0
 800377a:	d102      	bne.n	8003782 <LCD_write_dat+0xca>
 800377c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003780:	e001      	b.n	8003786 <LCD_write_dat+0xce>
 8003782:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 8003786:	431a      	orrs	r2, r3
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003788:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <LCD_write_dat+0x100>)
 800378a:	619a      	str	r2, [r3, #24]

	GPIOC->BSRR = (1<<LCD_WR);				//PC0=WR=1
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <LCD_write_dat+0xec>)
 800378e:	2201      	movs	r2, #1
 8003790:	619a      	str	r2, [r3, #24]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	58020400 	.word	0x58020400
 80037a4:	58020800 	.word	0x58020800
 80037a8:	00010008 	.word	0x00010008
 80037ac:	58020000 	.word	0x58020000
 80037b0:	58020c00 	.word	0x58020c00
 80037b4:	58021000 	.word	0x58021000
 80037b8:	58021800 	.word	0x58021800

080037bc <LCD_init>:
// Konfiguracja wy�wietlacza LCD
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void LCD_init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 80037c0:	2014      	movs	r0, #20
 80037c2:	f002 f937 	bl	8005a34 <HAL_Delay>
	// LCD_RESET 1 - 0 - 1
	GPIOC->BSRR = (1<<LCD_RST);			//PC2=RES=1
 80037c6:	4bc9      	ldr	r3, [pc, #804]	@ (8003aec <LCD_init+0x330>)
 80037c8:	2204      	movs	r2, #4
 80037ca:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 80037cc:	200a      	movs	r0, #10
 80037ce:	f002 f931 	bl	8005a34 <HAL_Delay>
	GPIOC->BSRR = (1<<(LCD_RST+CLEAR));	//PC2=RES=0
 80037d2:	4bc6      	ldr	r3, [pc, #792]	@ (8003aec <LCD_init+0x330>)
 80037d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80037d8:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 80037da:	2014      	movs	r0, #20
 80037dc:	f002 f92a 	bl	8005a34 <HAL_Delay>
	GPIOC->BSRR = (1<<LCD_RST);			//PC2=RES=1
 80037e0:	4bc2      	ldr	r3, [pc, #776]	@ (8003aec <LCD_init+0x330>)
 80037e2:	2204      	movs	r2, #4
 80037e4:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 80037e6:	2014      	movs	r0, #20
 80037e8:	f002 f924 	bl	8005a34 <HAL_Delay>
	// CS HIGH, WR HIGH, RD HIGH, CS LOW
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80037ec:	4bc0      	ldr	r3, [pc, #768]	@ (8003af0 <LCD_init+0x334>)
 80037ee:	2202      	movs	r2, #2
 80037f0:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 80037f2:	4bbe      	ldr	r3, [pc, #760]	@ (8003aec <LCD_init+0x330>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = (1<<LCD_RD);			//PA3=RD=1
 80037f8:	4bbe      	ldr	r3, [pc, #760]	@ (8003af4 <LCD_init+0x338>)
 80037fa:	2208      	movs	r2, #8
 80037fc:	619a      	str	r2, [r3, #24]

	//dodane
	LCD_write_com(0xEF);
 80037fe:	20ef      	movs	r0, #239	@ 0xef
 8003800:	f7ff feda 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x03);
 8003804:	2003      	movs	r0, #3
 8003806:	f7ff ff57 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x80);
 800380a:	2080      	movs	r0, #128	@ 0x80
 800380c:	f7ff ff54 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x02);
 8003810:	2002      	movs	r0, #2
 8003812:	f7ff ff51 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003816:	4bb6      	ldr	r3, [pc, #728]	@ (8003af0 <LCD_init+0x334>)
 8003818:	2202      	movs	r2, #2
 800381a:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xCF);
 800381c:	20cf      	movs	r0, #207	@ 0xcf
 800381e:	f7ff fecb 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x00);
 8003822:	2000      	movs	r0, #0
 8003824:	f7ff ff48 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0xC1);
 8003828:	20c1      	movs	r0, #193	@ 0xc1
 800382a:	f7ff ff45 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x30);
 800382e:	2030      	movs	r0, #48	@ 0x30
 8003830:	f7ff ff42 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003834:	4bae      	ldr	r3, [pc, #696]	@ (8003af0 <LCD_init+0x334>)
 8003836:	2202      	movs	r2, #2
 8003838:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xED);
 800383a:	20ed      	movs	r0, #237	@ 0xed
 800383c:	f7ff febc 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x64);
 8003840:	2064      	movs	r0, #100	@ 0x64
 8003842:	f7ff ff39 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x03);
 8003846:	2003      	movs	r0, #3
 8003848:	f7ff ff36 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x12);
 800384c:	2012      	movs	r0, #18
 800384e:	f7ff ff33 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x81);
 8003852:	2081      	movs	r0, #129	@ 0x81
 8003854:	f7ff ff30 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003858:	4ba5      	ldr	r3, [pc, #660]	@ (8003af0 <LCD_init+0x334>)
 800385a:	2202      	movs	r2, #2
 800385c:	619a      	str	r2, [r3, #24]

	//dodane
	LCD_write_com(0xE8);
 800385e:	20e8      	movs	r0, #232	@ 0xe8
 8003860:	f7ff feaa 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x85);
 8003864:	2085      	movs	r0, #133	@ 0x85
 8003866:	f7ff ff27 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x00);
 800386a:	2000      	movs	r0, #0
 800386c:	f7ff ff24 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x79);
 8003870:	2079      	movs	r0, #121	@ 0x79
 8003872:	f7ff ff21 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003876:	4b9e      	ldr	r3, [pc, #632]	@ (8003af0 <LCD_init+0x334>)
 8003878:	2202      	movs	r2, #2
 800387a:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xCB);
 800387c:	20cb      	movs	r0, #203	@ 0xcb
 800387e:	f7ff fe9b 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x39);
 8003882:	2039      	movs	r0, #57	@ 0x39
 8003884:	f7ff ff18 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x2C);
 8003888:	202c      	movs	r0, #44	@ 0x2c
 800388a:	f7ff ff15 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x00);
 800388e:	2000      	movs	r0, #0
 8003890:	f7ff ff12 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x34);
 8003894:	2034      	movs	r0, #52	@ 0x34
 8003896:	f7ff ff0f 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x02);
 800389a:	2002      	movs	r0, #2
 800389c:	f7ff ff0c 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80038a0:	4b93      	ldr	r3, [pc, #588]	@ (8003af0 <LCD_init+0x334>)
 80038a2:	2202      	movs	r2, #2
 80038a4:	619a      	str	r2, [r3, #24]

	//dodane
	LCD_write_com(0xF7);	//?
 80038a6:	20f7      	movs	r0, #247	@ 0xf7
 80038a8:	f7ff fe86 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x20);
 80038ac:	2020      	movs	r0, #32
 80038ae:	f7ff ff03 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80038b2:	4b8f      	ldr	r3, [pc, #572]	@ (8003af0 <LCD_init+0x334>)
 80038b4:	2202      	movs	r2, #2
 80038b6:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xEA);	//?
 80038b8:	20ea      	movs	r0, #234	@ 0xea
 80038ba:	f7ff fe7d 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x00);
 80038be:	2000      	movs	r0, #0
 80038c0:	f7ff fefa 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x00);
 80038c4:	2000      	movs	r0, #0
 80038c6:	f7ff fef7 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80038ca:	4b89      	ldr	r3, [pc, #548]	@ (8003af0 <LCD_init+0x334>)
 80038cc:	2202      	movs	r2, #2
 80038ce:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC0); //Power control
 80038d0:	20c0      	movs	r0, #192	@ 0xc0
 80038d2:	f7ff fe71 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x23); //VRH[5:0]
 80038d6:	2023      	movs	r0, #35	@ 0x23
 80038d8:	f7ff feee 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80038dc:	4b84      	ldr	r3, [pc, #528]	@ (8003af0 <LCD_init+0x334>)
 80038de:	2202      	movs	r2, #2
 80038e0:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC1); //Power control
 80038e2:	20c1      	movs	r0, #193	@ 0xc1
 80038e4:	f7ff fe68 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x11); //SAP[2:0];BT[3:0]
 80038e8:	2011      	movs	r0, #17
 80038ea:	f7ff fee5 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80038ee:	4b80      	ldr	r3, [pc, #512]	@ (8003af0 <LCD_init+0x334>)
 80038f0:	2202      	movs	r2, #2
 80038f2:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC2);	//?
 80038f4:	20c2      	movs	r0, #194	@ 0xc2
 80038f6:	f7ff fe5f 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x11);
 80038fa:	2011      	movs	r0, #17
 80038fc:	f7ff fedc 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003900:	4b7b      	ldr	r3, [pc, #492]	@ (8003af0 <LCD_init+0x334>)
 8003902:	2202      	movs	r2, #2
 8003904:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC5); 	//VCM control 1
 8003906:	20c5      	movs	r0, #197	@ 0xc5
 8003908:	f7ff fe56 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x3E);
 800390c:	203e      	movs	r0, #62	@ 0x3e
 800390e:	f7ff fed3 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x28);
 8003912:	2028      	movs	r0, #40	@ 0x28
 8003914:	f7ff fed0 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003918:	4b75      	ldr	r3, [pc, #468]	@ (8003af0 <LCD_init+0x334>)
 800391a:	2202      	movs	r2, #2
 800391c:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC7);	//VCM control 2
 800391e:	20c7      	movs	r0, #199	@ 0xc7
 8003920:	f7ff fe4a 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x86);
 8003924:	2086      	movs	r0, #134	@ 0x86
 8003926:	f7ff fec7 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800392a:	4b71      	ldr	r3, [pc, #452]	@ (8003af0 <LCD_init+0x334>)
 800392c:	2202      	movs	r2, #2
 800392e:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x3A); //COLMOD: Pixel Format Set
 8003930:	203a      	movs	r0, #58	@ 0x3a
 8003932:	f7ff fe41 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x55);
 8003936:	2055      	movs	r0, #85	@ 0x55
 8003938:	f7ff febe 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800393c:	4b6c      	ldr	r3, [pc, #432]	@ (8003af0 <LCD_init+0x334>)
 800393e:	2202      	movs	r2, #2
 8003940:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x36); // Memory Access Control
 8003942:	2036      	movs	r0, #54	@ 0x36
 8003944:	f7ff fe38 	bl	80035b8 <LCD_write_com>
	LCD_write_dat( (0<<7)|	//MY Row Address Order	- poziomo
 8003948:	2038      	movs	r0, #56	@ 0x38
 800394a:	f7ff feb5 	bl	80036b8 <LCD_write_dat>
				   (1<<5)|	//MV Row / Column Exchange
				   (1<<4)|	//ML Vertical Refresh Order
				   (1<<3)|	//BGR RGB-BGR Order
				   (1<<2));	//MH Horizontal Refresh ORDER*/

	LCD_write_com(0xB1); // Frame Rate Control
 800394e:	20b1      	movs	r0, #177	@ 0xb1
 8003950:	f7ff fe32 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x00);
 8003954:	2000      	movs	r0, #0
 8003956:	f7ff feaf 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x1B);		//70Hz
 800395a:	201b      	movs	r0, #27
 800395c:	f7ff feac 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003960:	4b63      	ldr	r3, [pc, #396]	@ (8003af0 <LCD_init+0x334>)
 8003962:	2202      	movs	r2, #2
 8003964:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xB6); // Display Function Control
 8003966:	20b6      	movs	r0, #182	@ 0xb6
 8003968:	f7ff fe26 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x0A);
 800396c:	200a      	movs	r0, #10
 800396e:	f7ff fea3 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x82);
 8003972:	2082      	movs	r0, #130	@ 0x82
 8003974:	f7ff fea0 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x27);
 8003978:	2027      	movs	r0, #39	@ 0x27
 800397a:	f7ff fe9d 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0F);	//sprawdzi� wziete na pa��
 800397e:	200f      	movs	r0, #15
 8003980:	f7ff fe9a 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PF3=CS=1
 8003984:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <LCD_init+0x334>)
 8003986:	2202      	movs	r2, #2
 8003988:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xF2); // 3Gamma Function Disable
 800398a:	20f2      	movs	r0, #242	@ 0xf2
 800398c:	f7ff fe14 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x00);
 8003990:	2000      	movs	r0, #0
 8003992:	f7ff fe91 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003996:	4b56      	ldr	r3, [pc, #344]	@ (8003af0 <LCD_init+0x334>)
 8003998:	2202      	movs	r2, #2
 800399a:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xF7); // Pump ratio control
 800399c:	20f7      	movs	r0, #247	@ 0xf7
 800399e:	f7ff fe0b 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x20);
 80039a2:	2020      	movs	r0, #32
 80039a4:	f7ff fe88 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80039a8:	4b51      	ldr	r3, [pc, #324]	@ (8003af0 <LCD_init+0x334>)
 80039aa:	2202      	movs	r2, #2
 80039ac:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xF1);
 80039ae:	20f1      	movs	r0, #241	@ 0xf1
 80039b0:	f7ff fe02 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x01);
 80039b4:	2001      	movs	r0, #1
 80039b6:	f7ff fe7f 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x30);
 80039ba:	2030      	movs	r0, #48	@ 0x30
 80039bc:	f7ff fe7c 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80039c0:	4b4b      	ldr	r3, [pc, #300]	@ (8003af0 <LCD_init+0x334>)
 80039c2:	2202      	movs	r2, #2
 80039c4:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x26); //Gamma curve selected
 80039c6:	2026      	movs	r0, #38	@ 0x26
 80039c8:	f7ff fdf6 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x01);
 80039cc:	2001      	movs	r0, #1
 80039ce:	f7ff fe73 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80039d2:	4b47      	ldr	r3, [pc, #284]	@ (8003af0 <LCD_init+0x334>)
 80039d4:	2202      	movs	r2, #2
 80039d6:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xE0); //Set Gamma
 80039d8:	20e0      	movs	r0, #224	@ 0xe0
 80039da:	f7ff fded 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x0F);
 80039de:	200f      	movs	r0, #15
 80039e0:	f7ff fe6a 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x3F);
 80039e4:	203f      	movs	r0, #63	@ 0x3f
 80039e6:	f7ff fe67 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x2F);
 80039ea:	202f      	movs	r0, #47	@ 0x2f
 80039ec:	f7ff fe64 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0C);
 80039f0:	200c      	movs	r0, #12
 80039f2:	f7ff fe61 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x10);
 80039f6:	2010      	movs	r0, #16
 80039f8:	f7ff fe5e 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0A);
 80039fc:	200a      	movs	r0, #10
 80039fe:	f7ff fe5b 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x53);
 8003a02:	2053      	movs	r0, #83	@ 0x53
 8003a04:	f7ff fe58 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0xD5);
 8003a08:	20d5      	movs	r0, #213	@ 0xd5
 8003a0a:	f7ff fe55 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x40);
 8003a0e:	2040      	movs	r0, #64	@ 0x40
 8003a10:	f7ff fe52 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0A);
 8003a14:	200a      	movs	r0, #10
 8003a16:	f7ff fe4f 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x13);
 8003a1a:	2013      	movs	r0, #19
 8003a1c:	f7ff fe4c 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x03);
 8003a20:	2003      	movs	r0, #3
 8003a22:	f7ff fe49 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x08);
 8003a26:	2008      	movs	r0, #8
 8003a28:	f7ff fe46 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x03);
 8003a2c:	2003      	movs	r0, #3
 8003a2e:	f7ff fe43 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x00);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f7ff fe40 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003a38:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <LCD_init+0x334>)
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xE1); //Set Gamma
 8003a3e:	20e1      	movs	r0, #225	@ 0xe1
 8003a40:	f7ff fdba 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0x00);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff fe37 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x00);
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7ff fe34 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x10);
 8003a50:	2010      	movs	r0, #16
 8003a52:	f7ff fe31 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x03);
 8003a56:	2003      	movs	r0, #3
 8003a58:	f7ff fe2e 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0F);
 8003a5c:	200f      	movs	r0, #15
 8003a5e:	f7ff fe2b 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x05);
 8003a62:	2005      	movs	r0, #5
 8003a64:	f7ff fe28 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x2C);
 8003a68:	202c      	movs	r0, #44	@ 0x2c
 8003a6a:	f7ff fe25 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0xA2);
 8003a6e:	20a2      	movs	r0, #162	@ 0xa2
 8003a70:	f7ff fe22 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x3F);
 8003a74:	203f      	movs	r0, #63	@ 0x3f
 8003a76:	f7ff fe1f 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x05);
 8003a7a:	2005      	movs	r0, #5
 8003a7c:	f7ff fe1c 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0E);
 8003a80:	200e      	movs	r0, #14
 8003a82:	f7ff fe19 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0C);
 8003a86:	200c      	movs	r0, #12
 8003a88:	f7ff fe16 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x37);
 8003a8c:	2037      	movs	r0, #55	@ 0x37
 8003a8e:	f7ff fe13 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x3C);
 8003a92:	203c      	movs	r0, #60	@ 0x3c
 8003a94:	f7ff fe10 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x0F);
 8003a98:	200f      	movs	r0, #15
 8003a9a:	f7ff fe0d 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003a9e:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <LCD_init+0x334>)
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	619a      	str	r2, [r3, #24]
	HAL_Delay(50);
 8003aa4:	2032      	movs	r0, #50	@ 0x32
 8003aa6:	f001 ffc5 	bl	8005a34 <HAL_Delay>
	LCD_write_com(0x11); //Exit Sleep
 8003aaa:	2011      	movs	r0, #17
 8003aac:	f7ff fd84 	bl	80035b8 <LCD_write_com>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <LCD_init+0x334>)
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 8003ab6:	2078      	movs	r0, #120	@ 0x78
 8003ab8:	f001 ffbc 	bl	8005a34 <HAL_Delay>
	LCD_write_com(0x29); //display on
 8003abc:	2029      	movs	r0, #41	@ 0x29
 8003abe:	f7ff fd7b 	bl	80035b8 <LCD_write_com>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <LCD_init+0x334>)
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	619a      	str	r2, [r3, #24]
	HAL_Delay(50);
 8003ac8:	2032      	movs	r0, #50	@ 0x32
 8003aca:	f001 ffb3 	bl	8005a34 <HAL_Delay>

	setColor(GREEN);
 8003ace:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8003ad2:	f000 f9a1 	bl	8003e18 <setColor>
	setBackColor(BLACK);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f000 f9b8 	bl	8003e4c <setBackColor>
	chOrient = POZIOMO;
 8003adc:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <LCD_init+0x33c>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]
	LCD_clear();
 8003ae2:	f000 f80b 	bl	8003afc <LCD_clear>
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	58020800 	.word	0x58020800
 8003af0:	58020400 	.word	0x58020400
 8003af4:	58020000 	.word	0x58020000
 8003af8:	2404c134 	.word	0x2404c134

08003afc <LCD_clear>:
// Parametry: nCzas - op�nienie w ms
// Zwraca: nic
// Czas czyszczenia ekranu: 548,8ms
////////////////////////////////////////////////////////////////////////////////
void LCD_clear(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
	unsigned short y;

	setColor(BLACK);
 8003b02:	2000      	movs	r0, #0
 8003b04:	f000 f988 	bl	8003e18 <setColor>
	setBackColor(BLACK);
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f000 f99f 	bl	8003e4c <setBackColor>

	LCD_write_com(0x2a); // Column Address Set
 8003b0e:	202a      	movs	r0, #42	@ 0x2a
 8003b10:	f7ff fd52 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0);
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7ff fdcf 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7ff fdcc 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(1);
 8003b20:	2001      	movs	r0, #1
 8003b22:	f7ff fdc9 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0x3F);
 8003b26:	203f      	movs	r0, #63	@ 0x3f
 8003b28:	f7ff fdc6 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003b2c:	4b27      	ldr	r3, [pc, #156]	@ (8003bcc <LCD_clear+0xd0>)
 8003b2e:	2202      	movs	r2, #2
 8003b30:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2b); // Page Address Set
 8003b32:	202b      	movs	r0, #43	@ 0x2b
 8003b34:	f7ff fd40 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(0);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7ff fdbd 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0);
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f7ff fdba 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7ff fdb7 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(0xEF);
 8003b4a:	20ef      	movs	r0, #239	@ 0xef
 8003b4c:	f7ff fdb4 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003b50:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <LCD_clear+0xd0>)
 8003b52:	2202      	movs	r2, #2
 8003b54:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2c);	// Memory Write
 8003b56:	202c      	movs	r0, #44	@ 0x2c
 8003b58:	f7ff fd2e 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(bch);
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <LCD_clear+0xd4>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fda9 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(bcl);
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <LCD_clear+0xd8>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fda4 	bl	80036b8 <LCD_write_dat>

	for(y=0; y<38400; y++)		// 240*320/2
 8003b70:	2300      	movs	r3, #0
 8003b72:	80fb      	strh	r3, [r7, #6]
 8003b74:	e01e      	b.n	8003bb4 <LCD_clear+0xb8>
	{
		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 8003b76:	4b18      	ldr	r3, [pc, #96]	@ (8003bd8 <LCD_clear+0xdc>)
 8003b78:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b7c:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 8003b7e:	4b16      	ldr	r3, [pc, #88]	@ (8003bd8 <LCD_clear+0xdc>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 8003b84:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <LCD_clear+0xdc>)
 8003b86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b8a:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 8003b8c:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <LCD_clear+0xdc>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	619a      	str	r2, [r3, #24]

		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 8003b92:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <LCD_clear+0xdc>)
 8003b94:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b98:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <LCD_clear+0xdc>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <LCD_clear+0xdc>)
 8003ba2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ba6:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <LCD_clear+0xdc>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	619a      	str	r2, [r3, #24]
	for(y=0; y<38400; y++)		// 240*320/2
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	80fb      	strh	r3, [r7, #6]
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8003bba:	d3dc      	bcc.n	8003b76 <LCD_clear+0x7a>
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <LCD_clear+0xd0>)
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	619a      	str	r2, [r3, #24]
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	58020400 	.word	0x58020400
 8003bd0:	2404c137 	.word	0x2404c137
 8003bd4:	2404c138 	.word	0x2404c138
 8003bd8:	58020800 	.word	0x58020800

08003bdc <drawHLine>:
// Parametry: x, y wsp�rz�dne pocz�tku
// len - d�ugo�c linii
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void drawHLine(int x, int y, int len)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
	int i;

	if (len < 0)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da06      	bge.n	8003bfc <drawHLine+0x20>
	{
		len = -len;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	607b      	str	r3, [r7, #4]
		x -= len;
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	60fb      	str	r3, [r7, #12]
	}

	//GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8003bfc:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <drawHLine+0x80>)
 8003bfe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c02:	619a      	str	r2, [r3, #24]
	setXY(x, y, x+len, y);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	b298      	uxth	r0, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	b299      	uxth	r1, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	f000 f86a 	bl	8003cf4 <setXY>

	for (i=0; i<len+1; i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e00c      	b.n	8003c40 <drawHLine+0x64>
	{
		LCD_write_dat(fch);
 8003c26:	4b0e      	ldr	r3, [pc, #56]	@ (8003c60 <drawHLine+0x84>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fd44 	bl	80036b8 <LCD_write_dat>
		LCD_write_dat(fcl);
 8003c30:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <drawHLine+0x88>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fd3f 	bl	80036b8 <LCD_write_dat>
	for (i=0; i<len+1; i++)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	daee      	bge.n	8003c26 <drawHLine+0x4a>
	}

	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003c48:	4b04      	ldr	r3, [pc, #16]	@ (8003c5c <drawHLine+0x80>)
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	619a      	str	r2, [r3, #24]
	clrXY();
 8003c4e:	f000 f8c9 	bl	8003de4 <clrXY>
}
 8003c52:	bf00      	nop
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	58020400 	.word	0x58020400
 8003c60:	2404c135 	.word	0x2404c135
 8003c64:	2404c136 	.word	0x2404c136

08003c68 <drawVLine>:
// Parametry: x, y wsp�rz�dne pocz�tku
// len - d�ugo�c linii
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void drawVLine(int x, int y, int len)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
	int i;

	if (len < 0)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da06      	bge.n	8003c88 <drawVLine+0x20>
	{
		len = -len;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	425b      	negs	r3, r3
 8003c7e:	607b      	str	r3, [r7, #4]
		y -= len;
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	60bb      	str	r3, [r7, #8]
	}
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8003c88:	4b17      	ldr	r3, [pc, #92]	@ (8003ce8 <drawVLine+0x80>)
 8003c8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c8e:	619a      	str	r2, [r3, #24]
	setXY(x, y, x, y+len);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	b298      	uxth	r0, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	b299      	uxth	r1, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	b29c      	uxth	r4, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4622      	mov	r2, r4
 8003caa:	f000 f823 	bl	8003cf4 <setXY>

	for (i=0; i<len+1; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e00c      	b.n	8003cce <drawVLine+0x66>
	{
		LCD_write_dat(fch);
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <drawVLine+0x84>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fcfd 	bl	80036b8 <LCD_write_dat>
		LCD_write_dat(fcl);
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <drawVLine+0x88>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fcf8 	bl	80036b8 <LCD_write_dat>
	for (i=0; i<len+1; i++)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	daee      	bge.n	8003cb4 <drawVLine+0x4c>
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003cd6:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <drawVLine+0x80>)
 8003cd8:	2202      	movs	r2, #2
 8003cda:	619a      	str	r2, [r3, #24]
	clrXY();
 8003cdc:	f000 f882 	bl	8003de4 <clrXY>
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}
 8003ce8:	58020400 	.word	0x58020400
 8003cec:	2404c135 	.word	0x2404c135
 8003cf0:	2404c136 	.word	0x2404c136

08003cf4 <setXY>:
// Parametry: x, y wsp�rz�dne pocz�tku
// len - d�ugo�c linii
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setXY(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	461a      	mov	r2, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	80fb      	strh	r3, [r7, #6]
 8003d06:	4603      	mov	r3, r0
 8003d08:	80bb      	strh	r3, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	807b      	strh	r3, [r7, #2]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	803b      	strh	r3, [r7, #0]
	unsigned short sTemp;

	if (chOrient == PIONOWO)
 8003d12:	4b32      	ldr	r3, [pc, #200]	@ (8003ddc <setXY+0xe8>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <setXY+0x5a>
	{
		sTemp = x1;
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	81fb      	strh	r3, [r7, #14]
		x1 = y1;
 8003d1e:	88bb      	ldrh	r3, [r7, #4]
 8003d20:	80fb      	strh	r3, [r7, #6]
		y1 = sTemp;
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	80bb      	strh	r3, [r7, #4]
		sTemp = x2;
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	81fb      	strh	r3, [r7, #14]
		x2 = y2;
 8003d2a:	883b      	ldrh	r3, [r7, #0]
 8003d2c:	807b      	strh	r3, [r7, #2]
		y2 = sTemp;
 8003d2e:	89fb      	ldrh	r3, [r7, #14]
 8003d30:	803b      	strh	r3, [r7, #0]
		y1=DISP_Y_SIZE - y1;
 8003d32:	88bb      	ldrh	r3, [r7, #4]
 8003d34:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003d38:	80bb      	strh	r3, [r7, #4]
		y2=DISP_Y_SIZE - y2;
 8003d3a:	883b      	ldrh	r3, [r7, #0]
 8003d3c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003d40:	803b      	strh	r3, [r7, #0]
		sTemp = y1;
 8003d42:	88bb      	ldrh	r3, [r7, #4]
 8003d44:	81fb      	strh	r3, [r7, #14]
		y1 = y2;
 8003d46:	883b      	ldrh	r3, [r7, #0]
 8003d48:	80bb      	strh	r3, [r7, #4]
		y2 = sTemp;
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	803b      	strh	r3, [r7, #0]
	}

	LCD_write_com(0x2A); //column
 8003d4e:	202a      	movs	r0, #42	@ 0x2a
 8003d50:	f7ff fc32 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(x1>>8);
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fcab 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(x1);
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff fca6 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(x2>>8);
 8003d6c:	887b      	ldrh	r3, [r7, #2]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fc9f 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(x2);
 8003d7a:	887b      	ldrh	r3, [r7, #2]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fc9a 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003d84:	4b16      	ldr	r3, [pc, #88]	@ (8003de0 <setXY+0xec>)
 8003d86:	2202      	movs	r2, #2
 8003d88:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2B); //page
 8003d8a:	202b      	movs	r0, #43	@ 0x2b
 8003d8c:	f7ff fc14 	bl	80035b8 <LCD_write_com>
	LCD_write_dat(y1>>8);
 8003d90:	88bb      	ldrh	r3, [r7, #4]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fc8d 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(y1);
 8003d9e:	88bb      	ldrh	r3, [r7, #4]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fc88 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(y2>>8);
 8003da8:	883b      	ldrh	r3, [r7, #0]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fc81 	bl	80036b8 <LCD_write_dat>
	LCD_write_dat(y2);
 8003db6:	883b      	ldrh	r3, [r7, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fc7c 	bl	80036b8 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <setXY+0xec>)
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2C); //write
 8003dc6:	202c      	movs	r0, #44	@ 0x2c
 8003dc8:	f7ff fbf6 	bl	80035b8 <LCD_write_com>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <setXY+0xec>)
 8003dce:	2202      	movs	r2, #2
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2404c134 	.word	0x2404c134
 8003de0:	58020400 	.word	0x58020400

08003de4 <clrXY>:
// zeruje parametry pami�ci do rysowania linii
// Parametry:nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void clrXY(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
	if (chOrient == PIONOWO)
 8003de8:	4b0a      	ldr	r3, [pc, #40]	@ (8003e14 <clrXY+0x30>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d107      	bne.n	8003e00 <clrXY+0x1c>
		setXY(0, 0, DISP_X_SIZE, DISP_Y_SIZE);
 8003df0:	23f0      	movs	r3, #240	@ 0xf0
 8003df2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003df6:	2100      	movs	r1, #0
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f7ff ff7b 	bl	8003cf4 <setXY>
	else
		setXY(0, 0, DISP_Y_SIZE, DISP_X_SIZE);
}
 8003dfe:	e006      	b.n	8003e0e <clrXY+0x2a>
		setXY(0, 0, DISP_Y_SIZE, DISP_X_SIZE);
 8003e00:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003e04:	22f0      	movs	r2, #240	@ 0xf0
 8003e06:	2100      	movs	r1, #0
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7ff ff73 	bl	8003cf4 <setXY>
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	2404c134 	.word	0x2404c134

08003e18 <setColor>:
// Ustawia kolor rysowania jako natywny dla wy�wietlacza 5R+6G+5B
// Parametry: color - kolor
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setColor(unsigned short color)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80fb      	strh	r3, [r7, #6]
	fch = (unsigned char)(color>>8);
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <setColor+0x2c>)
 8003e2c:	701a      	strb	r2, [r3, #0]
	fcl = (unsigned char)(color & 0xFF);
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b05      	ldr	r3, [pc, #20]	@ (8003e48 <setColor+0x30>)
 8003e34:	701a      	strb	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	2404c135 	.word	0x2404c135
 8003e48:	2404c136 	.word	0x2404c136

08003e4c <setBackColor>:
// Ustawia kolor t�a jako natywny dla wy�wietlacza 5R+6G+5B
// Parametry: color - kolor
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setBackColor(unsigned short color)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	80fb      	strh	r3, [r7, #6]
	if (color == TRANSPARENT)
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d103      	bne.n	8003e68 <setBackColor+0x1c>
		_transparent = 1;
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <setBackColor+0x44>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	701a      	strb	r2, [r3, #0]
	{
		bch = (unsigned char)(color>>8);
		bcl = (unsigned char)(color & 0xFF);
		_transparent = 0;
	}
}
 8003e66:	e00c      	b.n	8003e82 <setBackColor+0x36>
		bch = (unsigned char)(color>>8);
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b08      	ldr	r3, [pc, #32]	@ (8003e94 <setBackColor+0x48>)
 8003e72:	701a      	strb	r2, [r3, #0]
		bcl = (unsigned char)(color & 0xFF);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b07      	ldr	r3, [pc, #28]	@ (8003e98 <setBackColor+0x4c>)
 8003e7a:	701a      	strb	r2, [r3, #0]
		_transparent = 0;
 8003e7c:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <setBackColor+0x44>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	2404c139 	.word	0x2404c139
 8003e94:	2404c137 	.word	0x2404c137
 8003e98:	2404c138 	.word	0x2404c138

08003e9c <fillRect>:
// wype�nij kolorem prostok�t o wsp�prz�dnych x1, y1, x2, y2
// Parametry: x, y - wsp�rz�dne
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void fillRect(int x1, int y1, int x2, int y2)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
	int i, nTemp;

	if (x1>x2)
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	dd05      	ble.n	8003ebe <fillRect+0x22>
	{
		nTemp = x1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	613b      	str	r3, [r7, #16]
		x1 = x2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]
		x2 = nTemp;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	607b      	str	r3, [r7, #4]
	}
	if (y1>y2)
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	dd05      	ble.n	8003ed2 <fillRect+0x36>
	{
		nTemp = y1;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
		y1 = y2;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	60bb      	str	r3, [r7, #8]
		y2 = nTemp;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	603b      	str	r3, [r7, #0]
	}

	if (chOrient == PIONOWO)
 8003ed2:	4b29      	ldr	r3, [pc, #164]	@ (8003f78 <fillRect+0xdc>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d125      	bne.n	8003f26 <fillRect+0x8a>
	{
		for (i=0; i<((y2-y1)/2)+1; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e016      	b.n	8003f0e <fillRect+0x72>
		{
			drawHLine(x1, y1+i, x2-x1);
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	18d1      	adds	r1, r2, r3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fe74 	bl	8003bdc <drawHLine>
			drawHLine(x1, y2-i, x2-x1);
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	1ad1      	subs	r1, r2, r3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fe6a 	bl	8003bdc <drawHLine>
		for (i=0; i<((y2-y1)/2)+1; i++)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da00      	bge.n	8003f1a <fillRect+0x7e>
 8003f18:	3301      	adds	r3, #1
 8003f1a:	105b      	asrs	r3, r3, #1
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	dddd      	ble.n	8003ee0 <fillRect+0x44>
			drawVLine(x1+i, y1, y2-y1);
			drawVLine(x2-i, y1, y2-y1);
		}
	}

}
 8003f24:	e024      	b.n	8003f70 <fillRect+0xd4>
		for (i=0; i<((x2-x1)/2)+1; i++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e016      	b.n	8003f5a <fillRect+0xbe>
			drawVLine(x1+i, y1, y2-y1);
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	18d0      	adds	r0, r2, r3
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	f7ff fe94 	bl	8003c68 <drawVLine>
			drawVLine(x2-i, y1, y2-y1);
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	1ad0      	subs	r0, r2, r3
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	f7ff fe8a 	bl	8003c68 <drawVLine>
		for (i=0; i<((x2-x1)/2)+1; i++)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3301      	adds	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	da00      	bge.n	8003f66 <fillRect+0xca>
 8003f64:	3301      	adds	r3, #1
 8003f66:	105b      	asrs	r3, r3, #1
 8003f68:	461a      	mov	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	dddd      	ble.n	8003f2c <fillRect+0x90>
}
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	2404c134 	.word	0x2404c134

08003f7c <printChar>:
// pisze znak na miejscu o podanych wsp�rzednych
// Parametry: c - znak; x, y - wsp�rz�dne
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void printChar(unsigned char c, int x, int y)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b089      	sub	sp, #36	@ 0x24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	73fb      	strb	r3, [r7, #15]
	unsigned char i,ch;
	unsigned short j;
	unsigned short temp;
	int zz;

	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8003f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8004204 <printChar+0x288>)
 8003f8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f90:	619a      	str	r2, [r3, #24]

	if (!_transparent)
 8003f92:	4b9d      	ldr	r3, [pc, #628]	@ (8004208 <printChar+0x28c>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 810f 	bne.w	80041ba <printChar+0x23e>
	{
		if (chOrient == POZIOMO)
 8003f9c:	4b9b      	ldr	r3, [pc, #620]	@ (800420c <printChar+0x290>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d172      	bne.n	800408a <printChar+0x10e>
		{
			setXY(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	b298      	uxth	r0, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	b299      	uxth	r1, r3
 8003fac:	4b98      	ldr	r3, [pc, #608]	@ (8004210 <printChar+0x294>)
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	4b94      	ldr	r3, [pc, #592]	@ (8004210 <printChar+0x294>)
 8003fc0:	795b      	ldrb	r3, [r3, #5]
 8003fc2:	461c      	mov	r4, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	4423      	add	r3, r4
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f7ff fe90 	bl	8003cf4 <setXY>

			temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	4a8e      	ldr	r2, [pc, #568]	@ (8004210 <printChar+0x294>)
 8003fd8:	7992      	ldrb	r2, [r2, #6]
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	4b8c      	ldr	r3, [pc, #560]	@ (8004210 <printChar+0x294>)
 8003fe0:	791b      	ldrb	r3, [r3, #4]
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4b89      	ldr	r3, [pc, #548]	@ (8004210 <printChar+0x294>)
 8003fea:	795b      	ldrb	r3, [r3, #5]
 8003fec:	fb11 f303 	smulbb	r3, r1, r3
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	fb12 f303 	smulbb	r3, r2, r3
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	837b      	strh	r3, [r7, #26]
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j++)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	83bb      	strh	r3, [r7, #28]
 8004000:	e033      	b.n	800406a <printChar+0xee>
			{
				ch = cfont.font[temp];
 8004002:	4b83      	ldr	r3, [pc, #524]	@ (8004210 <printChar+0x294>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	8b7b      	ldrh	r3, [r7, #26]
 8004008:	4413      	add	r3, r2
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 800400e:	2300      	movs	r3, #0
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e021      	b.n	8004058 <printChar+0xdc>
				{
					if((ch&(1<<(7-i)))!=0)
 8004014:	7cfa      	ldrb	r2, [r7, #19]
 8004016:	7ffb      	ldrb	r3, [r7, #31]
 8004018:	f1c3 0307 	rsb	r3, r3, #7
 800401c:	fa42 f303 	asr.w	r3, r2, r3
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <printChar+0xc2>
					{
						LCD_write_dat(fch);
 8004028:	4b7a      	ldr	r3, [pc, #488]	@ (8004214 <printChar+0x298>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fb43 	bl	80036b8 <LCD_write_dat>
						LCD_write_dat(fcl);
 8004032:	4b79      	ldr	r3, [pc, #484]	@ (8004218 <printChar+0x29c>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fb3e 	bl	80036b8 <LCD_write_dat>
 800403c:	e009      	b.n	8004052 <printChar+0xd6>
					}
					else
					{
						LCD_write_dat(bch);
 800403e:	4b77      	ldr	r3, [pc, #476]	@ (800421c <printChar+0x2a0>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fb38 	bl	80036b8 <LCD_write_dat>
						LCD_write_dat(bcl);
 8004048:	4b75      	ldr	r3, [pc, #468]	@ (8004220 <printChar+0x2a4>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fb33 	bl	80036b8 <LCD_write_dat>
				for(i=0;i<8;i++)
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	3301      	adds	r3, #1
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	7ffb      	ldrb	r3, [r7, #31]
 800405a:	2b07      	cmp	r3, #7
 800405c:	d9da      	bls.n	8004014 <printChar+0x98>
					}
				}
				temp++;
 800405e:	8b7b      	ldrh	r3, [r7, #26]
 8004060:	3301      	adds	r3, #1
 8004062:	837b      	strh	r3, [r7, #26]
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j++)
 8004064:	8bbb      	ldrh	r3, [r7, #28]
 8004066:	3301      	adds	r3, #1
 8004068:	83bb      	strh	r3, [r7, #28]
 800406a:	8bba      	ldrh	r2, [r7, #28]
 800406c:	4b68      	ldr	r3, [pc, #416]	@ (8004210 <printChar+0x294>)
 800406e:	791b      	ldrb	r3, [r3, #4]
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4619      	mov	r1, r3
 8004076:	4b66      	ldr	r3, [pc, #408]	@ (8004210 <printChar+0x294>)
 8004078:	795b      	ldrb	r3, [r3, #5]
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	429a      	cmp	r2, r3
 8004080:	dbbf      	blt.n	8004002 <printChar+0x86>
			}
			GPIOB->BSRR = (1<<LCD_CS);		//LCD_CS=1
 8004082:	4b60      	ldr	r3, [pc, #384]	@ (8004204 <printChar+0x288>)
 8004084:	2202      	movs	r2, #2
 8004086:	619a      	str	r2, [r3, #24]
 8004088:	e12b      	b.n	80042e2 <printChar+0x366>
		}
		else
		{
			temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	4a60      	ldr	r2, [pc, #384]	@ (8004210 <printChar+0x294>)
 800408e:	7992      	ldrb	r2, [r2, #6]
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	b29a      	uxth	r2, r3
 8004094:	4b5e      	ldr	r3, [pc, #376]	@ (8004210 <printChar+0x294>)
 8004096:	791b      	ldrb	r3, [r3, #4]
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	4b5c      	ldr	r3, [pc, #368]	@ (8004210 <printChar+0x294>)
 80040a0:	795b      	ldrb	r3, [r3, #5]
 80040a2:	fb11 f303 	smulbb	r3, r1, r3
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	fb12 f303 	smulbb	r3, r2, r3
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3304      	adds	r3, #4
 80040b0:	837b      	strh	r3, [r7, #26]

			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j+=(cfont.x_size/8))
 80040b2:	2300      	movs	r3, #0
 80040b4:	83bb      	strh	r3, [r7, #28]
 80040b6:	e070      	b.n	800419a <printChar+0x21e>
			{
				setXY(x,y+(j/(cfont.x_size/8)),x+cfont.x_size-1,y+(j/(cfont.x_size/8)));
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	b298      	uxth	r0, r3
 80040bc:	8bbb      	ldrh	r3, [r7, #28]
 80040be:	4a54      	ldr	r2, [pc, #336]	@ (8004210 <printChar+0x294>)
 80040c0:	7912      	ldrb	r2, [r2, #4]
 80040c2:	08d2      	lsrs	r2, r2, #3
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	b299      	uxth	r1, r3
 80040d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004210 <printChar+0x294>)
 80040d6:	791b      	ldrb	r3, [r3, #4]
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	4413      	add	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29c      	uxth	r4, r3
 80040e6:	8bbb      	ldrh	r3, [r7, #28]
 80040e8:	4a49      	ldr	r2, [pc, #292]	@ (8004210 <printChar+0x294>)
 80040ea:	7912      	ldrb	r2, [r2, #4]
 80040ec:	08d2      	lsrs	r2, r2, #3
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4622      	mov	r2, r4
 8004100:	f7ff fdf8 	bl	8003cf4 <setXY>
				for (zz=(cfont.x_size/8)-1; zz>=0; zz--)
 8004104:	4b42      	ldr	r3, [pc, #264]	@ (8004210 <printChar+0x294>)
 8004106:	791b      	ldrb	r3, [r3, #4]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e030      	b.n	8004174 <printChar+0x1f8>
				{
					ch=cfont.font[temp+zz];
 8004112:	4b3f      	ldr	r3, [pc, #252]	@ (8004210 <printChar+0x294>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	8b79      	ldrh	r1, [r7, #26]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	440a      	add	r2, r1
 800411c:	4413      	add	r3, r2
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	74fb      	strb	r3, [r7, #19]
					for(i=0;i<8;i++)
 8004122:	2300      	movs	r3, #0
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e01f      	b.n	8004168 <printChar+0x1ec>
					{
						if((ch&(1<<i))!=0)
 8004128:	7cfa      	ldrb	r2, [r7, #19]
 800412a:	7ffb      	ldrb	r3, [r7, #31]
 800412c:	fa42 f303 	asr.w	r3, r2, r3
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <printChar+0x1d2>
						{
							LCD_write_dat(fch);
 8004138:	4b36      	ldr	r3, [pc, #216]	@ (8004214 <printChar+0x298>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fabb 	bl	80036b8 <LCD_write_dat>
							LCD_write_dat(fcl);
 8004142:	4b35      	ldr	r3, [pc, #212]	@ (8004218 <printChar+0x29c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fab6 	bl	80036b8 <LCD_write_dat>
 800414c:	e009      	b.n	8004162 <printChar+0x1e6>
						}
						else
						{
							LCD_write_dat(bch);
 800414e:	4b33      	ldr	r3, [pc, #204]	@ (800421c <printChar+0x2a0>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fab0 	bl	80036b8 <LCD_write_dat>
							LCD_write_dat(bcl);
 8004158:	4b31      	ldr	r3, [pc, #196]	@ (8004220 <printChar+0x2a4>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff faab 	bl	80036b8 <LCD_write_dat>
					for(i=0;i<8;i++)
 8004162:	7ffb      	ldrb	r3, [r7, #31]
 8004164:	3301      	adds	r3, #1
 8004166:	77fb      	strb	r3, [r7, #31]
 8004168:	7ffb      	ldrb	r3, [r7, #31]
 800416a:	2b07      	cmp	r3, #7
 800416c:	d9dc      	bls.n	8004128 <printChar+0x1ac>
				for (zz=(cfont.x_size/8)-1; zz>=0; zz--)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	3b01      	subs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	dacb      	bge.n	8004112 <printChar+0x196>
						}
					}
				}
				temp+=(cfont.x_size/8);
 800417a:	4b25      	ldr	r3, [pc, #148]	@ (8004210 <printChar+0x294>)
 800417c:	791b      	ldrb	r3, [r3, #4]
 800417e:	08db      	lsrs	r3, r3, #3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	8b7b      	ldrh	r3, [r7, #26]
 8004186:	4413      	add	r3, r2
 8004188:	837b      	strh	r3, [r7, #26]
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j+=(cfont.x_size/8))
 800418a:	4b21      	ldr	r3, [pc, #132]	@ (8004210 <printChar+0x294>)
 800418c:	791b      	ldrb	r3, [r3, #4]
 800418e:	08db      	lsrs	r3, r3, #3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	8bbb      	ldrh	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	83bb      	strh	r3, [r7, #28]
 800419a:	8bba      	ldrh	r2, [r7, #28]
 800419c:	4b1c      	ldr	r3, [pc, #112]	@ (8004210 <printChar+0x294>)
 800419e:	791b      	ldrb	r3, [r3, #4]
 80041a0:	08db      	lsrs	r3, r3, #3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	4619      	mov	r1, r3
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <printChar+0x294>)
 80041a8:	795b      	ldrb	r3, [r3, #5]
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	429a      	cmp	r2, r3
 80041b0:	db82      	blt.n	80040b8 <printChar+0x13c>
			}
			GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80041b2:	4b14      	ldr	r3, [pc, #80]	@ (8004204 <printChar+0x288>)
 80041b4:	2202      	movs	r2, #2
 80041b6:	619a      	str	r2, [r3, #24]
 80041b8:	e093      	b.n	80042e2 <printChar+0x366>
		}
	}
	else
	{
		temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	4a14      	ldr	r2, [pc, #80]	@ (8004210 <printChar+0x294>)
 80041be:	7992      	ldrb	r2, [r2, #6]
 80041c0:	1a9b      	subs	r3, r3, r2
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <printChar+0x294>)
 80041c6:	791b      	ldrb	r3, [r3, #4]
 80041c8:	08db      	lsrs	r3, r3, #3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <printChar+0x294>)
 80041d0:	795b      	ldrb	r3, [r3, #5]
 80041d2:	fb11 f303 	smulbb	r3, r1, r3
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	fb12 f303 	smulbb	r3, r2, r3
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3304      	adds	r3, #4
 80041e0:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	83bb      	strh	r3, [r7, #28]
 80041e6:	e076      	b.n	80042d6 <printChar+0x35a>
		{
			for (zz=0; zz<(cfont.x_size/8); zz++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e060      	b.n	80042b0 <printChar+0x334>
			{
				ch = cfont.font[temp+zz];
 80041ee:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <printChar+0x294>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	8b79      	ldrh	r1, [r7, #26]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	440a      	add	r2, r1
 80041f8:	4413      	add	r3, r2
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e04f      	b.n	80042a4 <printChar+0x328>
 8004204:	58020400 	.word	0x58020400
 8004208:	2404c139 	.word	0x2404c139
 800420c:	2404c134 	.word	0x2404c134
 8004210:	2404c12c 	.word	0x2404c12c
 8004214:	2404c135 	.word	0x2404c135
 8004218:	2404c136 	.word	0x2404c136
 800421c:	2404c137 	.word	0x2404c137
 8004220:	2404c138 	.word	0x2404c138
				{
					if((ch&(1<<(7-i)))!=0)
 8004224:	7cfa      	ldrb	r2, [r7, #19]
 8004226:	7ffb      	ldrb	r3, [r7, #31]
 8004228:	f1c3 0307 	rsb	r3, r3, #7
 800422c:	fa42 f303 	asr.w	r3, r2, r3
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d032      	beq.n	800429e <printChar+0x322>
					{
						setXY(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	b29a      	uxth	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	b29b      	uxth	r3, r3
 8004240:	4413      	add	r3, r2
 8004242:	b29a      	uxth	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	b29b      	uxth	r3, r3
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	b29b      	uxth	r3, r3
 800424c:	4413      	add	r3, r2
 800424e:	b298      	uxth	r0, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	b29a      	uxth	r2, r3
 8004254:	8bbb      	ldrh	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	b299      	uxth	r1, r3
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	b29a      	uxth	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	b29b      	uxth	r3, r3
 8004262:	4413      	add	r3, r2
 8004264:	b29a      	uxth	r2, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	b29b      	uxth	r3, r3
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	b29b      	uxth	r3, r3
 800426e:	4413      	add	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	3301      	adds	r3, #1
 8004274:	b29c      	uxth	r4, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	b29a      	uxth	r2, r3
 800427a:	8bbb      	ldrh	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	3301      	adds	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	4622      	mov	r2, r4
 8004286:	f7ff fd35 	bl	8003cf4 <setXY>
						LCD_write_dat(fch);
 800428a:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <printChar+0x378>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fa12 	bl	80036b8 <LCD_write_dat>
						LCD_write_dat(fcl);
 8004294:	4b18      	ldr	r3, [pc, #96]	@ (80042f8 <printChar+0x37c>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fa0d 	bl	80036b8 <LCD_write_dat>
				for(i=0;i<8;i++)
 800429e:	7ffb      	ldrb	r3, [r7, #31]
 80042a0:	3301      	adds	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	7ffb      	ldrb	r3, [r7, #31]
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	d9bc      	bls.n	8004224 <printChar+0x2a8>
			for (zz=0; zz<(cfont.x_size/8); zz++)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	3301      	adds	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <printChar+0x380>)
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	08db      	lsrs	r3, r3, #3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	4293      	cmp	r3, r2
 80042be:	db96      	blt.n	80041ee <printChar+0x272>
					}
				}
			}
			temp+=(cfont.x_size/8);
 80042c0:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <printChar+0x380>)
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	08db      	lsrs	r3, r3, #3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	8b7b      	ldrh	r3, [r7, #26]
 80042cc:	4413      	add	r3, r2
 80042ce:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 80042d0:	8bbb      	ldrh	r3, [r7, #28]
 80042d2:	3301      	adds	r3, #1
 80042d4:	83bb      	strh	r3, [r7, #28]
 80042d6:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <printChar+0x380>)
 80042d8:	795b      	ldrb	r3, [r3, #5]
 80042da:	461a      	mov	r2, r3
 80042dc:	8bbb      	ldrh	r3, [r7, #28]
 80042de:	4293      	cmp	r3, r2
 80042e0:	d382      	bcc.n	80041e8 <printChar+0x26c>
		}
	}

	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80042e2:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <printChar+0x384>)
 80042e4:	2202      	movs	r2, #2
 80042e6:	619a      	str	r2, [r3, #24]
	clrXY();
 80042e8:	f7ff fd7c 	bl	8003de4 <clrXY>
}
 80042ec:	bf00      	nop
 80042ee:	3724      	adds	r7, #36	@ 0x24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}
 80042f4:	2404c135 	.word	0x2404c135
 80042f8:	2404c136 	.word	0x2404c136
 80042fc:	2404c12c 	.word	0x2404c12c
 8004300:	58020400 	.word	0x58020400
 8004304:	00000000 	.word	0x00000000

08004308 <rotateChar>:
//  x, y - wsp�rz�dne
//  deg - k�t obrotu napisu
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void rotateChar(unsigned char c, int x, int y, int pos, int deg)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b090      	sub	sp, #64	@ 0x40
 800430c:	af00      	add	r7, sp, #0
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4603      	mov	r3, r0
 8004316:	73fb      	strb	r3, [r7, #15]
	unsigned short temp;
	int zz, newx, newy;
	double radian, sinrad, cosrad;

	//czasoch�onne operacje wykonaj przed p�tl�
	radian=deg*0.0175;
 8004318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431a:	ee07 3a90 	vmov	s15, r3
 800431e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004322:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8004518 <rotateChar+0x210>
 8004326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800432a:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	sinrad = sin(radian);
 800432e:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8004332:	f011 fd95 	bl	8015e60 <sin>
 8004336:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	cosrad = cos(radian);
 800433a:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 800433e:	f011 fd43 	bl	8015dc8 <cos>
 8004342:	ed87 0b08 	vstr	d0, [r7, #32]

	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8004346:	4b76      	ldr	r3, [pc, #472]	@ (8004520 <rotateChar+0x218>)
 8004348:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800434c:	619a      	str	r2, [r3, #24]

	temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	4a74      	ldr	r2, [pc, #464]	@ (8004524 <rotateChar+0x21c>)
 8004352:	7992      	ldrb	r2, [r2, #6]
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	b29a      	uxth	r2, r3
 8004358:	4b72      	ldr	r3, [pc, #456]	@ (8004524 <rotateChar+0x21c>)
 800435a:	791b      	ldrb	r3, [r3, #4]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	4619      	mov	r1, r3
 8004362:	4b70      	ldr	r3, [pc, #448]	@ (8004524 <rotateChar+0x21c>)
 8004364:	795b      	ldrb	r3, [r3, #5]
 8004366:	fb11 f303 	smulbb	r3, r1, r3
 800436a:	b29b      	uxth	r3, r3
 800436c:	fb12 f303 	smulbb	r3, r2, r3
 8004370:	b29b      	uxth	r3, r3
 8004372:	3304      	adds	r3, #4
 8004374:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	for(j=0;j<cfont.y_size;j++)
 8004376:	2300      	movs	r3, #0
 8004378:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800437c:	e0ba      	b.n	80044f4 <rotateChar+0x1ec>
	{
		for (zz=0; zz<(cfont.x_size/8); zz++)
 800437e:	2300      	movs	r3, #0
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004382:	e0a1      	b.n	80044c8 <rotateChar+0x1c0>
		{
			ch = cfont.font[temp+zz];
 8004384:	4b67      	ldr	r3, [pc, #412]	@ (8004524 <rotateChar+0x21c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800438a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800438c:	440a      	add	r2, r1
 800438e:	4413      	add	r3, r2
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	77fb      	strb	r3, [r7, #31]
			for(i=0;i<8;i++)
 8004394:	2300      	movs	r3, #0
 8004396:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800439a:	e08d      	b.n	80044b8 <rotateChar+0x1b0>
			{
				newx = x+(((i+(zz*8)+(pos*cfont.x_size))*cosrad)-((j)*sinrad));
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80043a6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	441a      	add	r2, r3
 80043b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004524 <rotateChar+0x21c>)
 80043b2:	791b      	ldrb	r3, [r3, #4]
 80043b4:	4619      	mov	r1, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	ee07 3a90 	vmov	s15, r3
 80043c2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80043c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80043ca:	ee25 5b07 	vmul.f64	d5, d5, d7
 80043ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80043da:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80043de:	ee24 7b07 	vmul.f64	d7, d4, d7
 80043e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80043e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80043ee:	ee17 3a90 	vmov	r3, s15
 80043f2:	61bb      	str	r3, [r7, #24]
				newy = y+(((j)*cosrad)+((i+(zz*8)+(pos*cfont.x_size))*sinrad));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80043fe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004402:	ee07 3a90 	vmov	s15, r3
 8004406:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800440a:	ed97 7b08 	vldr	d7, [r7, #32]
 800440e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8004412:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	441a      	add	r2, r3
 800441c:	4b41      	ldr	r3, [pc, #260]	@ (8004524 <rotateChar+0x21c>)
 800441e:	791b      	ldrb	r3, [r3, #4]
 8004420:	4619      	mov	r1, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004432:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8004436:	ee24 7b07 	vmul.f64	d7, d4, d7
 800443a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800443e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004442:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004446:	ee17 3a90 	vmov	r3, s15
 800444a:	617b      	str	r3, [r7, #20]

				setXY(newx,newy,newx+1,newy+1);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	b298      	uxth	r0, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	b299      	uxth	r1, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	b29b      	uxth	r3, r3
 8004458:	3301      	adds	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	b29b      	uxth	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	f7ff fc46 	bl	8003cf4 <setXY>

				if((ch&(1<<(7-i)))!=0)
 8004468:	7ffa      	ldrb	r2, [r7, #31]
 800446a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	fa42 f303 	asr.w	r3, r2, r3
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <rotateChar+0x18c>
				{
					//setPixel((fch<<8)|fcl);
					LCD_write_dat(fch);
 800447e:	4b2a      	ldr	r3, [pc, #168]	@ (8004528 <rotateChar+0x220>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff f918 	bl	80036b8 <LCD_write_dat>
					LCD_write_dat(fcl);
 8004488:	4b28      	ldr	r3, [pc, #160]	@ (800452c <rotateChar+0x224>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff f913 	bl	80036b8 <LCD_write_dat>
 8004492:	e009      	b.n	80044a8 <rotateChar+0x1a0>
				}
				else
				{
					//if (!_transparent)
						//setPixel((bch<<8)|bcl);
						LCD_write_dat(bch);
 8004494:	4b26      	ldr	r3, [pc, #152]	@ (8004530 <rotateChar+0x228>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff f90d 	bl	80036b8 <LCD_write_dat>
						LCD_write_dat(bcl);
 800449e:	4b25      	ldr	r3, [pc, #148]	@ (8004534 <rotateChar+0x22c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff f908 	bl	80036b8 <LCD_write_dat>
				}
				GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80044a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <rotateChar+0x218>)
 80044aa:	2202      	movs	r2, #2
 80044ac:	619a      	str	r2, [r3, #24]
			for(i=0;i<8;i++)
 80044ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80044b2:	3301      	adds	r3, #1
 80044b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80044b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80044bc:	2b07      	cmp	r3, #7
 80044be:	f67f af6d 	bls.w	800439c <rotateChar+0x94>
		for (zz=0; zz<(cfont.x_size/8); zz++)
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	3301      	adds	r3, #1
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044c8:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <rotateChar+0x21c>)
 80044ca:	791b      	ldrb	r3, [r3, #4]
 80044cc:	08db      	lsrs	r3, r3, #3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d4:	4293      	cmp	r3, r2
 80044d6:	f6ff af55 	blt.w	8004384 <rotateChar+0x7c>
			}
		}
		temp+=(cfont.x_size/8);
 80044da:	4b12      	ldr	r3, [pc, #72]	@ (8004524 <rotateChar+0x21c>)
 80044dc:	791b      	ldrb	r3, [r3, #4]
 80044de:	08db      	lsrs	r3, r3, #3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80044e6:	4413      	add	r3, r2
 80044e8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	for(j=0;j<cfont.y_size;j++)
 80044ea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80044ee:	3301      	adds	r3, #1
 80044f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <rotateChar+0x21c>)
 80044f6:	795b      	ldrb	r3, [r3, #5]
 80044f8:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f4ff af3e 	bcc.w	800437e <rotateChar+0x76>
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8004502:	4b07      	ldr	r3, [pc, #28]	@ (8004520 <rotateChar+0x218>)
 8004504:	2202      	movs	r2, #2
 8004506:	619a      	str	r2, [r3, #24]
	clrXY();
 8004508:	f7ff fc6c 	bl	8003de4 <clrXY>
}
 800450c:	bf00      	nop
 800450e:	3740      	adds	r7, #64	@ 0x40
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	f3af 8000 	nop.w
 8004518:	1eb851ec 	.word	0x1eb851ec
 800451c:	3f91eb85 	.word	0x3f91eb85
 8004520:	58020400 	.word	0x58020400
 8004524:	2404c12c 	.word	0x2404c12c
 8004528:	2404c135 	.word	0x2404c135
 800452c:	2404c136 	.word	0x2404c136
 8004530:	2404c137 	.word	0x2404c137
 8004534:	2404c138 	.word	0x2404c138

08004538 <setFont>:
// ustawia aktualn� czcionk�
// Parametry: c - znak; x, y - wsp�rz�dne
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setFont(unsigned char* font)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	cfont.font = font;
 8004540:	4a0c      	ldr	r2, [pc, #48]	@ (8004574 <setFont+0x3c>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6013      	str	r3, [r2, #0]
	cfont.x_size = *(font+0);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	4b0a      	ldr	r3, [pc, #40]	@ (8004574 <setFont+0x3c>)
 800454c:	711a      	strb	r2, [r3, #4]
	cfont.y_size = *(font+1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	785a      	ldrb	r2, [r3, #1]
 8004552:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <setFont+0x3c>)
 8004554:	715a      	strb	r2, [r3, #5]
	cfont.offset = *(font+2);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	789a      	ldrb	r2, [r3, #2]
 800455a:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <setFont+0x3c>)
 800455c:	719a      	strb	r2, [r3, #6]
	cfont.numchars = *(font+3);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	78da      	ldrb	r2, [r3, #3]
 8004562:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <setFont+0x3c>)
 8004564:	71da      	strb	r2, [r3, #7]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	2404c12c 	.word	0x2404c12c

08004578 <print>:
//  x, y - wsp�rz�dne
//  deg - k�t obrotu napisu
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void print(char *st, int x, int y, int deg)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
	int stl, i;

	stl = strlen(st);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7fb fefa 	bl	8000380 <strlen>
 800458c:	4603      	mov	r3, r0
 800458e:	613b      	str	r3, [r7, #16]

	if (chOrient == PIONOWO)
 8004590:	4b3a      	ldr	r3, [pc, #232]	@ (800467c <print+0x104>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d122      	bne.n	80045de <print+0x66>
	{
	if (x == RIGHT)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800459e:	4293      	cmp	r3, r2
 80045a0:	d109      	bne.n	80045b6 <print+0x3e>
		x = (DISP_X_SIZE+1)-(stl*cfont.x_size);
 80045a2:	4b37      	ldr	r3, [pc, #220]	@ (8004680 <print+0x108>)
 80045a4:	791b      	ldrb	r3, [r3, #4]
 80045a6:	461a      	mov	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	fb03 f202 	mul.w	r2, r3, r2
 80045ae:	f240 1341 	movw	r3, #321	@ 0x141
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	60bb      	str	r3, [r7, #8]
	if (x == CENTER)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f242 720e 	movw	r2, #9998	@ 0x270e
 80045bc:	4293      	cmp	r3, r2
 80045be:	d12e      	bne.n	800461e <print+0xa6>
		x = ((DISP_X_SIZE+1)-(stl*cfont.x_size))/2;
 80045c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004680 <print+0x108>)
 80045c2:	791b      	ldrb	r3, [r3, #4]
 80045c4:	461a      	mov	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	fb03 f202 	mul.w	r2, r3, r2
 80045cc:	f240 1341 	movw	r3, #321	@ 0x141
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	da00      	bge.n	80045d8 <print+0x60>
 80045d6:	3301      	adds	r3, #1
 80045d8:	105b      	asrs	r3, r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	e01f      	b.n	800461e <print+0xa6>
	}
	else
	{
	if (x == RIGHT)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d108      	bne.n	80045fa <print+0x82>
		x = (DISP_Y_SIZE+1)-(stl*cfont.x_size);
 80045e8:	4b25      	ldr	r3, [pc, #148]	@ (8004680 <print+0x108>)
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	f1c3 03f1 	rsb	r3, r3, #241	@ 0xf1
 80045f8:	60bb      	str	r3, [r7, #8]
	if (x == CENTER)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f242 720e 	movw	r2, #9998	@ 0x270e
 8004600:	4293      	cmp	r3, r2
 8004602:	d10c      	bne.n	800461e <print+0xa6>
		x = ((DISP_Y_SIZE+1)-(stl*cfont.x_size))/2;
 8004604:	4b1e      	ldr	r3, [pc, #120]	@ (8004680 <print+0x108>)
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	461a      	mov	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	fb02 f303 	mul.w	r3, r2, r3
 8004610:	f1c3 03f1 	rsb	r3, r3, #241	@ 0xf1
 8004614:	2b00      	cmp	r3, #0
 8004616:	da00      	bge.n	800461a <print+0xa2>
 8004618:	3301      	adds	r3, #1
 800461a:	105b      	asrs	r3, r3, #1
 800461c:	60bb      	str	r3, [r7, #8]
	}

	for (i=0; i<stl; i++)
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e021      	b.n	8004668 <print+0xf0>
		if (deg == 0)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d110      	bne.n	800464c <print+0xd4>
			printChar(*st++, x + (i*(cfont.x_size)), y);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	60fa      	str	r2, [r7, #12]
 8004630:	7818      	ldrb	r0, [r3, #0]
 8004632:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <print+0x108>)
 8004634:	791b      	ldrb	r3, [r3, #4]
 8004636:	461a      	mov	r2, r3
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	fb03 f202 	mul.w	r2, r3, r2
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4413      	add	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4619      	mov	r1, r3
 8004646:	f7ff fc99 	bl	8003f7c <printChar>
 800464a:	e00a      	b.n	8004662 <print+0xea>
		else
			rotateChar(*st++, x, y, i, deg);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	60fa      	str	r2, [r7, #12]
 8004652:	7818      	ldrb	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	f7ff fe53 	bl	8004308 <rotateChar>
	for (i=0; i<stl; i++)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	3301      	adds	r3, #1
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	dbd9      	blt.n	8004624 <print+0xac>
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2404c134 	.word	0x2404c134
 8004680:	2404c12c 	.word	0x2404c12c

08004684 <drawBitmap>:
//  x, y - wsp�rz�dne ekranu
//  sx, sy - rozmiar bitmapy
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void drawBitmap(int x, int y, int sx, int sy, const unsigned short* data)
{
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b089      	sub	sp, #36	@ 0x24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
	unsigned short col;
	int tx, ty, tc;

	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8004692:	4b49      	ldr	r3, [pc, #292]	@ (80047b8 <drawBitmap+0x134>)
 8004694:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004698:	619a      	str	r2, [r3, #24]
	if (chOrient == PIONOWO)
 800469a:	4b48      	ldr	r3, [pc, #288]	@ (80047bc <drawBitmap+0x138>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d139      	bne.n	8004716 <drawBitmap+0x92>
	{
		setXY(x, y, x+sx-1, y+sy-1);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	b298      	uxth	r0, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	b299      	uxth	r1, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29c      	uxth	r4, r3
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	b29a      	uxth	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	4622      	mov	r2, r4
 80046cc:	f7ff fb12 	bl	8003cf4 <setXY>
		for (tc=0; tc<(sx*sy); tc++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e014      	b.n	8004700 <drawBitmap+0x7c>
		{
			col = data[tc];
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	827b      	strh	r3, [r7, #18]
			LCD_write_dat(col>>8);
 80046e2:	8a7b      	ldrh	r3, [r7, #18]
 80046e4:	0a1b      	lsrs	r3, r3, #8
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe ffe4 	bl	80036b8 <LCD_write_dat>
			LCD_write_dat(col & 0xff);
 80046f0:	8a7b      	ldrh	r3, [r7, #18]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe ffdf 	bl	80036b8 <LCD_write_dat>
		for (tc=0; tc<(sx*sy); tc++)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3301      	adds	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	429a      	cmp	r2, r3
 800470c:	dbe3      	blt.n	80046d6 <drawBitmap+0x52>
		}
		GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800470e:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <drawBitmap+0x134>)
 8004710:	2202      	movs	r2, #2
 8004712:	619a      	str	r2, [r3, #24]
 8004714:	e046      	b.n	80047a4 <drawBitmap+0x120>
	}
	else
	{
		for (ty=0; ty<sy; ty++)
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	e03f      	b.n	800479c <drawBitmap+0x118>
		{
			setXY(x, y+ty, x+sx-1, y+ty);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	b298      	uxth	r0, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	b29a      	uxth	r2, r3
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	b29b      	uxth	r3, r3
 8004728:	4413      	add	r3, r2
 800472a:	b299      	uxth	r1, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4413      	add	r3, r2
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29c      	uxth	r4, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	b29a      	uxth	r2, r3
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	b29b      	uxth	r3, r3
 8004744:	4413      	add	r3, r2
 8004746:	b29b      	uxth	r3, r3
 8004748:	4622      	mov	r2, r4
 800474a:	f7ff fad3 	bl	8003cf4 <setXY>
			for (tx=sx-1; tx>=0; tx--)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3b01      	subs	r3, #1
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e019      	b.n	800478a <drawBitmap+0x106>
			{
				col = data[(ty*sx)+tx];
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	fb03 f202 	mul.w	r2, r3, r2
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004766:	4413      	add	r3, r2
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	827b      	strh	r3, [r7, #18]
				LCD_write_dat(col>>8);
 800476c:	8a7b      	ldrh	r3, [r7, #18]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	b29b      	uxth	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe ff9f 	bl	80036b8 <LCD_write_dat>
				LCD_write_dat(col & 0xff);
 800477a:	8a7b      	ldrh	r3, [r7, #18]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe ff9a 	bl	80036b8 <LCD_write_dat>
			for (tx=sx-1; tx>=0; tx--)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	3b01      	subs	r3, #1
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	dae2      	bge.n	8004756 <drawBitmap+0xd2>
			}
			GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8004790:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <drawBitmap+0x134>)
 8004792:	2202      	movs	r2, #2
 8004794:	619a      	str	r2, [r3, #24]
		for (ty=0; ty<sy; ty++)
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	3301      	adds	r3, #1
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	dbbb      	blt.n	800471c <drawBitmap+0x98>
		}
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <drawBitmap+0x134>)
 80047a6:	2202      	movs	r2, #2
 80047a8:	619a      	str	r2, [r3, #24]
	clrXY();
 80047aa:	f7ff fb1b 	bl	8003de4 <clrXY>
}
 80047ae:	bf00      	nop
 80047b0:	3724      	adds	r7, #36	@ 0x24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd90      	pop	{r4, r7, pc}
 80047b6:	bf00      	nop
 80047b8:	58020400 	.word	0x58020400
 80047bc:	2404c134 	.word	0x2404c134

080047c0 <InitDisplay>:
// Inicjalizuje wyświetlacz
// Parametry:nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void InitDisplay(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
	chRysujRaz = 1;
 80047c4:	4b03      	ldr	r3, [pc, #12]	@ (80047d4 <InitDisplay+0x14>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
	LCD_init();
 80047ca:	f7fe fff7 	bl	80037bc <LCD_init>
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	24000014 	.word	0x24000014

080047d8 <Menu>:
// Wyświetl menu wyboru trybów pracy
// Parametry: chPozycja - bieżąca pozyja menu
// Zwraca: nowy tryb pracy
////////////////////////////////////////////////////////////////////////////////
unsigned char Menu(unsigned char chPozycja)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af04      	add	r7, sp, #16
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
	if (chRysujRaz)
 80047e2:	4b6c      	ldr	r3, [pc, #432]	@ (8004994 <Menu+0x1bc>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8093 	beq.w	8004912 <Menu+0x13a>
	{
		LCD_clear();
 80047ec:	f7ff f986 	bl	8003afc <LCD_clear>
		setFont(MidFont);
 80047f0:	4869      	ldr	r0, [pc, #420]	@ (8004998 <Menu+0x1c0>)
 80047f2:	f7ff fea1 	bl	8004538 <setFont>
		setColor(GREEN);
 80047f6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80047fa:	f7ff fb0d 	bl	8003e18 <setColor>
		sprintf(chNapis, "AutoPitLot  SysCLK = %lu MHz", HAL_RCC_GetSysClockFreq()/1000000);
 80047fe:	f007 fea5 	bl	800c54c <HAL_RCC_GetSysClockFreq>
 8004802:	4603      	mov	r3, r0
 8004804:	4a65      	ldr	r2, [pc, #404]	@ (800499c <Menu+0x1c4>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	0c9b      	lsrs	r3, r3, #18
 800480c:	461a      	mov	r2, r3
 800480e:	4964      	ldr	r1, [pc, #400]	@ (80049a0 <Menu+0x1c8>)
 8004810:	4864      	ldr	r0, [pc, #400]	@ (80049a4 <Menu+0x1cc>)
 8004812:	f00f f9c1 	bl	8013b98 <siprintf>
		print(chNapis, 10, 0, 0);
 8004816:	2300      	movs	r3, #0
 8004818:	2200      	movs	r2, #0
 800481a:	210a      	movs	r1, #10
 800481c:	4861      	ldr	r0, [pc, #388]	@ (80049a4 <Menu+0x1cc>)
 800481e:	f7ff feab 	bl	8004578 <print>
		sprintf(chNapis, "v%d.%d.%d @ %s %s", WER_GLOWNA, WER_PODRZ, WER_REPO, build_date, build_time);	//numer wersji w repozytorium i czas kompilacji
 8004822:	4b61      	ldr	r3, [pc, #388]	@ (80049a8 <Menu+0x1d0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a61      	ldr	r2, [pc, #388]	@ (80049ac <Menu+0x1d4>)
 8004828:	6812      	ldr	r2, [r2, #0]
 800482a:	9202      	str	r2, [sp, #8]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	2306      	movs	r3, #6
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2301      	movs	r3, #1
 8004834:	2200      	movs	r2, #0
 8004836:	495e      	ldr	r1, [pc, #376]	@ (80049b0 <Menu+0x1d8>)
 8004838:	485a      	ldr	r0, [pc, #360]	@ (80049a4 <Menu+0x1cc>)
 800483a:	f00f f9ad 	bl	8013b98 <siprintf>
		print(chNapis, 10, 20, 0);
 800483e:	2300      	movs	r3, #0
 8004840:	2214      	movs	r2, #20
 8004842:	210a      	movs	r1, #10
 8004844:	4857      	ldr	r0, [pc, #348]	@ (80049a4 <Menu+0x1cc>)
 8004846:	f7ff fe97 	bl	8004578 <print>

		setColor(YELLOW);
 800484a:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 800484e:	f7ff fae3 	bl	8003e18 <setColor>
		sprintf(chNapis, "Podglad kamery RGB");
 8004852:	4958      	ldr	r1, [pc, #352]	@ (80049b4 <Menu+0x1dc>)
 8004854:	4853      	ldr	r0, [pc, #332]	@ (80049a4 <Menu+0x1cc>)
 8004856:	f00f f99f 	bl	8013b98 <siprintf>
		print(chNapis, 20, 40, 0);
 800485a:	2300      	movs	r3, #0
 800485c:	2228      	movs	r2, #40	@ 0x28
 800485e:	2114      	movs	r1, #20
 8004860:	4850      	ldr	r0, [pc, #320]	@ (80049a4 <Menu+0x1cc>)
 8004862:	f7ff fe89 	bl	8004578 <print>
		sprintf(chNapis, "Podglad kamery RAW");
 8004866:	4954      	ldr	r1, [pc, #336]	@ (80049b8 <Menu+0x1e0>)
 8004868:	484e      	ldr	r0, [pc, #312]	@ (80049a4 <Menu+0x1cc>)
 800486a:	f00f f995 	bl	8013b98 <siprintf>
		print(chNapis, 20, 60, 0);
 800486e:	2300      	movs	r3, #0
 8004870:	223c      	movs	r2, #60	@ 0x3c
 8004872:	2114      	movs	r1, #20
 8004874:	484b      	ldr	r0, [pc, #300]	@ (80049a4 <Menu+0x1cc>)
 8004876:	f7ff fe7f 	bl	8004578 <print>
		//sprintf(chNapis, "Setup 1");
		sprintf(chNapis, "Analiza ramki Eth");
 800487a:	4950      	ldr	r1, [pc, #320]	@ (80049bc <Menu+0x1e4>)
 800487c:	4849      	ldr	r0, [pc, #292]	@ (80049a4 <Menu+0x1cc>)
 800487e:	f00f f98b 	bl	8013b98 <siprintf>
		print(chNapis, 20, 80, 0);
 8004882:	2300      	movs	r3, #0
 8004884:	2250      	movs	r2, #80	@ 0x50
 8004886:	2114      	movs	r1, #20
 8004888:	4846      	ldr	r0, [pc, #280]	@ (80049a4 <Menu+0x1cc>)
 800488a:	f7ff fe75 	bl	8004578 <print>
		sprintf(chNapis, "Setup 2");
 800488e:	494c      	ldr	r1, [pc, #304]	@ (80049c0 <Menu+0x1e8>)
 8004890:	4844      	ldr	r0, [pc, #272]	@ (80049a4 <Menu+0x1cc>)
 8004892:	f00f f981 	bl	8013b98 <siprintf>
		print(chNapis, 20, 100, 0);
 8004896:	2300      	movs	r3, #0
 8004898:	2264      	movs	r2, #100	@ 0x64
 800489a:	2114      	movs	r1, #20
 800489c:	4841      	ldr	r0, [pc, #260]	@ (80049a4 <Menu+0x1cc>)
 800489e:	f7ff fe6b 	bl	8004578 <print>
		sprintf(chNapis, "Histogram RGB565");
 80048a2:	4948      	ldr	r1, [pc, #288]	@ (80049c4 <Menu+0x1ec>)
 80048a4:	483f      	ldr	r0, [pc, #252]	@ (80049a4 <Menu+0x1cc>)
 80048a6:	f00f f977 	bl	8013b98 <siprintf>
		print(chNapis, 20, 120, 0);
 80048aa:	2300      	movs	r3, #0
 80048ac:	2278      	movs	r2, #120	@ 0x78
 80048ae:	2114      	movs	r1, #20
 80048b0:	483c      	ldr	r0, [pc, #240]	@ (80049a4 <Menu+0x1cc>)
 80048b2:	f7ff fe61 	bl	8004578 <print>
		sprintf(chNapis, "Histogram bitow obrazu");
 80048b6:	4944      	ldr	r1, [pc, #272]	@ (80049c8 <Menu+0x1f0>)
 80048b8:	483a      	ldr	r0, [pc, #232]	@ (80049a4 <Menu+0x1cc>)
 80048ba:	f00f f96d 	bl	8013b98 <siprintf>
		print(chNapis, 20, 140, 0);
 80048be:	2300      	movs	r3, #0
 80048c0:	228c      	movs	r2, #140	@ 0x8c
 80048c2:	2114      	movs	r1, #20
 80048c4:	4837      	ldr	r0, [pc, #220]	@ (80049a4 <Menu+0x1cc>)
 80048c6:	f7ff fe57 	bl	8004578 <print>
		sprintf(chNapis, "Setup 5");
 80048ca:	4940      	ldr	r1, [pc, #256]	@ (80049cc <Menu+0x1f4>)
 80048cc:	4835      	ldr	r0, [pc, #212]	@ (80049a4 <Menu+0x1cc>)
 80048ce:	f00f f963 	bl	8013b98 <siprintf>
		print(chNapis, 20, 160, 0);
 80048d2:	2300      	movs	r3, #0
 80048d4:	22a0      	movs	r2, #160	@ 0xa0
 80048d6:	2114      	movs	r1, #20
 80048d8:	4832      	ldr	r0, [pc, #200]	@ (80049a4 <Menu+0x1cc>)
 80048da:	f7ff fe4d 	bl	8004578 <print>
		sprintf(chNapis, "Fraktale");
 80048de:	493c      	ldr	r1, [pc, #240]	@ (80049d0 <Menu+0x1f8>)
 80048e0:	4830      	ldr	r0, [pc, #192]	@ (80049a4 <Menu+0x1cc>)
 80048e2:	f00f f959 	bl	8013b98 <siprintf>
		print(chNapis, 20, 180, 0);
 80048e6:	2300      	movs	r3, #0
 80048e8:	22b4      	movs	r2, #180	@ 0xb4
 80048ea:	2114      	movs	r1, #20
 80048ec:	482d      	ldr	r0, [pc, #180]	@ (80049a4 <Menu+0x1cc>)
 80048ee:	f7ff fe43 	bl	8004578 <print>
		sprintf(chNapis, "Pomocy, kabelki!");
 80048f2:	4938      	ldr	r1, [pc, #224]	@ (80049d4 <Menu+0x1fc>)
 80048f4:	482b      	ldr	r0, [pc, #172]	@ (80049a4 <Menu+0x1cc>)
 80048f6:	f00f f94f 	bl	8013b98 <siprintf>
		print(chNapis, 20, 200, 0);
 80048fa:	2300      	movs	r3, #0
 80048fc:	22c8      	movs	r2, #200	@ 0xc8
 80048fe:	2114      	movs	r1, #20
 8004900:	4828      	ldr	r0, [pc, #160]	@ (80049a4 <Menu+0x1cc>)
 8004902:	f7ff fe39 	bl	8004578 <print>
		print(chNapis, 180, 40, 0);
		sprintf(chNapis, "Nic 1");
		print(chNapis, 180, 60, 0);
		sprintf(chNapis, "Nic 2");
		print(chNapis, 180, 80, 0);*/
		chRysujRaz = 0;
 8004906:	4b23      	ldr	r3, [pc, #140]	@ (8004994 <Menu+0x1bc>)
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
		InitFraktal(0);
 800490c:	2000      	movs	r0, #0
 800490e:	f000 f919 	bl	8004b44 <InitFraktal>
	}

	//kasuj stary znacznik
	setColor(BLACK);
 8004912:	2000      	movs	r0, #0
 8004914:	f7ff fa80 	bl	8003e18 <setColor>
	if (chPozycja < SRODKOWA_POZYCJA_MENU)
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d80a      	bhi.n	8004934 <Menu+0x15c>
	{
		x = 0;
 800491e:	4b2e      	ldr	r3, [pc, #184]	@ (80049d8 <Menu+0x200>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]
		y = chPozycja * 20 + 40;
 8004924:	79fa      	ldrb	r2, [r7, #7]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	3328      	adds	r3, #40	@ 0x28
 8004930:	4a2a      	ldr	r2, [pc, #168]	@ (80049dc <Menu+0x204>)
 8004932:	6013      	str	r3, [r2, #0]
	/*else		//obsługa prawej połowy ekranu
	{
		x = 160;
		y = (chPozycja - SRODKOWA_POZYCJA_MENU) * 20 + 40;
	}*/
	printChar('>', x, y);
 8004934:	4b28      	ldr	r3, [pc, #160]	@ (80049d8 <Menu+0x200>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a28      	ldr	r2, [pc, #160]	@ (80049dc <Menu+0x204>)
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	4619      	mov	r1, r3
 800493e:	203e      	movs	r0, #62	@ 0x3e
 8004940:	f7ff fb1c 	bl	8003f7c <printChar>

	//rysuj znacznik pozycji menu
	setColor(CYAN);
 8004944:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8004948:	f7ff fa66 	bl	8003e18 <setColor>
	chPozycja++;
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	3301      	adds	r3, #1
 8004950:	71fb      	strb	r3, [r7, #7]
	//if (chPozycja >= OSTATNIA_POZYCJA_MENU)	//menu na prawej i lewej części ekranu
	if (chPozycja >= SRODKOWA_POZYCJA_MENU)		//menu po lewej części ekranu
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d901      	bls.n	800495c <Menu+0x184>
		chPozycja = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	71fb      	strb	r3, [r7, #7]

	//oblicz współrzędne znacznika
	if (chPozycja < SRODKOWA_POZYCJA_MENU)
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	2b08      	cmp	r3, #8
 8004960:	d80a      	bhi.n	8004978 <Menu+0x1a0>
	{
		x = 0;
 8004962:	4b1d      	ldr	r3, [pc, #116]	@ (80049d8 <Menu+0x200>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
		y = chPozycja * 20 + 40;
 8004968:	79fa      	ldrb	r2, [r7, #7]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	3328      	adds	r3, #40	@ 0x28
 8004974:	4a19      	ldr	r2, [pc, #100]	@ (80049dc <Menu+0x204>)
 8004976:	6013      	str	r3, [r2, #0]
	/*else		//obsługa prawej połowy ekranu
	{
		x = 160;
		y = (chPozycja - SRODKOWA_POZYCJA_MENU) * 20 + 40;
	}*/
	printChar('>', x, y);
 8004978:	4b17      	ldr	r3, [pc, #92]	@ (80049d8 <Menu+0x200>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a17      	ldr	r2, [pc, #92]	@ (80049dc <Menu+0x204>)
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	4619      	mov	r1, r3
 8004982:	203e      	movs	r0, #62	@ 0x3e
 8004984:	f7ff fafa 	bl	8003f7c <printChar>

	return chPozycja;
 8004988:	79fb      	ldrb	r3, [r7, #7]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	24000014 	.word	0x24000014
 8004998:	0801766c 	.word	0x0801766c
 800499c:	431bde83 	.word	0x431bde83
 80049a0:	08016af4 	.word	0x08016af4
 80049a4:	2404c13c 	.word	0x2404c13c
 80049a8:	2400000c 	.word	0x2400000c
 80049ac:	24000010 	.word	0x24000010
 80049b0:	08016b14 	.word	0x08016b14
 80049b4:	08016b28 	.word	0x08016b28
 80049b8:	08016b3c 	.word	0x08016b3c
 80049bc:	08016b50 	.word	0x08016b50
 80049c0:	08016b64 	.word	0x08016b64
 80049c4:	08016b6c 	.word	0x08016b6c
 80049c8:	08016b80 	.word	0x08016b80
 80049cc:	08016b98 	.word	0x08016b98
 80049d0:	08016ba0 	.word	0x08016ba0
 80049d4:	08016bac 	.word	0x08016bac
 80049d8:	2404c164 	.word	0x2404c164
 80049dc:	2404c168 	.word	0x2404c168

080049e0 <RysujMenuTimer>:
// Rysuj timer włączenia pozycji menu
// Parametry: chTryb - bieżący tryb pracy
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void RysujMenuTimer(unsigned short sCzas)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	80fb      	strh	r3, [r7, #6]
	setColor(BLUE);
 80049ea:	201f      	movs	r0, #31
 80049ec:	f7ff fa14 	bl	8003e18 <setColor>
	fillRect(0, DISP_Y_SIZE-4, (int)sCzas, DISP_Y_SIZE);
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	23f0      	movs	r3, #240	@ 0xf0
 80049f4:	21ec      	movs	r1, #236	@ 0xec
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7ff fa50 	bl	8003e9c <fillRect>
	setColor(BLACK);
 80049fc:	2000      	movs	r0, #0
 80049fe:	f7ff fa0b 	bl	8003e18 <setColor>
	fillRect((int)sCzas+1, DISP_Y_SIZE-4, DISP_X_SIZE, DISP_Y_SIZE);
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	1c58      	adds	r0, r3, #1
 8004a06:	23f0      	movs	r3, #240	@ 0xf0
 8004a08:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004a0c:	21ec      	movs	r1, #236	@ 0xec
 8004a0e:	f7ff fa45 	bl	8003e9c <fillRect>
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <WyswietlDane8>:
// dane - zawartość rejestru do wyświetleania jako hex
// pozY - współrzędne Y wiersza
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlDane8(char *str, uint8_t dane, uint8_t pozY)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	70bb      	strb	r3, [r7, #2]
	setColor(GREEN);
 8004a2c:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004a30:	f7ff f9f2 	bl	8003e18 <setColor>
	sprintf(chNapis, "%s: 0x%X", str, dane);
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	4906      	ldr	r1, [pc, #24]	@ (8004a54 <WyswietlDane8+0x38>)
 8004a3a:	4807      	ldr	r0, [pc, #28]	@ (8004a58 <WyswietlDane8+0x3c>)
 8004a3c:	f00f f8ac 	bl	8013b98 <siprintf>
	print(chNapis, 10, pozY, 0);
 8004a40:	78ba      	ldrb	r2, [r7, #2]
 8004a42:	2300      	movs	r3, #0
 8004a44:	210a      	movs	r1, #10
 8004a46:	4804      	ldr	r0, [pc, #16]	@ (8004a58 <WyswietlDane8+0x3c>)
 8004a48:	f7ff fd96 	bl	8004578 <print>
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	08016bc0 	.word	0x08016bc0
 8004a58:	2404c13c 	.word	0x2404c13c

08004a5c <WyswietlDane32>:

void WyswietlDane32(char *str, uint32_t dane, uint8_t pozY)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	71fb      	strb	r3, [r7, #7]
	setColor(BLUE);
 8004a6a:	201f      	movs	r0, #31
 8004a6c:	f7ff f9d4 	bl	8003e18 <setColor>
	sprintf(chNapis, "%s: %ld", str, dane);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	4906      	ldr	r1, [pc, #24]	@ (8004a90 <WyswietlDane32+0x34>)
 8004a76:	4807      	ldr	r0, [pc, #28]	@ (8004a94 <WyswietlDane32+0x38>)
 8004a78:	f00f f88e 	bl	8013b98 <siprintf>
	print(chNapis, 10, pozY, 0);
 8004a7c:	79fa      	ldrb	r2, [r7, #7]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	210a      	movs	r1, #10
 8004a82:	4804      	ldr	r0, [pc, #16]	@ (8004a94 <WyswietlDane32+0x38>)
 8004a84:	f7ff fd78 	bl	8004578 <print>
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	08016bcc 	.word	0x08016bcc
 8004a94:	2404c13c 	.word	0x2404c13c

08004a98 <WyswietlDaneFloat>:

void WyswietlDaneFloat(char *str, float dane, uint8_t pozY)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	71fb      	strb	r3, [r7, #7]
	setColor(YELLOW);
 8004aa8:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8004aac:	f7ff f9b4 	bl	8003e18 <setColor>
	sprintf(chNapis, "%s: %.2f", str, dane);
 8004ab0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ab4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ab8:	ed8d 7b00 	vstr	d7, [sp]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4907      	ldr	r1, [pc, #28]	@ (8004adc <WyswietlDaneFloat+0x44>)
 8004ac0:	4807      	ldr	r0, [pc, #28]	@ (8004ae0 <WyswietlDaneFloat+0x48>)
 8004ac2:	f00f f869 	bl	8013b98 <siprintf>
	print(chNapis, 10, pozY, 0);
 8004ac6:	79fa      	ldrb	r2, [r7, #7]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	210a      	movs	r1, #10
 8004acc:	4804      	ldr	r0, [pc, #16]	@ (8004ae0 <WyswietlDaneFloat+0x48>)
 8004ace:	f7ff fd53 	bl	8004578 <print>
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	08016bd4 	.word	0x08016bd4
 8004ae0:	2404c13c 	.word	0x2404c13c

08004ae4 <WyswietlKodBledu>:
// dane - zawartość rejestru do wyświetleania jako hex
// pozY - współrzędne Y wiersza
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlKodBledu(uint8_t blad, uint8_t pozX, uint8_t pozY)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
 8004aee:	460b      	mov	r3, r1
 8004af0:	71bb      	strb	r3, [r7, #6]
 8004af2:	4613      	mov	r3, r2
 8004af4:	717b      	strb	r3, [r7, #5]
	if (blad)
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <WyswietlKodBledu+0x2e>
	{
		setColor(RED);
 8004afc:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8004b00:	f7ff f98a 	bl	8003e18 <setColor>
		sprintf(chNapis, "Err: %d ", blad);
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	461a      	mov	r2, r3
 8004b08:	490b      	ldr	r1, [pc, #44]	@ (8004b38 <WyswietlKodBledu+0x54>)
 8004b0a:	480c      	ldr	r0, [pc, #48]	@ (8004b3c <WyswietlKodBledu+0x58>)
 8004b0c:	f00f f844 	bl	8013b98 <siprintf>
 8004b10:	e007      	b.n	8004b22 <WyswietlKodBledu+0x3e>
	}
	else
	{
		setColor(GREEN);
 8004b12:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004b16:	f7ff f97f 	bl	8003e18 <setColor>
		sprintf(chNapis, "OK    ");
 8004b1a:	4909      	ldr	r1, [pc, #36]	@ (8004b40 <WyswietlKodBledu+0x5c>)
 8004b1c:	4807      	ldr	r0, [pc, #28]	@ (8004b3c <WyswietlKodBledu+0x58>)
 8004b1e:	f00f f83b 	bl	8013b98 <siprintf>
	}
	print(chNapis, pozX, pozY, 0);
 8004b22:	79b9      	ldrb	r1, [r7, #6]
 8004b24:	797a      	ldrb	r2, [r7, #5]
 8004b26:	2300      	movs	r3, #0
 8004b28:	4804      	ldr	r0, [pc, #16]	@ (8004b3c <WyswietlKodBledu+0x58>)
 8004b2a:	f7ff fd25 	bl	8004578 <print>
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	08016be0 	.word	0x08016be0
 8004b3c:	2404c13c 	.word	0x2404c13c
 8004b40:	08016bec 	.word	0x08016bec

08004b44 <InitFraktal>:
// zmierz czas liczenia fraktala Julii
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void InitFraktal(unsigned char chTyp)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
//#define IMG_CONSTANT	-0.73
//#define REAL_CONSTANT	0.19
#define IMG_CONSTANT	-0.1
#define REAL_CONSTANT	0.65

	switch (chTyp)
 8004b4e:	79fb      	ldrb	r3, [r7, #7]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d839      	bhi.n	8004bc8 <InitFraktal+0x84>
 8004b54:	a201      	add	r2, pc, #4	@ (adr r2, 8004b5c <InitFraktal+0x18>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b6d 	.word	0x08004b6d
 8004b60:	08004b7b 	.word	0x08004b7b
 8004b64:	08004b95 	.word	0x08004b95
 8004b68:	08004baf 	.word	0x08004baf
	{
	case 0:	fReal = 0.38; 	fImag = -0.1;	break;	//Julia
 8004b6c:	4b19      	ldr	r3, [pc, #100]	@ (8004bd4 <InitFraktal+0x90>)
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <InitFraktal+0x94>)
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	4b1a      	ldr	r3, [pc, #104]	@ (8004bdc <InitFraktal+0x98>)
 8004b74:	4a1a      	ldr	r2, [pc, #104]	@ (8004be0 <InitFraktal+0x9c>)
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e026      	b.n	8004bc8 <InitFraktal+0x84>
	case 1:	fX=-0.70; 	fY=0.60;	fZoom = -0.6;	chMnozPalety = 2;	break;		//ca�y fraktal - rotacja palety -0.7, 0.6, -0.6,
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <InitFraktal+0xa0>)
 8004b7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004be8 <InitFraktal+0xa4>)
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <InitFraktal+0xa8>)
 8004b82:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf0 <InitFraktal+0xac>)
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf4 <InitFraktal+0xb0>)
 8004b88:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <InitFraktal+0xb4>)
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bfc <InitFraktal+0xb8>)
 8004b8e:	2202      	movs	r2, #2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e019      	b.n	8004bc8 <InitFraktal+0x84>
	case 2:	fX=-0.75; 	fY=0.18;	fZoom = -0.6;	chMnozPalety = 15;	break;		//dolina konika x=-0,75, y=0,1
 8004b94:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <InitFraktal+0xa0>)
 8004b96:	4a1a      	ldr	r2, [pc, #104]	@ (8004c00 <InitFraktal+0xbc>)
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	4b14      	ldr	r3, [pc, #80]	@ (8004bec <InitFraktal+0xa8>)
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <InitFraktal+0xc0>)
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	4b14      	ldr	r3, [pc, #80]	@ (8004bf4 <InitFraktal+0xb0>)
 8004ba2:	4a15      	ldr	r2, [pc, #84]	@ (8004bf8 <InitFraktal+0xb4>)
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <InitFraktal+0xb8>)
 8004ba8:	220f      	movs	r2, #15
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	e00c      	b.n	8004bc8 <InitFraktal+0x84>
	case 3:	fX= 0.30; 	fY=0.05;	fZoom = -0.6;	chMnozPalety = 43;	break;		//dolina s�onia x=0,25-0,35, y=0,05, zoom=-0,6..-40
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <InitFraktal+0xa0>)
 8004bb0:	4a15      	ldr	r2, [pc, #84]	@ (8004c08 <InitFraktal+0xc4>)
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8004bec <InitFraktal+0xa8>)
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <InitFraktal+0xc8>)
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <InitFraktal+0xb0>)
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf8 <InitFraktal+0xb4>)
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004bfc <InitFraktal+0xb8>)
 8004bc2:	222b      	movs	r2, #43	@ 0x2b
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	bf00      	nop
	}


	//chMnozPalety = 43;		//8, 13, 21, 30, 34, 43, 48, 56, 61
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	2407196c 	.word	0x2407196c
 8004bd8:	3ec28f5c 	.word	0x3ec28f5c
 8004bdc:	24071970 	.word	0x24071970
 8004be0:	bdcccccd 	.word	0xbdcccccd
 8004be4:	24071978 	.word	0x24071978
 8004be8:	bf333333 	.word	0xbf333333
 8004bec:	2407197c 	.word	0x2407197c
 8004bf0:	3f19999a 	.word	0x3f19999a
 8004bf4:	24071974 	.word	0x24071974
 8004bf8:	bf19999a 	.word	0xbf19999a
 8004bfc:	24071980 	.word	0x24071980
 8004c00:	bf400000 	.word	0xbf400000
 8004c04:	3e3851ec 	.word	0x3e3851ec
 8004c08:	3e99999a 	.word	0x3e99999a
 8004c0c:	3d4ccccd 	.word	0x3d4ccccd

08004c10 <FraktalTest>:
// zmierz czas liczenia fraktala Julii
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void FraktalTest(unsigned char chTyp)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af04      	add	r7, sp, #16
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
	unsigned int nCzas;

	nCzas = HAL_GetTick();
 8004c1a:	f000 feff 	bl	8005a1c <HAL_GetTick>
 8004c1e:	60f8      	str	r0, [r7, #12]
	switch (chTyp)
 8004c20:	79fb      	ldrb	r3, [r7, #7]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	f200 80cd 	bhi.w	8004dc2 <FraktalTest+0x1b2>
 8004c28:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <FraktalTest+0x20>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c95 	.word	0x08004c95
 8004c38:	08004cef 	.word	0x08004cef
 8004c3c:	08004d59 	.word	0x08004d59
	{
	case 0:	GenerateJulia(DISP_X_SIZE, DISP_Y_SIZE, DISP_X_SIZE/2, DISP_Y_SIZE/2, 135, sFractalBuf);
 8004c40:	4b71      	ldr	r3, [pc, #452]	@ (8004e08 <FraktalTest+0x1f8>)
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	2387      	movs	r3, #135	@ 0x87
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	2378      	movs	r3, #120	@ 0x78
 8004c4a:	22a0      	movs	r2, #160	@ 0xa0
 8004c4c:	21f0      	movs	r1, #240	@ 0xf0
 8004c4e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8004c52:	f000 f975 	bl	8004f40 <GenerateJulia>
			nCzas = MinalCzas(nCzas);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fb30 	bl	80052bc <MinalCzas>
 8004c5c:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Julia: t=%dms, c=%.3f ", nCzas, fImag);
 8004c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8004e0c <FraktalTest+0x1fc>)
 8004c60:	edd3 7a00 	vldr	s15, [r3]
 8004c64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c68:	ed8d 7b00 	vstr	d7, [sp]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4968      	ldr	r1, [pc, #416]	@ (8004e10 <FraktalTest+0x200>)
 8004c70:	4868      	ldr	r0, [pc, #416]	@ (8004e14 <FraktalTest+0x204>)
 8004c72:	f00e ff91 	bl	8013b98 <siprintf>
			fImag -= 0.002;
 8004c76:	4b65      	ldr	r3, [pc, #404]	@ (8004e0c <FraktalTest+0x1fc>)
 8004c78:	edd3 7a00 	vldr	s15, [r3]
 8004c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004c80:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8004df8 <FraktalTest+0x1e8>
 8004c84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004c8c:	4b5f      	ldr	r3, [pc, #380]	@ (8004e0c <FraktalTest+0x1fc>)
 8004c8e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004c92:	e096      	b.n	8004dc2 <FraktalTest+0x1b2>

			//ca�y fraktal - rotacja palety
	case 1: GenerateMandelbrot(fX, fY, fZoom, 30, sFractalBuf);
 8004c94:	4b60      	ldr	r3, [pc, #384]	@ (8004e18 <FraktalTest+0x208>)
 8004c96:	edd3 7a00 	vldr	s15, [r3]
 8004c9a:	4b60      	ldr	r3, [pc, #384]	@ (8004e1c <FraktalTest+0x20c>)
 8004c9c:	ed93 7a00 	vldr	s14, [r3]
 8004ca0:	4b5f      	ldr	r3, [pc, #380]	@ (8004e20 <FraktalTest+0x210>)
 8004ca2:	edd3 6a00 	vldr	s13, [r3]
 8004ca6:	4958      	ldr	r1, [pc, #352]	@ (8004e08 <FraktalTest+0x1f8>)
 8004ca8:	201e      	movs	r0, #30
 8004caa:	eeb0 1a66 	vmov.f32	s2, s13
 8004cae:	eef0 0a47 	vmov.f32	s1, s14
 8004cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb6:	f000 f9ef 	bl	8005098 <GenerateMandelbrot>
			nCzas = MinalCzas(nCzas);
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fafe 	bl	80052bc <MinalCzas>
 8004cc0:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Mandelbrot: t=%dms z=%.1f, p=%d", nCzas, fZoom, chMnozPalety);
 8004cc2:	4b57      	ldr	r3, [pc, #348]	@ (8004e20 <FraktalTest+0x210>)
 8004cc4:	edd3 7a00 	vldr	s15, [r3]
 8004cc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ccc:	4b55      	ldr	r3, [pc, #340]	@ (8004e24 <FraktalTest+0x214>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	9302      	str	r3, [sp, #8]
 8004cd2:	ed8d 7b00 	vstr	d7, [sp]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4953      	ldr	r1, [pc, #332]	@ (8004e28 <FraktalTest+0x218>)
 8004cda:	484e      	ldr	r0, [pc, #312]	@ (8004e14 <FraktalTest+0x204>)
 8004cdc:	f00e ff5c 	bl	8013b98 <siprintf>
			chMnozPalety += 1;
 8004ce0:	4b50      	ldr	r3, [pc, #320]	@ (8004e24 <FraktalTest+0x214>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	4b4e      	ldr	r3, [pc, #312]	@ (8004e24 <FraktalTest+0x214>)
 8004cea:	701a      	strb	r2, [r3, #0]
			break;
 8004cec:	e069      	b.n	8004dc2 <FraktalTest+0x1b2>

			//dolina konika x=-0,75, y=0,1
	case 2: GenerateMandelbrot(fX, fY, fZoom, 30, sFractalBuf);
 8004cee:	4b4a      	ldr	r3, [pc, #296]	@ (8004e18 <FraktalTest+0x208>)
 8004cf0:	edd3 7a00 	vldr	s15, [r3]
 8004cf4:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <FraktalTest+0x20c>)
 8004cf6:	ed93 7a00 	vldr	s14, [r3]
 8004cfa:	4b49      	ldr	r3, [pc, #292]	@ (8004e20 <FraktalTest+0x210>)
 8004cfc:	edd3 6a00 	vldr	s13, [r3]
 8004d00:	4941      	ldr	r1, [pc, #260]	@ (8004e08 <FraktalTest+0x1f8>)
 8004d02:	201e      	movs	r0, #30
 8004d04:	eeb0 1a66 	vmov.f32	s2, s13
 8004d08:	eef0 0a47 	vmov.f32	s1, s14
 8004d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d10:	f000 f9c2 	bl	8005098 <GenerateMandelbrot>
			nCzas = MinalCzas(nCzas);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fad1 	bl	80052bc <MinalCzas>
 8004d1a:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Mandelbrot: t=%dms z=%.1f, p=%d", nCzas, fZoom, chMnozPalety);
 8004d1c:	4b40      	ldr	r3, [pc, #256]	@ (8004e20 <FraktalTest+0x210>)
 8004d1e:	edd3 7a00 	vldr	s15, [r3]
 8004d22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d26:	4b3f      	ldr	r3, [pc, #252]	@ (8004e24 <FraktalTest+0x214>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	9302      	str	r3, [sp, #8]
 8004d2c:	ed8d 7b00 	vstr	d7, [sp]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	493d      	ldr	r1, [pc, #244]	@ (8004e28 <FraktalTest+0x218>)
 8004d34:	4837      	ldr	r0, [pc, #220]	@ (8004e14 <FraktalTest+0x204>)
 8004d36:	f00e ff2f 	bl	8013b98 <siprintf>
			fZoom /= 0.9;
 8004d3a:	4b39      	ldr	r3, [pc, #228]	@ (8004e20 <FraktalTest+0x210>)
 8004d3c:	edd3 7a00 	vldr	s15, [r3]
 8004d40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004d44:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8004e00 <FraktalTest+0x1f0>
 8004d48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004d50:	4b33      	ldr	r3, [pc, #204]	@ (8004e20 <FraktalTest+0x210>)
 8004d52:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004d56:	e034      	b.n	8004dc2 <FraktalTest+0x1b2>

			//dolina s�onia x=0,25-0,35, y=0,05, zoom=-0,6..-40
	case 3: GenerateMandelbrot(fX, fY, fZoom, 30, sFractalBuf);
 8004d58:	4b2f      	ldr	r3, [pc, #188]	@ (8004e18 <FraktalTest+0x208>)
 8004d5a:	edd3 7a00 	vldr	s15, [r3]
 8004d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e1c <FraktalTest+0x20c>)
 8004d60:	ed93 7a00 	vldr	s14, [r3]
 8004d64:	4b2e      	ldr	r3, [pc, #184]	@ (8004e20 <FraktalTest+0x210>)
 8004d66:	edd3 6a00 	vldr	s13, [r3]
 8004d6a:	4927      	ldr	r1, [pc, #156]	@ (8004e08 <FraktalTest+0x1f8>)
 8004d6c:	201e      	movs	r0, #30
 8004d6e:	eeb0 1a66 	vmov.f32	s2, s13
 8004d72:	eef0 0a47 	vmov.f32	s1, s14
 8004d76:	eeb0 0a67 	vmov.f32	s0, s15
 8004d7a:	f000 f98d 	bl	8005098 <GenerateMandelbrot>
			nCzas = MinalCzas(nCzas);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fa9c 	bl	80052bc <MinalCzas>
 8004d84:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Mandelbrot: t=%dms z=%.1f, p=%d", nCzas, fZoom, chMnozPalety);
 8004d86:	4b26      	ldr	r3, [pc, #152]	@ (8004e20 <FraktalTest+0x210>)
 8004d88:	edd3 7a00 	vldr	s15, [r3]
 8004d8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004d90:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <FraktalTest+0x214>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	9302      	str	r3, [sp, #8]
 8004d96:	ed8d 7b00 	vstr	d7, [sp]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4922      	ldr	r1, [pc, #136]	@ (8004e28 <FraktalTest+0x218>)
 8004d9e:	481d      	ldr	r0, [pc, #116]	@ (8004e14 <FraktalTest+0x204>)
 8004da0:	f00e fefa 	bl	8013b98 <siprintf>
			fZoom /= 0.9;
 8004da4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <FraktalTest+0x210>)
 8004da6:	edd3 7a00 	vldr	s15, [r3]
 8004daa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004dae:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 8004e00 <FraktalTest+0x1f0>
 8004db2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004db6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004dba:	4b19      	ldr	r3, [pc, #100]	@ (8004e20 <FraktalTest+0x210>)
 8004dbc:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004dc0:	bf00      	nop
	}

	drawBitmap(0, 0, 320, 240, sFractalBuf);
 8004dc2:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <FraktalTest+0x1f8>)
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	23f0      	movs	r3, #240	@ 0xf0
 8004dc8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004dcc:	2100      	movs	r1, #0
 8004dce:	2000      	movs	r0, #0
 8004dd0:	f7ff fc58 	bl	8004684 <drawBitmap>
	setFont(MidFont);
 8004dd4:	4815      	ldr	r0, [pc, #84]	@ (8004e2c <FraktalTest+0x21c>)
 8004dd6:	f7ff fbaf 	bl	8004538 <setFont>
	setColor(GREEN);
 8004dda:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004dde:	f7ff f81b 	bl	8003e18 <setColor>
	print(chNapis, 0, 224, 0);
 8004de2:	2300      	movs	r3, #0
 8004de4:	22e0      	movs	r2, #224	@ 0xe0
 8004de6:	2100      	movs	r1, #0
 8004de8:	480a      	ldr	r0, [pc, #40]	@ (8004e14 <FraktalTest+0x204>)
 8004dea:	f7ff fbc5 	bl	8004578 <print>
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004dfc:	3f60624d 	.word	0x3f60624d
 8004e00:	cccccccd 	.word	0xcccccccd
 8004e04:	3feccccc 	.word	0x3feccccc
 8004e08:	2404c16c 	.word	0x2404c16c
 8004e0c:	24071970 	.word	0x24071970
 8004e10:	08016bf4 	.word	0x08016bf4
 8004e14:	2404c13c 	.word	0x2404c13c
 8004e18:	24071978 	.word	0x24071978
 8004e1c:	2407197c 	.word	0x2407197c
 8004e20:	24071974 	.word	0x24071974
 8004e24:	24071980 	.word	0x24071980
 8004e28:	08016c0c 	.word	0x08016c0c
 8004e2c:	0801766c 	.word	0x0801766c

08004e30 <FraktalDemo>:
// wyświetl demo z fraktalami
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void FraktalDemo(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
	switch (chDemoMode)
 8004e34:	4b40      	ldr	r3, [pc, #256]	@ (8004f38 <FraktalDemo+0x108>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b05      	cmp	r3, #5
 8004e3a:	d874      	bhi.n	8004f26 <FraktalDemo+0xf6>
 8004e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <FraktalDemo+0x14>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e5d 	.word	0x08004e5d
 8004e48:	08004e85 	.word	0x08004e85
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004ed5 	.word	0x08004ed5
 8004e54:	08004efd 	.word	0x08004efd
 8004e58:	08004f0b 	.word	0x08004f0b
	{
	case 0:	FraktalTest(0);		//rysuj fraktala Julii
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f7ff fed7 	bl	8004c10 <FraktalTest>
		if (chLiczIter > 40)
 8004e62:	4b36      	ldr	r3, [pc, #216]	@ (8004f3c <FraktalDemo+0x10c>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b28      	cmp	r3, #40	@ 0x28
 8004e68:	d956      	bls.n	8004f18 <FraktalDemo+0xe8>
		{
			chLiczIter = 0;
 8004e6a:	4b34      	ldr	r3, [pc, #208]	@ (8004f3c <FraktalDemo+0x10c>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004e70:	4b31      	ldr	r3, [pc, #196]	@ (8004f38 <FraktalDemo+0x108>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	4b2f      	ldr	r3, [pc, #188]	@ (8004f38 <FraktalDemo+0x108>)
 8004e7a:	701a      	strb	r2, [r3, #0]
			InitFraktal(1);
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f7ff fe61 	bl	8004b44 <InitFraktal>
		}
		break;
 8004e82:	e049      	b.n	8004f18 <FraktalDemo+0xe8>

	case 1:	FraktalTest(1);		//rysuj fraktala Mandelbrota - cały fraktal rotacja kolorów
 8004e84:	2001      	movs	r0, #1
 8004e86:	f7ff fec3 	bl	8004c10 <FraktalTest>
		if (chLiczIter > 60)
 8004e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8004f3c <FraktalDemo+0x10c>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b3c      	cmp	r3, #60	@ 0x3c
 8004e90:	d944      	bls.n	8004f1c <FraktalDemo+0xec>
		{
			chLiczIter = 0;
 8004e92:	4b2a      	ldr	r3, [pc, #168]	@ (8004f3c <FraktalDemo+0x10c>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004e98:	4b27      	ldr	r3, [pc, #156]	@ (8004f38 <FraktalDemo+0x108>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	4b25      	ldr	r3, [pc, #148]	@ (8004f38 <FraktalDemo+0x108>)
 8004ea2:	701a      	strb	r2, [r3, #0]
			InitFraktal(2);
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	f7ff fe4d 	bl	8004b44 <InitFraktal>
		}
		break;
 8004eaa:	e037      	b.n	8004f1c <FraktalDemo+0xec>

	case 2:	FraktalTest(2);		//rysuj fraktala Mandelbrota - dolina konika
 8004eac:	2002      	movs	r0, #2
 8004eae:	f7ff feaf 	bl	8004c10 <FraktalTest>
		if (chLiczIter > 20)
 8004eb2:	4b22      	ldr	r3, [pc, #136]	@ (8004f3c <FraktalDemo+0x10c>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b14      	cmp	r3, #20
 8004eb8:	d932      	bls.n	8004f20 <FraktalDemo+0xf0>
		{
			chLiczIter = 0;
 8004eba:	4b20      	ldr	r3, [pc, #128]	@ (8004f3c <FraktalDemo+0x10c>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f38 <FraktalDemo+0x108>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f38 <FraktalDemo+0x108>)
 8004eca:	701a      	strb	r2, [r3, #0]
			InitFraktal(3);
 8004ecc:	2003      	movs	r0, #3
 8004ece:	f7ff fe39 	bl	8004b44 <InitFraktal>
		}
		break;
 8004ed2:	e025      	b.n	8004f20 <FraktalDemo+0xf0>

	case 3:	FraktalTest(3);		//rysuj fraktala Mandelbrota - dolina słonia
 8004ed4:	2003      	movs	r0, #3
 8004ed6:	f7ff fe9b 	bl	8004c10 <FraktalTest>
		if (chLiczIter > 20)
 8004eda:	4b18      	ldr	r3, [pc, #96]	@ (8004f3c <FraktalDemo+0x10c>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b14      	cmp	r3, #20
 8004ee0:	d920      	bls.n	8004f24 <FraktalDemo+0xf4>
		{
			chLiczIter = 0;
 8004ee2:	4b16      	ldr	r3, [pc, #88]	@ (8004f3c <FraktalDemo+0x10c>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004ee8:	4b13      	ldr	r3, [pc, #76]	@ (8004f38 <FraktalDemo+0x108>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <FraktalDemo+0x108>)
 8004ef2:	701a      	strb	r2, [r3, #0]
			InitFraktal(2);
 8004ef4:	2002      	movs	r0, #2
 8004ef6:	f7ff fe25 	bl	8004b44 <InitFraktal>
		}
		break;
 8004efa:	e013      	b.n	8004f24 <FraktalDemo+0xf4>

	case 4:	chDemoMode++;	break;
 8004efc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f38 <FraktalDemo+0x108>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	3301      	adds	r3, #1
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <FraktalDemo+0x108>)
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	e00d      	b.n	8004f26 <FraktalDemo+0xf6>

	case 5:	//LCD_Test();		chMode++;
		InitFraktal(0);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7ff fe1a 	bl	8004b44 <InitFraktal>
		chDemoMode = 0;	break;
 8004f10:	4b09      	ldr	r3, [pc, #36]	@ (8004f38 <FraktalDemo+0x108>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e006      	b.n	8004f26 <FraktalDemo+0xf6>
		break;
 8004f18:	bf00      	nop
 8004f1a:	e004      	b.n	8004f26 <FraktalDemo+0xf6>
		break;
 8004f1c:	bf00      	nop
 8004f1e:	e002      	b.n	8004f26 <FraktalDemo+0xf6>
		break;
 8004f20:	bf00      	nop
 8004f22:	e000      	b.n	8004f26 <FraktalDemo+0xf6>
		break;
 8004f24:	bf00      	nop
	}
	chLiczIter++;
 8004f26:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <FraktalDemo+0x10c>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	4b03      	ldr	r3, [pc, #12]	@ (8004f3c <FraktalDemo+0x10c>)
 8004f30:	701a      	strb	r2, [r3, #0]
}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	24071981 	.word	0x24071981
 8004f3c:	24071982 	.word	0x24071982

08004f40 <GenerateJulia>:
// Generuj fraktal Julii
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void GenerateJulia(unsigned short size_x, unsigned short size_y, unsigned short offset_x, unsigned short offset_y, unsigned short zoom, unsigned short * buffer)
{
 8004f40:	b490      	push	{r4, r7}
 8004f42:	b08a      	sub	sp, #40	@ 0x28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4623      	mov	r3, r4
 8004f50:	80fb      	strh	r3, [r7, #6]
 8004f52:	4603      	mov	r3, r0
 8004f54:	80bb      	strh	r3, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	807b      	strh	r3, [r7, #2]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	803b      	strh	r3, [r7, #0]
	float num_real, num_img;
	float radius;
	unsigned short i;
	unsigned short x,y;

	for (y=0; y<size_y; y++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	82fb      	strh	r3, [r7, #22]
 8004f62:	e08a      	b.n	800507a <GenerateJulia+0x13a>
	{
		for (x=0; x<size_x; x++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	833b      	strh	r3, [r7, #24]
 8004f68:	e07f      	b.n	800506a <GenerateJulia+0x12a>
		{
			num_real = y - offset_y;
 8004f6a:	8afa      	ldrh	r2, [r7, #22]
 8004f6c:	883b      	ldrh	r3, [r7, #0]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			num_real = num_real / zoom;
 8004f7c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f86:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			num_img = x - offset_x;
 8004f92:	8b3a      	ldrh	r2, [r7, #24]
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fa0:	edc7 7a08 	vstr	s15, [r7, #32]
			num_img = num_img / zoom;
 8004fa4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fae:	edd7 6a08 	vldr	s13, [r7, #32]
 8004fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb6:	edc7 7a08 	vstr	s15, [r7, #32]
			i=0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	837b      	strh	r3, [r7, #26]
			radius = 0;
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
			while ((i<ITERATION-1) && (radius < 2))
 8004fc4:	e032      	b.n	800502c <GenerateJulia+0xec>
			{
				tmp1 = num_real * num_real;
 8004fc6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004fca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fce:	edc7 7a04 	vstr	s15, [r7, #16]
				tmp2 = num_img * num_img;
 8004fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fd6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004fda:	edc7 7a03 	vstr	s15, [r7, #12]
				num_img = 2*num_real*num_img + fImag;
 8004fde:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004fe2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004fe6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fee:	4b28      	ldr	r3, [pc, #160]	@ (8005090 <GenerateJulia+0x150>)
 8004ff0:	edd3 7a00 	vldr	s15, [r3]
 8004ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff8:	edc7 7a08 	vstr	s15, [r7, #32]
				num_real = tmp1 - tmp2 + fReal;
 8004ffc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005000:	edd7 7a03 	vldr	s15, [r7, #12]
 8005004:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005008:	4b22      	ldr	r3, [pc, #136]	@ (8005094 <GenerateJulia+0x154>)
 800500a:	edd3 7a00 	vldr	s15, [r3]
 800500e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005012:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				radius = tmp1 + tmp2;
 8005016:	ed97 7a04 	vldr	s14, [r7, #16]
 800501a:	edd7 7a03 	vldr	s15, [r7, #12]
 800501e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005022:	edc7 7a07 	vstr	s15, [r7, #28]
				i++;
 8005026:	8b7b      	ldrh	r3, [r7, #26]
 8005028:	3301      	adds	r3, #1
 800502a:	837b      	strh	r3, [r7, #26]
			while ((i<ITERATION-1) && (radius < 2))
 800502c:	8b7b      	ldrh	r3, [r7, #26]
 800502e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005030:	d808      	bhi.n	8005044 <GenerateJulia+0x104>
 8005032:	edd7 7a07 	vldr	s15, [r7, #28]
 8005036:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800503a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005042:	d4c0      	bmi.n	8004fc6 <GenerateJulia+0x86>
			}
			/* Store the value in the buffer */
			buffer[x+y*size_x] = i*20;
 8005044:	8b3a      	ldrh	r2, [r7, #24]
 8005046:	8afb      	ldrh	r3, [r7, #22]
 8005048:	88f9      	ldrh	r1, [r7, #6]
 800504a:	fb01 f303 	mul.w	r3, r1, r3
 800504e:	4413      	add	r3, r2
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005054:	441a      	add	r2, r3
 8005056:	8b7b      	ldrh	r3, [r7, #26]
 8005058:	4619      	mov	r1, r3
 800505a:	0089      	lsls	r1, r1, #2
 800505c:	440b      	add	r3, r1
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	b29b      	uxth	r3, r3
 8005062:	8013      	strh	r3, [r2, #0]
		for (x=0; x<size_x; x++)
 8005064:	8b3b      	ldrh	r3, [r7, #24]
 8005066:	3301      	adds	r3, #1
 8005068:	833b      	strh	r3, [r7, #24]
 800506a:	8b3a      	ldrh	r2, [r7, #24]
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	429a      	cmp	r2, r3
 8005070:	f4ff af7b 	bcc.w	8004f6a <GenerateJulia+0x2a>
	for (y=0; y<size_y; y++)
 8005074:	8afb      	ldrh	r3, [r7, #22]
 8005076:	3301      	adds	r3, #1
 8005078:	82fb      	strh	r3, [r7, #22]
 800507a:	8afa      	ldrh	r2, [r7, #22]
 800507c:	88bb      	ldrh	r3, [r7, #4]
 800507e:	429a      	cmp	r2, r3
 8005080:	f4ff af70 	bcc.w	8004f64 <GenerateJulia+0x24>
		}
	}
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	3728      	adds	r7, #40	@ 0x28
 800508a:	46bd      	mov	sp, r7
 800508c:	bc90      	pop	{r4, r7}
 800508e:	4770      	bx	lr
 8005090:	24071970 	.word	0x24071970
 8005094:	2407196c 	.word	0x2407196c

08005098 <GenerateMandelbrot>:
// Generuj fraktal Mandelbrota
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void GenerateMandelbrot(float centre_X, float centre_Y, float Zoom, unsigned short IterationMax, unsigned short * buffer)
{
 8005098:	b490      	push	{r4, r7}
 800509a:	b0a2      	sub	sp, #136	@ 0x88
 800509c:	af00      	add	r7, sp, #0
 800509e:	ed87 0a05 	vstr	s0, [r7, #20]
 80050a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80050a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80050aa:	4603      	mov	r3, r0
 80050ac:	6079      	str	r1, [r7, #4]
 80050ae:	817b      	strh	r3, [r7, #10]
	double X_Min = centre_X - 1.0/Zoom;
 80050b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80050b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80050b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80050bc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80050c0:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 80050c4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80050c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80050cc:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
	double X_Max = centre_X + 1.0/Zoom;
 80050d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80050d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80050d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80050dc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80050e0:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 80050e4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80050e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050ec:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	double Y_Min = centre_Y - (DISP_Y_SIZE-CONTROL_SIZE_Y) / (DISP_X_SIZE * Zoom);
 80050f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80050f4:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 80052b0 <GenerateMandelbrot+0x218>
 80050f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050fc:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80052b4 <GenerateMandelbrot+0x21c>
 8005100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005104:	ed97 7a04 	vldr	s14, [r7, #16]
 8005108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800510c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005110:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
	double Y_Max = centre_Y + (DISP_Y_SIZE-CONTROL_SIZE_Y) / (DISP_X_SIZE * Zoom);
 8005114:	edd7 7a03 	vldr	s15, [r7, #12]
 8005118:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80052b0 <GenerateMandelbrot+0x218>
 800511c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005120:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80052b4 <GenerateMandelbrot+0x21c>
 8005124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005128:	edd7 7a04 	vldr	s15, [r7, #16]
 800512c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005130:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005134:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
	double dx = (X_Max - X_Min) / DISP_X_SIZE;
 8005138:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800513c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8005140:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005144:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 80052a0 <GenerateMandelbrot+0x208>
 8005148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800514c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	double dy = (Y_Max - Y_Min) / (DISP_Y_SIZE-CONTROL_SIZE_Y) ;
 8005150:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8005154:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8005158:	ee36 6b47 	vsub.f64	d6, d6, d7
 800515c:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 80052a8 <GenerateMandelbrot+0x210>
 8005160:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005164:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	double y = Y_Min;
 8005168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800516c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	int n;
	//double c;
	double x, Zx, Zy, Zx2, Zy2, Zxy;

	//for (j = 0; j < (DISP_Y_SIZE-CONTROL_SIZE_Y); j++)
	for (j=0; j<DISP_Y_SIZE; j++)
 8005170:	2300      	movs	r3, #0
 8005172:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8005176:	e086      	b.n	8005286 <GenerateMandelbrot+0x1ee>
	{
		x = X_Min;
 8005178:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800517c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		for (i = 0; i < DISP_X_SIZE; i++)
 8005180:	2300      	movs	r3, #0
 8005182:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8005186:	e06c      	b.n	8005262 <GenerateMandelbrot+0x1ca>
		{
			Zx = x;
 8005188:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800518c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
			Zy = y;
 8005190:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005194:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			n = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	67bb      	str	r3, [r7, #120]	@ 0x78
			while (n < IterationMax)
 800519c:	e039      	b.n	8005212 <GenerateMandelbrot+0x17a>
			{
				Zx2 = Zx * Zx;
 800519e:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80051a2:	ee27 7b07 	vmul.f64	d7, d7, d7
 80051a6:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
				Zy2 = Zy * Zy;
 80051aa:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80051ae:	ee27 7b07 	vmul.f64	d7, d7, d7
 80051b2:	ed87 7b08 	vstr	d7, [r7, #32]
				Zxy = 2.0 * Zx * Zy;
 80051b6:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80051ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051be:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80051c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80051c6:	ed87 7b06 	vstr	d7, [r7, #24]
				Zx = Zx2 - Zy2 + x;
 80051ca:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80051ce:	ed97 7b08 	vldr	d7, [r7, #32]
 80051d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80051d6:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 80051da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051de:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
				Zy = Zxy + y;
 80051e2:	ed97 6b06 	vldr	d6, [r7, #24]
 80051e6:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 80051ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ee:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
				if(Zx2 + Zy2 > 16.0)
 80051f2:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80051f6:	ed97 7b08 	vldr	d7, [r7, #32]
 80051fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051fe:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 8005202:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	dc07      	bgt.n	800521c <GenerateMandelbrot+0x184>
				{
					break;
				}
				n++;
 800520c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800520e:	3301      	adds	r3, #1
 8005210:	67bb      	str	r3, [r7, #120]	@ 0x78
			while (n < IterationMax)
 8005212:	897b      	ldrh	r3, [r7, #10]
 8005214:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005216:	429a      	cmp	r2, r3
 8005218:	dbc1      	blt.n	800519e <GenerateMandelbrot+0x106>
 800521a:	e000      	b.n	800521e <GenerateMandelbrot+0x186>
					break;
 800521c:	bf00      	nop
			}
			x += dx;
 800521e:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8005222:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8005226:	ee36 7b07 	vadd.f64	d7, d6, d7
 800522a:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70

			buffer[i+j*DISP_X_SIZE] = n*chMnozPalety;
 800522e:	4b22      	ldr	r3, [pc, #136]	@ (80052b8 <GenerateMandelbrot+0x220>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	461c      	mov	r4, r3
 8005234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005236:	b299      	uxth	r1, r3
 8005238:	f8b7 007c 	ldrh.w	r0, [r7, #124]	@ 0x7c
 800523c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	019b      	lsls	r3, r3, #6
 8005248:	4403      	add	r3, r0
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4413      	add	r3, r2
 8005250:	fb14 f201 	smulbb	r2, r4, r1
 8005254:	b292      	uxth	r2, r2
 8005256:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < DISP_X_SIZE; i++)
 8005258:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800525c:	3301      	adds	r3, #1
 800525e:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8005262:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8005266:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800526a:	d38d      	bcc.n	8005188 <GenerateMandelbrot+0xf0>
		}
		y += dy;
 800526c:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8005270:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8005274:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005278:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
	for (j=0; j<DISP_Y_SIZE; j++)
 800527c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8005280:	3301      	adds	r3, #1
 8005282:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8005286:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800528a:	2bef      	cmp	r3, #239	@ 0xef
 800528c:	f67f af74 	bls.w	8005178 <GenerateMandelbrot+0xe0>
	}
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	3788      	adds	r7, #136	@ 0x88
 8005296:	46bd      	mov	sp, r7
 8005298:	bc90      	pop	{r4, r7}
 800529a:	4770      	bx	lr
 800529c:	f3af 8000 	nop.w
 80052a0:	00000000 	.word	0x00000000
 80052a4:	40740000 	.word	0x40740000
 80052a8:	00000000 	.word	0x00000000
 80052ac:	405c0000 	.word	0x405c0000
 80052b0:	43a00000 	.word	0x43a00000
 80052b4:	42e00000 	.word	0x42e00000
 80052b8:	24071980 	.word	0x24071980

080052bc <MinalCzas>:
// Liczy upływ czasu
// Parametry: nStart - licznik czasu na na początku pomiaru
// Zwraca: ilość czasu w setkach us jaki upłynął do podanego czasu startu
////////////////////////////////////////////////////////////////////////////////
unsigned int MinalCzas(unsigned int nStart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	unsigned int nCzas, nCzasAkt;

	nCzasAkt = HAL_GetTick();
 80052c4:	f000 fbaa 	bl	8005a1c <HAL_GetTick>
 80052c8:	60b8      	str	r0, [r7, #8]
	if (nCzasAkt >= nStart)
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d304      	bcc.n	80052dc <MinalCzas+0x20>
		nCzas = nCzasAkt - nStart;
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e004      	b.n	80052e6 <MinalCzas+0x2a>
	else
		nCzas = 0xFFFFFFFF - nStart + nCzasAkt;
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
	return nCzas;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <WyswietlPomoc>:
// wyświetla komunikat o sposobie podłączenia
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlPomoc(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
	if (chRysujRaz)
 80052f4:	4b30      	ldr	r3, [pc, #192]	@ (80053b8 <WyswietlPomoc+0xc8>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d05a      	beq.n	80053b2 <WyswietlPomoc+0xc2>
	{
		setFont(MidFont);
 80052fc:	482f      	ldr	r0, [pc, #188]	@ (80053bc <WyswietlPomoc+0xcc>)
 80052fe:	f7ff f91b 	bl	8004538 <setFont>
		setColor(YELLOW);
 8005302:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8005306:	f7fe fd87 	bl	8003e18 <setColor>
		sprintf(chNapis, "Kamera DCMI");
 800530a:	492d      	ldr	r1, [pc, #180]	@ (80053c0 <WyswietlPomoc+0xd0>)
 800530c:	482d      	ldr	r0, [pc, #180]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800530e:	f00e fc43 	bl	8013b98 <siprintf>
		print(chNapis, 0, 0*20, 0);
 8005312:	2300      	movs	r3, #0
 8005314:	2200      	movs	r2, #0
 8005316:	2100      	movs	r1, #0
 8005318:	482a      	ldr	r0, [pc, #168]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800531a:	f7ff f92d 	bl	8004578 <print>
		setColor(GREEN);
 800531e:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8005322:	f7fe fd79 	bl	8003e18 <setColor>
		sprintf(chNapis, "XCLK (PF9): CN11.56");
 8005326:	4928      	ldr	r1, [pc, #160]	@ (80053c8 <WyswietlPomoc+0xd8>)
 8005328:	4826      	ldr	r0, [pc, #152]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800532a:	f00e fc35 	bl	8013b98 <siprintf>
		print(chNapis, 0, 1*20, 0);
 800532e:	2300      	movs	r3, #0
 8005330:	2214      	movs	r2, #20
 8005332:	2100      	movs	r1, #0
 8005334:	4823      	ldr	r0, [pc, #140]	@ (80053c4 <WyswietlPomoc+0xd4>)
 8005336:	f7ff f91f 	bl	8004578 <print>
		sprintf(chNapis, "PIXCLK (PA6): CN12.14");
 800533a:	4924      	ldr	r1, [pc, #144]	@ (80053cc <WyswietlPomoc+0xdc>)
 800533c:	4821      	ldr	r0, [pc, #132]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800533e:	f00e fc2b 	bl	8013b98 <siprintf>
		print(chNapis, 0, 2*20, 0);
 8005342:	2300      	movs	r3, #0
 8005344:	2228      	movs	r2, #40	@ 0x28
 8005346:	2100      	movs	r1, #0
 8005348:	481e      	ldr	r0, [pc, #120]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800534a:	f7ff f915 	bl	8004578 <print>
		sprintf(chNapis, "HSYNC (PA4): CN11.32");
 800534e:	4920      	ldr	r1, [pc, #128]	@ (80053d0 <WyswietlPomoc+0xe0>)
 8005350:	481c      	ldr	r0, [pc, #112]	@ (80053c4 <WyswietlPomoc+0xd4>)
 8005352:	f00e fc21 	bl	8013b98 <siprintf>
		print(chNapis, 0, 3*20, 0);
 8005356:	2300      	movs	r3, #0
 8005358:	223c      	movs	r2, #60	@ 0x3c
 800535a:	2100      	movs	r1, #0
 800535c:	4819      	ldr	r0, [pc, #100]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800535e:	f7ff f90b 	bl	8004578 <print>
		sprintf(chNapis, "VSYNC (PB7): CN11.21");
 8005362:	491c      	ldr	r1, [pc, #112]	@ (80053d4 <WyswietlPomoc+0xe4>)
 8005364:	4817      	ldr	r0, [pc, #92]	@ (80053c4 <WyswietlPomoc+0xd4>)
 8005366:	f00e fc17 	bl	8013b98 <siprintf>
		print(chNapis, 0, 4*20, 0);
 800536a:	2300      	movs	r3, #0
 800536c:	2250      	movs	r2, #80	@ 0x50
 800536e:	2100      	movs	r1, #0
 8005370:	4814      	ldr	r0, [pc, #80]	@ (80053c4 <WyswietlPomoc+0xd4>)
 8005372:	f7ff f901 	bl	8004578 <print>
		sprintf(chNapis, "SCK (PF14): CN12.50");
 8005376:	4918      	ldr	r1, [pc, #96]	@ (80053d8 <WyswietlPomoc+0xe8>)
 8005378:	4812      	ldr	r0, [pc, #72]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800537a:	f00e fc0d 	bl	8013b98 <siprintf>
		print(chNapis, 0, 5*20, 0);
 800537e:	2300      	movs	r3, #0
 8005380:	2264      	movs	r2, #100	@ 0x64
 8005382:	2100      	movs	r1, #0
 8005384:	480f      	ldr	r0, [pc, #60]	@ (80053c4 <WyswietlPomoc+0xd4>)
 8005386:	f7ff f8f7 	bl	8004578 <print>
		sprintf(chNapis, "SDA (PF15): CN12.60");
 800538a:	4914      	ldr	r1, [pc, #80]	@ (80053dc <WyswietlPomoc+0xec>)
 800538c:	480d      	ldr	r0, [pc, #52]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800538e:	f00e fc03 	bl	8013b98 <siprintf>
		print(chNapis, 0, 6*20, 0);
 8005392:	2300      	movs	r3, #0
 8005394:	2278      	movs	r2, #120	@ 0x78
 8005396:	2100      	movs	r1, #0
 8005398:	480a      	ldr	r0, [pc, #40]	@ (80053c4 <WyswietlPomoc+0xd4>)
 800539a:	f7ff f8ed 	bl	8004578 <print>
		sprintf(chNapis, "PWDN (PF11): CN12.62");
 800539e:	4910      	ldr	r1, [pc, #64]	@ (80053e0 <WyswietlPomoc+0xf0>)
 80053a0:	4808      	ldr	r0, [pc, #32]	@ (80053c4 <WyswietlPomoc+0xd4>)
 80053a2:	f00e fbf9 	bl	8013b98 <siprintf>
		print(chNapis, 0, 7*20, 0);
 80053a6:	2300      	movs	r3, #0
 80053a8:	228c      	movs	r2, #140	@ 0x8c
 80053aa:	2100      	movs	r1, #0
 80053ac:	4805      	ldr	r0, [pc, #20]	@ (80053c4 <WyswietlPomoc+0xd4>)
 80053ae:	f7ff f8e3 	bl	8004578 <print>
	}
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	24000014 	.word	0x24000014
 80053bc:	0801766c 	.word	0x0801766c
 80053c0:	08016c3c 	.word	0x08016c3c
 80053c4:	2404c13c 	.word	0x2404c13c
 80053c8:	08016c48 	.word	0x08016c48
 80053cc:	08016c5c 	.word	0x08016c5c
 80053d0:	08016c74 	.word	0x08016c74
 80053d4:	08016c8c 	.word	0x08016c8c
 80053d8:	08016ca4 	.word	0x08016ca4
 80053dc:	08016cb8 	.word	0x08016cb8
 80053e0:	08016ccc 	.word	0x08016ccc

080053e4 <WyswietlAnalizeEth>:
// wyświetla okno z wynikami analizy ramki eth
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlAnalizeEth(uint8_t* chAdrEthNad, uint8_t* chAdrIPNad)
{
 80053e4:	b5b0      	push	{r4, r5, r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af04      	add	r7, sp, #16
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
	if (chRysujRaz)
 80053ee:	4b32      	ldr	r3, [pc, #200]	@ (80054b8 <WyswietlAnalizeEth+0xd4>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d015      	beq.n	8005422 <WyswietlAnalizeEth+0x3e>
		{
			LCD_clear();
 80053f6:	f7fe fb81 	bl	8003afc <LCD_clear>
			setFont(MidFont);
 80053fa:	4830      	ldr	r0, [pc, #192]	@ (80054bc <WyswietlAnalizeEth+0xd8>)
 80053fc:	f7ff f89c 	bl	8004538 <setFont>
			setColor(GREEN);
 8005400:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8005404:	f7fe fd08 	bl	8003e18 <setColor>
			sprintf(chNapis, "Analiza ramki Ethernet");
 8005408:	492d      	ldr	r1, [pc, #180]	@ (80054c0 <WyswietlAnalizeEth+0xdc>)
 800540a:	482e      	ldr	r0, [pc, #184]	@ (80054c4 <WyswietlAnalizeEth+0xe0>)
 800540c:	f00e fbc4 	bl	8013b98 <siprintf>
			print(chNapis, 10, 0, 0);
 8005410:	2300      	movs	r3, #0
 8005412:	2200      	movs	r2, #0
 8005414:	210a      	movs	r1, #10
 8005416:	482b      	ldr	r0, [pc, #172]	@ (80054c4 <WyswietlAnalizeEth+0xe0>)
 8005418:	f7ff f8ae 	bl	8004578 <print>
			chRysujRaz = 0;
 800541c:	4b26      	ldr	r3, [pc, #152]	@ (80054b8 <WyswietlAnalizeEth+0xd4>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
		}
		setColor(YELLOW);
 8005422:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8005426:	f7fe fcf7 	bl	8003e18 <setColor>
		sprintf(chNapis, "Adr Eth Nad: %.2X:%.2X:%.2X:%.2X:%.2X:%.2X", *(chAdrEthNad+0), *(chAdrEthNad+1), *(chAdrEthNad+2), *(chAdrEthNad+3), *(chAdrEthNad+4), *(chAdrEthNad+6));	//adres ramki
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	461c      	mov	r4, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3301      	adds	r3, #1
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461d      	mov	r5, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3302      	adds	r3, #2
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3303      	adds	r3, #3
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3306      	adds	r3, #6
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	9002      	str	r0, [sp, #8]
 800545a:	9101      	str	r1, [sp, #4]
 800545c:	9200      	str	r2, [sp, #0]
 800545e:	462b      	mov	r3, r5
 8005460:	4622      	mov	r2, r4
 8005462:	4919      	ldr	r1, [pc, #100]	@ (80054c8 <WyswietlAnalizeEth+0xe4>)
 8005464:	4817      	ldr	r0, [pc, #92]	@ (80054c4 <WyswietlAnalizeEth+0xe0>)
 8005466:	f00e fb97 	bl	8013b98 <siprintf>
		print(chNapis, 20, 20, 0);
 800546a:	2300      	movs	r3, #0
 800546c:	2214      	movs	r2, #20
 800546e:	2114      	movs	r1, #20
 8005470:	4814      	ldr	r0, [pc, #80]	@ (80054c4 <WyswietlAnalizeEth+0xe0>)
 8005472:	f7ff f881 	bl	8004578 <print>
		sprintf(chNapis, "Adr IP Nad: %.3d.%.3d.%.3d,%.3d", *(chAdrIPNad+0), *(chAdrIPNad+1), *(chAdrIPNad+2), *(chAdrIPNad+3));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	4619      	mov	r1, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	3302      	adds	r3, #2
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	3303      	adds	r3, #3
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	9200      	str	r2, [sp, #0]
 8005496:	4603      	mov	r3, r0
 8005498:	460a      	mov	r2, r1
 800549a:	490c      	ldr	r1, [pc, #48]	@ (80054cc <WyswietlAnalizeEth+0xe8>)
 800549c:	4809      	ldr	r0, [pc, #36]	@ (80054c4 <WyswietlAnalizeEth+0xe0>)
 800549e:	f00e fb7b 	bl	8013b98 <siprintf>
		print(chNapis, 20, 40, 0);
 80054a2:	2300      	movs	r3, #0
 80054a4:	2228      	movs	r2, #40	@ 0x28
 80054a6:	2114      	movs	r1, #20
 80054a8:	4806      	ldr	r0, [pc, #24]	@ (80054c4 <WyswietlAnalizeEth+0xe0>)
 80054aa:	f7ff f865 	bl	8004578 <print>
		sprintf(chNapis, "Fraktale");
		print(chNapis, 20, 180, 0);
		sprintf(chNapis, "Pomocy, kabelki!");
		print(chNapis, 20, 200, 0);*/

}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bdb0      	pop	{r4, r5, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	24000014 	.word	0x24000014
 80054bc:	0801766c 	.word	0x0801766c
 80054c0:	08016ce4 	.word	0x08016ce4
 80054c4:	2404c13c 	.word	0x2404c13c
 80054c8:	08016cfc 	.word	0x08016cfc
 80054cc:	08016d28 	.word	0x08016d28

080054d0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08c      	sub	sp, #48	@ 0x30
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80054da:	2300      	movs	r3, #0
 80054dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <BSP_LED_Init+0x28>
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d006      	beq.n	80054f8 <BSP_LED_Init+0x28>
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d003      	beq.n	80054f8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054f0:	f06f 0301 	mvn.w	r3, #1
 80054f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f6:	e055      	b.n	80055a4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80054fe:	4b2c      	ldr	r3, [pc, #176]	@ (80055b0 <BSP_LED_Init+0xe0>)
 8005500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005504:	4a2a      	ldr	r2, [pc, #168]	@ (80055b0 <BSP_LED_Init+0xe0>)
 8005506:	f043 0302 	orr.w	r3, r3, #2
 800550a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800550e:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <BSP_LED_Init+0xe0>)
 8005510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	e021      	b.n	8005562 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d10f      	bne.n	8005544 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8005524:	4b22      	ldr	r3, [pc, #136]	@ (80055b0 <BSP_LED_Init+0xe0>)
 8005526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800552a:	4a21      	ldr	r2, [pc, #132]	@ (80055b0 <BSP_LED_Init+0xe0>)
 800552c:	f043 0310 	orr.w	r3, r3, #16
 8005530:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005534:	4b1e      	ldr	r3, [pc, #120]	@ (80055b0 <BSP_LED_Init+0xe0>)
 8005536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	e00e      	b.n	8005562 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <BSP_LED_Init+0xe0>)
 8005546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800554a:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <BSP_LED_Init+0xe0>)
 800554c:	f043 0302 	orr.w	r3, r3, #2
 8005550:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005554:	4b16      	ldr	r3, [pc, #88]	@ (80055b0 <BSP_LED_Init+0xe0>)
 8005556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	4a13      	ldr	r2, [pc, #76]	@ (80055b4 <BSP_LED_Init+0xe4>)
 8005566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800556a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800556c:	2301      	movs	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005570:	2300      	movs	r3, #0
 8005572:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005574:	2303      	movs	r3, #3
 8005576:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	4a0f      	ldr	r2, [pc, #60]	@ (80055b8 <BSP_LED_Init+0xe8>)
 800557c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005580:	f107 0218 	add.w	r2, r7, #24
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f005 f902 	bl	800a790 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	4a0a      	ldr	r2, [pc, #40]	@ (80055b8 <BSP_LED_Init+0xe8>)
 8005590:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	4a07      	ldr	r2, [pc, #28]	@ (80055b4 <BSP_LED_Init+0xe4>)
 8005598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800559c:	2200      	movs	r2, #0
 800559e:	4619      	mov	r1, r3
 80055a0:	f005 faa6 	bl	800aaf0 <HAL_GPIO_WritePin>
  }

  return ret;
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3730      	adds	r7, #48	@ 0x30
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	58024400 	.word	0x58024400
 80055b4:	08017cc0 	.word	0x08017cc0
 80055b8:	2400001c 	.word	0x2400001c

080055bc <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	4603      	mov	r3, r0
 80055c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <BSP_LED_On+0x28>
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d006      	beq.n	80055e4 <BSP_LED_On+0x28>
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d003      	beq.n	80055e4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055dc:	f06f 0301 	mvn.w	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e00b      	b.n	80055fc <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	4a08      	ldr	r2, [pc, #32]	@ (8005608 <BSP_LED_On+0x4c>)
 80055e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	4a07      	ldr	r2, [pc, #28]	@ (800560c <BSP_LED_On+0x50>)
 80055f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4619      	mov	r1, r3
 80055f8:	f005 fa7a 	bl	800aaf0 <HAL_GPIO_WritePin>
  }

  return ret;
 80055fc:	68fb      	ldr	r3, [r7, #12]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	2400001c 	.word	0x2400001c
 800560c:	08017cc0 	.word	0x08017cc0

08005610 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d009      	beq.n	8005638 <BSP_LED_Off+0x28>
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d006      	beq.n	8005638 <BSP_LED_Off+0x28>
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d003      	beq.n	8005638 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005630:	f06f 0301 	mvn.w	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e00b      	b.n	8005650 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	4a08      	ldr	r2, [pc, #32]	@ (800565c <BSP_LED_Off+0x4c>)
 800563c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	4a07      	ldr	r2, [pc, #28]	@ (8005660 <BSP_LED_Off+0x50>)
 8005644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005648:	2200      	movs	r2, #0
 800564a:	4619      	mov	r1, r3
 800564c:	f005 fa50 	bl	800aaf0 <HAL_GPIO_WritePin>
  }

  return ret;
 8005650:	68fb      	ldr	r3, [r7, #12]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	2400001c 	.word	0x2400001c
 8005660:	08017cc0 	.word	0x08017cc0

08005664 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <BSP_LED_Toggle+0x28>
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d006      	beq.n	800568c <BSP_LED_Toggle+0x28>
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d003      	beq.n	800568c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005684:	f06f 0301 	mvn.w	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e00b      	b.n	80056a4 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	4a08      	ldr	r2, [pc, #32]	@ (80056b0 <BSP_LED_Toggle+0x4c>)
 8005690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	4907      	ldr	r1, [pc, #28]	@ (80056b4 <BSP_LED_Toggle+0x50>)
 8005698:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f005 fa3f 	bl	800ab22 <HAL_GPIO_TogglePin>
  }

  return ret;
 80056a4:	68fb      	ldr	r3, [r7, #12]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	2400001c 	.word	0x2400001c
 80056b4:	08017cc0 	.word	0x08017cc0

080056b8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	460a      	mov	r2, r1
 80056c2:	71fb      	strb	r3, [r7, #7]
 80056c4:	4613      	mov	r3, r2
 80056c6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80056c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005784 <BSP_PB_Init+0xcc>)
 80056ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005784 <BSP_PB_Init+0xcc>)
 80056d0:	f043 0304 	orr.w	r3, r3, #4
 80056d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005784 <BSP_PB_Init+0xcc>)
 80056da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80056e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056ea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80056ec:	2302      	movs	r3, #2
 80056ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80056f0:	2302      	movs	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80056f4:	79bb      	ldrb	r3, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10c      	bne.n	8005714 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <BSP_PB_Init+0xd0>)
 8005702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005706:	f107 020c 	add.w	r2, r7, #12
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f005 f83f 	bl	800a790 <HAL_GPIO_Init>
 8005712:	e031      	b.n	8005778 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005714:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005718:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <BSP_PB_Init+0xd0>)
 800571e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005722:	f107 020c 	add.w	r2, r7, #12
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f005 f831 	bl	800a790 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4a16      	ldr	r2, [pc, #88]	@ (800578c <BSP_PB_Init+0xd4>)
 8005734:	441a      	add	r2, r3
 8005736:	79fb      	ldrb	r3, [r7, #7]
 8005738:	4915      	ldr	r1, [pc, #84]	@ (8005790 <BSP_PB_Init+0xd8>)
 800573a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800573e:	4619      	mov	r1, r3
 8005740:	4610      	mov	r0, r2
 8005742:	f004 ffd5 	bl	800a6f0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	4a10      	ldr	r2, [pc, #64]	@ (800578c <BSP_PB_Init+0xd4>)
 800574c:	1898      	adds	r0, r3, r2
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	4a10      	ldr	r2, [pc, #64]	@ (8005794 <BSP_PB_Init+0xdc>)
 8005752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005756:	461a      	mov	r2, r3
 8005758:	2100      	movs	r1, #0
 800575a:	f004 ffaa 	bl	800a6b2 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800575e:	2028      	movs	r0, #40	@ 0x28
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	4a0d      	ldr	r2, [pc, #52]	@ (8005798 <BSP_PB_Init+0xe0>)
 8005764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005768:	2200      	movs	r2, #0
 800576a:	4619      	mov	r1, r3
 800576c:	f000 fa5e 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005770:	2328      	movs	r3, #40	@ 0x28
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fa74 	bl	8005c60 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	58024400 	.word	0x58024400
 8005788:	24000028 	.word	0x24000028
 800578c:	24071984 	.word	0x24071984
 8005790:	08017cc8 	.word	0x08017cc8
 8005794:	2400002c 	.word	0x2400002c
 8005798:	24000030 	.word	0x24000030

0800579c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4a04      	ldr	r2, [pc, #16]	@ (80057bc <BSP_PB_IRQHandler+0x20>)
 80057ac:	4413      	add	r3, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f004 ffb2 	bl	800a718 <HAL_EXTI_IRQHandler>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	24071984 	.word	0x24071984

080057c0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	6039      	str	r1, [r7, #0]
 80057ca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80057d6:	f06f 0301 	mvn.w	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e018      	b.n	8005810 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	2294      	movs	r2, #148	@ 0x94
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
 80057e6:	4a0d      	ldr	r2, [pc, #52]	@ (800581c <BSP_COM_Init+0x5c>)
 80057e8:	4413      	add	r3, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f86e 	bl	80058cc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	2294      	movs	r2, #148	@ 0x94
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
 80057f8:	4a08      	ldr	r2, [pc, #32]	@ (800581c <BSP_COM_Init+0x5c>)
 80057fa:	4413      	add	r3, r2
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f80e 	bl	8005820 <MX_USART3_Init>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800580a:	f06f 0303 	mvn.w	r3, #3
 800580e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005810:	68fb      	ldr	r3, [r7, #12]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2407198c 	.word	0x2407198c

08005820 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800582a:	4b15      	ldr	r3, [pc, #84]	@ (8005880 <MX_USART3_Init+0x60>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	220c      	movs	r2, #12
 800583e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	895b      	ldrh	r3, [r3, #10]
 8005844:	461a      	mov	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	891b      	ldrh	r3, [r3, #8]
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	899b      	ldrh	r3, [r3, #12]
 8005860:	461a      	mov	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800586c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f009 fdbe 	bl	800f3f0 <HAL_UART_Init>
 8005874:	4603      	mov	r3, r0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	24000018 	.word	0x24000018

08005884 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800588c:	4b09      	ldr	r3, [pc, #36]	@ (80058b4 <__io_putchar+0x30>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	2394      	movs	r3, #148	@ 0x94
 8005894:	fb02 f303 	mul.w	r3, r2, r3
 8005898:	4a07      	ldr	r2, [pc, #28]	@ (80058b8 <__io_putchar+0x34>)
 800589a:	1898      	adds	r0, r3, r2
 800589c:	1d39      	adds	r1, r7, #4
 800589e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058a2:	2201      	movs	r2, #1
 80058a4:	f009 fdf4 	bl	800f490 <HAL_UART_Transmit>
  return ch;
 80058a8:	687b      	ldr	r3, [r7, #4]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	24071a20 	.word	0x24071a20
 80058b8:	2407198c 	.word	0x2407198c

080058bc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80058c0:	2000      	movs	r0, #0
 80058c2:	f7fd f8bb 	bl	8002a3c <BSP_PB_Callback>
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	@ 0x28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80058d4:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <COM1_MspInit+0xa8>)
 80058d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058da:	4a26      	ldr	r2, [pc, #152]	@ (8005974 <COM1_MspInit+0xa8>)
 80058dc:	f043 0308 	orr.w	r3, r3, #8
 80058e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058e4:	4b23      	ldr	r3, [pc, #140]	@ (8005974 <COM1_MspInit+0xa8>)
 80058e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80058f2:	4b20      	ldr	r3, [pc, #128]	@ (8005974 <COM1_MspInit+0xa8>)
 80058f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005974 <COM1_MspInit+0xa8>)
 80058fa:	f043 0308 	orr.w	r3, r3, #8
 80058fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005902:	4b1c      	ldr	r3, [pc, #112]	@ (8005974 <COM1_MspInit+0xa8>)
 8005904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8005910:	4b18      	ldr	r3, [pc, #96]	@ (8005974 <COM1_MspInit+0xa8>)
 8005912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005916:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <COM1_MspInit+0xa8>)
 8005918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800591c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005920:	4b14      	ldr	r3, [pc, #80]	@ (8005974 <COM1_MspInit+0xa8>)
 8005922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005926:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800592e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005932:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005934:	2302      	movs	r3, #2
 8005936:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005938:	2302      	movs	r3, #2
 800593a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800593c:	2301      	movs	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8005940:	2307      	movs	r3, #7
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4619      	mov	r1, r3
 800594a:	480b      	ldr	r0, [pc, #44]	@ (8005978 <COM1_MspInit+0xac>)
 800594c:	f004 ff20 	bl	800a790 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8005950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005954:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005956:	2302      	movs	r3, #2
 8005958:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800595a:	2307      	movs	r3, #7
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800595e:	f107 0314 	add.w	r3, r7, #20
 8005962:	4619      	mov	r1, r3
 8005964:	4804      	ldr	r0, [pc, #16]	@ (8005978 <COM1_MspInit+0xac>)
 8005966:	f004 ff13 	bl	800a790 <HAL_GPIO_Init>
}
 800596a:	bf00      	nop
 800596c:	3728      	adds	r7, #40	@ 0x28
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
 8005978:	58020c00 	.word	0x58020c00

0800597c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005982:	2003      	movs	r0, #3
 8005984:	f000 f947 	bl	8005c16 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005988:	f006 fde0 	bl	800c54c <HAL_RCC_GetSysClockFreq>
 800598c:	4602      	mov	r2, r0
 800598e:	4b15      	ldr	r3, [pc, #84]	@ (80059e4 <HAL_Init+0x68>)
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	4913      	ldr	r1, [pc, #76]	@ (80059e8 <HAL_Init+0x6c>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059a6:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <HAL_Init+0x68>)
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	4a0e      	ldr	r2, [pc, #56]	@ (80059e8 <HAL_Init+0x6c>)
 80059b0:	5cd3      	ldrb	r3, [r2, r3]
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	4a0b      	ldr	r2, [pc, #44]	@ (80059ec <HAL_Init+0x70>)
 80059be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059c0:	4a0b      	ldr	r2, [pc, #44]	@ (80059f0 <HAL_Init+0x74>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059c6:	200f      	movs	r0, #15
 80059c8:	f7fd fc2e 	bl	8003228 <HAL_InitTick>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e002      	b.n	80059dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059d6:	f7fd f84b 	bl	8002a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	58024400 	.word	0x58024400
 80059e8:	08016d50 	.word	0x08016d50
 80059ec:	24000004 	.word	0x24000004
 80059f0:	24000000 	.word	0x24000000

080059f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059f8:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_IncTick+0x20>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <HAL_IncTick+0x24>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	4a04      	ldr	r2, [pc, #16]	@ (8005a18 <HAL_IncTick+0x24>)
 8005a06:	6013      	str	r3, [r2, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	24000038 	.word	0x24000038
 8005a18:	24071a24 	.word	0x24071a24

08005a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a20:	4b03      	ldr	r3, [pc, #12]	@ (8005a30 <HAL_GetTick+0x14>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	24071a24 	.word	0x24071a24

08005a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a3c:	f7ff ffee 	bl	8005a1c <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d005      	beq.n	8005a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <HAL_Delay+0x44>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a5a:	bf00      	nop
 8005a5c:	f7ff ffde 	bl	8005a1c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d8f7      	bhi.n	8005a5c <HAL_Delay+0x28>
  {
  }
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	24000038 	.word	0x24000038

08005a7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005a80:	4b03      	ldr	r3, [pc, #12]	@ (8005a90 <HAL_GetREVID+0x14>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	0c1b      	lsrs	r3, r3, #16
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	5c001000 	.word	0x5c001000

08005a94 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8005a9c:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8005aa4:	4904      	ldr	r1, [pc, #16]	@ (8005ab8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	604b      	str	r3, [r1, #4]
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	58000400 	.word	0x58000400

08005abc <__NVIC_SetPriorityGrouping>:
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005acc:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <__NVIC_SetPriorityGrouping+0x40>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ae4:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <__NVIC_SetPriorityGrouping+0x44>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aea:	4a04      	ldr	r2, [pc, #16]	@ (8005afc <__NVIC_SetPriorityGrouping+0x40>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	60d3      	str	r3, [r2, #12]
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000ed00 	.word	0xe000ed00
 8005b00:	05fa0000 	.word	0x05fa0000

08005b04 <__NVIC_GetPriorityGrouping>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b08:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <__NVIC_GetPriorityGrouping+0x18>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	f003 0307 	and.w	r3, r3, #7
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	e000ed00 	.word	0xe000ed00

08005b20 <__NVIC_EnableIRQ>:
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	db0b      	blt.n	8005b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	4907      	ldr	r1, [pc, #28]	@ (8005b58 <__NVIC_EnableIRQ+0x38>)
 8005b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	2001      	movs	r0, #1
 8005b42:	fa00 f202 	lsl.w	r2, r0, r2
 8005b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000e100 	.word	0xe000e100

08005b5c <__NVIC_SetPriority>:
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db0a      	blt.n	8005b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	490c      	ldr	r1, [pc, #48]	@ (8005ba8 <__NVIC_SetPriority+0x4c>)
 8005b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b7a:	0112      	lsls	r2, r2, #4
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	440b      	add	r3, r1
 8005b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005b84:	e00a      	b.n	8005b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	4908      	ldr	r1, [pc, #32]	@ (8005bac <__NVIC_SetPriority+0x50>)
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	3b04      	subs	r3, #4
 8005b94:	0112      	lsls	r2, r2, #4
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	440b      	add	r3, r1
 8005b9a:	761a      	strb	r2, [r3, #24]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000e100 	.word	0xe000e100
 8005bac:	e000ed00 	.word	0xe000ed00

08005bb0 <NVIC_EncodePriority>:
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	@ 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f1c3 0307 	rsb	r3, r3, #7
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	bf28      	it	cs
 8005bce:	2304      	movcs	r3, #4
 8005bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d902      	bls.n	8005be0 <NVIC_EncodePriority+0x30>
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3b03      	subs	r3, #3
 8005bde:	e000      	b.n	8005be2 <NVIC_EncodePriority+0x32>
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43da      	mvns	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	43d9      	mvns	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c08:	4313      	orrs	r3, r2
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3724      	adds	r7, #36	@ 0x24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ff4c 	bl	8005abc <__NVIC_SetPriorityGrouping>
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c3a:	f7ff ff63 	bl	8005b04 <__NVIC_GetPriorityGrouping>
 8005c3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	6978      	ldr	r0, [r7, #20]
 8005c46:	f7ff ffb3 	bl	8005bb0 <NVIC_EncodePriority>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff ff82 	bl	8005b5c <__NVIC_SetPriority>
}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff ff56 	bl	8005b20 <__NVIC_EnableIRQ>
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005c80:	f3bf 8f5f 	dmb	sy
}
 8005c84:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005c86:	4b07      	ldr	r3, [pc, #28]	@ (8005ca4 <HAL_MPU_Disable+0x28>)
 8005c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8a:	4a06      	ldr	r2, [pc, #24]	@ (8005ca4 <HAL_MPU_Disable+0x28>)
 8005c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c90:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_MPU_Disable+0x2c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	e000ed00 	.word	0xe000ed00
 8005ca8:	e000ed90 	.word	0xe000ed90

08005cac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ce4 <HAL_MPU_Enable+0x38>)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce8 <HAL_MPU_Enable+0x3c>)
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	4a09      	ldr	r2, [pc, #36]	@ (8005ce8 <HAL_MPU_Enable+0x3c>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005cca:	f3bf 8f4f 	dsb	sy
}
 8005cce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cd0:	f3bf 8f6f 	isb	sy
}
 8005cd4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	e000ed90 	.word	0xe000ed90
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	785a      	ldrb	r2, [r3, #1]
 8005cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d68 <HAL_MPU_ConfigRegion+0x7c>)
 8005cfa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d68 <HAL_MPU_ConfigRegion+0x7c>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	4a19      	ldr	r2, [pc, #100]	@ (8005d68 <HAL_MPU_ConfigRegion+0x7c>)
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005d08:	4a17      	ldr	r2, [pc, #92]	@ (8005d68 <HAL_MPU_ConfigRegion+0x7c>)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	7b1b      	ldrb	r3, [r3, #12]
 8005d14:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7adb      	ldrb	r3, [r3, #11]
 8005d1a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7a9b      	ldrb	r3, [r3, #10]
 8005d22:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7b5b      	ldrb	r3, [r3, #13]
 8005d2a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	7b9b      	ldrb	r3, [r3, #14]
 8005d32:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7bdb      	ldrb	r3, [r3, #15]
 8005d3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	7a5b      	ldrb	r3, [r3, #9]
 8005d42:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	7a1b      	ldrb	r3, [r3, #8]
 8005d4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d54:	4a04      	ldr	r2, [pc, #16]	@ (8005d68 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d58:	6113      	str	r3, [r2, #16]
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	e000ed90 	.word	0xe000ed90

08005d6c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005d70:	4b07      	ldr	r3, [pc, #28]	@ (8005d90 <HAL_GetCurrentCPUID+0x24>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	2b07      	cmp	r3, #7
 8005d7c:	d101      	bne.n	8005d82 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e000      	b.n	8005d84 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8005d82:	2301      	movs	r3, #1
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e054      	b.n	8005e50 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	7f5b      	ldrb	r3, [r3, #29]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d105      	bne.n	8005dbc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fc fe88 	bl	8002acc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	791b      	ldrb	r3, [r3, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10c      	bne.n	8005de4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a22      	ldr	r2, [pc, #136]	@ (8005e58 <HAL_CRC_Init+0xc4>)
 8005dd0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0218 	bic.w	r2, r2, #24
 8005de0:	609a      	str	r2, [r3, #8]
 8005de2:	e00c      	b.n	8005dfe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6899      	ldr	r1, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	461a      	mov	r2, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f834 	bl	8005e5c <HAL_CRCEx_Polynomial_Set>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e028      	b.n	8005e50 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	795b      	ldrb	r3, [r3, #5]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	611a      	str	r2, [r3, #16]
 8005e10:	e004      	b.n	8005e1c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6912      	ldr	r2, [r2, #16]
 8005e1a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	04c11db7 	.word	0x04c11db7

08005e5c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005e6c:	231f      	movs	r3, #31
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
 8005e7e:	e063      	b.n	8005f48 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005e80:	bf00      	nop
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	613a      	str	r2, [r7, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <HAL_CRCEx_Polynomial_Set+0x44>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0f0      	beq.n	8005e82 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b18      	cmp	r3, #24
 8005ea4:	d846      	bhi.n	8005f34 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eac <HAL_CRCEx_Polynomial_Set+0x50>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005f3b 	.word	0x08005f3b
 8005eb0:	08005f35 	.word	0x08005f35
 8005eb4:	08005f35 	.word	0x08005f35
 8005eb8:	08005f35 	.word	0x08005f35
 8005ebc:	08005f35 	.word	0x08005f35
 8005ec0:	08005f35 	.word	0x08005f35
 8005ec4:	08005f35 	.word	0x08005f35
 8005ec8:	08005f35 	.word	0x08005f35
 8005ecc:	08005f29 	.word	0x08005f29
 8005ed0:	08005f35 	.word	0x08005f35
 8005ed4:	08005f35 	.word	0x08005f35
 8005ed8:	08005f35 	.word	0x08005f35
 8005edc:	08005f35 	.word	0x08005f35
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	08005f35 	.word	0x08005f35
 8005ee8:	08005f35 	.word	0x08005f35
 8005eec:	08005f1d 	.word	0x08005f1d
 8005ef0:	08005f35 	.word	0x08005f35
 8005ef4:	08005f35 	.word	0x08005f35
 8005ef8:	08005f35 	.word	0x08005f35
 8005efc:	08005f35 	.word	0x08005f35
 8005f00:	08005f35 	.word	0x08005f35
 8005f04:	08005f35 	.word	0x08005f35
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	08005f11 	.word	0x08005f11
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d913      	bls.n	8005f3e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005f1a:	e010      	b.n	8005f3e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b07      	cmp	r3, #7
 8005f20:	d90f      	bls.n	8005f42 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005f26:	e00c      	b.n	8005f42 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	2b0f      	cmp	r3, #15
 8005f2c:	d90b      	bls.n	8005f46 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005f32:	e008      	b.n	8005f46 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75fb      	strb	r3, [r7, #23]
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005f46:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10d      	bne.n	8005f6a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f023 0118 	bic.w	r1, r3, #24
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e069      	b.n	800605e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d102      	bne.n	8005f9c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fc fdba 	bl	8002b10 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8006068 <HAL_DCMI_Init+0xf0>)
 8005fbe:	400b      	ands	r3, r1
 8005fc0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6819      	ldr	r1, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005fd6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005fe2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005fee:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005ffa:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006000:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006006:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b10      	cmp	r3, #16
 8006016:	d112      	bne.n	800603e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	7f1b      	ldrb	r3, [r3, #28]
 800601c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	7f5b      	ldrb	r3, [r3, #29]
 8006022:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006024:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7f9b      	ldrb	r3, [r3, #30]
 800602a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800602c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7fdb      	ldrb	r3, [r3, #31]
 8006034:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800603a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800603c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 021e 	orr.w	r2, r2, #30
 800604c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	ffe0f007 	.word	0xffe0f007

0800606c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_DCMI_Start_DMA+0x1c>
 8006084:	2302      	movs	r3, #2
 8006086:	e0ab      	b.n	80061e0 <HAL_DCMI_Start_DMA+0x174>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0202 	bic.w	r2, r2, #2
 80060b6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6819      	ldr	r1, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060cc:	4a46      	ldr	r2, [pc, #280]	@ (80061e8 <HAL_DCMI_Start_DMA+0x17c>)
 80060ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d4:	4a45      	ldr	r2, [pc, #276]	@ (80061ec <HAL_DCMI_Start_DMA+0x180>)
 80060d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060dc:	2200      	movs	r2, #0
 80060de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060fe:	d219      	bcs.n	8006134 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3328      	adds	r3, #40	@ 0x28
 800610a:	4619      	mov	r1, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	f000 fd5c 	bl	8006bcc <HAL_DMA_Start_IT>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d055      	beq.n	80061c6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2240      	movs	r2, #64	@ 0x40
 800611e:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e055      	b.n	80061e0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006138:	4a2b      	ldr	r2, [pc, #172]	@ (80061e8 <HAL_DCMI_Start_DMA+0x17c>)
 800613a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800614e:	e009      	b.n	8006164 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006154:	085a      	lsrs	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	005a      	lsls	r2, r3, #1
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800616c:	d2f0      	bcs.n	8006150 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	1e9a      	subs	r2, r3, #2
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4413      	add	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3328      	adds	r3, #40	@ 0x28
 8006196:	4619      	mov	r1, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	f002 fff3 	bl	800918c <HAL_DMAEx_MultiBufferStart_IT>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00c      	beq.n	80061c6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2240      	movs	r2, #64	@ 0x40
 80061b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e00c      	b.n	80061e0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0201 	orr.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3718      	adds	r7, #24
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	080063b5 	.word	0x080063b5
 80061ec:	080064db 	.word	0x080064db

080061f0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80061f8:	4b2b      	ldr	r3, [pc, #172]	@ (80062a8 <HAL_DCMI_Stop+0xb8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2b      	ldr	r2, [pc, #172]	@ (80062ac <HAL_DCMI_Stop+0xbc>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	0a5b      	lsrs	r3, r3, #9
 8006204:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006218:	2b01      	cmp	r3, #1
 800621a:	d101      	bne.n	8006220 <HAL_DCMI_Stop+0x30>
 800621c:	2302      	movs	r3, #2
 800621e:	e03f      	b.n	80062a0 <HAL_DCMI_Stop+0xb0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3b01      	subs	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d108      	bne.n	800625e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	72fb      	strb	r3, [r7, #11]
      break;
 800625c:	e006      	b.n	800626c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e9      	bne.n	8006240 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800627a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006280:	4618      	mov	r0, r3
 8006282:	f000 ff0d 	bl	80070a0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 800629e:	7afb      	ldrb	r3, [r7, #11]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	24000000 	.word	0x24000000
 80062ac:	10624dd3 	.word	0x10624dd3

080062b0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d016      	beq.n	80062f8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2204      	movs	r2, #4
 80062d0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d6:	f043 0202 	orr.w	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2204      	movs	r2, #4
 80062e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ea:	4a31      	ldr	r2, [pc, #196]	@ (80063b0 <HAL_DCMI_IRQHandler+0x100>)
 80062ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 f9f2 	bl	80076dc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2202      	movs	r2, #2
 8006308:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800630e:	f043 0201 	orr.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2204      	movs	r2, #4
 800631a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006322:	4a23      	ldr	r2, [pc, #140]	@ (80063b0 <HAL_DCMI_IRQHandler+0x100>)
 8006324:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800632a:	4618      	mov	r0, r3
 800632c:	f001 f9d6 	bl	80076dc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b00      	cmp	r3, #0
 8006338:	d006      	beq.n	8006348 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2210      	movs	r2, #16
 8006340:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fb1a 	bl	800197c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d006      	beq.n	8006360 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2208      	movs	r2, #8
 8006358:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fb fb20 	bl	80019a0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01d      	beq.n	80063a6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b02      	cmp	r3, #2
 8006376:	d107      	bne.n	8006388 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 021e 	bic.w	r2, r2, #30
 8006386:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7fb fb07 	bl	80019b4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	080064db 	.word	0x080064db

080063b4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d043      	beq.n	8006452 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063d6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d118      	bne.n	8006416 <DCMI_DMAXferCplt+0x62>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d015      	beq.n	8006416 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fc:	00da      	lsls	r2, r3, #3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4413      	add	r3, r2
 8006402:	2200      	movs	r2, #0
 8006404:	4619      	mov	r1, r3
 8006406:	f003 fa1f 	bl	8009848 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640e:	1e5a      	subs	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	639a      	str	r2, [r3, #56]	@ 0x38
 8006414:	e044      	b.n	80064a0 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d13c      	bne.n	80064a0 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006438:	00da      	lsls	r2, r3, #3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	2201      	movs	r2, #1
 8006440:	4619      	mov	r1, r3
 8006442:	f003 fa01 	bl	8009848 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644a:	1e5a      	subs	r2, r3, #1
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006450:	e026      	b.n	80064a0 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d006      	beq.n	8006470 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e017      	b.n	80064a0 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10f      	bne.n	80064a0 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006484:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	0099      	lsls	r1, r3, #2
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	440a      	add	r2, r1
 8006496:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d112      	bne.n	80064d2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d103      	bne.n	80064d2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d009      	beq.n	8006506 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7fb fa68 	bl	80019dc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800651c:	f7ff fa7e 	bl	8005a1c <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e316      	b.n	8006b5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a66      	ldr	r2, [pc, #408]	@ (80066cc <HAL_DMA_Init+0x1b8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d04a      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a65      	ldr	r2, [pc, #404]	@ (80066d0 <HAL_DMA_Init+0x1bc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d045      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a63      	ldr	r2, [pc, #396]	@ (80066d4 <HAL_DMA_Init+0x1c0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d040      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a62      	ldr	r2, [pc, #392]	@ (80066d8 <HAL_DMA_Init+0x1c4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d03b      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a60      	ldr	r2, [pc, #384]	@ (80066dc <HAL_DMA_Init+0x1c8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d036      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a5f      	ldr	r2, [pc, #380]	@ (80066e0 <HAL_DMA_Init+0x1cc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d031      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a5d      	ldr	r2, [pc, #372]	@ (80066e4 <HAL_DMA_Init+0x1d0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d02c      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a5c      	ldr	r2, [pc, #368]	@ (80066e8 <HAL_DMA_Init+0x1d4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d027      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a5a      	ldr	r2, [pc, #360]	@ (80066ec <HAL_DMA_Init+0x1d8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d022      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a59      	ldr	r2, [pc, #356]	@ (80066f0 <HAL_DMA_Init+0x1dc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d01d      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a57      	ldr	r2, [pc, #348]	@ (80066f4 <HAL_DMA_Init+0x1e0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d018      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a56      	ldr	r2, [pc, #344]	@ (80066f8 <HAL_DMA_Init+0x1e4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a54      	ldr	r2, [pc, #336]	@ (80066fc <HAL_DMA_Init+0x1e8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a53      	ldr	r2, [pc, #332]	@ (8006700 <HAL_DMA_Init+0x1ec>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a51      	ldr	r2, [pc, #324]	@ (8006704 <HAL_DMA_Init+0x1f0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_DMA_Init+0xb8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a50      	ldr	r2, [pc, #320]	@ (8006708 <HAL_DMA_Init+0x1f4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_DMA_Init+0xbc>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_DMA_Init+0xbe>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 813b 	beq.w	800684e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a37      	ldr	r2, [pc, #220]	@ (80066cc <HAL_DMA_Init+0x1b8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d04a      	beq.n	8006688 <HAL_DMA_Init+0x174>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a36      	ldr	r2, [pc, #216]	@ (80066d0 <HAL_DMA_Init+0x1bc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d045      	beq.n	8006688 <HAL_DMA_Init+0x174>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a34      	ldr	r2, [pc, #208]	@ (80066d4 <HAL_DMA_Init+0x1c0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d040      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a33      	ldr	r2, [pc, #204]	@ (80066d8 <HAL_DMA_Init+0x1c4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d03b      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a31      	ldr	r2, [pc, #196]	@ (80066dc <HAL_DMA_Init+0x1c8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d036      	beq.n	8006688 <HAL_DMA_Init+0x174>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a30      	ldr	r2, [pc, #192]	@ (80066e0 <HAL_DMA_Init+0x1cc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d031      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2e      	ldr	r2, [pc, #184]	@ (80066e4 <HAL_DMA_Init+0x1d0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d02c      	beq.n	8006688 <HAL_DMA_Init+0x174>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a2d      	ldr	r2, [pc, #180]	@ (80066e8 <HAL_DMA_Init+0x1d4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d027      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a2b      	ldr	r2, [pc, #172]	@ (80066ec <HAL_DMA_Init+0x1d8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2a      	ldr	r2, [pc, #168]	@ (80066f0 <HAL_DMA_Init+0x1dc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d01d      	beq.n	8006688 <HAL_DMA_Init+0x174>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a28      	ldr	r2, [pc, #160]	@ (80066f4 <HAL_DMA_Init+0x1e0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a27      	ldr	r2, [pc, #156]	@ (80066f8 <HAL_DMA_Init+0x1e4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a25      	ldr	r2, [pc, #148]	@ (80066fc <HAL_DMA_Init+0x1e8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_DMA_Init+0x174>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a24      	ldr	r2, [pc, #144]	@ (8006700 <HAL_DMA_Init+0x1ec>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_DMA_Init+0x174>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a22      	ldr	r2, [pc, #136]	@ (8006704 <HAL_DMA_Init+0x1f0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_DMA_Init+0x174>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a21      	ldr	r2, [pc, #132]	@ (8006708 <HAL_DMA_Init+0x1f4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <HAL_DMA_Init+0x186>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0201 	bic.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	e007      	b.n	80066aa <HAL_DMA_Init+0x196>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0201 	bic.w	r2, r2, #1
 80066a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066aa:	e02f      	b.n	800670c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066ac:	f7ff f9b6 	bl	8005a1c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b05      	cmp	r3, #5
 80066b8:	d928      	bls.n	800670c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2203      	movs	r2, #3
 80066c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e246      	b.n	8006b5a <HAL_DMA_Init+0x646>
 80066cc:	40020010 	.word	0x40020010
 80066d0:	40020028 	.word	0x40020028
 80066d4:	40020040 	.word	0x40020040
 80066d8:	40020058 	.word	0x40020058
 80066dc:	40020070 	.word	0x40020070
 80066e0:	40020088 	.word	0x40020088
 80066e4:	400200a0 	.word	0x400200a0
 80066e8:	400200b8 	.word	0x400200b8
 80066ec:	40020410 	.word	0x40020410
 80066f0:	40020428 	.word	0x40020428
 80066f4:	40020440 	.word	0x40020440
 80066f8:	40020458 	.word	0x40020458
 80066fc:	40020470 	.word	0x40020470
 8006700:	40020488 	.word	0x40020488
 8006704:	400204a0 	.word	0x400204a0
 8006708:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1c8      	bne.n	80066ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4b83      	ldr	r3, [pc, #524]	@ (8006934 <HAL_DMA_Init+0x420>)
 8006726:	4013      	ands	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006732:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800673e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800674a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675c:	2b04      	cmp	r3, #4
 800675e:	d107      	bne.n	8006770 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006768:	4313      	orrs	r3, r2
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006770:	4b71      	ldr	r3, [pc, #452]	@ (8006938 <HAL_DMA_Init+0x424>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4b71      	ldr	r3, [pc, #452]	@ (800693c <HAL_DMA_Init+0x428>)
 8006776:	4013      	ands	r3, r2
 8006778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800677c:	d328      	bcc.n	80067d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b28      	cmp	r3, #40	@ 0x28
 8006784:	d903      	bls.n	800678e <HAL_DMA_Init+0x27a>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b2e      	cmp	r3, #46	@ 0x2e
 800678c:	d917      	bls.n	80067be <HAL_DMA_Init+0x2aa>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b3e      	cmp	r3, #62	@ 0x3e
 8006794:	d903      	bls.n	800679e <HAL_DMA_Init+0x28a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b42      	cmp	r3, #66	@ 0x42
 800679c:	d90f      	bls.n	80067be <HAL_DMA_Init+0x2aa>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b46      	cmp	r3, #70	@ 0x46
 80067a4:	d903      	bls.n	80067ae <HAL_DMA_Init+0x29a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b48      	cmp	r3, #72	@ 0x48
 80067ac:	d907      	bls.n	80067be <HAL_DMA_Init+0x2aa>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80067b4:	d905      	bls.n	80067c2 <HAL_DMA_Init+0x2ae>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b52      	cmp	r3, #82	@ 0x52
 80067bc:	d801      	bhi.n	80067c2 <HAL_DMA_Init+0x2ae>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <HAL_DMA_Init+0x2b0>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f023 0307 	bic.w	r3, r3, #7
 80067e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d117      	bne.n	800682a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00e      	beq.n	800682a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f002 fb33 	bl	8008e78 <DMA_CheckFifoParam>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d008      	beq.n	800682a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2240      	movs	r2, #64	@ 0x40
 800681c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e197      	b.n	8006b5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fa6e 	bl	8008d14 <DMA_CalcBaseAndBitshift>
 8006838:	4603      	mov	r3, r0
 800683a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	223f      	movs	r2, #63	@ 0x3f
 8006846:	409a      	lsls	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	e0cd      	b.n	80069ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a3b      	ldr	r2, [pc, #236]	@ (8006940 <HAL_DMA_Init+0x42c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d022      	beq.n	800689e <HAL_DMA_Init+0x38a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a39      	ldr	r2, [pc, #228]	@ (8006944 <HAL_DMA_Init+0x430>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d01d      	beq.n	800689e <HAL_DMA_Init+0x38a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a38      	ldr	r2, [pc, #224]	@ (8006948 <HAL_DMA_Init+0x434>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d018      	beq.n	800689e <HAL_DMA_Init+0x38a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a36      	ldr	r2, [pc, #216]	@ (800694c <HAL_DMA_Init+0x438>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d013      	beq.n	800689e <HAL_DMA_Init+0x38a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a35      	ldr	r2, [pc, #212]	@ (8006950 <HAL_DMA_Init+0x43c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00e      	beq.n	800689e <HAL_DMA_Init+0x38a>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a33      	ldr	r2, [pc, #204]	@ (8006954 <HAL_DMA_Init+0x440>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d009      	beq.n	800689e <HAL_DMA_Init+0x38a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a32      	ldr	r2, [pc, #200]	@ (8006958 <HAL_DMA_Init+0x444>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d004      	beq.n	800689e <HAL_DMA_Init+0x38a>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a30      	ldr	r2, [pc, #192]	@ (800695c <HAL_DMA_Init+0x448>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d101      	bne.n	80068a2 <HAL_DMA_Init+0x38e>
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <HAL_DMA_Init+0x390>
 80068a2:	2300      	movs	r3, #0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8097 	beq.w	80069d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a24      	ldr	r2, [pc, #144]	@ (8006940 <HAL_DMA_Init+0x42c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d021      	beq.n	80068f8 <HAL_DMA_Init+0x3e4>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a22      	ldr	r2, [pc, #136]	@ (8006944 <HAL_DMA_Init+0x430>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01c      	beq.n	80068f8 <HAL_DMA_Init+0x3e4>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a21      	ldr	r2, [pc, #132]	@ (8006948 <HAL_DMA_Init+0x434>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d017      	beq.n	80068f8 <HAL_DMA_Init+0x3e4>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1f      	ldr	r2, [pc, #124]	@ (800694c <HAL_DMA_Init+0x438>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d012      	beq.n	80068f8 <HAL_DMA_Init+0x3e4>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006950 <HAL_DMA_Init+0x43c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00d      	beq.n	80068f8 <HAL_DMA_Init+0x3e4>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006954 <HAL_DMA_Init+0x440>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d008      	beq.n	80068f8 <HAL_DMA_Init+0x3e4>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <HAL_DMA_Init+0x444>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <HAL_DMA_Init+0x3e4>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a19      	ldr	r2, [pc, #100]	@ (800695c <HAL_DMA_Init+0x448>)
 80068f6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <HAL_DMA_Init+0x44c>)
 8006914:	4013      	ands	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b40      	cmp	r3, #64	@ 0x40
 800691e:	d021      	beq.n	8006964 <HAL_DMA_Init+0x450>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	2b80      	cmp	r3, #128	@ 0x80
 8006926:	d102      	bne.n	800692e <HAL_DMA_Init+0x41a>
 8006928:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800692c:	e01b      	b.n	8006966 <HAL_DMA_Init+0x452>
 800692e:	2300      	movs	r3, #0
 8006930:	e019      	b.n	8006966 <HAL_DMA_Init+0x452>
 8006932:	bf00      	nop
 8006934:	fe10803f 	.word	0xfe10803f
 8006938:	5c001000 	.word	0x5c001000
 800693c:	ffff0000 	.word	0xffff0000
 8006940:	58025408 	.word	0x58025408
 8006944:	5802541c 	.word	0x5802541c
 8006948:	58025430 	.word	0x58025430
 800694c:	58025444 	.word	0x58025444
 8006950:	58025458 	.word	0x58025458
 8006954:	5802546c 	.word	0x5802546c
 8006958:	58025480 	.word	0x58025480
 800695c:	58025494 	.word	0x58025494
 8006960:	fffe000f 	.word	0xfffe000f
 8006964:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	68d2      	ldr	r2, [r2, #12]
 800696a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800696c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800697c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800698c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006994:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b6e      	ldr	r3, [pc, #440]	@ (8006b64 <HAL_DMA_Init+0x650>)
 80069ac:	4413      	add	r3, r2
 80069ae:	4a6e      	ldr	r2, [pc, #440]	@ (8006b68 <HAL_DMA_Init+0x654>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	009a      	lsls	r2, r3, #2
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f002 f9a9 	bl	8008d14 <DMA_CalcBaseAndBitshift>
 80069c2:	4603      	mov	r3, r0
 80069c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	2201      	movs	r2, #1
 80069d0:	409a      	lsls	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]
 80069d6:	e008      	b.n	80069ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2240      	movs	r2, #64	@ 0x40
 80069dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2203      	movs	r2, #3
 80069e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e0b7      	b.n	8006b5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5f      	ldr	r2, [pc, #380]	@ (8006b6c <HAL_DMA_Init+0x658>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d072      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006b70 <HAL_DMA_Init+0x65c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d06d      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a5c      	ldr	r2, [pc, #368]	@ (8006b74 <HAL_DMA_Init+0x660>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d068      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8006b78 <HAL_DMA_Init+0x664>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d063      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a59      	ldr	r2, [pc, #356]	@ (8006b7c <HAL_DMA_Init+0x668>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d05e      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a57      	ldr	r2, [pc, #348]	@ (8006b80 <HAL_DMA_Init+0x66c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d059      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a56      	ldr	r2, [pc, #344]	@ (8006b84 <HAL_DMA_Init+0x670>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d054      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a54      	ldr	r2, [pc, #336]	@ (8006b88 <HAL_DMA_Init+0x674>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04f      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a53      	ldr	r2, [pc, #332]	@ (8006b8c <HAL_DMA_Init+0x678>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d04a      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a51      	ldr	r2, [pc, #324]	@ (8006b90 <HAL_DMA_Init+0x67c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d045      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a50      	ldr	r2, [pc, #320]	@ (8006b94 <HAL_DMA_Init+0x680>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d040      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8006b98 <HAL_DMA_Init+0x684>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d03b      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a4d      	ldr	r2, [pc, #308]	@ (8006b9c <HAL_DMA_Init+0x688>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d036      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a4b      	ldr	r2, [pc, #300]	@ (8006ba0 <HAL_DMA_Init+0x68c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d031      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8006ba4 <HAL_DMA_Init+0x690>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d02c      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a48      	ldr	r2, [pc, #288]	@ (8006ba8 <HAL_DMA_Init+0x694>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d027      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a47      	ldr	r2, [pc, #284]	@ (8006bac <HAL_DMA_Init+0x698>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d022      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a45      	ldr	r2, [pc, #276]	@ (8006bb0 <HAL_DMA_Init+0x69c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a44      	ldr	r2, [pc, #272]	@ (8006bb4 <HAL_DMA_Init+0x6a0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a42      	ldr	r2, [pc, #264]	@ (8006bb8 <HAL_DMA_Init+0x6a4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a41      	ldr	r2, [pc, #260]	@ (8006bbc <HAL_DMA_Init+0x6a8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a3f      	ldr	r2, [pc, #252]	@ (8006bc0 <HAL_DMA_Init+0x6ac>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3e      	ldr	r2, [pc, #248]	@ (8006bc4 <HAL_DMA_Init+0x6b0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_DMA_Init+0x5c6>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a3c      	ldr	r2, [pc, #240]	@ (8006bc8 <HAL_DMA_Init+0x6b4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d101      	bne.n	8006ade <HAL_DMA_Init+0x5ca>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <HAL_DMA_Init+0x5cc>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d032      	beq.n	8006b4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 fa43 	bl	8008f70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b80      	cmp	r3, #128	@ 0x80
 8006af0:	d102      	bne.n	8006af8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <HAL_DMA_Init+0x624>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d80c      	bhi.n	8006b38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f002 fac0 	bl	80090a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	e008      	b.n	8006b4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	a7fdabf8 	.word	0xa7fdabf8
 8006b68:	cccccccd 	.word	0xcccccccd
 8006b6c:	40020010 	.word	0x40020010
 8006b70:	40020028 	.word	0x40020028
 8006b74:	40020040 	.word	0x40020040
 8006b78:	40020058 	.word	0x40020058
 8006b7c:	40020070 	.word	0x40020070
 8006b80:	40020088 	.word	0x40020088
 8006b84:	400200a0 	.word	0x400200a0
 8006b88:	400200b8 	.word	0x400200b8
 8006b8c:	40020410 	.word	0x40020410
 8006b90:	40020428 	.word	0x40020428
 8006b94:	40020440 	.word	0x40020440
 8006b98:	40020458 	.word	0x40020458
 8006b9c:	40020470 	.word	0x40020470
 8006ba0:	40020488 	.word	0x40020488
 8006ba4:	400204a0 	.word	0x400204a0
 8006ba8:	400204b8 	.word	0x400204b8
 8006bac:	58025408 	.word	0x58025408
 8006bb0:	5802541c 	.word	0x5802541c
 8006bb4:	58025430 	.word	0x58025430
 8006bb8:	58025444 	.word	0x58025444
 8006bbc:	58025458 	.word	0x58025458
 8006bc0:	5802546c 	.word	0x5802546c
 8006bc4:	58025480 	.word	0x58025480
 8006bc8:	58025494 	.word	0x58025494

08006bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e226      	b.n	8007036 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <HAL_DMA_Start_IT+0x2a>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e21f      	b.n	8007036 <HAL_DMA_Start_IT+0x46a>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	f040 820a 	bne.w	8007020 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a68      	ldr	r2, [pc, #416]	@ (8006dc0 <HAL_DMA_Start_IT+0x1f4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d04a      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a66      	ldr	r2, [pc, #408]	@ (8006dc4 <HAL_DMA_Start_IT+0x1f8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d045      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a65      	ldr	r2, [pc, #404]	@ (8006dc8 <HAL_DMA_Start_IT+0x1fc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d040      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a63      	ldr	r2, [pc, #396]	@ (8006dcc <HAL_DMA_Start_IT+0x200>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d03b      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a62      	ldr	r2, [pc, #392]	@ (8006dd0 <HAL_DMA_Start_IT+0x204>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d036      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a60      	ldr	r2, [pc, #384]	@ (8006dd4 <HAL_DMA_Start_IT+0x208>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d031      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a5f      	ldr	r2, [pc, #380]	@ (8006dd8 <HAL_DMA_Start_IT+0x20c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d02c      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5d      	ldr	r2, [pc, #372]	@ (8006ddc <HAL_DMA_Start_IT+0x210>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d027      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8006de0 <HAL_DMA_Start_IT+0x214>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d022      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a5a      	ldr	r2, [pc, #360]	@ (8006de4 <HAL_DMA_Start_IT+0x218>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d01d      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a59      	ldr	r2, [pc, #356]	@ (8006de8 <HAL_DMA_Start_IT+0x21c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d018      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a57      	ldr	r2, [pc, #348]	@ (8006dec <HAL_DMA_Start_IT+0x220>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d013      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a56      	ldr	r2, [pc, #344]	@ (8006df0 <HAL_DMA_Start_IT+0x224>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a54      	ldr	r2, [pc, #336]	@ (8006df4 <HAL_DMA_Start_IT+0x228>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d009      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a53      	ldr	r2, [pc, #332]	@ (8006df8 <HAL_DMA_Start_IT+0x22c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d004      	beq.n	8006cba <HAL_DMA_Start_IT+0xee>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a51      	ldr	r2, [pc, #324]	@ (8006dfc <HAL_DMA_Start_IT+0x230>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d108      	bne.n	8006ccc <HAL_DMA_Start_IT+0x100>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0201 	bic.w	r2, r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	e007      	b.n	8006cdc <HAL_DMA_Start_IT+0x110>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f001 fe6a 	bl	80089bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a34      	ldr	r2, [pc, #208]	@ (8006dc0 <HAL_DMA_Start_IT+0x1f4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d04a      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a33      	ldr	r2, [pc, #204]	@ (8006dc4 <HAL_DMA_Start_IT+0x1f8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d045      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a31      	ldr	r2, [pc, #196]	@ (8006dc8 <HAL_DMA_Start_IT+0x1fc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d040      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a30      	ldr	r2, [pc, #192]	@ (8006dcc <HAL_DMA_Start_IT+0x200>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d03b      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd0 <HAL_DMA_Start_IT+0x204>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d036      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd4 <HAL_DMA_Start_IT+0x208>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d031      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd8 <HAL_DMA_Start_IT+0x20c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d02c      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2a      	ldr	r2, [pc, #168]	@ (8006ddc <HAL_DMA_Start_IT+0x210>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d027      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a28      	ldr	r2, [pc, #160]	@ (8006de0 <HAL_DMA_Start_IT+0x214>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d022      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a27      	ldr	r2, [pc, #156]	@ (8006de4 <HAL_DMA_Start_IT+0x218>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d01d      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a25      	ldr	r2, [pc, #148]	@ (8006de8 <HAL_DMA_Start_IT+0x21c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d018      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a24      	ldr	r2, [pc, #144]	@ (8006dec <HAL_DMA_Start_IT+0x220>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d013      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a22      	ldr	r2, [pc, #136]	@ (8006df0 <HAL_DMA_Start_IT+0x224>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a21      	ldr	r2, [pc, #132]	@ (8006df4 <HAL_DMA_Start_IT+0x228>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d009      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1f      	ldr	r2, [pc, #124]	@ (8006df8 <HAL_DMA_Start_IT+0x22c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_DMA_Start_IT+0x1bc>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	@ (8006dfc <HAL_DMA_Start_IT+0x230>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d101      	bne.n	8006d8c <HAL_DMA_Start_IT+0x1c0>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <HAL_DMA_Start_IT+0x1c2>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d036      	beq.n	8006e00 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f023 021e 	bic.w	r2, r3, #30
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0216 	orr.w	r2, r2, #22
 8006da4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d03e      	beq.n	8006e2c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0208 	orr.w	r2, r2, #8
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	e035      	b.n	8006e2c <HAL_DMA_Start_IT+0x260>
 8006dc0:	40020010 	.word	0x40020010
 8006dc4:	40020028 	.word	0x40020028
 8006dc8:	40020040 	.word	0x40020040
 8006dcc:	40020058 	.word	0x40020058
 8006dd0:	40020070 	.word	0x40020070
 8006dd4:	40020088 	.word	0x40020088
 8006dd8:	400200a0 	.word	0x400200a0
 8006ddc:	400200b8 	.word	0x400200b8
 8006de0:	40020410 	.word	0x40020410
 8006de4:	40020428 	.word	0x40020428
 8006de8:	40020440 	.word	0x40020440
 8006dec:	40020458 	.word	0x40020458
 8006df0:	40020470 	.word	0x40020470
 8006df4:	40020488 	.word	0x40020488
 8006df8:	400204a0 	.word	0x400204a0
 8006dfc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 020e 	bic.w	r2, r3, #14
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 020a 	orr.w	r2, r2, #10
 8006e12:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0204 	orr.w	r2, r2, #4
 8006e2a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a83      	ldr	r2, [pc, #524]	@ (8007040 <HAL_DMA_Start_IT+0x474>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d072      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a82      	ldr	r2, [pc, #520]	@ (8007044 <HAL_DMA_Start_IT+0x478>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d06d      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a80      	ldr	r2, [pc, #512]	@ (8007048 <HAL_DMA_Start_IT+0x47c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d068      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a7f      	ldr	r2, [pc, #508]	@ (800704c <HAL_DMA_Start_IT+0x480>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d063      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a7d      	ldr	r2, [pc, #500]	@ (8007050 <HAL_DMA_Start_IT+0x484>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d05e      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a7c      	ldr	r2, [pc, #496]	@ (8007054 <HAL_DMA_Start_IT+0x488>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d059      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a7a      	ldr	r2, [pc, #488]	@ (8007058 <HAL_DMA_Start_IT+0x48c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d054      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a79      	ldr	r2, [pc, #484]	@ (800705c <HAL_DMA_Start_IT+0x490>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d04f      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a77      	ldr	r2, [pc, #476]	@ (8007060 <HAL_DMA_Start_IT+0x494>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d04a      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a76      	ldr	r2, [pc, #472]	@ (8007064 <HAL_DMA_Start_IT+0x498>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d045      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a74      	ldr	r2, [pc, #464]	@ (8007068 <HAL_DMA_Start_IT+0x49c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d040      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a73      	ldr	r2, [pc, #460]	@ (800706c <HAL_DMA_Start_IT+0x4a0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d03b      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a71      	ldr	r2, [pc, #452]	@ (8007070 <HAL_DMA_Start_IT+0x4a4>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d036      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a70      	ldr	r2, [pc, #448]	@ (8007074 <HAL_DMA_Start_IT+0x4a8>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d031      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8007078 <HAL_DMA_Start_IT+0x4ac>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d02c      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a6d      	ldr	r2, [pc, #436]	@ (800707c <HAL_DMA_Start_IT+0x4b0>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d027      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8007080 <HAL_DMA_Start_IT+0x4b4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d022      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a6a      	ldr	r2, [pc, #424]	@ (8007084 <HAL_DMA_Start_IT+0x4b8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d01d      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a68      	ldr	r2, [pc, #416]	@ (8007088 <HAL_DMA_Start_IT+0x4bc>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d018      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a67      	ldr	r2, [pc, #412]	@ (800708c <HAL_DMA_Start_IT+0x4c0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a65      	ldr	r2, [pc, #404]	@ (8007090 <HAL_DMA_Start_IT+0x4c4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a64      	ldr	r2, [pc, #400]	@ (8007094 <HAL_DMA_Start_IT+0x4c8>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a62      	ldr	r2, [pc, #392]	@ (8007098 <HAL_DMA_Start_IT+0x4cc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_DMA_Start_IT+0x350>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a61      	ldr	r2, [pc, #388]	@ (800709c <HAL_DMA_Start_IT+0x4d0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d101      	bne.n	8006f20 <HAL_DMA_Start_IT+0x354>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <HAL_DMA_Start_IT+0x356>
 8006f20:	2300      	movs	r3, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01a      	beq.n	8006f5c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f42:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f5a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a37      	ldr	r2, [pc, #220]	@ (8007040 <HAL_DMA_Start_IT+0x474>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d04a      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a36      	ldr	r2, [pc, #216]	@ (8007044 <HAL_DMA_Start_IT+0x478>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d045      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a34      	ldr	r2, [pc, #208]	@ (8007048 <HAL_DMA_Start_IT+0x47c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d040      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a33      	ldr	r2, [pc, #204]	@ (800704c <HAL_DMA_Start_IT+0x480>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d03b      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a31      	ldr	r2, [pc, #196]	@ (8007050 <HAL_DMA_Start_IT+0x484>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d036      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a30      	ldr	r2, [pc, #192]	@ (8007054 <HAL_DMA_Start_IT+0x488>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d031      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007058 <HAL_DMA_Start_IT+0x48c>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d02c      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800705c <HAL_DMA_Start_IT+0x490>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d027      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8007060 <HAL_DMA_Start_IT+0x494>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2a      	ldr	r2, [pc, #168]	@ (8007064 <HAL_DMA_Start_IT+0x498>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d01d      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a28      	ldr	r2, [pc, #160]	@ (8007068 <HAL_DMA_Start_IT+0x49c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a27      	ldr	r2, [pc, #156]	@ (800706c <HAL_DMA_Start_IT+0x4a0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a25      	ldr	r2, [pc, #148]	@ (8007070 <HAL_DMA_Start_IT+0x4a4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a24      	ldr	r2, [pc, #144]	@ (8007074 <HAL_DMA_Start_IT+0x4a8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a22      	ldr	r2, [pc, #136]	@ (8007078 <HAL_DMA_Start_IT+0x4ac>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_DMA_Start_IT+0x430>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a21      	ldr	r2, [pc, #132]	@ (800707c <HAL_DMA_Start_IT+0x4b0>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d108      	bne.n	800700e <HAL_DMA_Start_IT+0x442>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e012      	b.n	8007034 <HAL_DMA_Start_IT+0x468>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0201 	orr.w	r2, r2, #1
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	e009      	b.n	8007034 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007026:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007034:	7dfb      	ldrb	r3, [r7, #23]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40020010 	.word	0x40020010
 8007044:	40020028 	.word	0x40020028
 8007048:	40020040 	.word	0x40020040
 800704c:	40020058 	.word	0x40020058
 8007050:	40020070 	.word	0x40020070
 8007054:	40020088 	.word	0x40020088
 8007058:	400200a0 	.word	0x400200a0
 800705c:	400200b8 	.word	0x400200b8
 8007060:	40020410 	.word	0x40020410
 8007064:	40020428 	.word	0x40020428
 8007068:	40020440 	.word	0x40020440
 800706c:	40020458 	.word	0x40020458
 8007070:	40020470 	.word	0x40020470
 8007074:	40020488 	.word	0x40020488
 8007078:	400204a0 	.word	0x400204a0
 800707c:	400204b8 	.word	0x400204b8
 8007080:	58025408 	.word	0x58025408
 8007084:	5802541c 	.word	0x5802541c
 8007088:	58025430 	.word	0x58025430
 800708c:	58025444 	.word	0x58025444
 8007090:	58025458 	.word	0x58025458
 8007094:	5802546c 	.word	0x5802546c
 8007098:	58025480 	.word	0x58025480
 800709c:	58025494 	.word	0x58025494

080070a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80070a8:	f7fe fcb8 	bl	8005a1c <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e2dc      	b.n	8007672 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d008      	beq.n	80070d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2280      	movs	r2, #128	@ 0x80
 80070c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e2cd      	b.n	8007672 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a76      	ldr	r2, [pc, #472]	@ (80072b4 <HAL_DMA_Abort+0x214>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d04a      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a74      	ldr	r2, [pc, #464]	@ (80072b8 <HAL_DMA_Abort+0x218>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d045      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a73      	ldr	r2, [pc, #460]	@ (80072bc <HAL_DMA_Abort+0x21c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d040      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a71      	ldr	r2, [pc, #452]	@ (80072c0 <HAL_DMA_Abort+0x220>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d03b      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a70      	ldr	r2, [pc, #448]	@ (80072c4 <HAL_DMA_Abort+0x224>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d036      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a6e      	ldr	r2, [pc, #440]	@ (80072c8 <HAL_DMA_Abort+0x228>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d031      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6d      	ldr	r2, [pc, #436]	@ (80072cc <HAL_DMA_Abort+0x22c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d02c      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6b      	ldr	r2, [pc, #428]	@ (80072d0 <HAL_DMA_Abort+0x230>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d027      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6a      	ldr	r2, [pc, #424]	@ (80072d4 <HAL_DMA_Abort+0x234>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a68      	ldr	r2, [pc, #416]	@ (80072d8 <HAL_DMA_Abort+0x238>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01d      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a67      	ldr	r2, [pc, #412]	@ (80072dc <HAL_DMA_Abort+0x23c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a65      	ldr	r2, [pc, #404]	@ (80072e0 <HAL_DMA_Abort+0x240>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a64      	ldr	r2, [pc, #400]	@ (80072e4 <HAL_DMA_Abort+0x244>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a62      	ldr	r2, [pc, #392]	@ (80072e8 <HAL_DMA_Abort+0x248>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a61      	ldr	r2, [pc, #388]	@ (80072ec <HAL_DMA_Abort+0x24c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <HAL_DMA_Abort+0xd6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5f      	ldr	r2, [pc, #380]	@ (80072f0 <HAL_DMA_Abort+0x250>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d101      	bne.n	800717a <HAL_DMA_Abort+0xda>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <HAL_DMA_Abort+0xdc>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d013      	beq.n	80071a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 021e 	bic.w	r2, r2, #30
 800718e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800719e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	e00a      	b.n	80071be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 020e 	bic.w	r2, r2, #14
 80071b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a3c      	ldr	r2, [pc, #240]	@ (80072b4 <HAL_DMA_Abort+0x214>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d072      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a3a      	ldr	r2, [pc, #232]	@ (80072b8 <HAL_DMA_Abort+0x218>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d06d      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a39      	ldr	r2, [pc, #228]	@ (80072bc <HAL_DMA_Abort+0x21c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d068      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a37      	ldr	r2, [pc, #220]	@ (80072c0 <HAL_DMA_Abort+0x220>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d063      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a36      	ldr	r2, [pc, #216]	@ (80072c4 <HAL_DMA_Abort+0x224>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d05e      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a34      	ldr	r2, [pc, #208]	@ (80072c8 <HAL_DMA_Abort+0x228>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d059      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a33      	ldr	r2, [pc, #204]	@ (80072cc <HAL_DMA_Abort+0x22c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d054      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a31      	ldr	r2, [pc, #196]	@ (80072d0 <HAL_DMA_Abort+0x230>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d04f      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a30      	ldr	r2, [pc, #192]	@ (80072d4 <HAL_DMA_Abort+0x234>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d04a      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2e      	ldr	r2, [pc, #184]	@ (80072d8 <HAL_DMA_Abort+0x238>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d045      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2d      	ldr	r2, [pc, #180]	@ (80072dc <HAL_DMA_Abort+0x23c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d040      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2b      	ldr	r2, [pc, #172]	@ (80072e0 <HAL_DMA_Abort+0x240>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d03b      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2a      	ldr	r2, [pc, #168]	@ (80072e4 <HAL_DMA_Abort+0x244>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d036      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a28      	ldr	r2, [pc, #160]	@ (80072e8 <HAL_DMA_Abort+0x248>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d031      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a27      	ldr	r2, [pc, #156]	@ (80072ec <HAL_DMA_Abort+0x24c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d02c      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a25      	ldr	r2, [pc, #148]	@ (80072f0 <HAL_DMA_Abort+0x250>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d027      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a24      	ldr	r2, [pc, #144]	@ (80072f4 <HAL_DMA_Abort+0x254>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a22      	ldr	r2, [pc, #136]	@ (80072f8 <HAL_DMA_Abort+0x258>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01d      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a21      	ldr	r2, [pc, #132]	@ (80072fc <HAL_DMA_Abort+0x25c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d018      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1f      	ldr	r2, [pc, #124]	@ (8007300 <HAL_DMA_Abort+0x260>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1e      	ldr	r2, [pc, #120]	@ (8007304 <HAL_DMA_Abort+0x264>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00e      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1c      	ldr	r2, [pc, #112]	@ (8007308 <HAL_DMA_Abort+0x268>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d009      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1b      	ldr	r2, [pc, #108]	@ (800730c <HAL_DMA_Abort+0x26c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d004      	beq.n	80072ae <HAL_DMA_Abort+0x20e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a19      	ldr	r2, [pc, #100]	@ (8007310 <HAL_DMA_Abort+0x270>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d132      	bne.n	8007314 <HAL_DMA_Abort+0x274>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e031      	b.n	8007316 <HAL_DMA_Abort+0x276>
 80072b2:	bf00      	nop
 80072b4:	40020010 	.word	0x40020010
 80072b8:	40020028 	.word	0x40020028
 80072bc:	40020040 	.word	0x40020040
 80072c0:	40020058 	.word	0x40020058
 80072c4:	40020070 	.word	0x40020070
 80072c8:	40020088 	.word	0x40020088
 80072cc:	400200a0 	.word	0x400200a0
 80072d0:	400200b8 	.word	0x400200b8
 80072d4:	40020410 	.word	0x40020410
 80072d8:	40020428 	.word	0x40020428
 80072dc:	40020440 	.word	0x40020440
 80072e0:	40020458 	.word	0x40020458
 80072e4:	40020470 	.word	0x40020470
 80072e8:	40020488 	.word	0x40020488
 80072ec:	400204a0 	.word	0x400204a0
 80072f0:	400204b8 	.word	0x400204b8
 80072f4:	58025408 	.word	0x58025408
 80072f8:	5802541c 	.word	0x5802541c
 80072fc:	58025430 	.word	0x58025430
 8007300:	58025444 	.word	0x58025444
 8007304:	58025458 	.word	0x58025458
 8007308:	5802546c 	.word	0x5802546c
 800730c:	58025480 	.word	0x58025480
 8007310:	58025494 	.word	0x58025494
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007328:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6d      	ldr	r2, [pc, #436]	@ (80074e4 <HAL_DMA_Abort+0x444>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d04a      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a6b      	ldr	r2, [pc, #428]	@ (80074e8 <HAL_DMA_Abort+0x448>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d045      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a6a      	ldr	r2, [pc, #424]	@ (80074ec <HAL_DMA_Abort+0x44c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d040      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a68      	ldr	r2, [pc, #416]	@ (80074f0 <HAL_DMA_Abort+0x450>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d03b      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a67      	ldr	r2, [pc, #412]	@ (80074f4 <HAL_DMA_Abort+0x454>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d036      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a65      	ldr	r2, [pc, #404]	@ (80074f8 <HAL_DMA_Abort+0x458>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d031      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a64      	ldr	r2, [pc, #400]	@ (80074fc <HAL_DMA_Abort+0x45c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d02c      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a62      	ldr	r2, [pc, #392]	@ (8007500 <HAL_DMA_Abort+0x460>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d027      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a61      	ldr	r2, [pc, #388]	@ (8007504 <HAL_DMA_Abort+0x464>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d022      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a5f      	ldr	r2, [pc, #380]	@ (8007508 <HAL_DMA_Abort+0x468>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01d      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a5e      	ldr	r2, [pc, #376]	@ (800750c <HAL_DMA_Abort+0x46c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a5c      	ldr	r2, [pc, #368]	@ (8007510 <HAL_DMA_Abort+0x470>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007514 <HAL_DMA_Abort+0x474>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a59      	ldr	r2, [pc, #356]	@ (8007518 <HAL_DMA_Abort+0x478>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a58      	ldr	r2, [pc, #352]	@ (800751c <HAL_DMA_Abort+0x47c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_DMA_Abort+0x32a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a56      	ldr	r2, [pc, #344]	@ (8007520 <HAL_DMA_Abort+0x480>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d108      	bne.n	80073dc <HAL_DMA_Abort+0x33c>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0201 	bic.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e007      	b.n	80073ec <HAL_DMA_Abort+0x34c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0201 	bic.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80073ec:	e013      	b.n	8007416 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073ee:	f7fe fb15 	bl	8005a1c <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b05      	cmp	r3, #5
 80073fa:	d90c      	bls.n	8007416 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2203      	movs	r2, #3
 8007406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e12d      	b.n	8007672 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e5      	bne.n	80073ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2f      	ldr	r2, [pc, #188]	@ (80074e4 <HAL_DMA_Abort+0x444>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d04a      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a2d      	ldr	r2, [pc, #180]	@ (80074e8 <HAL_DMA_Abort+0x448>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d045      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a2c      	ldr	r2, [pc, #176]	@ (80074ec <HAL_DMA_Abort+0x44c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d040      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a2a      	ldr	r2, [pc, #168]	@ (80074f0 <HAL_DMA_Abort+0x450>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d03b      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a29      	ldr	r2, [pc, #164]	@ (80074f4 <HAL_DMA_Abort+0x454>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d036      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a27      	ldr	r2, [pc, #156]	@ (80074f8 <HAL_DMA_Abort+0x458>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d031      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a26      	ldr	r2, [pc, #152]	@ (80074fc <HAL_DMA_Abort+0x45c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d02c      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a24      	ldr	r2, [pc, #144]	@ (8007500 <HAL_DMA_Abort+0x460>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d027      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a23      	ldr	r2, [pc, #140]	@ (8007504 <HAL_DMA_Abort+0x464>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d022      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a21      	ldr	r2, [pc, #132]	@ (8007508 <HAL_DMA_Abort+0x468>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d01d      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a20      	ldr	r2, [pc, #128]	@ (800750c <HAL_DMA_Abort+0x46c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d018      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1e      	ldr	r2, [pc, #120]	@ (8007510 <HAL_DMA_Abort+0x470>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1d      	ldr	r2, [pc, #116]	@ (8007514 <HAL_DMA_Abort+0x474>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d00e      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007518 <HAL_DMA_Abort+0x478>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d009      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1a      	ldr	r2, [pc, #104]	@ (800751c <HAL_DMA_Abort+0x47c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d004      	beq.n	80074c2 <HAL_DMA_Abort+0x422>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a18      	ldr	r2, [pc, #96]	@ (8007520 <HAL_DMA_Abort+0x480>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d101      	bne.n	80074c6 <HAL_DMA_Abort+0x426>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <HAL_DMA_Abort+0x428>
 80074c6:	2300      	movs	r3, #0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d02b      	beq.n	8007524 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	223f      	movs	r2, #63	@ 0x3f
 80074dc:	409a      	lsls	r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	609a      	str	r2, [r3, #8]
 80074e2:	e02a      	b.n	800753a <HAL_DMA_Abort+0x49a>
 80074e4:	40020010 	.word	0x40020010
 80074e8:	40020028 	.word	0x40020028
 80074ec:	40020040 	.word	0x40020040
 80074f0:	40020058 	.word	0x40020058
 80074f4:	40020070 	.word	0x40020070
 80074f8:	40020088 	.word	0x40020088
 80074fc:	400200a0 	.word	0x400200a0
 8007500:	400200b8 	.word	0x400200b8
 8007504:	40020410 	.word	0x40020410
 8007508:	40020428 	.word	0x40020428
 800750c:	40020440 	.word	0x40020440
 8007510:	40020458 	.word	0x40020458
 8007514:	40020470 	.word	0x40020470
 8007518:	40020488 	.word	0x40020488
 800751c:	400204a0 	.word	0x400204a0
 8007520:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007528:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	2201      	movs	r2, #1
 8007534:	409a      	lsls	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a4f      	ldr	r2, [pc, #316]	@ (800767c <HAL_DMA_Abort+0x5dc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d072      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a4d      	ldr	r2, [pc, #308]	@ (8007680 <HAL_DMA_Abort+0x5e0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d06d      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a4c      	ldr	r2, [pc, #304]	@ (8007684 <HAL_DMA_Abort+0x5e4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d068      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a4a      	ldr	r2, [pc, #296]	@ (8007688 <HAL_DMA_Abort+0x5e8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d063      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a49      	ldr	r2, [pc, #292]	@ (800768c <HAL_DMA_Abort+0x5ec>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d05e      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a47      	ldr	r2, [pc, #284]	@ (8007690 <HAL_DMA_Abort+0x5f0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d059      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a46      	ldr	r2, [pc, #280]	@ (8007694 <HAL_DMA_Abort+0x5f4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d054      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a44      	ldr	r2, [pc, #272]	@ (8007698 <HAL_DMA_Abort+0x5f8>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d04f      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a43      	ldr	r2, [pc, #268]	@ (800769c <HAL_DMA_Abort+0x5fc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d04a      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a41      	ldr	r2, [pc, #260]	@ (80076a0 <HAL_DMA_Abort+0x600>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d045      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a40      	ldr	r2, [pc, #256]	@ (80076a4 <HAL_DMA_Abort+0x604>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d040      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3e      	ldr	r2, [pc, #248]	@ (80076a8 <HAL_DMA_Abort+0x608>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d03b      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a3d      	ldr	r2, [pc, #244]	@ (80076ac <HAL_DMA_Abort+0x60c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d036      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a3b      	ldr	r2, [pc, #236]	@ (80076b0 <HAL_DMA_Abort+0x610>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d031      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a3a      	ldr	r2, [pc, #232]	@ (80076b4 <HAL_DMA_Abort+0x614>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d02c      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a38      	ldr	r2, [pc, #224]	@ (80076b8 <HAL_DMA_Abort+0x618>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d027      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a37      	ldr	r2, [pc, #220]	@ (80076bc <HAL_DMA_Abort+0x61c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d022      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a35      	ldr	r2, [pc, #212]	@ (80076c0 <HAL_DMA_Abort+0x620>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01d      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a34      	ldr	r2, [pc, #208]	@ (80076c4 <HAL_DMA_Abort+0x624>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d018      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a32      	ldr	r2, [pc, #200]	@ (80076c8 <HAL_DMA_Abort+0x628>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a31      	ldr	r2, [pc, #196]	@ (80076cc <HAL_DMA_Abort+0x62c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00e      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a2f      	ldr	r2, [pc, #188]	@ (80076d0 <HAL_DMA_Abort+0x630>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d009      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2e      	ldr	r2, [pc, #184]	@ (80076d4 <HAL_DMA_Abort+0x634>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d004      	beq.n	800762a <HAL_DMA_Abort+0x58a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2c      	ldr	r2, [pc, #176]	@ (80076d8 <HAL_DMA_Abort+0x638>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d101      	bne.n	800762e <HAL_DMA_Abort+0x58e>
 800762a:	2301      	movs	r3, #1
 800762c:	e000      	b.n	8007630 <HAL_DMA_Abort+0x590>
 800762e:	2300      	movs	r3, #0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d015      	beq.n	8007660 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800763c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00c      	beq.n	8007660 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007654:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800765e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40020010 	.word	0x40020010
 8007680:	40020028 	.word	0x40020028
 8007684:	40020040 	.word	0x40020040
 8007688:	40020058 	.word	0x40020058
 800768c:	40020070 	.word	0x40020070
 8007690:	40020088 	.word	0x40020088
 8007694:	400200a0 	.word	0x400200a0
 8007698:	400200b8 	.word	0x400200b8
 800769c:	40020410 	.word	0x40020410
 80076a0:	40020428 	.word	0x40020428
 80076a4:	40020440 	.word	0x40020440
 80076a8:	40020458 	.word	0x40020458
 80076ac:	40020470 	.word	0x40020470
 80076b0:	40020488 	.word	0x40020488
 80076b4:	400204a0 	.word	0x400204a0
 80076b8:	400204b8 	.word	0x400204b8
 80076bc:	58025408 	.word	0x58025408
 80076c0:	5802541c 	.word	0x5802541c
 80076c4:	58025430 	.word	0x58025430
 80076c8:	58025444 	.word	0x58025444
 80076cc:	58025458 	.word	0x58025458
 80076d0:	5802546c 	.word	0x5802546c
 80076d4:	58025480 	.word	0x58025480
 80076d8:	58025494 	.word	0x58025494

080076dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e237      	b.n	8007b5e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d004      	beq.n	8007704 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2280      	movs	r2, #128	@ 0x80
 80076fe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e22c      	b.n	8007b5e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a5c      	ldr	r2, [pc, #368]	@ (800787c <HAL_DMA_Abort_IT+0x1a0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d04a      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a5b      	ldr	r2, [pc, #364]	@ (8007880 <HAL_DMA_Abort_IT+0x1a4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d045      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a59      	ldr	r2, [pc, #356]	@ (8007884 <HAL_DMA_Abort_IT+0x1a8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d040      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a58      	ldr	r2, [pc, #352]	@ (8007888 <HAL_DMA_Abort_IT+0x1ac>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d03b      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a56      	ldr	r2, [pc, #344]	@ (800788c <HAL_DMA_Abort_IT+0x1b0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d036      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a55      	ldr	r2, [pc, #340]	@ (8007890 <HAL_DMA_Abort_IT+0x1b4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d031      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a53      	ldr	r2, [pc, #332]	@ (8007894 <HAL_DMA_Abort_IT+0x1b8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d02c      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a52      	ldr	r2, [pc, #328]	@ (8007898 <HAL_DMA_Abort_IT+0x1bc>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d027      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a50      	ldr	r2, [pc, #320]	@ (800789c <HAL_DMA_Abort_IT+0x1c0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d022      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a4f      	ldr	r2, [pc, #316]	@ (80078a0 <HAL_DMA_Abort_IT+0x1c4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d01d      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a4d      	ldr	r2, [pc, #308]	@ (80078a4 <HAL_DMA_Abort_IT+0x1c8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d018      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a4c      	ldr	r2, [pc, #304]	@ (80078a8 <HAL_DMA_Abort_IT+0x1cc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d013      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a4a      	ldr	r2, [pc, #296]	@ (80078ac <HAL_DMA_Abort_IT+0x1d0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00e      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a49      	ldr	r2, [pc, #292]	@ (80078b0 <HAL_DMA_Abort_IT+0x1d4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d009      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a47      	ldr	r2, [pc, #284]	@ (80078b4 <HAL_DMA_Abort_IT+0x1d8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <HAL_DMA_Abort_IT+0xc8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a46      	ldr	r2, [pc, #280]	@ (80078b8 <HAL_DMA_Abort_IT+0x1dc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d101      	bne.n	80077a8 <HAL_DMA_Abort_IT+0xcc>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <HAL_DMA_Abort_IT+0xce>
 80077a8:	2300      	movs	r3, #0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 8086 	beq.w	80078bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2204      	movs	r2, #4
 80077b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a2f      	ldr	r2, [pc, #188]	@ (800787c <HAL_DMA_Abort_IT+0x1a0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d04a      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007880 <HAL_DMA_Abort_IT+0x1a4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d045      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007884 <HAL_DMA_Abort_IT+0x1a8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d040      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a2b      	ldr	r2, [pc, #172]	@ (8007888 <HAL_DMA_Abort_IT+0x1ac>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d03b      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a29      	ldr	r2, [pc, #164]	@ (800788c <HAL_DMA_Abort_IT+0x1b0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d036      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a28      	ldr	r2, [pc, #160]	@ (8007890 <HAL_DMA_Abort_IT+0x1b4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d031      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a26      	ldr	r2, [pc, #152]	@ (8007894 <HAL_DMA_Abort_IT+0x1b8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d02c      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a25      	ldr	r2, [pc, #148]	@ (8007898 <HAL_DMA_Abort_IT+0x1bc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d027      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a23      	ldr	r2, [pc, #140]	@ (800789c <HAL_DMA_Abort_IT+0x1c0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d022      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a22      	ldr	r2, [pc, #136]	@ (80078a0 <HAL_DMA_Abort_IT+0x1c4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d01d      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a20      	ldr	r2, [pc, #128]	@ (80078a4 <HAL_DMA_Abort_IT+0x1c8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d018      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1f      	ldr	r2, [pc, #124]	@ (80078a8 <HAL_DMA_Abort_IT+0x1cc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1d      	ldr	r2, [pc, #116]	@ (80078ac <HAL_DMA_Abort_IT+0x1d0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00e      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1c      	ldr	r2, [pc, #112]	@ (80078b0 <HAL_DMA_Abort_IT+0x1d4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a1a      	ldr	r2, [pc, #104]	@ (80078b4 <HAL_DMA_Abort_IT+0x1d8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_DMA_Abort_IT+0x17c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a19      	ldr	r2, [pc, #100]	@ (80078b8 <HAL_DMA_Abort_IT+0x1dc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d108      	bne.n	800786a <HAL_DMA_Abort_IT+0x18e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0201 	bic.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e178      	b.n	8007b5c <HAL_DMA_Abort_IT+0x480>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0201 	bic.w	r2, r2, #1
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	e16f      	b.n	8007b5c <HAL_DMA_Abort_IT+0x480>
 800787c:	40020010 	.word	0x40020010
 8007880:	40020028 	.word	0x40020028
 8007884:	40020040 	.word	0x40020040
 8007888:	40020058 	.word	0x40020058
 800788c:	40020070 	.word	0x40020070
 8007890:	40020088 	.word	0x40020088
 8007894:	400200a0 	.word	0x400200a0
 8007898:	400200b8 	.word	0x400200b8
 800789c:	40020410 	.word	0x40020410
 80078a0:	40020428 	.word	0x40020428
 80078a4:	40020440 	.word	0x40020440
 80078a8:	40020458 	.word	0x40020458
 80078ac:	40020470 	.word	0x40020470
 80078b0:	40020488 	.word	0x40020488
 80078b4:	400204a0 	.word	0x400204a0
 80078b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 020e 	bic.w	r2, r2, #14
 80078ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a6c      	ldr	r2, [pc, #432]	@ (8007a84 <HAL_DMA_Abort_IT+0x3a8>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d04a      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a6b      	ldr	r2, [pc, #428]	@ (8007a88 <HAL_DMA_Abort_IT+0x3ac>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d045      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a69      	ldr	r2, [pc, #420]	@ (8007a8c <HAL_DMA_Abort_IT+0x3b0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d040      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a68      	ldr	r2, [pc, #416]	@ (8007a90 <HAL_DMA_Abort_IT+0x3b4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d03b      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a66      	ldr	r2, [pc, #408]	@ (8007a94 <HAL_DMA_Abort_IT+0x3b8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d036      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a65      	ldr	r2, [pc, #404]	@ (8007a98 <HAL_DMA_Abort_IT+0x3bc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d031      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a63      	ldr	r2, [pc, #396]	@ (8007a9c <HAL_DMA_Abort_IT+0x3c0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d02c      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a62      	ldr	r2, [pc, #392]	@ (8007aa0 <HAL_DMA_Abort_IT+0x3c4>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d027      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a60      	ldr	r2, [pc, #384]	@ (8007aa4 <HAL_DMA_Abort_IT+0x3c8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d022      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a5f      	ldr	r2, [pc, #380]	@ (8007aa8 <HAL_DMA_Abort_IT+0x3cc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d01d      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a5d      	ldr	r2, [pc, #372]	@ (8007aac <HAL_DMA_Abort_IT+0x3d0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d018      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a5c      	ldr	r2, [pc, #368]	@ (8007ab0 <HAL_DMA_Abort_IT+0x3d4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a5a      	ldr	r2, [pc, #360]	@ (8007ab4 <HAL_DMA_Abort_IT+0x3d8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00e      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a59      	ldr	r2, [pc, #356]	@ (8007ab8 <HAL_DMA_Abort_IT+0x3dc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d009      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a57      	ldr	r2, [pc, #348]	@ (8007abc <HAL_DMA_Abort_IT+0x3e0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_DMA_Abort_IT+0x290>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a56      	ldr	r2, [pc, #344]	@ (8007ac0 <HAL_DMA_Abort_IT+0x3e4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d108      	bne.n	800797e <HAL_DMA_Abort_IT+0x2a2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0201 	bic.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	e007      	b.n	800798e <HAL_DMA_Abort_IT+0x2b2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0201 	bic.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a3c      	ldr	r2, [pc, #240]	@ (8007a84 <HAL_DMA_Abort_IT+0x3a8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d072      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a3a      	ldr	r2, [pc, #232]	@ (8007a88 <HAL_DMA_Abort_IT+0x3ac>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d06d      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a39      	ldr	r2, [pc, #228]	@ (8007a8c <HAL_DMA_Abort_IT+0x3b0>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d068      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a37      	ldr	r2, [pc, #220]	@ (8007a90 <HAL_DMA_Abort_IT+0x3b4>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d063      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a36      	ldr	r2, [pc, #216]	@ (8007a94 <HAL_DMA_Abort_IT+0x3b8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d05e      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a34      	ldr	r2, [pc, #208]	@ (8007a98 <HAL_DMA_Abort_IT+0x3bc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d059      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a33      	ldr	r2, [pc, #204]	@ (8007a9c <HAL_DMA_Abort_IT+0x3c0>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d054      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a31      	ldr	r2, [pc, #196]	@ (8007aa0 <HAL_DMA_Abort_IT+0x3c4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d04f      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a30      	ldr	r2, [pc, #192]	@ (8007aa4 <HAL_DMA_Abort_IT+0x3c8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d04a      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa8 <HAL_DMA_Abort_IT+0x3cc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d045      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a2d      	ldr	r2, [pc, #180]	@ (8007aac <HAL_DMA_Abort_IT+0x3d0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d040      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a2b      	ldr	r2, [pc, #172]	@ (8007ab0 <HAL_DMA_Abort_IT+0x3d4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d03b      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab4 <HAL_DMA_Abort_IT+0x3d8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d036      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a28      	ldr	r2, [pc, #160]	@ (8007ab8 <HAL_DMA_Abort_IT+0x3dc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d031      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a27      	ldr	r2, [pc, #156]	@ (8007abc <HAL_DMA_Abort_IT+0x3e0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d02c      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a25      	ldr	r2, [pc, #148]	@ (8007ac0 <HAL_DMA_Abort_IT+0x3e4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d027      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a24      	ldr	r2, [pc, #144]	@ (8007ac4 <HAL_DMA_Abort_IT+0x3e8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d022      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a22      	ldr	r2, [pc, #136]	@ (8007ac8 <HAL_DMA_Abort_IT+0x3ec>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d01d      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a21      	ldr	r2, [pc, #132]	@ (8007acc <HAL_DMA_Abort_IT+0x3f0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d018      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad0 <HAL_DMA_Abort_IT+0x3f4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d013      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ad4 <HAL_DMA_Abort_IT+0x3f8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad8 <HAL_DMA_Abort_IT+0x3fc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d009      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8007adc <HAL_DMA_Abort_IT+0x400>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_DMA_Abort_IT+0x3a2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a19      	ldr	r2, [pc, #100]	@ (8007ae0 <HAL_DMA_Abort_IT+0x404>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d132      	bne.n	8007ae4 <HAL_DMA_Abort_IT+0x408>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e031      	b.n	8007ae6 <HAL_DMA_Abort_IT+0x40a>
 8007a82:	bf00      	nop
 8007a84:	40020010 	.word	0x40020010
 8007a88:	40020028 	.word	0x40020028
 8007a8c:	40020040 	.word	0x40020040
 8007a90:	40020058 	.word	0x40020058
 8007a94:	40020070 	.word	0x40020070
 8007a98:	40020088 	.word	0x40020088
 8007a9c:	400200a0 	.word	0x400200a0
 8007aa0:	400200b8 	.word	0x400200b8
 8007aa4:	40020410 	.word	0x40020410
 8007aa8:	40020428 	.word	0x40020428
 8007aac:	40020440 	.word	0x40020440
 8007ab0:	40020458 	.word	0x40020458
 8007ab4:	40020470 	.word	0x40020470
 8007ab8:	40020488 	.word	0x40020488
 8007abc:	400204a0 	.word	0x400204a0
 8007ac0:	400204b8 	.word	0x400204b8
 8007ac4:	58025408 	.word	0x58025408
 8007ac8:	5802541c 	.word	0x5802541c
 8007acc:	58025430 	.word	0x58025430
 8007ad0:	58025444 	.word	0x58025444
 8007ad4:	58025458 	.word	0x58025458
 8007ad8:	5802546c 	.word	0x5802546c
 8007adc:	58025480 	.word	0x58025480
 8007ae0:	58025494 	.word	0x58025494
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d028      	beq.n	8007b3c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007af8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007afe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b04:	f003 031f 	and.w	r3, r3, #31
 8007b08:	2201      	movs	r2, #1
 8007b0a:	409a      	lsls	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007b18:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00c      	beq.n	8007b3c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b30:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007b3a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop

08007b68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	@ 0x28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007b74:	4b67      	ldr	r3, [pc, #412]	@ (8007d14 <HAL_DMA_IRQHandler+0x1ac>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a67      	ldr	r2, [pc, #412]	@ (8007d18 <HAL_DMA_IRQHandler+0x1b0>)
 8007b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7e:	0a9b      	lsrs	r3, r3, #10
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b86:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a5f      	ldr	r2, [pc, #380]	@ (8007d1c <HAL_DMA_IRQHandler+0x1b4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d04a      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a5d      	ldr	r2, [pc, #372]	@ (8007d20 <HAL_DMA_IRQHandler+0x1b8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d045      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a5c      	ldr	r2, [pc, #368]	@ (8007d24 <HAL_DMA_IRQHandler+0x1bc>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d040      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8007d28 <HAL_DMA_IRQHandler+0x1c0>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d03b      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a59      	ldr	r2, [pc, #356]	@ (8007d2c <HAL_DMA_IRQHandler+0x1c4>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d036      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a57      	ldr	r2, [pc, #348]	@ (8007d30 <HAL_DMA_IRQHandler+0x1c8>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d031      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a56      	ldr	r2, [pc, #344]	@ (8007d34 <HAL_DMA_IRQHandler+0x1cc>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d02c      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a54      	ldr	r2, [pc, #336]	@ (8007d38 <HAL_DMA_IRQHandler+0x1d0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d027      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a53      	ldr	r2, [pc, #332]	@ (8007d3c <HAL_DMA_IRQHandler+0x1d4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d022      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a51      	ldr	r2, [pc, #324]	@ (8007d40 <HAL_DMA_IRQHandler+0x1d8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01d      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a50      	ldr	r2, [pc, #320]	@ (8007d44 <HAL_DMA_IRQHandler+0x1dc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d018      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8007d48 <HAL_DMA_IRQHandler+0x1e0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d013      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a4d      	ldr	r2, [pc, #308]	@ (8007d4c <HAL_DMA_IRQHandler+0x1e4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00e      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a4b      	ldr	r2, [pc, #300]	@ (8007d50 <HAL_DMA_IRQHandler+0x1e8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d009      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8007d54 <HAL_DMA_IRQHandler+0x1ec>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d004      	beq.n	8007c3a <HAL_DMA_IRQHandler+0xd2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a48      	ldr	r2, [pc, #288]	@ (8007d58 <HAL_DMA_IRQHandler+0x1f0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d101      	bne.n	8007c3e <HAL_DMA_IRQHandler+0xd6>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <HAL_DMA_IRQHandler+0xd8>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 842b 	beq.w	800849c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	2208      	movs	r2, #8
 8007c50:	409a      	lsls	r2, r3
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	4013      	ands	r3, r2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80a2 	beq.w	8007da0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2e      	ldr	r2, [pc, #184]	@ (8007d1c <HAL_DMA_IRQHandler+0x1b4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d04a      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8007d20 <HAL_DMA_IRQHandler+0x1b8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d045      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a2b      	ldr	r2, [pc, #172]	@ (8007d24 <HAL_DMA_IRQHandler+0x1bc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d040      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d28 <HAL_DMA_IRQHandler+0x1c0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d03b      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a28      	ldr	r2, [pc, #160]	@ (8007d2c <HAL_DMA_IRQHandler+0x1c4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d036      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a27      	ldr	r2, [pc, #156]	@ (8007d30 <HAL_DMA_IRQHandler+0x1c8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d031      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a25      	ldr	r2, [pc, #148]	@ (8007d34 <HAL_DMA_IRQHandler+0x1cc>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d02c      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a24      	ldr	r2, [pc, #144]	@ (8007d38 <HAL_DMA_IRQHandler+0x1d0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d027      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a22      	ldr	r2, [pc, #136]	@ (8007d3c <HAL_DMA_IRQHandler+0x1d4>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d022      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a21      	ldr	r2, [pc, #132]	@ (8007d40 <HAL_DMA_IRQHandler+0x1d8>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d01d      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d44 <HAL_DMA_IRQHandler+0x1dc>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d018      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1e      	ldr	r2, [pc, #120]	@ (8007d48 <HAL_DMA_IRQHandler+0x1e0>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d013      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d4c <HAL_DMA_IRQHandler+0x1e4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00e      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d50 <HAL_DMA_IRQHandler+0x1e8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d009      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a19      	ldr	r2, [pc, #100]	@ (8007d54 <HAL_DMA_IRQHandler+0x1ec>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_DMA_IRQHandler+0x194>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a18      	ldr	r2, [pc, #96]	@ (8007d58 <HAL_DMA_IRQHandler+0x1f0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d12f      	bne.n	8007d5c <HAL_DMA_IRQHandler+0x1f4>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bf14      	ite	ne
 8007d0a:	2301      	movne	r3, #1
 8007d0c:	2300      	moveq	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	e02e      	b.n	8007d70 <HAL_DMA_IRQHandler+0x208>
 8007d12:	bf00      	nop
 8007d14:	24000000 	.word	0x24000000
 8007d18:	1b4e81b5 	.word	0x1b4e81b5
 8007d1c:	40020010 	.word	0x40020010
 8007d20:	40020028 	.word	0x40020028
 8007d24:	40020040 	.word	0x40020040
 8007d28:	40020058 	.word	0x40020058
 8007d2c:	40020070 	.word	0x40020070
 8007d30:	40020088 	.word	0x40020088
 8007d34:	400200a0 	.word	0x400200a0
 8007d38:	400200b8 	.word	0x400200b8
 8007d3c:	40020410 	.word	0x40020410
 8007d40:	40020428 	.word	0x40020428
 8007d44:	40020440 	.word	0x40020440
 8007d48:	40020458 	.word	0x40020458
 8007d4c:	40020470 	.word	0x40020470
 8007d50:	40020488 	.word	0x40020488
 8007d54:	400204a0 	.word	0x400204a0
 8007d58:	400204b8 	.word	0x400204b8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0308 	and.w	r3, r3, #8
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bf14      	ite	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	2300      	moveq	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d015      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0204 	bic.w	r2, r2, #4
 8007d82:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d98:	f043 0201 	orr.w	r2, r3, #1
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da4:	f003 031f 	and.w	r3, r3, #31
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	fa22 f303 	lsr.w	r3, r2, r3
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d06e      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a69      	ldr	r2, [pc, #420]	@ (8007f60 <HAL_DMA_IRQHandler+0x3f8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d04a      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a67      	ldr	r2, [pc, #412]	@ (8007f64 <HAL_DMA_IRQHandler+0x3fc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d045      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a66      	ldr	r2, [pc, #408]	@ (8007f68 <HAL_DMA_IRQHandler+0x400>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d040      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a64      	ldr	r2, [pc, #400]	@ (8007f6c <HAL_DMA_IRQHandler+0x404>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d03b      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a63      	ldr	r2, [pc, #396]	@ (8007f70 <HAL_DMA_IRQHandler+0x408>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d036      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a61      	ldr	r2, [pc, #388]	@ (8007f74 <HAL_DMA_IRQHandler+0x40c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d031      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a60      	ldr	r2, [pc, #384]	@ (8007f78 <HAL_DMA_IRQHandler+0x410>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d02c      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a5e      	ldr	r2, [pc, #376]	@ (8007f7c <HAL_DMA_IRQHandler+0x414>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d027      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8007f80 <HAL_DMA_IRQHandler+0x418>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d022      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a5b      	ldr	r2, [pc, #364]	@ (8007f84 <HAL_DMA_IRQHandler+0x41c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d01d      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a5a      	ldr	r2, [pc, #360]	@ (8007f88 <HAL_DMA_IRQHandler+0x420>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d018      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a58      	ldr	r2, [pc, #352]	@ (8007f8c <HAL_DMA_IRQHandler+0x424>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a57      	ldr	r2, [pc, #348]	@ (8007f90 <HAL_DMA_IRQHandler+0x428>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d00e      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a55      	ldr	r2, [pc, #340]	@ (8007f94 <HAL_DMA_IRQHandler+0x42c>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d009      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a54      	ldr	r2, [pc, #336]	@ (8007f98 <HAL_DMA_IRQHandler+0x430>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_DMA_IRQHandler+0x2ee>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a52      	ldr	r2, [pc, #328]	@ (8007f9c <HAL_DMA_IRQHandler+0x434>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d10a      	bne.n	8007e6c <HAL_DMA_IRQHandler+0x304>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bf14      	ite	ne
 8007e64:	2301      	movne	r3, #1
 8007e66:	2300      	moveq	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e003      	b.n	8007e74 <HAL_DMA_IRQHandler+0x30c>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00d      	beq.n	8007e94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	2201      	movs	r2, #1
 8007e82:	409a      	lsls	r2, r3
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	f043 0202 	orr.w	r2, r3, #2
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 808f 	beq.w	8007fc8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a2c      	ldr	r2, [pc, #176]	@ (8007f60 <HAL_DMA_IRQHandler+0x3f8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d04a      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8007f64 <HAL_DMA_IRQHandler+0x3fc>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d045      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a29      	ldr	r2, [pc, #164]	@ (8007f68 <HAL_DMA_IRQHandler+0x400>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d040      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a27      	ldr	r2, [pc, #156]	@ (8007f6c <HAL_DMA_IRQHandler+0x404>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d03b      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a26      	ldr	r2, [pc, #152]	@ (8007f70 <HAL_DMA_IRQHandler+0x408>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d036      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a24      	ldr	r2, [pc, #144]	@ (8007f74 <HAL_DMA_IRQHandler+0x40c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d031      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a23      	ldr	r2, [pc, #140]	@ (8007f78 <HAL_DMA_IRQHandler+0x410>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d02c      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a21      	ldr	r2, [pc, #132]	@ (8007f7c <HAL_DMA_IRQHandler+0x414>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d027      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a20      	ldr	r2, [pc, #128]	@ (8007f80 <HAL_DMA_IRQHandler+0x418>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d022      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1e      	ldr	r2, [pc, #120]	@ (8007f84 <HAL_DMA_IRQHandler+0x41c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01d      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1d      	ldr	r2, [pc, #116]	@ (8007f88 <HAL_DMA_IRQHandler+0x420>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d018      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007f8c <HAL_DMA_IRQHandler+0x424>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1a      	ldr	r2, [pc, #104]	@ (8007f90 <HAL_DMA_IRQHandler+0x428>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a18      	ldr	r2, [pc, #96]	@ (8007f94 <HAL_DMA_IRQHandler+0x42c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d009      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a17      	ldr	r2, [pc, #92]	@ (8007f98 <HAL_DMA_IRQHandler+0x430>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d004      	beq.n	8007f4a <HAL_DMA_IRQHandler+0x3e2>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a15      	ldr	r2, [pc, #84]	@ (8007f9c <HAL_DMA_IRQHandler+0x434>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d12a      	bne.n	8007fa0 <HAL_DMA_IRQHandler+0x438>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	bf14      	ite	ne
 8007f58:	2301      	movne	r3, #1
 8007f5a:	2300      	moveq	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	e023      	b.n	8007fa8 <HAL_DMA_IRQHandler+0x440>
 8007f60:	40020010 	.word	0x40020010
 8007f64:	40020028 	.word	0x40020028
 8007f68:	40020040 	.word	0x40020040
 8007f6c:	40020058 	.word	0x40020058
 8007f70:	40020070 	.word	0x40020070
 8007f74:	40020088 	.word	0x40020088
 8007f78:	400200a0 	.word	0x400200a0
 8007f7c:	400200b8 	.word	0x400200b8
 8007f80:	40020410 	.word	0x40020410
 8007f84:	40020428 	.word	0x40020428
 8007f88:	40020440 	.word	0x40020440
 8007f8c:	40020458 	.word	0x40020458
 8007f90:	40020470 	.word	0x40020470
 8007f94:	40020488 	.word	0x40020488
 8007f98:	400204a0 	.word	0x400204a0
 8007f9c:	400204b8 	.word	0x400204b8
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00d      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	409a      	lsls	r2, r3
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc0:	f043 0204 	orr.w	r2, r3, #4
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fcc:	f003 031f 	and.w	r3, r3, #31
 8007fd0:	2210      	movs	r2, #16
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80a6 	beq.w	800812a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a85      	ldr	r2, [pc, #532]	@ (80081f8 <HAL_DMA_IRQHandler+0x690>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d04a      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a83      	ldr	r2, [pc, #524]	@ (80081fc <HAL_DMA_IRQHandler+0x694>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d045      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a82      	ldr	r2, [pc, #520]	@ (8008200 <HAL_DMA_IRQHandler+0x698>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d040      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a80      	ldr	r2, [pc, #512]	@ (8008204 <HAL_DMA_IRQHandler+0x69c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d03b      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a7f      	ldr	r2, [pc, #508]	@ (8008208 <HAL_DMA_IRQHandler+0x6a0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d036      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a7d      	ldr	r2, [pc, #500]	@ (800820c <HAL_DMA_IRQHandler+0x6a4>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d031      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a7c      	ldr	r2, [pc, #496]	@ (8008210 <HAL_DMA_IRQHandler+0x6a8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d02c      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a7a      	ldr	r2, [pc, #488]	@ (8008214 <HAL_DMA_IRQHandler+0x6ac>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d027      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a79      	ldr	r2, [pc, #484]	@ (8008218 <HAL_DMA_IRQHandler+0x6b0>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d022      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a77      	ldr	r2, [pc, #476]	@ (800821c <HAL_DMA_IRQHandler+0x6b4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d01d      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a76      	ldr	r2, [pc, #472]	@ (8008220 <HAL_DMA_IRQHandler+0x6b8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d018      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a74      	ldr	r2, [pc, #464]	@ (8008224 <HAL_DMA_IRQHandler+0x6bc>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a73      	ldr	r2, [pc, #460]	@ (8008228 <HAL_DMA_IRQHandler+0x6c0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00e      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a71      	ldr	r2, [pc, #452]	@ (800822c <HAL_DMA_IRQHandler+0x6c4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d009      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a70      	ldr	r2, [pc, #448]	@ (8008230 <HAL_DMA_IRQHandler+0x6c8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <HAL_DMA_IRQHandler+0x516>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a6e      	ldr	r2, [pc, #440]	@ (8008234 <HAL_DMA_IRQHandler+0x6cc>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d10a      	bne.n	8008094 <HAL_DMA_IRQHandler+0x52c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	2b00      	cmp	r3, #0
 800808a:	bf14      	ite	ne
 800808c:	2301      	movne	r3, #1
 800808e:	2300      	moveq	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	e009      	b.n	80080a8 <HAL_DMA_IRQHandler+0x540>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d03e      	beq.n	800812a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2210      	movs	r2, #16
 80080b6:	409a      	lsls	r2, r3
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d018      	beq.n	80080fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d108      	bne.n	80080ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d024      	beq.n	800812a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
 80080e8:	e01f      	b.n	800812a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d01b      	beq.n	800812a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
 80080fa:	e016      	b.n	800812a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d107      	bne.n	800811a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0208 	bic.w	r2, r2, #8
 8008118:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	2220      	movs	r2, #32
 8008134:	409a      	lsls	r2, r3
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	4013      	ands	r3, r2
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8110 	beq.w	8008360 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a2c      	ldr	r2, [pc, #176]	@ (80081f8 <HAL_DMA_IRQHandler+0x690>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d04a      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2b      	ldr	r2, [pc, #172]	@ (80081fc <HAL_DMA_IRQHandler+0x694>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d045      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a29      	ldr	r2, [pc, #164]	@ (8008200 <HAL_DMA_IRQHandler+0x698>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d040      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a28      	ldr	r2, [pc, #160]	@ (8008204 <HAL_DMA_IRQHandler+0x69c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d03b      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a26      	ldr	r2, [pc, #152]	@ (8008208 <HAL_DMA_IRQHandler+0x6a0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d036      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a25      	ldr	r2, [pc, #148]	@ (800820c <HAL_DMA_IRQHandler+0x6a4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d031      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a23      	ldr	r2, [pc, #140]	@ (8008210 <HAL_DMA_IRQHandler+0x6a8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d02c      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a22      	ldr	r2, [pc, #136]	@ (8008214 <HAL_DMA_IRQHandler+0x6ac>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d027      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a20      	ldr	r2, [pc, #128]	@ (8008218 <HAL_DMA_IRQHandler+0x6b0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d022      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1f      	ldr	r2, [pc, #124]	@ (800821c <HAL_DMA_IRQHandler+0x6b4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d01d      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008220 <HAL_DMA_IRQHandler+0x6b8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d018      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1c      	ldr	r2, [pc, #112]	@ (8008224 <HAL_DMA_IRQHandler+0x6bc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d013      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008228 <HAL_DMA_IRQHandler+0x6c0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d00e      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a19      	ldr	r2, [pc, #100]	@ (800822c <HAL_DMA_IRQHandler+0x6c4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d009      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a17      	ldr	r2, [pc, #92]	@ (8008230 <HAL_DMA_IRQHandler+0x6c8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <HAL_DMA_IRQHandler+0x678>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a16      	ldr	r2, [pc, #88]	@ (8008234 <HAL_DMA_IRQHandler+0x6cc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d12b      	bne.n	8008238 <HAL_DMA_IRQHandler+0x6d0>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bf14      	ite	ne
 80081ee:	2301      	movne	r3, #1
 80081f0:	2300      	moveq	r3, #0
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	e02a      	b.n	800824c <HAL_DMA_IRQHandler+0x6e4>
 80081f6:	bf00      	nop
 80081f8:	40020010 	.word	0x40020010
 80081fc:	40020028 	.word	0x40020028
 8008200:	40020040 	.word	0x40020040
 8008204:	40020058 	.word	0x40020058
 8008208:	40020070 	.word	0x40020070
 800820c:	40020088 	.word	0x40020088
 8008210:	400200a0 	.word	0x400200a0
 8008214:	400200b8 	.word	0x400200b8
 8008218:	40020410 	.word	0x40020410
 800821c:	40020428 	.word	0x40020428
 8008220:	40020440 	.word	0x40020440
 8008224:	40020458 	.word	0x40020458
 8008228:	40020470 	.word	0x40020470
 800822c:	40020488 	.word	0x40020488
 8008230:	400204a0 	.word	0x400204a0
 8008234:	400204b8 	.word	0x400204b8
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 8087 	beq.w	8008360 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	2220      	movs	r2, #32
 800825c:	409a      	lsls	r2, r3
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b04      	cmp	r3, #4
 800826c:	d139      	bne.n	80082e2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0216 	bic.w	r2, r2, #22
 800827c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695a      	ldr	r2, [r3, #20]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800828c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <HAL_DMA_IRQHandler+0x736>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0208 	bic.w	r2, r2, #8
 80082ac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	223f      	movs	r2, #63	@ 0x3f
 80082b8:	409a      	lsls	r2, r3
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 834a 	beq.w	800896c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	4798      	blx	r3
          }
          return;
 80082e0:	e344      	b.n	800896c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d018      	beq.n	8008322 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d108      	bne.n	8008310 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008302:	2b00      	cmp	r3, #0
 8008304:	d02c      	beq.n	8008360 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
 800830e:	e027      	b.n	8008360 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d023      	beq.n	8008360 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
 8008320:	e01e      	b.n	8008360 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10f      	bne.n	8008350 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0210 	bic.w	r2, r2, #16
 800833e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8306 	beq.w	8008976 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 8088 	beq.w	8008488 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2204      	movs	r2, #4
 800837c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a7a      	ldr	r2, [pc, #488]	@ (8008570 <HAL_DMA_IRQHandler+0xa08>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d04a      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a79      	ldr	r2, [pc, #484]	@ (8008574 <HAL_DMA_IRQHandler+0xa0c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d045      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a77      	ldr	r2, [pc, #476]	@ (8008578 <HAL_DMA_IRQHandler+0xa10>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d040      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a76      	ldr	r2, [pc, #472]	@ (800857c <HAL_DMA_IRQHandler+0xa14>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d03b      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a74      	ldr	r2, [pc, #464]	@ (8008580 <HAL_DMA_IRQHandler+0xa18>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d036      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a73      	ldr	r2, [pc, #460]	@ (8008584 <HAL_DMA_IRQHandler+0xa1c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d031      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a71      	ldr	r2, [pc, #452]	@ (8008588 <HAL_DMA_IRQHandler+0xa20>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d02c      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a70      	ldr	r2, [pc, #448]	@ (800858c <HAL_DMA_IRQHandler+0xa24>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d027      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a6e      	ldr	r2, [pc, #440]	@ (8008590 <HAL_DMA_IRQHandler+0xa28>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d022      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a6d      	ldr	r2, [pc, #436]	@ (8008594 <HAL_DMA_IRQHandler+0xa2c>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d01d      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a6b      	ldr	r2, [pc, #428]	@ (8008598 <HAL_DMA_IRQHandler+0xa30>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d018      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a6a      	ldr	r2, [pc, #424]	@ (800859c <HAL_DMA_IRQHandler+0xa34>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d013      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a68      	ldr	r2, [pc, #416]	@ (80085a0 <HAL_DMA_IRQHandler+0xa38>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00e      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a67      	ldr	r2, [pc, #412]	@ (80085a4 <HAL_DMA_IRQHandler+0xa3c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d009      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a65      	ldr	r2, [pc, #404]	@ (80085a8 <HAL_DMA_IRQHandler+0xa40>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d004      	beq.n	8008420 <HAL_DMA_IRQHandler+0x8b8>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a64      	ldr	r2, [pc, #400]	@ (80085ac <HAL_DMA_IRQHandler+0xa44>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d108      	bne.n	8008432 <HAL_DMA_IRQHandler+0x8ca>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0201 	bic.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	e007      	b.n	8008442 <HAL_DMA_IRQHandler+0x8da>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0201 	bic.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3301      	adds	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844a:	429a      	cmp	r2, r3
 800844c:	d307      	bcc.n	800845e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1f2      	bne.n	8008442 <HAL_DMA_IRQHandler+0x8da>
 800845c:	e000      	b.n	8008460 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800845e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2203      	movs	r2, #3
 8008472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008476:	e003      	b.n	8008480 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8272 	beq.w	8008976 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	4798      	blx	r3
 800849a:	e26c      	b.n	8008976 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a43      	ldr	r2, [pc, #268]	@ (80085b0 <HAL_DMA_IRQHandler+0xa48>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d022      	beq.n	80084ec <HAL_DMA_IRQHandler+0x984>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a42      	ldr	r2, [pc, #264]	@ (80085b4 <HAL_DMA_IRQHandler+0xa4c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d01d      	beq.n	80084ec <HAL_DMA_IRQHandler+0x984>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a40      	ldr	r2, [pc, #256]	@ (80085b8 <HAL_DMA_IRQHandler+0xa50>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d018      	beq.n	80084ec <HAL_DMA_IRQHandler+0x984>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a3f      	ldr	r2, [pc, #252]	@ (80085bc <HAL_DMA_IRQHandler+0xa54>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d013      	beq.n	80084ec <HAL_DMA_IRQHandler+0x984>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a3d      	ldr	r2, [pc, #244]	@ (80085c0 <HAL_DMA_IRQHandler+0xa58>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00e      	beq.n	80084ec <HAL_DMA_IRQHandler+0x984>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a3c      	ldr	r2, [pc, #240]	@ (80085c4 <HAL_DMA_IRQHandler+0xa5c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d009      	beq.n	80084ec <HAL_DMA_IRQHandler+0x984>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a3a      	ldr	r2, [pc, #232]	@ (80085c8 <HAL_DMA_IRQHandler+0xa60>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d004      	beq.n	80084ec <HAL_DMA_IRQHandler+0x984>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a39      	ldr	r2, [pc, #228]	@ (80085cc <HAL_DMA_IRQHandler+0xa64>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d101      	bne.n	80084f0 <HAL_DMA_IRQHandler+0x988>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <HAL_DMA_IRQHandler+0x98a>
 80084f0:	2300      	movs	r3, #0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 823f 	beq.w	8008976 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008504:	f003 031f 	and.w	r3, r3, #31
 8008508:	2204      	movs	r2, #4
 800850a:	409a      	lsls	r2, r3
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	4013      	ands	r3, r2
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 80cd 	beq.w	80086b0 <HAL_DMA_IRQHandler+0xb48>
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80c7 	beq.w	80086b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008526:	f003 031f 	and.w	r3, r3, #31
 800852a:	2204      	movs	r2, #4
 800852c:	409a      	lsls	r2, r3
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d049      	beq.n	80085d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 8210 	beq.w	8008970 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008558:	e20a      	b.n	8008970 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 8206 	beq.w	8008970 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800856c:	e200      	b.n	8008970 <HAL_DMA_IRQHandler+0xe08>
 800856e:	bf00      	nop
 8008570:	40020010 	.word	0x40020010
 8008574:	40020028 	.word	0x40020028
 8008578:	40020040 	.word	0x40020040
 800857c:	40020058 	.word	0x40020058
 8008580:	40020070 	.word	0x40020070
 8008584:	40020088 	.word	0x40020088
 8008588:	400200a0 	.word	0x400200a0
 800858c:	400200b8 	.word	0x400200b8
 8008590:	40020410 	.word	0x40020410
 8008594:	40020428 	.word	0x40020428
 8008598:	40020440 	.word	0x40020440
 800859c:	40020458 	.word	0x40020458
 80085a0:	40020470 	.word	0x40020470
 80085a4:	40020488 	.word	0x40020488
 80085a8:	400204a0 	.word	0x400204a0
 80085ac:	400204b8 	.word	0x400204b8
 80085b0:	58025408 	.word	0x58025408
 80085b4:	5802541c 	.word	0x5802541c
 80085b8:	58025430 	.word	0x58025430
 80085bc:	58025444 	.word	0x58025444
 80085c0:	58025458 	.word	0x58025458
 80085c4:	5802546c 	.word	0x5802546c
 80085c8:	58025480 	.word	0x58025480
 80085cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d160      	bne.n	800869c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a7f      	ldr	r2, [pc, #508]	@ (80087dc <HAL_DMA_IRQHandler+0xc74>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d04a      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a7d      	ldr	r2, [pc, #500]	@ (80087e0 <HAL_DMA_IRQHandler+0xc78>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d045      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a7c      	ldr	r2, [pc, #496]	@ (80087e4 <HAL_DMA_IRQHandler+0xc7c>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d040      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a7a      	ldr	r2, [pc, #488]	@ (80087e8 <HAL_DMA_IRQHandler+0xc80>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d03b      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a79      	ldr	r2, [pc, #484]	@ (80087ec <HAL_DMA_IRQHandler+0xc84>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d036      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a77      	ldr	r2, [pc, #476]	@ (80087f0 <HAL_DMA_IRQHandler+0xc88>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d031      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a76      	ldr	r2, [pc, #472]	@ (80087f4 <HAL_DMA_IRQHandler+0xc8c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d02c      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a74      	ldr	r2, [pc, #464]	@ (80087f8 <HAL_DMA_IRQHandler+0xc90>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d027      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a73      	ldr	r2, [pc, #460]	@ (80087fc <HAL_DMA_IRQHandler+0xc94>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d022      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a71      	ldr	r2, [pc, #452]	@ (8008800 <HAL_DMA_IRQHandler+0xc98>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d01d      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a70      	ldr	r2, [pc, #448]	@ (8008804 <HAL_DMA_IRQHandler+0xc9c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d018      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a6e      	ldr	r2, [pc, #440]	@ (8008808 <HAL_DMA_IRQHandler+0xca0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d013      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a6d      	ldr	r2, [pc, #436]	@ (800880c <HAL_DMA_IRQHandler+0xca4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00e      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a6b      	ldr	r2, [pc, #428]	@ (8008810 <HAL_DMA_IRQHandler+0xca8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d009      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a6a      	ldr	r2, [pc, #424]	@ (8008814 <HAL_DMA_IRQHandler+0xcac>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d004      	beq.n	800867a <HAL_DMA_IRQHandler+0xb12>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a68      	ldr	r2, [pc, #416]	@ (8008818 <HAL_DMA_IRQHandler+0xcb0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d108      	bne.n	800868c <HAL_DMA_IRQHandler+0xb24>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f022 0208 	bic.w	r2, r2, #8
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	e007      	b.n	800869c <HAL_DMA_IRQHandler+0xb34>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0204 	bic.w	r2, r2, #4
 800869a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8165 	beq.w	8008970 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086ae:	e15f      	b.n	8008970 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	2202      	movs	r2, #2
 80086ba:	409a      	lsls	r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80c5 	beq.w	8008850 <HAL_DMA_IRQHandler+0xce8>
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 80bf 	beq.w	8008850 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086d6:	f003 031f 	and.w	r3, r3, #31
 80086da:	2202      	movs	r2, #2
 80086dc:	409a      	lsls	r2, r3
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d018      	beq.n	800871e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d109      	bne.n	800870a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 813a 	beq.w	8008974 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008708:	e134      	b.n	8008974 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 8130 	beq.w	8008974 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800871c:	e12a      	b.n	8008974 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	f040 8089 	bne.w	800883c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a2b      	ldr	r2, [pc, #172]	@ (80087dc <HAL_DMA_IRQHandler+0xc74>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d04a      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a29      	ldr	r2, [pc, #164]	@ (80087e0 <HAL_DMA_IRQHandler+0xc78>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d045      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a28      	ldr	r2, [pc, #160]	@ (80087e4 <HAL_DMA_IRQHandler+0xc7c>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d040      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a26      	ldr	r2, [pc, #152]	@ (80087e8 <HAL_DMA_IRQHandler+0xc80>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d03b      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a25      	ldr	r2, [pc, #148]	@ (80087ec <HAL_DMA_IRQHandler+0xc84>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d036      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a23      	ldr	r2, [pc, #140]	@ (80087f0 <HAL_DMA_IRQHandler+0xc88>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d031      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a22      	ldr	r2, [pc, #136]	@ (80087f4 <HAL_DMA_IRQHandler+0xc8c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d02c      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a20      	ldr	r2, [pc, #128]	@ (80087f8 <HAL_DMA_IRQHandler+0xc90>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d027      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1f      	ldr	r2, [pc, #124]	@ (80087fc <HAL_DMA_IRQHandler+0xc94>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d022      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1d      	ldr	r2, [pc, #116]	@ (8008800 <HAL_DMA_IRQHandler+0xc98>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d01d      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a1c      	ldr	r2, [pc, #112]	@ (8008804 <HAL_DMA_IRQHandler+0xc9c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d018      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a1a      	ldr	r2, [pc, #104]	@ (8008808 <HAL_DMA_IRQHandler+0xca0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d013      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a19      	ldr	r2, [pc, #100]	@ (800880c <HAL_DMA_IRQHandler+0xca4>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00e      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <HAL_DMA_IRQHandler+0xca8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d009      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a16      	ldr	r2, [pc, #88]	@ (8008814 <HAL_DMA_IRQHandler+0xcac>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d004      	beq.n	80087ca <HAL_DMA_IRQHandler+0xc62>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a14      	ldr	r2, [pc, #80]	@ (8008818 <HAL_DMA_IRQHandler+0xcb0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d128      	bne.n	800881c <HAL_DMA_IRQHandler+0xcb4>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0214 	bic.w	r2, r2, #20
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	e027      	b.n	800882c <HAL_DMA_IRQHandler+0xcc4>
 80087dc:	40020010 	.word	0x40020010
 80087e0:	40020028 	.word	0x40020028
 80087e4:	40020040 	.word	0x40020040
 80087e8:	40020058 	.word	0x40020058
 80087ec:	40020070 	.word	0x40020070
 80087f0:	40020088 	.word	0x40020088
 80087f4:	400200a0 	.word	0x400200a0
 80087f8:	400200b8 	.word	0x400200b8
 80087fc:	40020410 	.word	0x40020410
 8008800:	40020428 	.word	0x40020428
 8008804:	40020440 	.word	0x40020440
 8008808:	40020458 	.word	0x40020458
 800880c:	40020470 	.word	0x40020470
 8008810:	40020488 	.word	0x40020488
 8008814:	400204a0 	.word	0x400204a0
 8008818:	400204b8 	.word	0x400204b8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 020a 	bic.w	r2, r2, #10
 800882a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 8097 	beq.w	8008974 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800884e:	e091      	b.n	8008974 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	2208      	movs	r2, #8
 800885a:	409a      	lsls	r2, r3
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	4013      	ands	r3, r2
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8088 	beq.w	8008976 <HAL_DMA_IRQHandler+0xe0e>
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 8082 	beq.w	8008976 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a41      	ldr	r2, [pc, #260]	@ (800897c <HAL_DMA_IRQHandler+0xe14>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d04a      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a3f      	ldr	r2, [pc, #252]	@ (8008980 <HAL_DMA_IRQHandler+0xe18>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d045      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a3e      	ldr	r2, [pc, #248]	@ (8008984 <HAL_DMA_IRQHandler+0xe1c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d040      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a3c      	ldr	r2, [pc, #240]	@ (8008988 <HAL_DMA_IRQHandler+0xe20>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d03b      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a3b      	ldr	r2, [pc, #236]	@ (800898c <HAL_DMA_IRQHandler+0xe24>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d036      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a39      	ldr	r2, [pc, #228]	@ (8008990 <HAL_DMA_IRQHandler+0xe28>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d031      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a38      	ldr	r2, [pc, #224]	@ (8008994 <HAL_DMA_IRQHandler+0xe2c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d02c      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a36      	ldr	r2, [pc, #216]	@ (8008998 <HAL_DMA_IRQHandler+0xe30>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d027      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a35      	ldr	r2, [pc, #212]	@ (800899c <HAL_DMA_IRQHandler+0xe34>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d022      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a33      	ldr	r2, [pc, #204]	@ (80089a0 <HAL_DMA_IRQHandler+0xe38>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01d      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a32      	ldr	r2, [pc, #200]	@ (80089a4 <HAL_DMA_IRQHandler+0xe3c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d018      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a30      	ldr	r2, [pc, #192]	@ (80089a8 <HAL_DMA_IRQHandler+0xe40>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2f      	ldr	r2, [pc, #188]	@ (80089ac <HAL_DMA_IRQHandler+0xe44>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00e      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a2d      	ldr	r2, [pc, #180]	@ (80089b0 <HAL_DMA_IRQHandler+0xe48>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a2c      	ldr	r2, [pc, #176]	@ (80089b4 <HAL_DMA_IRQHandler+0xe4c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_DMA_IRQHandler+0xdaa>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a2a      	ldr	r2, [pc, #168]	@ (80089b8 <HAL_DMA_IRQHandler+0xe50>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d108      	bne.n	8008924 <HAL_DMA_IRQHandler+0xdbc>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 021c 	bic.w	r2, r2, #28
 8008920:	601a      	str	r2, [r3, #0]
 8008922:	e007      	b.n	8008934 <HAL_DMA_IRQHandler+0xdcc>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 020e 	bic.w	r2, r2, #14
 8008932:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008938:	f003 031f 	and.w	r3, r3, #31
 800893c:	2201      	movs	r2, #1
 800893e:	409a      	lsls	r2, r3
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800895e:	2b00      	cmp	r3, #0
 8008960:	d009      	beq.n	8008976 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	4798      	blx	r3
 800896a:	e004      	b.n	8008976 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800896c:	bf00      	nop
 800896e:	e002      	b.n	8008976 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008970:	bf00      	nop
 8008972:	e000      	b.n	8008976 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008974:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008976:	3728      	adds	r7, #40	@ 0x28
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	40020010 	.word	0x40020010
 8008980:	40020028 	.word	0x40020028
 8008984:	40020040 	.word	0x40020040
 8008988:	40020058 	.word	0x40020058
 800898c:	40020070 	.word	0x40020070
 8008990:	40020088 	.word	0x40020088
 8008994:	400200a0 	.word	0x400200a0
 8008998:	400200b8 	.word	0x400200b8
 800899c:	40020410 	.word	0x40020410
 80089a0:	40020428 	.word	0x40020428
 80089a4:	40020440 	.word	0x40020440
 80089a8:	40020458 	.word	0x40020458
 80089ac:	40020470 	.word	0x40020470
 80089b0:	40020488 	.word	0x40020488
 80089b4:	400204a0 	.word	0x400204a0
 80089b8:	400204b8 	.word	0x400204b8

080089bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a7f      	ldr	r2, [pc, #508]	@ (8008bd8 <DMA_SetConfig+0x21c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d072      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a7d      	ldr	r2, [pc, #500]	@ (8008bdc <DMA_SetConfig+0x220>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d06d      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a7c      	ldr	r2, [pc, #496]	@ (8008be0 <DMA_SetConfig+0x224>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d068      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a7a      	ldr	r2, [pc, #488]	@ (8008be4 <DMA_SetConfig+0x228>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d063      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a79      	ldr	r2, [pc, #484]	@ (8008be8 <DMA_SetConfig+0x22c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d05e      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a77      	ldr	r2, [pc, #476]	@ (8008bec <DMA_SetConfig+0x230>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d059      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a76      	ldr	r2, [pc, #472]	@ (8008bf0 <DMA_SetConfig+0x234>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d054      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a74      	ldr	r2, [pc, #464]	@ (8008bf4 <DMA_SetConfig+0x238>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d04f      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a73      	ldr	r2, [pc, #460]	@ (8008bf8 <DMA_SetConfig+0x23c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d04a      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a71      	ldr	r2, [pc, #452]	@ (8008bfc <DMA_SetConfig+0x240>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d045      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a70      	ldr	r2, [pc, #448]	@ (8008c00 <DMA_SetConfig+0x244>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d040      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a6e      	ldr	r2, [pc, #440]	@ (8008c04 <DMA_SetConfig+0x248>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d03b      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a6d      	ldr	r2, [pc, #436]	@ (8008c08 <DMA_SetConfig+0x24c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d036      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8008c0c <DMA_SetConfig+0x250>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d031      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a6a      	ldr	r2, [pc, #424]	@ (8008c10 <DMA_SetConfig+0x254>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d02c      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a68      	ldr	r2, [pc, #416]	@ (8008c14 <DMA_SetConfig+0x258>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d027      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a67      	ldr	r2, [pc, #412]	@ (8008c18 <DMA_SetConfig+0x25c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d022      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a65      	ldr	r2, [pc, #404]	@ (8008c1c <DMA_SetConfig+0x260>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d01d      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a64      	ldr	r2, [pc, #400]	@ (8008c20 <DMA_SetConfig+0x264>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d018      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a62      	ldr	r2, [pc, #392]	@ (8008c24 <DMA_SetConfig+0x268>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d013      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a61      	ldr	r2, [pc, #388]	@ (8008c28 <DMA_SetConfig+0x26c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00e      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a5f      	ldr	r2, [pc, #380]	@ (8008c2c <DMA_SetConfig+0x270>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d009      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8008c30 <DMA_SetConfig+0x274>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d004      	beq.n	8008ac6 <DMA_SetConfig+0x10a>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a5c      	ldr	r2, [pc, #368]	@ (8008c34 <DMA_SetConfig+0x278>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d101      	bne.n	8008aca <DMA_SetConfig+0x10e>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <DMA_SetConfig+0x110>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00d      	beq.n	8008aec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008ad8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d004      	beq.n	8008aec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008aea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a39      	ldr	r2, [pc, #228]	@ (8008bd8 <DMA_SetConfig+0x21c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d04a      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a38      	ldr	r2, [pc, #224]	@ (8008bdc <DMA_SetConfig+0x220>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d045      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a36      	ldr	r2, [pc, #216]	@ (8008be0 <DMA_SetConfig+0x224>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d040      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a35      	ldr	r2, [pc, #212]	@ (8008be4 <DMA_SetConfig+0x228>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d03b      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a33      	ldr	r2, [pc, #204]	@ (8008be8 <DMA_SetConfig+0x22c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d036      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a32      	ldr	r2, [pc, #200]	@ (8008bec <DMA_SetConfig+0x230>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d031      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a30      	ldr	r2, [pc, #192]	@ (8008bf0 <DMA_SetConfig+0x234>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d02c      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a2f      	ldr	r2, [pc, #188]	@ (8008bf4 <DMA_SetConfig+0x238>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d027      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a2d      	ldr	r2, [pc, #180]	@ (8008bf8 <DMA_SetConfig+0x23c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d022      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bfc <DMA_SetConfig+0x240>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d01d      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a2a      	ldr	r2, [pc, #168]	@ (8008c00 <DMA_SetConfig+0x244>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d018      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a29      	ldr	r2, [pc, #164]	@ (8008c04 <DMA_SetConfig+0x248>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d013      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a27      	ldr	r2, [pc, #156]	@ (8008c08 <DMA_SetConfig+0x24c>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00e      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a26      	ldr	r2, [pc, #152]	@ (8008c0c <DMA_SetConfig+0x250>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d009      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a24      	ldr	r2, [pc, #144]	@ (8008c10 <DMA_SetConfig+0x254>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d004      	beq.n	8008b8c <DMA_SetConfig+0x1d0>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a23      	ldr	r2, [pc, #140]	@ (8008c14 <DMA_SetConfig+0x258>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d101      	bne.n	8008b90 <DMA_SetConfig+0x1d4>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <DMA_SetConfig+0x1d6>
 8008b90:	2300      	movs	r3, #0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d059      	beq.n	8008c4a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b9a:	f003 031f 	and.w	r3, r3, #31
 8008b9e:	223f      	movs	r2, #63	@ 0x3f
 8008ba0:	409a      	lsls	r2, r3
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008bb4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d138      	bne.n	8008c38 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68ba      	ldr	r2, [r7, #8]
 8008bd4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008bd6:	e086      	b.n	8008ce6 <DMA_SetConfig+0x32a>
 8008bd8:	40020010 	.word	0x40020010
 8008bdc:	40020028 	.word	0x40020028
 8008be0:	40020040 	.word	0x40020040
 8008be4:	40020058 	.word	0x40020058
 8008be8:	40020070 	.word	0x40020070
 8008bec:	40020088 	.word	0x40020088
 8008bf0:	400200a0 	.word	0x400200a0
 8008bf4:	400200b8 	.word	0x400200b8
 8008bf8:	40020410 	.word	0x40020410
 8008bfc:	40020428 	.word	0x40020428
 8008c00:	40020440 	.word	0x40020440
 8008c04:	40020458 	.word	0x40020458
 8008c08:	40020470 	.word	0x40020470
 8008c0c:	40020488 	.word	0x40020488
 8008c10:	400204a0 	.word	0x400204a0
 8008c14:	400204b8 	.word	0x400204b8
 8008c18:	58025408 	.word	0x58025408
 8008c1c:	5802541c 	.word	0x5802541c
 8008c20:	58025430 	.word	0x58025430
 8008c24:	58025444 	.word	0x58025444
 8008c28:	58025458 	.word	0x58025458
 8008c2c:	5802546c 	.word	0x5802546c
 8008c30:	58025480 	.word	0x58025480
 8008c34:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	60da      	str	r2, [r3, #12]
}
 8008c48:	e04d      	b.n	8008ce6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a29      	ldr	r2, [pc, #164]	@ (8008cf4 <DMA_SetConfig+0x338>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d022      	beq.n	8008c9a <DMA_SetConfig+0x2de>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a27      	ldr	r2, [pc, #156]	@ (8008cf8 <DMA_SetConfig+0x33c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d01d      	beq.n	8008c9a <DMA_SetConfig+0x2de>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a26      	ldr	r2, [pc, #152]	@ (8008cfc <DMA_SetConfig+0x340>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d018      	beq.n	8008c9a <DMA_SetConfig+0x2de>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a24      	ldr	r2, [pc, #144]	@ (8008d00 <DMA_SetConfig+0x344>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d013      	beq.n	8008c9a <DMA_SetConfig+0x2de>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a23      	ldr	r2, [pc, #140]	@ (8008d04 <DMA_SetConfig+0x348>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00e      	beq.n	8008c9a <DMA_SetConfig+0x2de>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a21      	ldr	r2, [pc, #132]	@ (8008d08 <DMA_SetConfig+0x34c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d009      	beq.n	8008c9a <DMA_SetConfig+0x2de>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a20      	ldr	r2, [pc, #128]	@ (8008d0c <DMA_SetConfig+0x350>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d004      	beq.n	8008c9a <DMA_SetConfig+0x2de>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1e      	ldr	r2, [pc, #120]	@ (8008d10 <DMA_SetConfig+0x354>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d101      	bne.n	8008c9e <DMA_SetConfig+0x2e2>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <DMA_SetConfig+0x2e4>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d020      	beq.n	8008ce6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ca8:	f003 031f 	and.w	r3, r3, #31
 8008cac:	2201      	movs	r2, #1
 8008cae:	409a      	lsls	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b40      	cmp	r3, #64	@ 0x40
 8008cc2:	d108      	bne.n	8008cd6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	60da      	str	r2, [r3, #12]
}
 8008cd4:	e007      	b.n	8008ce6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	60da      	str	r2, [r3, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	58025408 	.word	0x58025408
 8008cf8:	5802541c 	.word	0x5802541c
 8008cfc:	58025430 	.word	0x58025430
 8008d00:	58025444 	.word	0x58025444
 8008d04:	58025458 	.word	0x58025458
 8008d08:	5802546c 	.word	0x5802546c
 8008d0c:	58025480 	.word	0x58025480
 8008d10:	58025494 	.word	0x58025494

08008d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a42      	ldr	r2, [pc, #264]	@ (8008e2c <DMA_CalcBaseAndBitshift+0x118>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d04a      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a41      	ldr	r2, [pc, #260]	@ (8008e30 <DMA_CalcBaseAndBitshift+0x11c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d045      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a3f      	ldr	r2, [pc, #252]	@ (8008e34 <DMA_CalcBaseAndBitshift+0x120>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d040      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a3e      	ldr	r2, [pc, #248]	@ (8008e38 <DMA_CalcBaseAndBitshift+0x124>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d03b      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a3c      	ldr	r2, [pc, #240]	@ (8008e3c <DMA_CalcBaseAndBitshift+0x128>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d036      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a3b      	ldr	r2, [pc, #236]	@ (8008e40 <DMA_CalcBaseAndBitshift+0x12c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d031      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a39      	ldr	r2, [pc, #228]	@ (8008e44 <DMA_CalcBaseAndBitshift+0x130>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d02c      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a38      	ldr	r2, [pc, #224]	@ (8008e48 <DMA_CalcBaseAndBitshift+0x134>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d027      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a36      	ldr	r2, [pc, #216]	@ (8008e4c <DMA_CalcBaseAndBitshift+0x138>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d022      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a35      	ldr	r2, [pc, #212]	@ (8008e50 <DMA_CalcBaseAndBitshift+0x13c>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d01d      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a33      	ldr	r2, [pc, #204]	@ (8008e54 <DMA_CalcBaseAndBitshift+0x140>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d018      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a32      	ldr	r2, [pc, #200]	@ (8008e58 <DMA_CalcBaseAndBitshift+0x144>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d013      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a30      	ldr	r2, [pc, #192]	@ (8008e5c <DMA_CalcBaseAndBitshift+0x148>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00e      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a2f      	ldr	r2, [pc, #188]	@ (8008e60 <DMA_CalcBaseAndBitshift+0x14c>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d009      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a2d      	ldr	r2, [pc, #180]	@ (8008e64 <DMA_CalcBaseAndBitshift+0x150>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <DMA_CalcBaseAndBitshift+0xa8>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a2c      	ldr	r2, [pc, #176]	@ (8008e68 <DMA_CalcBaseAndBitshift+0x154>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d101      	bne.n	8008dc0 <DMA_CalcBaseAndBitshift+0xac>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e000      	b.n	8008dc2 <DMA_CalcBaseAndBitshift+0xae>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d024      	beq.n	8008e10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	3b10      	subs	r3, #16
 8008dce:	4a27      	ldr	r2, [pc, #156]	@ (8008e6c <DMA_CalcBaseAndBitshift+0x158>)
 8008dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd4:	091b      	lsrs	r3, r3, #4
 8008dd6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f003 0307 	and.w	r3, r3, #7
 8008dde:	4a24      	ldr	r2, [pc, #144]	@ (8008e70 <DMA_CalcBaseAndBitshift+0x15c>)
 8008de0:	5cd3      	ldrb	r3, [r2, r3]
 8008de2:	461a      	mov	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d908      	bls.n	8008e00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e74 <DMA_CalcBaseAndBitshift+0x160>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	1d1a      	adds	r2, r3, #4
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dfe:	e00d      	b.n	8008e1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	4b1b      	ldr	r3, [pc, #108]	@ (8008e74 <DMA_CalcBaseAndBitshift+0x160>)
 8008e08:	4013      	ands	r3, r2
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e0e:	e005      	b.n	8008e1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	40020010 	.word	0x40020010
 8008e30:	40020028 	.word	0x40020028
 8008e34:	40020040 	.word	0x40020040
 8008e38:	40020058 	.word	0x40020058
 8008e3c:	40020070 	.word	0x40020070
 8008e40:	40020088 	.word	0x40020088
 8008e44:	400200a0 	.word	0x400200a0
 8008e48:	400200b8 	.word	0x400200b8
 8008e4c:	40020410 	.word	0x40020410
 8008e50:	40020428 	.word	0x40020428
 8008e54:	40020440 	.word	0x40020440
 8008e58:	40020458 	.word	0x40020458
 8008e5c:	40020470 	.word	0x40020470
 8008e60:	40020488 	.word	0x40020488
 8008e64:	400204a0 	.word	0x400204a0
 8008e68:	400204b8 	.word	0x400204b8
 8008e6c:	aaaaaaab 	.word	0xaaaaaaab
 8008e70:	08017ccc 	.word	0x08017ccc
 8008e74:	fffffc00 	.word	0xfffffc00

08008e78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d120      	bne.n	8008ece <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d858      	bhi.n	8008f46 <DMA_CheckFifoParam+0xce>
 8008e94:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <DMA_CheckFifoParam+0x24>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ead 	.word	0x08008ead
 8008ea0:	08008ebf 	.word	0x08008ebf
 8008ea4:	08008ead 	.word	0x08008ead
 8008ea8:	08008f47 	.word	0x08008f47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d048      	beq.n	8008f4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ebc:	e045      	b.n	8008f4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ec6:	d142      	bne.n	8008f4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ecc:	e03f      	b.n	8008f4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ed6:	d123      	bne.n	8008f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d838      	bhi.n	8008f52 <DMA_CheckFifoParam+0xda>
 8008ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee8 <DMA_CheckFifoParam+0x70>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008ef9 	.word	0x08008ef9
 8008eec:	08008eff 	.word	0x08008eff
 8008ef0:	08008ef9 	.word	0x08008ef9
 8008ef4:	08008f11 	.word	0x08008f11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	73fb      	strb	r3, [r7, #15]
        break;
 8008efc:	e030      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d025      	beq.n	8008f56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f0e:	e022      	b.n	8008f56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008f18:	d11f      	bne.n	8008f5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f1e:	e01c      	b.n	8008f5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d902      	bls.n	8008f2e <DMA_CheckFifoParam+0xb6>
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d003      	beq.n	8008f34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008f2c:	e018      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
        break;
 8008f32:	e015      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00e      	beq.n	8008f5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]
    break;
 8008f44:	e00b      	b.n	8008f5e <DMA_CheckFifoParam+0xe6>
        break;
 8008f46:	bf00      	nop
 8008f48:	e00a      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
        break;
 8008f4a:	bf00      	nop
 8008f4c:	e008      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
        break;
 8008f4e:	bf00      	nop
 8008f50:	e006      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
        break;
 8008f52:	bf00      	nop
 8008f54:	e004      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
        break;
 8008f56:	bf00      	nop
 8008f58:	e002      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
        break;
 8008f5a:	bf00      	nop
 8008f5c:	e000      	b.n	8008f60 <DMA_CheckFifoParam+0xe8>
    break;
 8008f5e:	bf00      	nop
    }
  }

  return status;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop

08008f70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a38      	ldr	r2, [pc, #224]	@ (8009064 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d022      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a36      	ldr	r2, [pc, #216]	@ (8009068 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d01d      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a35      	ldr	r2, [pc, #212]	@ (800906c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d018      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a33      	ldr	r2, [pc, #204]	@ (8009070 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d013      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a32      	ldr	r2, [pc, #200]	@ (8009074 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d00e      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a30      	ldr	r2, [pc, #192]	@ (8009078 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d009      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800907c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d004      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8009080 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d101      	bne.n	8008fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e000      	b.n	8008fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01a      	beq.n	800900e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	3b08      	subs	r3, #8
 8008fe0:	4a28      	ldr	r2, [pc, #160]	@ (8009084 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	4b26      	ldr	r3, [pc, #152]	@ (8009088 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008fee:	4413      	add	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a24      	ldr	r2, [pc, #144]	@ (800908c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008ffc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 031f 	and.w	r3, r3, #31
 8009004:	2201      	movs	r2, #1
 8009006:	409a      	lsls	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800900c:	e024      	b.n	8009058 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	3b10      	subs	r3, #16
 8009016:	4a1e      	ldr	r2, [pc, #120]	@ (8009090 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	091b      	lsrs	r3, r3, #4
 800901e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4a1c      	ldr	r2, [pc, #112]	@ (8009094 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d806      	bhi.n	8009036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	4a1b      	ldr	r2, [pc, #108]	@ (8009098 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d902      	bls.n	8009036 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3308      	adds	r3, #8
 8009034:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4b18      	ldr	r3, [pc, #96]	@ (800909c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	461a      	mov	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a16      	ldr	r2, [pc, #88]	@ (80090a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009048:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f003 031f 	and.w	r3, r3, #31
 8009050:	2201      	movs	r2, #1
 8009052:	409a      	lsls	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009058:	bf00      	nop
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	58025408 	.word	0x58025408
 8009068:	5802541c 	.word	0x5802541c
 800906c:	58025430 	.word	0x58025430
 8009070:	58025444 	.word	0x58025444
 8009074:	58025458 	.word	0x58025458
 8009078:	5802546c 	.word	0x5802546c
 800907c:	58025480 	.word	0x58025480
 8009080:	58025494 	.word	0x58025494
 8009084:	cccccccd 	.word	0xcccccccd
 8009088:	16009600 	.word	0x16009600
 800908c:	58025880 	.word	0x58025880
 8009090:	aaaaaaab 	.word	0xaaaaaaab
 8009094:	400204b8 	.word	0x400204b8
 8009098:	4002040f 	.word	0x4002040f
 800909c:	10008200 	.word	0x10008200
 80090a0:	40020880 	.word	0x40020880

080090a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d04a      	beq.n	8009150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d847      	bhi.n	8009150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a25      	ldr	r2, [pc, #148]	@ (800915c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d022      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a24      	ldr	r2, [pc, #144]	@ (8009160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d01d      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a22      	ldr	r2, [pc, #136]	@ (8009164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d018      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a21      	ldr	r2, [pc, #132]	@ (8009168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d013      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a1f      	ldr	r2, [pc, #124]	@ (800916c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00e      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d009      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a1c      	ldr	r2, [pc, #112]	@ (8009174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d004      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a1b      	ldr	r2, [pc, #108]	@ (8009178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d101      	bne.n	8009114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009110:	2301      	movs	r3, #1
 8009112:	e000      	b.n	8009116 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009114:	2300      	movs	r3, #0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4b17      	ldr	r3, [pc, #92]	@ (800917c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a15      	ldr	r2, [pc, #84]	@ (8009180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800912c:	671a      	str	r2, [r3, #112]	@ 0x70
 800912e:	e009      	b.n	8009144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4b14      	ldr	r3, [pc, #80]	@ (8009184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	461a      	mov	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a11      	ldr	r2, [pc, #68]	@ (8009188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009142:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3b01      	subs	r3, #1
 8009148:	2201      	movs	r2, #1
 800914a:	409a      	lsls	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	58025408 	.word	0x58025408
 8009160:	5802541c 	.word	0x5802541c
 8009164:	58025430 	.word	0x58025430
 8009168:	58025444 	.word	0x58025444
 800916c:	58025458 	.word	0x58025458
 8009170:	5802546c 	.word	0x5802546c
 8009174:	58025480 	.word	0x58025480
 8009178:	58025494 	.word	0x58025494
 800917c:	1600963f 	.word	0x1600963f
 8009180:	58025940 	.word	0x58025940
 8009184:	1000823f 	.word	0x1000823f
 8009188:	40020940 	.word	0x40020940

0800918c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	2b80      	cmp	r3, #128	@ 0x80
 80091a4:	d105      	bne.n	80091b2 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80091ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e315      	b.n	80097de <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80091bc:	2302      	movs	r3, #2
 80091be:	e30e      	b.n	80097de <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	f040 82fd 	bne.w	80097d0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a82      	ldr	r2, [pc, #520]	@ (80093f4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d04a      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a81      	ldr	r2, [pc, #516]	@ (80093f8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d045      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a7f      	ldr	r2, [pc, #508]	@ (80093fc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d040      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a7e      	ldr	r2, [pc, #504]	@ (8009400 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d03b      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a7c      	ldr	r2, [pc, #496]	@ (8009404 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d036      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a7b      	ldr	r2, [pc, #492]	@ (8009408 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d031      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a79      	ldr	r2, [pc, #484]	@ (800940c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d02c      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a78      	ldr	r2, [pc, #480]	@ (8009410 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d027      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a76      	ldr	r2, [pc, #472]	@ (8009414 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d022      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a75      	ldr	r2, [pc, #468]	@ (8009418 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d01d      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a73      	ldr	r2, [pc, #460]	@ (800941c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d018      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a72      	ldr	r2, [pc, #456]	@ (8009420 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d013      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a70      	ldr	r2, [pc, #448]	@ (8009424 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00e      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a6f      	ldr	r2, [pc, #444]	@ (8009428 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d009      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a6d      	ldr	r2, [pc, #436]	@ (800942c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d004      	beq.n	8009284 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a6c      	ldr	r2, [pc, #432]	@ (8009430 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d101      	bne.n	8009288 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8009284:	2301      	movs	r3, #1
 8009286:	e000      	b.n	800928a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8009288:	2300      	movs	r3, #0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d018      	beq.n	80092c0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800929c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	683a      	ldr	r2, [r7, #0]
 80092a4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092aa:	3308      	adds	r3, #8
 80092ac:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092b2:	f003 031f 	and.w	r3, r3, #31
 80092b6:	223f      	movs	r2, #63	@ 0x3f
 80092b8:	409a      	lsls	r2, r3
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	e018      	b.n	80092f2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6819      	ldr	r1, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	f248 0320 	movw	r3, #32800	@ 0x8020
 80092ce:	430b      	orrs	r3, r1
 80092d0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092de:	3304      	adds	r3, #4
 80092e0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092e6:	f003 031f 	and.w	r3, r3, #31
 80092ea:	2201      	movs	r2, #1
 80092ec:	409a      	lsls	r2, r3
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fb41 	bl	8009980 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a3c      	ldr	r2, [pc, #240]	@ (80093f4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d072      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a3a      	ldr	r2, [pc, #232]	@ (80093f8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d06d      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a39      	ldr	r2, [pc, #228]	@ (80093fc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d068      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a37      	ldr	r2, [pc, #220]	@ (8009400 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d063      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a36      	ldr	r2, [pc, #216]	@ (8009404 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d05e      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a34      	ldr	r2, [pc, #208]	@ (8009408 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d059      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a33      	ldr	r2, [pc, #204]	@ (800940c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d054      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a31      	ldr	r2, [pc, #196]	@ (8009410 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d04f      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a30      	ldr	r2, [pc, #192]	@ (8009414 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d04a      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a2e      	ldr	r2, [pc, #184]	@ (8009418 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d045      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a2d      	ldr	r2, [pc, #180]	@ (800941c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d040      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a2b      	ldr	r2, [pc, #172]	@ (8009420 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d03b      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a2a      	ldr	r2, [pc, #168]	@ (8009424 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d036      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a28      	ldr	r2, [pc, #160]	@ (8009428 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d031      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a27      	ldr	r2, [pc, #156]	@ (800942c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d02c      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a25      	ldr	r2, [pc, #148]	@ (8009430 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d027      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a24      	ldr	r2, [pc, #144]	@ (8009434 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d022      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a22      	ldr	r2, [pc, #136]	@ (8009438 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d01d      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a21      	ldr	r2, [pc, #132]	@ (800943c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d018      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009440 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d013      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009444 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d00e      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009448 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d009      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a1b      	ldr	r2, [pc, #108]	@ (800944c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d004      	beq.n	80093ee <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a19      	ldr	r2, [pc, #100]	@ (8009450 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d132      	bne.n	8009454 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e031      	b.n	8009456 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80093f2:	bf00      	nop
 80093f4:	40020010 	.word	0x40020010
 80093f8:	40020028 	.word	0x40020028
 80093fc:	40020040 	.word	0x40020040
 8009400:	40020058 	.word	0x40020058
 8009404:	40020070 	.word	0x40020070
 8009408:	40020088 	.word	0x40020088
 800940c:	400200a0 	.word	0x400200a0
 8009410:	400200b8 	.word	0x400200b8
 8009414:	40020410 	.word	0x40020410
 8009418:	40020428 	.word	0x40020428
 800941c:	40020440 	.word	0x40020440
 8009420:	40020458 	.word	0x40020458
 8009424:	40020470 	.word	0x40020470
 8009428:	40020488 	.word	0x40020488
 800942c:	400204a0 	.word	0x400204a0
 8009430:	400204b8 	.word	0x400204b8
 8009434:	58025408 	.word	0x58025408
 8009438:	5802541c 	.word	0x5802541c
 800943c:	58025430 	.word	0x58025430
 8009440:	58025444 	.word	0x58025444
 8009444:	58025458 	.word	0x58025458
 8009448:	5802546c 	.word	0x5802546c
 800944c:	58025480 	.word	0x58025480
 8009450:	58025494 	.word	0x58025494
 8009454:	2300      	movs	r3, #0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009462:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009468:	2b00      	cmp	r3, #0
 800946a:	d004      	beq.n	8009476 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009474:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a3b      	ldr	r2, [pc, #236]	@ (8009568 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d04a      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a39      	ldr	r2, [pc, #228]	@ (800956c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d045      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a38      	ldr	r2, [pc, #224]	@ (8009570 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d040      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a36      	ldr	r2, [pc, #216]	@ (8009574 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d03b      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a35      	ldr	r2, [pc, #212]	@ (8009578 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d036      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a33      	ldr	r2, [pc, #204]	@ (800957c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d031      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a32      	ldr	r2, [pc, #200]	@ (8009580 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d02c      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a30      	ldr	r2, [pc, #192]	@ (8009584 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d027      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a2f      	ldr	r2, [pc, #188]	@ (8009588 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d022      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a2d      	ldr	r2, [pc, #180]	@ (800958c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01d      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a2c      	ldr	r2, [pc, #176]	@ (8009590 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d018      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a2a      	ldr	r2, [pc, #168]	@ (8009594 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d013      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a29      	ldr	r2, [pc, #164]	@ (8009598 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d00e      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a27      	ldr	r2, [pc, #156]	@ (800959c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d009      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a26      	ldr	r2, [pc, #152]	@ (80095a0 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d004      	beq.n	8009516 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a24      	ldr	r2, [pc, #144]	@ (80095a4 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d101      	bne.n	800951a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8009516:	2301      	movs	r3, #1
 8009518:	e000      	b.n	800951c <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800951a:	2300      	movs	r3, #0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d043      	beq.n	80095a8 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f023 021e 	bic.w	r2, r3, #30
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f042 0216 	orr.w	r2, r2, #22
 8009532:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	695a      	ldr	r2, [r3, #20]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009542:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009548:	2b00      	cmp	r3, #0
 800954a:	d103      	bne.n	8009554 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009550:	2b00      	cmp	r3, #0
 8009552:	d043      	beq.n	80095dc <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0208 	orr.w	r2, r2, #8
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	e03a      	b.n	80095dc <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8009566:	bf00      	nop
 8009568:	40020010 	.word	0x40020010
 800956c:	40020028 	.word	0x40020028
 8009570:	40020040 	.word	0x40020040
 8009574:	40020058 	.word	0x40020058
 8009578:	40020070 	.word	0x40020070
 800957c:	40020088 	.word	0x40020088
 8009580:	400200a0 	.word	0x400200a0
 8009584:	400200b8 	.word	0x400200b8
 8009588:	40020410 	.word	0x40020410
 800958c:	40020428 	.word	0x40020428
 8009590:	40020440 	.word	0x40020440
 8009594:	40020458 	.word	0x40020458
 8009598:	40020470 	.word	0x40020470
 800959c:	40020488 	.word	0x40020488
 80095a0:	400204a0 	.word	0x400204a0
 80095a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f023 020e 	bic.w	r2, r3, #14
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 020a 	orr.w	r2, r2, #10
 80095ba:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d103      	bne.n	80095cc <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0204 	orr.w	r2, r2, #4
 80095da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a81      	ldr	r2, [pc, #516]	@ (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d072      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a80      	ldr	r2, [pc, #512]	@ (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d06d      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a7e      	ldr	r2, [pc, #504]	@ (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d068      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a7d      	ldr	r2, [pc, #500]	@ (80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d063      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a7b      	ldr	r2, [pc, #492]	@ (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d05e      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a7a      	ldr	r2, [pc, #488]	@ (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d059      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a78      	ldr	r2, [pc, #480]	@ (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d054      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a77      	ldr	r2, [pc, #476]	@ (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d04f      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a75      	ldr	r2, [pc, #468]	@ (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d04a      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a74      	ldr	r2, [pc, #464]	@ (800980c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d045      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a72      	ldr	r2, [pc, #456]	@ (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d040      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a71      	ldr	r2, [pc, #452]	@ (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d03b      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a6f      	ldr	r2, [pc, #444]	@ (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d036      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a6e      	ldr	r2, [pc, #440]	@ (800981c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d031      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a6c      	ldr	r2, [pc, #432]	@ (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d02c      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a6b      	ldr	r2, [pc, #428]	@ (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d027      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a69      	ldr	r2, [pc, #420]	@ (8009828 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d022      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a68      	ldr	r2, [pc, #416]	@ (800982c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d01d      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a66      	ldr	r2, [pc, #408]	@ (8009830 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d018      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a65      	ldr	r2, [pc, #404]	@ (8009834 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d013      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a63      	ldr	r2, [pc, #396]	@ (8009838 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00e      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a62      	ldr	r2, [pc, #392]	@ (800983c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d009      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a60      	ldr	r2, [pc, #384]	@ (8009840 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d004      	beq.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a5f      	ldr	r2, [pc, #380]	@ (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d101      	bne.n	80096d0 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e000      	b.n	80096d2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80096d0:	2300      	movs	r3, #0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01a      	beq.n	800970c <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d007      	beq.n	80096f4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80096f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d007      	beq.n	800970c <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009706:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800970a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a35      	ldr	r2, [pc, #212]	@ (80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d04a      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a34      	ldr	r2, [pc, #208]	@ (80097ec <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d045      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a32      	ldr	r2, [pc, #200]	@ (80097f0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d040      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a31      	ldr	r2, [pc, #196]	@ (80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d03b      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a2f      	ldr	r2, [pc, #188]	@ (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d036      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a2e      	ldr	r2, [pc, #184]	@ (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d031      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a2c      	ldr	r2, [pc, #176]	@ (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d02c      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a2b      	ldr	r2, [pc, #172]	@ (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d027      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a29      	ldr	r2, [pc, #164]	@ (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d022      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a28      	ldr	r2, [pc, #160]	@ (800980c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d01d      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a26      	ldr	r2, [pc, #152]	@ (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d018      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a25      	ldr	r2, [pc, #148]	@ (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d013      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a23      	ldr	r2, [pc, #140]	@ (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00e      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a22      	ldr	r2, [pc, #136]	@ (800981c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d009      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a20      	ldr	r2, [pc, #128]	@ (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d004      	beq.n	80097ac <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d108      	bne.n	80097be <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0201 	orr.w	r2, r2, #1
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	e00e      	b.n	80097dc <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0201 	orr.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	e005      	b.n	80097dc <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	40020010 	.word	0x40020010
 80097ec:	40020028 	.word	0x40020028
 80097f0:	40020040 	.word	0x40020040
 80097f4:	40020058 	.word	0x40020058
 80097f8:	40020070 	.word	0x40020070
 80097fc:	40020088 	.word	0x40020088
 8009800:	400200a0 	.word	0x400200a0
 8009804:	400200b8 	.word	0x400200b8
 8009808:	40020410 	.word	0x40020410
 800980c:	40020428 	.word	0x40020428
 8009810:	40020440 	.word	0x40020440
 8009814:	40020458 	.word	0x40020458
 8009818:	40020470 	.word	0x40020470
 800981c:	40020488 	.word	0x40020488
 8009820:	400204a0 	.word	0x400204a0
 8009824:	400204b8 	.word	0x400204b8
 8009828:	58025408 	.word	0x58025408
 800982c:	5802541c 	.word	0x5802541c
 8009830:	58025430 	.word	0x58025430
 8009834:	58025444 	.word	0x58025444
 8009838:	58025458 	.word	0x58025458
 800983c:	5802546c 	.word	0x5802546c
 8009840:	58025480 	.word	0x58025480
 8009844:	58025494 	.word	0x58025494

08009848 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a39      	ldr	r2, [pc, #228]	@ (8009940 <HAL_DMAEx_ChangeMemory+0xf8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d04a      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a37      	ldr	r2, [pc, #220]	@ (8009944 <HAL_DMAEx_ChangeMemory+0xfc>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d045      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a36      	ldr	r2, [pc, #216]	@ (8009948 <HAL_DMAEx_ChangeMemory+0x100>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d040      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a34      	ldr	r2, [pc, #208]	@ (800994c <HAL_DMAEx_ChangeMemory+0x104>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d03b      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a33      	ldr	r2, [pc, #204]	@ (8009950 <HAL_DMAEx_ChangeMemory+0x108>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d036      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a31      	ldr	r2, [pc, #196]	@ (8009954 <HAL_DMAEx_ChangeMemory+0x10c>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d031      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a30      	ldr	r2, [pc, #192]	@ (8009958 <HAL_DMAEx_ChangeMemory+0x110>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d02c      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a2e      	ldr	r2, [pc, #184]	@ (800995c <HAL_DMAEx_ChangeMemory+0x114>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d027      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009960 <HAL_DMAEx_ChangeMemory+0x118>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d022      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a2b      	ldr	r2, [pc, #172]	@ (8009964 <HAL_DMAEx_ChangeMemory+0x11c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d01d      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a2a      	ldr	r2, [pc, #168]	@ (8009968 <HAL_DMAEx_ChangeMemory+0x120>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d018      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a28      	ldr	r2, [pc, #160]	@ (800996c <HAL_DMAEx_ChangeMemory+0x124>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d013      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a27      	ldr	r2, [pc, #156]	@ (8009970 <HAL_DMAEx_ChangeMemory+0x128>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00e      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a25      	ldr	r2, [pc, #148]	@ (8009974 <HAL_DMAEx_ChangeMemory+0x12c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d009      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a24      	ldr	r2, [pc, #144]	@ (8009978 <HAL_DMAEx_ChangeMemory+0x130>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d004      	beq.n	80098f6 <HAL_DMAEx_ChangeMemory+0xae>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a22      	ldr	r2, [pc, #136]	@ (800997c <HAL_DMAEx_ChangeMemory+0x134>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d101      	bne.n	80098fa <HAL_DMAEx_ChangeMemory+0xb2>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <HAL_DMAEx_ChangeMemory+0xb4>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00c      	beq.n	800991a <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d104      	bne.n	8009910 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	60da      	str	r2, [r3, #12]
 800990e:	e010      	b.n	8009932 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	611a      	str	r2, [r3, #16]
 8009918:	e00b      	b.n	8009932 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d104      	bne.n	800992a <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	60da      	str	r2, [r3, #12]
 8009928:	e003      	b.n	8009932 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	40020010 	.word	0x40020010
 8009944:	40020028 	.word	0x40020028
 8009948:	40020040 	.word	0x40020040
 800994c:	40020058 	.word	0x40020058
 8009950:	40020070 	.word	0x40020070
 8009954:	40020088 	.word	0x40020088
 8009958:	400200a0 	.word	0x400200a0
 800995c:	400200b8 	.word	0x400200b8
 8009960:	40020410 	.word	0x40020410
 8009964:	40020428 	.word	0x40020428
 8009968:	40020440 	.word	0x40020440
 800996c:	40020458 	.word	0x40020458
 8009970:	40020470 	.word	0x40020470
 8009974:	40020488 	.word	0x40020488
 8009978:	400204a0 	.word	0x400204a0
 800997c:	400204b8 	.word	0x400204b8

08009980 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a46      	ldr	r2, [pc, #280]	@ (8009aac <DMA_MultiBufferSetConfig+0x12c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d04a      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a44      	ldr	r2, [pc, #272]	@ (8009ab0 <DMA_MultiBufferSetConfig+0x130>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d045      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a43      	ldr	r2, [pc, #268]	@ (8009ab4 <DMA_MultiBufferSetConfig+0x134>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d040      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a41      	ldr	r2, [pc, #260]	@ (8009ab8 <DMA_MultiBufferSetConfig+0x138>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d03b      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a40      	ldr	r2, [pc, #256]	@ (8009abc <DMA_MultiBufferSetConfig+0x13c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d036      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a3e      	ldr	r2, [pc, #248]	@ (8009ac0 <DMA_MultiBufferSetConfig+0x140>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d031      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a3d      	ldr	r2, [pc, #244]	@ (8009ac4 <DMA_MultiBufferSetConfig+0x144>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d02c      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a3b      	ldr	r2, [pc, #236]	@ (8009ac8 <DMA_MultiBufferSetConfig+0x148>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d027      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a3a      	ldr	r2, [pc, #232]	@ (8009acc <DMA_MultiBufferSetConfig+0x14c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d022      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a38      	ldr	r2, [pc, #224]	@ (8009ad0 <DMA_MultiBufferSetConfig+0x150>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d01d      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a37      	ldr	r2, [pc, #220]	@ (8009ad4 <DMA_MultiBufferSetConfig+0x154>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d018      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a35      	ldr	r2, [pc, #212]	@ (8009ad8 <DMA_MultiBufferSetConfig+0x158>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d013      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a34      	ldr	r2, [pc, #208]	@ (8009adc <DMA_MultiBufferSetConfig+0x15c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00e      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a32      	ldr	r2, [pc, #200]	@ (8009ae0 <DMA_MultiBufferSetConfig+0x160>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d009      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a31      	ldr	r2, [pc, #196]	@ (8009ae4 <DMA_MultiBufferSetConfig+0x164>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d004      	beq.n	8009a2e <DMA_MultiBufferSetConfig+0xae>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a2f      	ldr	r2, [pc, #188]	@ (8009ae8 <DMA_MultiBufferSetConfig+0x168>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d101      	bne.n	8009a32 <DMA_MultiBufferSetConfig+0xb2>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <DMA_MultiBufferSetConfig+0xb4>
 8009a32:	2300      	movs	r3, #0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d019      	beq.n	8009a6c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b40      	cmp	r3, #64	@ 0x40
 8009a46:	d108      	bne.n	8009a5a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8009a58:	e021      	b.n	8009a9e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	60da      	str	r2, [r3, #12]
}
 8009a6a:	e018      	b.n	8009a9e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b40      	cmp	r3, #64	@ 0x40
 8009a7a:	d108      	bne.n	8009a8e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	60da      	str	r2, [r3, #12]
}
 8009a8c:	e007      	b.n	8009a9e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	60da      	str	r2, [r3, #12]
}
 8009a9e:	bf00      	nop
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	40020010 	.word	0x40020010
 8009ab0:	40020028 	.word	0x40020028
 8009ab4:	40020040 	.word	0x40020040
 8009ab8:	40020058 	.word	0x40020058
 8009abc:	40020070 	.word	0x40020070
 8009ac0:	40020088 	.word	0x40020088
 8009ac4:	400200a0 	.word	0x400200a0
 8009ac8:	400200b8 	.word	0x400200b8
 8009acc:	40020410 	.word	0x40020410
 8009ad0:	40020428 	.word	0x40020428
 8009ad4:	40020440 	.word	0x40020440
 8009ad8:	40020458 	.word	0x40020458
 8009adc:	40020470 	.word	0x40020470
 8009ae0:	40020488 	.word	0x40020488
 8009ae4:	400204a0 	.word	0x400204a0
 8009ae8:	400204b8 	.word	0x400204b8

08009aec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e0e3      	b.n	8009cc6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d106      	bne.n	8009b16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2223      	movs	r2, #35	@ 0x23
 8009b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7f9 f91b 	bl	8002d4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b16:	4b6e      	ldr	r3, [pc, #440]	@ (8009cd0 <HAL_ETH_Init+0x1e4>)
 8009b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b1c:	4a6c      	ldr	r2, [pc, #432]	@ (8009cd0 <HAL_ETH_Init+0x1e4>)
 8009b1e:	f043 0302 	orr.w	r3, r3, #2
 8009b22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009b26:	4b6a      	ldr	r3, [pc, #424]	@ (8009cd0 <HAL_ETH_Init+0x1e4>)
 8009b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	60bb      	str	r3, [r7, #8]
 8009b32:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7a1b      	ldrb	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d103      	bne.n	8009b44 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f7fb ffa9 	bl	8005a94 <HAL_SYSCFG_ETHInterfaceSelect>
 8009b42:	e003      	b.n	8009b4c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009b44:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009b48:	f7fb ffa4 	bl	8005a94 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009b4c:	4b61      	ldr	r3, [pc, #388]	@ (8009cd4 <HAL_ETH_Init+0x1e8>)
 8009b4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	f043 0301 	orr.w	r3, r3, #1
 8009b62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b68:	f7fb ff58 	bl	8005a1c <HAL_GetTick>
 8009b6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009b6e:	e011      	b.n	8009b94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009b70:	f7fb ff54 	bl	8005a1c <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009b7e:	d909      	bls.n	8009b94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2204      	movs	r2, #4
 8009b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	22e0      	movs	r2, #224	@ 0xe0
 8009b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e098      	b.n	8009cc6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1e4      	bne.n	8009b70 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fa4e 	bl	800a048 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009bac:	f002 fe48 	bl	800c840 <HAL_RCC_GetHCLKFreq>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4a49      	ldr	r2, [pc, #292]	@ (8009cd8 <HAL_ETH_Init+0x1ec>)
 8009bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb8:	0c9a      	lsrs	r2, r3, #18
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3a01      	subs	r2, #1
 8009bc0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc31 	bl	800a42c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009bd6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	6812      	ldr	r2, [r2, #0]
 8009bde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009be2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009be6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d009      	beq.n	8009c0a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	22e0      	movs	r2, #224	@ 0xe0
 8009c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e05d      	b.n	8009cc6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c12:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009c16:	4b31      	ldr	r3, [pc, #196]	@ (8009cdc <HAL_ETH_Init+0x1f0>)
 8009c18:	4013      	ands	r3, r2
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6952      	ldr	r2, [r2, #20]
 8009c1e:	0051      	lsls	r1, r2, #1
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	430b      	orrs	r3, r1
 8009c26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c2a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fc99 	bl	800a566 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fcdf 	bl	800a5f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	3305      	adds	r3, #5
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	021a      	lsls	r2, r3, #8
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	3303      	adds	r3, #3
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	061a      	lsls	r2, r3, #24
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	3302      	adds	r3, #2
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	041b      	lsls	r3, r3, #16
 8009c6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	3301      	adds	r3, #1
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009c86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009c88:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	4b11      	ldr	r3, [pc, #68]	@ (8009ce0 <HAL_ETH_Init+0x1f4>)
 8009c9a:	430b      	orrs	r3, r1
 8009c9c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce4 <HAL_ETH_Init+0x1f8>)
 8009cae:	430b      	orrs	r3, r1
 8009cb0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2210      	movs	r2, #16
 8009cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	58024400 	.word	0x58024400
 8009cd4:	58000400 	.word	0x58000400
 8009cd8:	431bde83 	.word	0x431bde83
 8009cdc:	ffff8001 	.word	0xffff8001
 8009ce0:	0c020060 	.word	0x0c020060
 8009ce4:	0c20c000 	.word	0x0c20c000

08009ce8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cf6:	2b10      	cmp	r3, #16
 8009cf8:	d153      	bne.n	8009da2 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2223      	movs	r2, #35	@ 0x23
 8009cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2204      	movs	r2, #4
 8009d06:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f90c 	bl	8009f26 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f042 0202 	orr.w	r2, r2, #2
 8009d1c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f042 0201 	orr.w	r2, r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6812      	ldr	r2, [r2, #0]
 8009d52:	f043 0301 	orr.w	r3, r3, #1
 8009d56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d5a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	6812      	ldr	r2, [r2, #0]
 8009d6e:	f043 0301 	orr.w	r3, r3, #1
 8009d72:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d76:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d82:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	6812      	ldr	r2, [r2, #0]
 8009d8a:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8009d8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d92:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2223      	movs	r2, #35	@ 0x23
 8009d9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	e000      	b.n	8009da4 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
  }
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d109      	bne.n	8009dd8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dca:	f043 0201 	orr.w	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e0a2      	b.n	8009f1e <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dde:	2b23      	cmp	r3, #35	@ 0x23
 8009de0:	d001      	beq.n	8009de6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e09b      	b.n	8009f1e <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	3212      	adds	r2, #18
 8009df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dfc:	f1c3 0304 	rsb	r3, r3, #4
 8009e00:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009e02:	e064      	b.n	8009ece <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d007      	beq.n	8009e20 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d103      	bne.n	8009e34 <HAL_ETH_ReadData+0x88>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d03a      	beq.n	8009eaa <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d005      	beq.n	8009e4c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d005      	beq.n	8009e74 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8009e70:	2301      	movs	r3, #1
 8009e72:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8009e84:	461a      	mov	r2, r3
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f000 f8cf 	bl	800a02c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e92:	1c5a      	adds	r2, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	441a      	add	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	3301      	adds	r3, #1
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d902      	bls.n	8009ebc <HAL_ETH_ReadData+0x110>
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	3b04      	subs	r3, #4
 8009eba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	3212      	adds	r2, #18
 8009ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db06      	blt.n	8009ee4 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d202      	bcs.n	8009ee4 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8009ede:	7cfb      	ldrb	r3, [r7, #19]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d08f      	beq.n	8009e04 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	441a      	add	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f814 	bl	8009f26 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8009f04:	7cfb      	ldrb	r3, [r7, #19]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d108      	bne.n	8009f1c <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e000      	b.n	8009f1e <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3720      	adds	r7, #32
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b088      	sub	sp, #32
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8009f32:	2301      	movs	r3, #1
 8009f34:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f3a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	3212      	adds	r2, #18
 8009f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f46:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f4c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8009f4e:	e038      	b.n	8009fc2 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d112      	bne.n	8009f7e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8009f58:	f107 0308 	add.w	r3, r7, #8
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f85b 	bl	800a018 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	74fb      	strb	r3, [r7, #19]
 8009f6c:	e007      	b.n	8009f7e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	461a      	mov	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8009f7e:	7cfb      	ldrb	r3, [r7, #19]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01e      	beq.n	8009fc2 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d004      	beq.n	8009f96 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8009f92:	60da      	str	r2, [r3, #12]
 8009f94:	e003      	b.n	8009f9e <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8009f9c:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	61fb      	str	r3, [r7, #28]
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d902      	bls.n	8009fb0 <ETH_UpdateDescriptor+0x8a>
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	3b04      	subs	r3, #4
 8009fae:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	3212      	adds	r2, #18
 8009fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fba:	617b      	str	r3, [r7, #20]
      desccount--;
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <ETH_UpdateDescriptor+0xa8>
 8009fc8:	7cfb      	ldrb	r3, [r7, #19]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1c0      	bne.n	8009f50 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d01b      	beq.n	800a010 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	f003 0303 	and.w	r3, r3, #3
 8009fe0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8009fe2:	f3bf 8f5f 	dmb	sy
}
 8009fe6:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6919      	ldr	r1, [r3, #16]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	4413      	add	r3, r2
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	18ca      	adds	r2, r1, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a000:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800a010:	bf00      	nop
 800a012:	3720      	adds	r7, #32
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_ETH_RxAllocateCallback>:
  * @brief  Rx Allocate callback.
  * @param  buff: pointer to allocated buffer
  * @retval None
  */
__weak void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxAllocateCallback could be implemented in the user file
  */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_ETH_RxLinkCallback>:
  * @param  buff: pointer to received data
  * @param  Length: received data length
  * @retval None
  */
__weak void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	807b      	strh	r3, [r7, #2]
  UNUSED(buff);
  UNUSED(Length);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxLinkCallback could be implemented in the user file
  */
}
 800a03a:	bf00      	nop
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
	...

0800a048 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a058:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a060:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a062:	f002 fbed 	bl	800c840 <HAL_RCC_GetHCLKFreq>
 800a066:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0d4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d804      	bhi.n	800a07a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e022      	b.n	800a0c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	4a16      	ldr	r2, [pc, #88]	@ (800a0d8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d204      	bcs.n	800a08c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	e019      	b.n	800a0c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4a13      	ldr	r2, [pc, #76]	@ (800a0dc <HAL_ETH_SetMDIOClockRange+0x94>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d915      	bls.n	800a0c0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	4a12      	ldr	r2, [pc, #72]	@ (800a0e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d804      	bhi.n	800a0a6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e00c      	b.n	800a0c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	4a0e      	ldr	r2, [pc, #56]	@ (800a0e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d804      	bhi.n	800a0b8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	e003      	b.n	800a0c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800a0be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	02160ebf 	.word	0x02160ebf
 800a0d8:	03938700 	.word	0x03938700
 800a0dc:	05f5e0ff 	.word	0x05f5e0ff
 800a0e0:	08f0d17f 	.word	0x08f0d17f
 800a0e4:	0ee6b27f 	.word	0x0ee6b27f

0800a0e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a0fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	791b      	ldrb	r3, [r3, #4]
 800a100:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a102:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	7b1b      	ldrb	r3, [r3, #12]
 800a108:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a10a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	7b5b      	ldrb	r3, [r3, #13]
 800a110:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a112:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	7b9b      	ldrb	r3, [r3, #14]
 800a118:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a11a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	7bdb      	ldrb	r3, [r3, #15]
 800a120:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a122:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	7c12      	ldrb	r2, [r2, #16]
 800a128:	2a00      	cmp	r2, #0
 800a12a:	d102      	bne.n	800a132 <ETH_SetMACConfig+0x4a>
 800a12c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a130:	e000      	b.n	800a134 <ETH_SetMACConfig+0x4c>
 800a132:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a134:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	7c52      	ldrb	r2, [r2, #17]
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	d102      	bne.n	800a144 <ETH_SetMACConfig+0x5c>
 800a13e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a142:	e000      	b.n	800a146 <ETH_SetMACConfig+0x5e>
 800a144:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a146:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	7c9b      	ldrb	r3, [r3, #18]
 800a14c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a14e:	431a      	orrs	r2, r3
               macconf->Speed |
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a154:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a15a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	7f1b      	ldrb	r3, [r3, #28]
 800a160:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	7f5b      	ldrb	r3, [r3, #29]
 800a168:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a16a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	7f92      	ldrb	r2, [r2, #30]
 800a170:	2a00      	cmp	r2, #0
 800a172:	d102      	bne.n	800a17a <ETH_SetMACConfig+0x92>
 800a174:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a178:	e000      	b.n	800a17c <ETH_SetMACConfig+0x94>
 800a17a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a17c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	7fdb      	ldrb	r3, [r3, #31]
 800a182:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a184:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d102      	bne.n	800a196 <ETH_SetMACConfig+0xae>
 800a190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a194:	e000      	b.n	800a198 <ETH_SetMACConfig+0xb0>
 800a196:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a198:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a19e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a1a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	4b56      	ldr	r3, [pc, #344]	@ (800a314 <ETH_SetMACConfig+0x22c>)
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6812      	ldr	r2, [r2, #0]
 800a1c0:	68f9      	ldr	r1, [r7, #12]
 800a1c2:	430b      	orrs	r3, r1
 800a1c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a1d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a1de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a1e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a1e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d102      	bne.n	800a1fa <ETH_SetMACConfig+0x112>
 800a1f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a1f8:	e000      	b.n	800a1fc <ETH_SetMACConfig+0x114>
 800a1fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a1fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	4b42      	ldr	r3, [pc, #264]	@ (800a318 <ETH_SetMACConfig+0x230>)
 800a20e:	4013      	ands	r3, r2
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6812      	ldr	r2, [r2, #0]
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	430b      	orrs	r3, r1
 800a218:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a220:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a226:	4313      	orrs	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	4b3a      	ldr	r3, [pc, #232]	@ (800a31c <ETH_SetMACConfig+0x234>)
 800a232:	4013      	ands	r3, r2
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	68f9      	ldr	r1, [r7, #12]
 800a23a:	430b      	orrs	r3, r1
 800a23c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a244:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a24a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800a252:	2a00      	cmp	r2, #0
 800a254:	d101      	bne.n	800a25a <ETH_SetMACConfig+0x172>
 800a256:	2280      	movs	r2, #128	@ 0x80
 800a258:	e000      	b.n	800a25c <ETH_SetMACConfig+0x174>
 800a25a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a25c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a262:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a26e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800a272:	4013      	ands	r3, r2
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	68f9      	ldr	r1, [r7, #12]
 800a27a:	430b      	orrs	r3, r1
 800a27c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a284:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a28c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a29a:	f023 0103 	bic.w	r1, r3, #3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a2b2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	d101      	bne.n	800a2d6 <ETH_SetMACConfig+0x1ee>
 800a2d2:	2240      	movs	r2, #64	@ 0x40
 800a2d4:	e000      	b.n	800a2d8 <ETH_SetMACConfig+0x1f0>
 800a2d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a2d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a2e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a2e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800a2ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a2f8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	430a      	orrs	r2, r1
 800a304:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800a308:	bf00      	nop
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	00048083 	.word	0x00048083
 800a318:	c0f88000 	.word	0xc0f88000
 800a31c:	fffffef0 	.word	0xfffffef0

0800a320 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b38      	ldr	r3, [pc, #224]	@ (800a418 <ETH_SetDMAConfig+0xf8>)
 800a336:	4013      	ands	r3, r2
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	6811      	ldr	r1, [r2, #0]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	430b      	orrs	r3, r1
 800a342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a346:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	791b      	ldrb	r3, [r3, #4]
 800a34c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a352:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	7b1b      	ldrb	r3, [r3, #12]
 800a358:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	4b2c      	ldr	r3, [pc, #176]	@ (800a41c <ETH_SetDMAConfig+0xfc>)
 800a36a:	4013      	ands	r3, r2
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	430b      	orrs	r3, r1
 800a374:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a378:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	7b5b      	ldrb	r3, [r3, #13]
 800a37e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a390:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800a394:	4b22      	ldr	r3, [pc, #136]	@ (800a420 <ETH_SetDMAConfig+0x100>)
 800a396:	4013      	ands	r3, r2
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	6812      	ldr	r2, [r2, #0]
 800a39c:	68f9      	ldr	r1, [r7, #12]
 800a39e:	430b      	orrs	r3, r1
 800a3a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3a4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	7d1b      	ldrb	r3, [r3, #20]
 800a3b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	7f5b      	ldrb	r3, [r3, #29]
 800a3b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800a3ca:	4b16      	ldr	r3, [pc, #88]	@ (800a424 <ETH_SetDMAConfig+0x104>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3da:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	7f1b      	ldrb	r3, [r3, #28]
 800a3e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a3f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a428 <ETH_SetDMAConfig+0x108>)
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	68f9      	ldr	r1, [r7, #12]
 800a402:	430b      	orrs	r3, r1
 800a404:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a408:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800a40c:	bf00      	nop
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	ffff87fd 	.word	0xffff87fd
 800a41c:	ffff2ffe 	.word	0xffff2ffe
 800a420:	fffec000 	.word	0xfffec000
 800a424:	ffc0efef 	.word	0xffc0efef
 800a428:	7fc0ffff 	.word	0x7fc0ffff

0800a42c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b0a4      	sub	sp, #144	@ 0x90
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a434:	2301      	movs	r3, #1
 800a436:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a43a:	2300      	movs	r3, #0
 800a43c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a43e:	2300      	movs	r3, #0
 800a440:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a444:	2300      	movs	r3, #0
 800a446:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a44a:	2301      	movs	r3, #1
 800a44c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a450:	2301      	movs	r3, #1
 800a452:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a456:	2301      	movs	r3, #1
 800a458:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a45c:	2300      	movs	r3, #0
 800a45e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a462:	2301      	movs	r3, #1
 800a464:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a46c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800a474:	2300      	movs	r3, #0
 800a476:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a478:	2300      	movs	r3, #0
 800a47a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a47e:	2300      	movs	r3, #0
 800a480:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800a484:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800a488:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a490:	2300      	movs	r3, #0
 800a492:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800a494:	2301      	movs	r3, #1
 800a496:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a49a:	2300      	movs	r3, #0
 800a49c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a4d6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a4dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a4e0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a500:	2301      	movs	r3, #1
 800a502:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a506:	2300      	movs	r3, #0
 800a508:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fde6 	bl	800a0e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a51c:	2301      	movs	r3, #1
 800a51e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a520:	2301      	movs	r3, #1
 800a522:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a524:	2300      	movs	r3, #0
 800a526:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a528:	2300      	movs	r3, #0
 800a52a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a52e:	2300      	movs	r3, #0
 800a530:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a532:	2300      	movs	r3, #0
 800a534:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a536:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a53a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a53c:	2300      	movs	r3, #0
 800a53e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a540:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a544:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a546:	2300      	movs	r3, #0
 800a548:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a54c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800a550:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a552:	f107 0308 	add.w	r3, r7, #8
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff fee1 	bl	800a320 <ETH_SetDMAConfig>
}
 800a55e:	bf00      	nop
 800a560:	3790      	adds	r7, #144	@ 0x90
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a566:	b480      	push	{r7}
 800a568:	b085      	sub	sp, #20
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a56e:	2300      	movs	r3, #0
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	e01d      	b.n	800a5b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68d9      	ldr	r1, [r3, #12]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	4613      	mov	r3, r2
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	4413      	add	r3, r2
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	440b      	add	r3, r1
 800a584:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2200      	movs	r2, #0
 800a590:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2200      	movs	r2, #0
 800a59c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	3206      	adds	r2, #6
 800a5a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d9de      	bls.n	800a574 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5d8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e023      	b.n	800a64e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6919      	ldr	r1, [r3, #16]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4613      	mov	r3, r2
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	4413      	add	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	440b      	add	r3, r1
 800a616:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2200      	movs	r2, #0
 800a628:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2200      	movs	r2, #0
 800a62e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2200      	movs	r2, #0
 800a63a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a63c:	68b9      	ldr	r1, [r7, #8]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	3212      	adds	r2, #18
 800a644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3301      	adds	r3, #1
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b03      	cmp	r3, #3
 800a652:	d9d8      	bls.n	800a606 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a67a:	461a      	mov	r2, r3
 800a67c:	2303      	movs	r3, #3
 800a67e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691a      	ldr	r2, [r3, #16]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a68e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6a2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b087      	sub	sp, #28
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	607a      	str	r2, [r7, #4]
 800a6be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e00a      	b.n	800a6e4 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800a6ce:	7afb      	ldrb	r3, [r7, #11]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	605a      	str	r2, [r3, #4]
      break;
 800a6da:	e002      	b.n	800a6e2 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e0:	bf00      	nop
  }

  return status;
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e003      	b.n	800a70c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a70a:	2300      	movs	r3, #0
  }
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 031f 	and.w	r3, r3, #31
 800a734:	2201      	movs	r2, #1
 800a736:	fa02 f303 	lsl.w	r3, r2, r3
 800a73a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800a73c:	f7fb fb16 	bl	8005d6c <HAL_GetCurrentCPUID>
 800a740:	4603      	mov	r3, r0
 800a742:	2b03      	cmp	r3, #3
 800a744:	d105      	bne.n	800a752 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	011a      	lsls	r2, r3, #4
 800a74a:	4b0f      	ldr	r3, [pc, #60]	@ (800a788 <HAL_EXTI_IRQHandler+0x70>)
 800a74c:	4413      	add	r3, r2
 800a74e:	617b      	str	r3, [r7, #20]
 800a750:	e004      	b.n	800a75c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	011a      	lsls	r2, r3, #4
 800a756:	4b0d      	ldr	r3, [pc, #52]	@ (800a78c <HAL_EXTI_IRQHandler+0x74>)
 800a758:	4413      	add	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4013      	ands	r3, r2
 800a764:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d009      	beq.n	800a780 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	4798      	blx	r3
    }
  }
}
 800a780:	bf00      	nop
 800a782:	3718      	adds	r7, #24
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	58000088 	.word	0x58000088
 800a78c:	580000c8 	.word	0x580000c8

0800a790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a790:	b480      	push	{r7}
 800a792:	b089      	sub	sp, #36	@ 0x24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a79a:	2300      	movs	r3, #0
 800a79c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a79e:	4b89      	ldr	r3, [pc, #548]	@ (800a9c4 <HAL_GPIO_Init+0x234>)
 800a7a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a7a2:	e194      	b.n	800aace <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b0:	4013      	ands	r3, r2
 800a7b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 8186 	beq.w	800aac8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	f003 0303 	and.w	r3, r3, #3
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d005      	beq.n	800a7d4 <HAL_GPIO_Init+0x44>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d130      	bne.n	800a836 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	2203      	movs	r2, #3
 800a7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e4:	43db      	mvns	r3, r3
 800a7e6:	69ba      	ldr	r2, [r7, #24]
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	69ba      	ldr	r2, [r7, #24]
 800a802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a80a:	2201      	movs	r2, #1
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	43db      	mvns	r3, r3
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4013      	ands	r3, r2
 800a818:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	091b      	lsrs	r3, r3, #4
 800a820:	f003 0201 	and.w	r2, r3, #1
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	fa02 f303 	lsl.w	r3, r2, r3
 800a82a:	69ba      	ldr	r2, [r7, #24]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f003 0303 	and.w	r3, r3, #3
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d017      	beq.n	800a872 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	2203      	movs	r2, #3
 800a84e:	fa02 f303 	lsl.w	r3, r2, r3
 800a852:	43db      	mvns	r3, r3
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	4013      	ands	r3, r2
 800a858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	fa02 f303 	lsl.w	r3, r2, r3
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	4313      	orrs	r3, r2
 800a86a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d123      	bne.n	800a8c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	08da      	lsrs	r2, r3, #3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3208      	adds	r2, #8
 800a886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	f003 0307 	and.w	r3, r3, #7
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	220f      	movs	r2, #15
 800a896:	fa02 f303 	lsl.w	r3, r2, r3
 800a89a:	43db      	mvns	r3, r3
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	691a      	ldr	r2, [r3, #16]
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	f003 0307 	and.w	r3, r3, #7
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	08da      	lsrs	r2, r3, #3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	3208      	adds	r2, #8
 800a8c0:	69b9      	ldr	r1, [r7, #24]
 800a8c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	2203      	movs	r2, #3
 800a8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d6:	43db      	mvns	r3, r3
 800a8d8:	69ba      	ldr	r2, [r7, #24]
 800a8da:	4013      	ands	r3, r2
 800a8dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f003 0203 	and.w	r2, r3, #3
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 80e0 	beq.w	800aac8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a908:	4b2f      	ldr	r3, [pc, #188]	@ (800a9c8 <HAL_GPIO_Init+0x238>)
 800a90a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a90e:	4a2e      	ldr	r2, [pc, #184]	@ (800a9c8 <HAL_GPIO_Init+0x238>)
 800a910:	f043 0302 	orr.w	r3, r3, #2
 800a914:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a918:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c8 <HAL_GPIO_Init+0x238>)
 800a91a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a926:	4a29      	ldr	r2, [pc, #164]	@ (800a9cc <HAL_GPIO_Init+0x23c>)
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	089b      	lsrs	r3, r3, #2
 800a92c:	3302      	adds	r3, #2
 800a92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	220f      	movs	r2, #15
 800a93e:	fa02 f303 	lsl.w	r3, r2, r3
 800a942:	43db      	mvns	r3, r3
 800a944:	69ba      	ldr	r2, [r7, #24]
 800a946:	4013      	ands	r3, r2
 800a948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a20      	ldr	r2, [pc, #128]	@ (800a9d0 <HAL_GPIO_Init+0x240>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d052      	beq.n	800a9f8 <HAL_GPIO_Init+0x268>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a1f      	ldr	r2, [pc, #124]	@ (800a9d4 <HAL_GPIO_Init+0x244>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d031      	beq.n	800a9be <HAL_GPIO_Init+0x22e>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a1e      	ldr	r2, [pc, #120]	@ (800a9d8 <HAL_GPIO_Init+0x248>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d02b      	beq.n	800a9ba <HAL_GPIO_Init+0x22a>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a1d      	ldr	r2, [pc, #116]	@ (800a9dc <HAL_GPIO_Init+0x24c>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d025      	beq.n	800a9b6 <HAL_GPIO_Init+0x226>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a1c      	ldr	r2, [pc, #112]	@ (800a9e0 <HAL_GPIO_Init+0x250>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d01f      	beq.n	800a9b2 <HAL_GPIO_Init+0x222>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a1b      	ldr	r2, [pc, #108]	@ (800a9e4 <HAL_GPIO_Init+0x254>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d019      	beq.n	800a9ae <HAL_GPIO_Init+0x21e>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a1a      	ldr	r2, [pc, #104]	@ (800a9e8 <HAL_GPIO_Init+0x258>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d013      	beq.n	800a9aa <HAL_GPIO_Init+0x21a>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a19      	ldr	r2, [pc, #100]	@ (800a9ec <HAL_GPIO_Init+0x25c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00d      	beq.n	800a9a6 <HAL_GPIO_Init+0x216>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a18      	ldr	r2, [pc, #96]	@ (800a9f0 <HAL_GPIO_Init+0x260>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d007      	beq.n	800a9a2 <HAL_GPIO_Init+0x212>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a17      	ldr	r2, [pc, #92]	@ (800a9f4 <HAL_GPIO_Init+0x264>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d101      	bne.n	800a99e <HAL_GPIO_Init+0x20e>
 800a99a:	2309      	movs	r3, #9
 800a99c:	e02d      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a99e:	230a      	movs	r3, #10
 800a9a0:	e02b      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9a2:	2308      	movs	r3, #8
 800a9a4:	e029      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9a6:	2307      	movs	r3, #7
 800a9a8:	e027      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9aa:	2306      	movs	r3, #6
 800a9ac:	e025      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9ae:	2305      	movs	r3, #5
 800a9b0:	e023      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	e021      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	e01f      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e01d      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e01b      	b.n	800a9fa <HAL_GPIO_Init+0x26a>
 800a9c2:	bf00      	nop
 800a9c4:	58000080 	.word	0x58000080
 800a9c8:	58024400 	.word	0x58024400
 800a9cc:	58000400 	.word	0x58000400
 800a9d0:	58020000 	.word	0x58020000
 800a9d4:	58020400 	.word	0x58020400
 800a9d8:	58020800 	.word	0x58020800
 800a9dc:	58020c00 	.word	0x58020c00
 800a9e0:	58021000 	.word	0x58021000
 800a9e4:	58021400 	.word	0x58021400
 800a9e8:	58021800 	.word	0x58021800
 800a9ec:	58021c00 	.word	0x58021c00
 800a9f0:	58022000 	.word	0x58022000
 800a9f4:	58022400 	.word	0x58022400
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	f002 0203 	and.w	r2, r2, #3
 800aa00:	0092      	lsls	r2, r2, #2
 800aa02:	4093      	lsls	r3, r2
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa0a:	4938      	ldr	r1, [pc, #224]	@ (800aaec <HAL_GPIO_Init+0x35c>)
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	089b      	lsrs	r3, r3, #2
 800aa10:	3302      	adds	r3, #2
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	43db      	mvns	r3, r3
 800aa24:	69ba      	ldr	r2, [r7, #24]
 800aa26:	4013      	ands	r3, r2
 800aa28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800aa3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800aa46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	43db      	mvns	r3, r3
 800aa52:	69ba      	ldr	r2, [r7, #24]
 800aa54:	4013      	ands	r3, r2
 800aa56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800aa6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	43db      	mvns	r3, r3
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	4013      	ands	r3, r2
 800aa82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800aa90:	69ba      	ldr	r2, [r7, #24]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	69ba      	ldr	r2, [r7, #24]
 800aa9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	43db      	mvns	r3, r3
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	4013      	ands	r3, r2
 800aaac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d003      	beq.n	800aac2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	3301      	adds	r3, #1
 800aacc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	fa22 f303 	lsr.w	r3, r2, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f47f ae63 	bne.w	800a7a4 <HAL_GPIO_Init+0x14>
  }
}
 800aade:	bf00      	nop
 800aae0:	bf00      	nop
 800aae2:	3724      	adds	r7, #36	@ 0x24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	58000400 	.word	0x58000400

0800aaf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	807b      	strh	r3, [r7, #2]
 800aafc:	4613      	mov	r3, r2
 800aafe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ab00:	787b      	ldrb	r3, [r7, #1]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d003      	beq.n	800ab0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab06:	887a      	ldrh	r2, [r7, #2]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ab0c:	e003      	b.n	800ab16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ab0e:	887b      	ldrh	r3, [r7, #2]
 800ab10:	041a      	lsls	r2, r3, #16
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	619a      	str	r2, [r3, #24]
}
 800ab16:	bf00      	nop
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	695b      	ldr	r3, [r3, #20]
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ab34:	887a      	ldrh	r2, [r7, #2]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	4013      	ands	r3, r2
 800ab3a:	041a      	lsls	r2, r3, #16
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	43d9      	mvns	r1, r3
 800ab40:	887b      	ldrh	r3, [r7, #2]
 800ab42:	400b      	ands	r3, r1
 800ab44:	431a      	orrs	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	619a      	str	r2, [r3, #24]
}
 800ab4a:	bf00      	nop
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800ab60:	4a08      	ldr	r2, [pc, #32]	@ (800ab84 <HAL_HSEM_FastTake+0x2c>)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3320      	adds	r3, #32
 800ab66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab6a:	4a07      	ldr	r2, [pc, #28]	@ (800ab88 <HAL_HSEM_FastTake+0x30>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d101      	bne.n	800ab74 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	e000      	b.n	800ab76 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	58026400 	.word	0x58026400
 800ab88:	80000300 	.word	0x80000300

0800ab8c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800ab96:	4906      	ldr	r1, [pc, #24]	@ (800abb0 <HAL_HSEM_Release+0x24>)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	58026400 	.word	0x58026400

0800abb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e08b      	b.n	800acde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7f8 f994 	bl	8002f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2224      	movs	r2, #36	@ 0x24
 800abe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ac04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ac14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d107      	bne.n	800ac2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac2a:	609a      	str	r2, [r3, #8]
 800ac2c:	e006      	b.n	800ac3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	689a      	ldr	r2, [r3, #8]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800ac3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d108      	bne.n	800ac56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac52:	605a      	str	r2, [r3, #4]
 800ac54:	e007      	b.n	800ac66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6859      	ldr	r1, [r3, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	4b1d      	ldr	r3, [pc, #116]	@ (800ace8 <HAL_I2C_Init+0x134>)
 800ac72:	430b      	orrs	r3, r1
 800ac74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ac84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	691a      	ldr	r2, [r3, #16]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	69d9      	ldr	r1, [r3, #28]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a1a      	ldr	r2, [r3, #32]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	430a      	orrs	r2, r1
 800acae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f042 0201 	orr.w	r2, r2, #1
 800acbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2220      	movs	r2, #32
 800acca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	02008000 	.word	0x02008000

0800acec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af02      	add	r7, sp, #8
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	607a      	str	r2, [r7, #4]
 800acf6:	461a      	mov	r2, r3
 800acf8:	460b      	mov	r3, r1
 800acfa:	817b      	strh	r3, [r7, #10]
 800acfc:	4613      	mov	r3, r2
 800acfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	2b20      	cmp	r3, #32
 800ad0a:	f040 80fd 	bne.w	800af08 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d101      	bne.n	800ad1c <HAL_I2C_Master_Transmit+0x30>
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e0f6      	b.n	800af0a <HAL_I2C_Master_Transmit+0x21e>
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad24:	f7fa fe7a 	bl	8005a1c <HAL_GetTick>
 800ad28:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	2319      	movs	r3, #25
 800ad30:	2201      	movs	r2, #1
 800ad32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 fa0a 	bl	800b150 <I2C_WaitOnFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e0e1      	b.n	800af0a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2221      	movs	r2, #33	@ 0x21
 800ad4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2210      	movs	r2, #16
 800ad52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	893a      	ldrh	r2, [r7, #8]
 800ad66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	2bff      	cmp	r3, #255	@ 0xff
 800ad76:	d906      	bls.n	800ad86 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	22ff      	movs	r2, #255	@ 0xff
 800ad7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800ad7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad82:	617b      	str	r3, [r7, #20]
 800ad84:	e007      	b.n	800ad96 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad8a:	b29a      	uxth	r2, r3
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ad90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad94:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d024      	beq.n	800ade8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ada2:	781a      	ldrb	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adb8:	b29b      	uxth	r3, r3
 800adba:	3b01      	subs	r3, #1
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adc6:	3b01      	subs	r3, #1
 800adc8:	b29a      	uxth	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800add2:	b2db      	uxtb	r3, r3
 800add4:	3301      	adds	r3, #1
 800add6:	b2da      	uxtb	r2, r3
 800add8:	8979      	ldrh	r1, [r7, #10]
 800adda:	4b4e      	ldr	r3, [pc, #312]	@ (800af14 <HAL_I2C_Master_Transmit+0x228>)
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fc05 	bl	800b5f0 <I2C_TransferConfig>
 800ade6:	e066      	b.n	800aeb6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adec:	b2da      	uxtb	r2, r3
 800adee:	8979      	ldrh	r1, [r7, #10]
 800adf0:	4b48      	ldr	r3, [pc, #288]	@ (800af14 <HAL_I2C_Master_Transmit+0x228>)
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 fbfa 	bl	800b5f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800adfc:	e05b      	b.n	800aeb6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adfe:	693a      	ldr	r2, [r7, #16]
 800ae00:	6a39      	ldr	r1, [r7, #32]
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 f9fd 	bl	800b202 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d001      	beq.n	800ae12 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e07b      	b.n	800af0a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae16:	781a      	ldrb	r2, [r3, #0]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae22:	1c5a      	adds	r2, r3, #1
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d034      	beq.n	800aeb6 <HAL_I2C_Master_Transmit+0x1ca>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d130      	bne.n	800aeb6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2180      	movs	r1, #128	@ 0x80
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 f976 	bl	800b150 <I2C_WaitOnFlagUntilTimeout>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e04d      	b.n	800af0a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	2bff      	cmp	r3, #255	@ 0xff
 800ae76:	d90e      	bls.n	800ae96 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	22ff      	movs	r2, #255	@ 0xff
 800ae7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	8979      	ldrh	r1, [r7, #10]
 800ae86:	2300      	movs	r3, #0
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 fbae 	bl	800b5f0 <I2C_TransferConfig>
 800ae94:	e00f      	b.n	800aeb6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	8979      	ldrh	r1, [r7, #10]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 fb9d 	bl	800b5f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d19e      	bne.n	800adfe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	6a39      	ldr	r1, [r7, #32]
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 f9e3 	bl	800b290 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e01a      	b.n	800af0a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2220      	movs	r2, #32
 800aeda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6859      	ldr	r1, [r3, #4]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b0c      	ldr	r3, [pc, #48]	@ (800af18 <HAL_I2C_Master_Transmit+0x22c>)
 800aee8:	400b      	ands	r3, r1
 800aeea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2220      	movs	r2, #32
 800aef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	e000      	b.n	800af0a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800af08:	2302      	movs	r3, #2
  }
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	80002000 	.word	0x80002000
 800af18:	fe00e800 	.word	0xfe00e800

0800af1c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af02      	add	r7, sp, #8
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	607a      	str	r2, [r7, #4]
 800af26:	461a      	mov	r2, r3
 800af28:	460b      	mov	r3, r1
 800af2a:	817b      	strh	r3, [r7, #10]
 800af2c:	4613      	mov	r3, r2
 800af2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b20      	cmp	r3, #32
 800af3a:	f040 80db 	bne.w	800b0f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af44:	2b01      	cmp	r3, #1
 800af46:	d101      	bne.n	800af4c <HAL_I2C_Master_Receive+0x30>
 800af48:	2302      	movs	r3, #2
 800af4a:	e0d4      	b.n	800b0f6 <HAL_I2C_Master_Receive+0x1da>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af54:	f7fa fd62 	bl	8005a1c <HAL_GetTick>
 800af58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	2319      	movs	r3, #25
 800af60:	2201      	movs	r2, #1
 800af62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f8f2 	bl	800b150 <I2C_WaitOnFlagUntilTimeout>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e0bf      	b.n	800b0f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2222      	movs	r2, #34	@ 0x22
 800af7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2210      	movs	r2, #16
 800af82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	893a      	ldrh	r2, [r7, #8]
 800af96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	2bff      	cmp	r3, #255	@ 0xff
 800afa6:	d90e      	bls.n	800afc6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	22ff      	movs	r2, #255	@ 0xff
 800afac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	8979      	ldrh	r1, [r7, #10]
 800afb6:	4b52      	ldr	r3, [pc, #328]	@ (800b100 <HAL_I2C_Master_Receive+0x1e4>)
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f000 fb16 	bl	800b5f0 <I2C_TransferConfig>
 800afc4:	e06d      	b.n	800b0a2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afca:	b29a      	uxth	r2, r3
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afd4:	b2da      	uxtb	r2, r3
 800afd6:	8979      	ldrh	r1, [r7, #10]
 800afd8:	4b49      	ldr	r3, [pc, #292]	@ (800b100 <HAL_I2C_Master_Receive+0x1e4>)
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 fb05 	bl	800b5f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800afe6:	e05c      	b.n	800b0a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	6a39      	ldr	r1, [r7, #32]
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f000 f993 	bl	800b318 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e07c      	b.n	800b0f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b006:	b2d2      	uxtb	r2, r2
 800b008:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b018:	3b01      	subs	r3, #1
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b024:	b29b      	uxth	r3, r3
 800b026:	3b01      	subs	r3, #1
 800b028:	b29a      	uxth	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b032:	b29b      	uxth	r3, r3
 800b034:	2b00      	cmp	r3, #0
 800b036:	d034      	beq.n	800b0a2 <HAL_I2C_Master_Receive+0x186>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d130      	bne.n	800b0a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	2200      	movs	r2, #0
 800b048:	2180      	movs	r1, #128	@ 0x80
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f000 f880 	bl	800b150 <I2C_WaitOnFlagUntilTimeout>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e04d      	b.n	800b0f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b05e:	b29b      	uxth	r3, r3
 800b060:	2bff      	cmp	r3, #255	@ 0xff
 800b062:	d90e      	bls.n	800b082 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	22ff      	movs	r2, #255	@ 0xff
 800b068:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	8979      	ldrh	r1, [r7, #10]
 800b072:	2300      	movs	r3, #0
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f000 fab8 	bl	800b5f0 <I2C_TransferConfig>
 800b080:	e00f      	b.n	800b0a2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b086:	b29a      	uxth	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b090:	b2da      	uxtb	r2, r3
 800b092:	8979      	ldrh	r1, [r7, #10]
 800b094:	2300      	movs	r3, #0
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 faa7 	bl	800b5f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d19d      	bne.n	800afe8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	6a39      	ldr	r1, [r7, #32]
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f8ed 	bl	800b290 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e01a      	b.n	800b0f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2220      	movs	r2, #32
 800b0c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6859      	ldr	r1, [r3, #4]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800b104 <HAL_I2C_Master_Receive+0x1e8>)
 800b0d4:	400b      	ands	r3, r1
 800b0d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2220      	movs	r2, #32
 800b0dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e000      	b.n	800b0f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b0f4:	2302      	movs	r3, #2
  }
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	80002400 	.word	0x80002400
 800b104:	fe00e800 	.word	0xfe00e800

0800b108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	f003 0302 	and.w	r3, r3, #2
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d103      	bne.n	800b126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2200      	movs	r2, #0
 800b124:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	f003 0301 	and.w	r3, r3, #1
 800b130:	2b01      	cmp	r3, #1
 800b132:	d007      	beq.n	800b144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	699a      	ldr	r2, [r3, #24]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f042 0201 	orr.w	r2, r2, #1
 800b142:	619a      	str	r2, [r3, #24]
  }
}
 800b144:	bf00      	nop
 800b146:	370c      	adds	r7, #12
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	603b      	str	r3, [r7, #0]
 800b15c:	4613      	mov	r3, r2
 800b15e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b160:	e03b      	b.n	800b1da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b162:	69ba      	ldr	r2, [r7, #24]
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f000 f962 	bl	800b430 <I2C_IsErrorOccurred>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e041      	b.n	800b1fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17c:	d02d      	beq.n	800b1da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b17e:	f7fa fc4d 	bl	8005a1c <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d302      	bcc.n	800b194 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d122      	bne.n	800b1da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	699a      	ldr	r2, [r3, #24]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	4013      	ands	r3, r2
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	bf0c      	ite	eq
 800b1a4:	2301      	moveq	r3, #1
 800b1a6:	2300      	movne	r3, #0
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d113      	bne.n	800b1da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1b6:	f043 0220 	orr.w	r2, r3, #32
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e00f      	b.n	800b1fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	699a      	ldr	r2, [r3, #24]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	bf0c      	ite	eq
 800b1ea:	2301      	moveq	r3, #1
 800b1ec:	2300      	movne	r3, #0
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d0b4      	beq.n	800b162 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b20e:	e033      	b.n	800b278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 f90b 	bl	800b430 <I2C_IsErrorOccurred>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e031      	b.n	800b288 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d025      	beq.n	800b278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b22c:	f7fa fbf6 	bl	8005a1c <HAL_GetTick>
 800b230:	4602      	mov	r2, r0
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d302      	bcc.n	800b242 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d11a      	bne.n	800b278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	f003 0302 	and.w	r3, r3, #2
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d013      	beq.n	800b278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b254:	f043 0220 	orr.w	r2, r3, #32
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2220      	movs	r2, #32
 800b260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e007      	b.n	800b288 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b02      	cmp	r3, #2
 800b284:	d1c4      	bne.n	800b210 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b29c:	e02f      	b.n	800b2fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	68b9      	ldr	r1, [r7, #8]
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 f8c4 	bl	800b430 <I2C_IsErrorOccurred>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e02d      	b.n	800b30e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b2:	f7fa fbb3 	bl	8005a1c <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d302      	bcc.n	800b2c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d11a      	bne.n	800b2fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	f003 0320 	and.w	r3, r3, #32
 800b2d2:	2b20      	cmp	r3, #32
 800b2d4:	d013      	beq.n	800b2fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2da:	f043 0220 	orr.w	r2, r3, #32
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e007      	b.n	800b30e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	f003 0320 	and.w	r3, r3, #32
 800b308:	2b20      	cmp	r3, #32
 800b30a:	d1c8      	bne.n	800b29e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b328:	e071      	b.n	800b40e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	68b9      	ldr	r1, [r7, #8]
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f000 f87e 	bl	800b430 <I2C_IsErrorOccurred>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b20      	cmp	r3, #32
 800b34a:	d13b      	bne.n	800b3c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d138      	bne.n	800b3c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d105      	bne.n	800b36c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	f003 0310 	and.w	r3, r3, #16
 800b376:	2b10      	cmp	r3, #16
 800b378:	d121      	bne.n	800b3be <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2210      	movs	r2, #16
 800b380:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2204      	movs	r2, #4
 800b386:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2220      	movs	r2, #32
 800b38e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6859      	ldr	r1, [r3, #4]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	4b24      	ldr	r3, [pc, #144]	@ (800b42c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800b39c:	400b      	ands	r3, r1
 800b39e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2220      	movs	r2, #32
 800b3a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	75fb      	strb	r3, [r7, #23]
 800b3bc:	e002      	b.n	800b3c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800b3c4:	f7fa fb2a 	bl	8005a1c <HAL_GetTick>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d302      	bcc.n	800b3da <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d119      	bne.n	800b40e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800b3da:	7dfb      	ldrb	r3, [r7, #23]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d116      	bne.n	800b40e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	f003 0304 	and.w	r3, r3, #4
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	d00f      	beq.n	800b40e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3f2:	f043 0220 	orr.w	r2, r3, #32
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d002      	beq.n	800b422 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d083      	beq.n	800b32a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800b422:	7dfb      	ldrb	r3, [r7, #23]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	fe00e800 	.word	0xfe00e800

0800b430 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08a      	sub	sp, #40	@ 0x28
 800b434:	af00      	add	r7, sp, #0
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	699b      	ldr	r3, [r3, #24]
 800b448:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	f003 0310 	and.w	r3, r3, #16
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d068      	beq.n	800b52e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2210      	movs	r2, #16
 800b462:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b464:	e049      	b.n	800b4fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46c:	d045      	beq.n	800b4fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b46e:	f7fa fad5 	bl	8005a1c <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d302      	bcc.n	800b484 <I2C_IsErrorOccurred+0x54>
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d13a      	bne.n	800b4fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b48e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b496:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b4a6:	d121      	bne.n	800b4ec <I2C_IsErrorOccurred+0xbc>
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b4ae:	d01d      	beq.n	800b4ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b4b0:	7cfb      	ldrb	r3, [r7, #19]
 800b4b2:	2b20      	cmp	r3, #32
 800b4b4:	d01a      	beq.n	800b4ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b4c6:	f7fa faa9 	bl	8005a1c <HAL_GetTick>
 800b4ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4cc:	e00e      	b.n	800b4ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b4ce:	f7fa faa5 	bl	8005a1c <HAL_GetTick>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	2b19      	cmp	r3, #25
 800b4da:	d907      	bls.n	800b4ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	f043 0320 	orr.w	r3, r3, #32
 800b4e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b4ea:	e006      	b.n	800b4fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b20      	cmp	r3, #32
 800b4f8:	d1e9      	bne.n	800b4ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	f003 0320 	and.w	r3, r3, #32
 800b504:	2b20      	cmp	r3, #32
 800b506:	d003      	beq.n	800b510 <I2C_IsErrorOccurred+0xe0>
 800b508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0aa      	beq.n	800b466 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b514:	2b00      	cmp	r3, #0
 800b516:	d103      	bne.n	800b520 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2220      	movs	r2, #32
 800b51e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	f043 0304 	orr.w	r3, r3, #4
 800b526:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	f043 0301 	orr.w	r3, r3, #1
 800b546:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	f043 0308 	orr.w	r3, r3, #8
 800b568:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b572:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00b      	beq.n	800b59c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b584:	6a3b      	ldr	r3, [r7, #32]
 800b586:	f043 0302 	orr.w	r3, r3, #2
 800b58a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b594:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b59c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d01c      	beq.n	800b5de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff fdaf 	bl	800b108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	6859      	ldr	r1, [r3, #4]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ec <I2C_IsErrorOccurred+0x1bc>)
 800b5b6:	400b      	ands	r3, r1
 800b5b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	431a      	orrs	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b5de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3728      	adds	r7, #40	@ 0x28
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	fe00e800 	.word	0xfe00e800

0800b5f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	607b      	str	r3, [r7, #4]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	817b      	strh	r3, [r7, #10]
 800b5fe:	4613      	mov	r3, r2
 800b600:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b602:	897b      	ldrh	r3, [r7, #10]
 800b604:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b608:	7a7b      	ldrb	r3, [r7, #9]
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b610:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	4313      	orrs	r3, r2
 800b61a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b61e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	0d5b      	lsrs	r3, r3, #21
 800b62a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b62e:	4b08      	ldr	r3, [pc, #32]	@ (800b650 <I2C_TransferConfig+0x60>)
 800b630:	430b      	orrs	r3, r1
 800b632:	43db      	mvns	r3, r3
 800b634:	ea02 0103 	and.w	r1, r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	430a      	orrs	r2, r1
 800b640:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b642:	bf00      	nop
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	03ff63ff 	.word	0x03ff63ff

0800b654 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b20      	cmp	r3, #32
 800b668:	d138      	bne.n	800b6dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b670:	2b01      	cmp	r3, #1
 800b672:	d101      	bne.n	800b678 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b674:	2302      	movs	r3, #2
 800b676:	e032      	b.n	800b6de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2224      	movs	r2, #36	@ 0x24
 800b684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 0201 	bic.w	r2, r2, #1
 800b696:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b6a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6819      	ldr	r1, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f042 0201 	orr.w	r2, r2, #1
 800b6c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e000      	b.n	800b6de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b6dc:	2302      	movs	r3, #2
  }
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b085      	sub	sp, #20
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b20      	cmp	r3, #32
 800b6fe:	d139      	bne.n	800b774 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b706:	2b01      	cmp	r3, #1
 800b708:	d101      	bne.n	800b70e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b70a:	2302      	movs	r3, #2
 800b70c:	e033      	b.n	800b776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2201      	movs	r2, #1
 800b712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2224      	movs	r2, #36	@ 0x24
 800b71a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f022 0201 	bic.w	r2, r2, #1
 800b72c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b73c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	021b      	lsls	r3, r3, #8
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4313      	orrs	r3, r2
 800b746:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f042 0201 	orr.w	r2, r2, #1
 800b75e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2220      	movs	r2, #32
 800b764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	e000      	b.n	800b776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b774:	2302      	movs	r3, #2
  }
}
 800b776:	4618      	mov	r0, r3
 800b778:	3714      	adds	r7, #20
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
	...

0800b784 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b78c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800b78e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b792:	4a0c      	ldr	r2, [pc, #48]	@ (800b7c4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800b794:	f043 0302 	orr.w	r3, r3, #2
 800b798:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b79c:	4b09      	ldr	r3, [pc, #36]	@ (800b7c4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800b79e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7a2:	f003 0302 	and.w	r3, r3, #2
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800b7aa:	4b07      	ldr	r3, [pc, #28]	@ (800b7c8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	4906      	ldr	r1, [pc, #24]	@ (800b7c8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	604b      	str	r3, [r1, #4]
}
 800b7b6:	bf00      	nop
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	58024400 	.word	0x58024400
 800b7c8:	58000400 	.word	0x58000400

0800b7cc <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d035      	beq.n	800b846 <HAL_PWR_ConfigPVD+0x7a>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 800b7da:	4b1e      	ldr	r3, [pc, #120]	@ (800b854 <HAL_PWR_ConfigPVD+0x88>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	491b      	ldr	r1, [pc, #108]	@ (800b854 <HAL_PWR_ConfigPVD+0x88>)
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	600b      	str	r3, [r1, #0]
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800b7ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7fa:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800b7fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b80a:	6053      	str	r3, [r2, #4]
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d007      	beq.n	800b828 <HAL_PWR_ConfigPVD+0x5c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 800b818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b826:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	f003 0302 	and.w	r3, r3, #2
 800b830:	2b00      	cmp	r3, #0
 800b832:	d009      	beq.n	800b848 <HAL_PWR_ConfigPVD+0x7c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 800b834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b83e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b842:	6053      	str	r3, [r2, #4]
 800b844:	e000      	b.n	800b848 <HAL_PWR_ConfigPVD+0x7c>
    return;
 800b846:	bf00      	nop
  }
}
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	58024800 	.word	0x58024800

0800b858 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 800b858:	b480      	push	{r7}
 800b85a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 800b85c:	4b05      	ldr	r3, [pc, #20]	@ (800b874 <HAL_PWR_EnablePVD+0x1c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a04      	ldr	r2, [pc, #16]	@ (800b874 <HAL_PWR_EnablePVD+0x1c>)
 800b862:	f043 0310 	orr.w	r3, r3, #16
 800b866:	6013      	str	r3, [r2, #0]
}
 800b868:	bf00      	nop
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	58024800 	.word	0x58024800

0800b878 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b880:	4b29      	ldr	r3, [pc, #164]	@ (800b928 <HAL_PWREx_ConfigSupply+0xb0>)
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	2b06      	cmp	r3, #6
 800b88a:	d00a      	beq.n	800b8a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b88c:	4b26      	ldr	r3, [pc, #152]	@ (800b928 <HAL_PWREx_ConfigSupply+0xb0>)
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	429a      	cmp	r2, r3
 800b898:	d001      	beq.n	800b89e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e040      	b.n	800b920 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	e03e      	b.n	800b920 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b8a2:	4b21      	ldr	r3, [pc, #132]	@ (800b928 <HAL_PWREx_ConfigSupply+0xb0>)
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b8aa:	491f      	ldr	r1, [pc, #124]	@ (800b928 <HAL_PWREx_ConfigSupply+0xb0>)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b8b2:	f7fa f8b3 	bl	8005a1c <HAL_GetTick>
 800b8b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b8b8:	e009      	b.n	800b8ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b8ba:	f7fa f8af 	bl	8005a1c <HAL_GetTick>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8c8:	d901      	bls.n	800b8ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e028      	b.n	800b920 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b8ce:	4b16      	ldr	r3, [pc, #88]	@ (800b928 <HAL_PWREx_ConfigSupply+0xb0>)
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8da:	d1ee      	bne.n	800b8ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b1e      	cmp	r3, #30
 800b8e0:	d008      	beq.n	800b8f4 <HAL_PWREx_ConfigSupply+0x7c>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8e6:	d005      	beq.n	800b8f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2b1d      	cmp	r3, #29
 800b8ec:	d002      	beq.n	800b8f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b2d      	cmp	r3, #45	@ 0x2d
 800b8f2:	d114      	bne.n	800b91e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b8f4:	f7fa f892 	bl	8005a1c <HAL_GetTick>
 800b8f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b8fa:	e009      	b.n	800b910 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b8fc:	f7fa f88e 	bl	8005a1c <HAL_GetTick>
 800b900:	4602      	mov	r2, r0
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b90a:	d901      	bls.n	800b910 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e007      	b.n	800b920 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b910:	4b05      	ldr	r3, [pc, #20]	@ (800b928 <HAL_PWREx_ConfigSupply+0xb0>)
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b91c:	d1ee      	bne.n	800b8fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	58024800 	.word	0x58024800

0800b92c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08c      	sub	sp, #48	@ 0x30
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d102      	bne.n	800b940 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	f000 bc48 	b.w	800c1d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 8088 	beq.w	800ba5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b94e:	4b99      	ldr	r3, [pc, #612]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b958:	4b96      	ldr	r3, [pc, #600]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b95c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b960:	2b10      	cmp	r3, #16
 800b962:	d007      	beq.n	800b974 <HAL_RCC_OscConfig+0x48>
 800b964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b966:	2b18      	cmp	r3, #24
 800b968:	d111      	bne.n	800b98e <HAL_RCC_OscConfig+0x62>
 800b96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96c:	f003 0303 	and.w	r3, r3, #3
 800b970:	2b02      	cmp	r3, #2
 800b972:	d10c      	bne.n	800b98e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b974:	4b8f      	ldr	r3, [pc, #572]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d06d      	beq.n	800ba5c <HAL_RCC_OscConfig+0x130>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d169      	bne.n	800ba5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	f000 bc21 	b.w	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b996:	d106      	bne.n	800b9a6 <HAL_RCC_OscConfig+0x7a>
 800b998:	4b86      	ldr	r3, [pc, #536]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a85      	ldr	r2, [pc, #532]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b99e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	e02e      	b.n	800ba04 <HAL_RCC_OscConfig+0xd8>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10c      	bne.n	800b9c8 <HAL_RCC_OscConfig+0x9c>
 800b9ae:	4b81      	ldr	r3, [pc, #516]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a80      	ldr	r2, [pc, #512]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9b8:	6013      	str	r3, [r2, #0]
 800b9ba:	4b7e      	ldr	r3, [pc, #504]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	4a7d      	ldr	r2, [pc, #500]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b9c4:	6013      	str	r3, [r2, #0]
 800b9c6:	e01d      	b.n	800ba04 <HAL_RCC_OscConfig+0xd8>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b9d0:	d10c      	bne.n	800b9ec <HAL_RCC_OscConfig+0xc0>
 800b9d2:	4b78      	ldr	r3, [pc, #480]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a77      	ldr	r2, [pc, #476]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b9dc:	6013      	str	r3, [r2, #0]
 800b9de:	4b75      	ldr	r3, [pc, #468]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a74      	ldr	r2, [pc, #464]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9e8:	6013      	str	r3, [r2, #0]
 800b9ea:	e00b      	b.n	800ba04 <HAL_RCC_OscConfig+0xd8>
 800b9ec:	4b71      	ldr	r3, [pc, #452]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a70      	ldr	r2, [pc, #448]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	4b6e      	ldr	r3, [pc, #440]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a6d      	ldr	r2, [pc, #436]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800b9fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d013      	beq.n	800ba34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba0c:	f7fa f806 	bl	8005a1c <HAL_GetTick>
 800ba10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba12:	e008      	b.n	800ba26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba14:	f7fa f802 	bl	8005a1c <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	2b64      	cmp	r3, #100	@ 0x64
 800ba20:	d901      	bls.n	800ba26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	e3d4      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba26:	4b63      	ldr	r3, [pc, #396]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f0      	beq.n	800ba14 <HAL_RCC_OscConfig+0xe8>
 800ba32:	e014      	b.n	800ba5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba34:	f7f9 fff2 	bl	8005a1c <HAL_GetTick>
 800ba38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba3a:	e008      	b.n	800ba4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba3c:	f7f9 ffee 	bl	8005a1c <HAL_GetTick>
 800ba40:	4602      	mov	r2, r0
 800ba42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2b64      	cmp	r3, #100	@ 0x64
 800ba48:	d901      	bls.n	800ba4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e3c0      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ba4e:	4b59      	ldr	r3, [pc, #356]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1f0      	bne.n	800ba3c <HAL_RCC_OscConfig+0x110>
 800ba5a:	e000      	b.n	800ba5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0302 	and.w	r3, r3, #2
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 80ca 	beq.w	800bc00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba6c:	4b51      	ldr	r3, [pc, #324]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba76:	4b4f      	ldr	r3, [pc, #316]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800ba78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d007      	beq.n	800ba92 <HAL_RCC_OscConfig+0x166>
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	2b18      	cmp	r3, #24
 800ba86:	d156      	bne.n	800bb36 <HAL_RCC_OscConfig+0x20a>
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	f003 0303 	and.w	r3, r3, #3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d151      	bne.n	800bb36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba92:	4b48      	ldr	r3, [pc, #288]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 0304 	and.w	r3, r3, #4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d005      	beq.n	800baaa <HAL_RCC_OscConfig+0x17e>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e392      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800baaa:	4b42      	ldr	r3, [pc, #264]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f023 0219 	bic.w	r2, r3, #25
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	493f      	ldr	r1, [pc, #252]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bab8:	4313      	orrs	r3, r2
 800baba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800babc:	f7f9 ffae 	bl	8005a1c <HAL_GetTick>
 800bac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bac2:	e008      	b.n	800bad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bac4:	f7f9 ffaa 	bl	8005a1c <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d901      	bls.n	800bad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e37c      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bad6:	4b37      	ldr	r3, [pc, #220]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0f0      	beq.n	800bac4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bae2:	f7f9 ffcb 	bl	8005a7c <HAL_GetREVID>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800baec:	4293      	cmp	r3, r2
 800baee:	d817      	bhi.n	800bb20 <HAL_RCC_OscConfig+0x1f4>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	2b40      	cmp	r3, #64	@ 0x40
 800baf6:	d108      	bne.n	800bb0a <HAL_RCC_OscConfig+0x1de>
 800baf8:	4b2e      	ldr	r3, [pc, #184]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bb00:	4a2c      	ldr	r2, [pc, #176]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb08:	e07a      	b.n	800bc00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb0a:	4b2a      	ldr	r3, [pc, #168]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	031b      	lsls	r3, r3, #12
 800bb18:	4926      	ldr	r1, [pc, #152]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb1e:	e06f      	b.n	800bc00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb20:	4b24      	ldr	r3, [pc, #144]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	061b      	lsls	r3, r3, #24
 800bb2e:	4921      	ldr	r1, [pc, #132]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb30:	4313      	orrs	r3, r2
 800bb32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb34:	e064      	b.n	800bc00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d047      	beq.n	800bbce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bb3e:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f023 0219 	bic.w	r2, r3, #25
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	491a      	ldr	r1, [pc, #104]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb50:	f7f9 ff64 	bl	8005a1c <HAL_GetTick>
 800bb54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb56:	e008      	b.n	800bb6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb58:	f7f9 ff60 	bl	8005a1c <HAL_GetTick>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	2b02      	cmp	r3, #2
 800bb64:	d901      	bls.n	800bb6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bb66:	2303      	movs	r3, #3
 800bb68:	e332      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb6a:	4b12      	ldr	r3, [pc, #72]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0304 	and.w	r3, r3, #4
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d0f0      	beq.n	800bb58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb76:	f7f9 ff81 	bl	8005a7c <HAL_GetREVID>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d819      	bhi.n	800bbb8 <HAL_RCC_OscConfig+0x28c>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	2b40      	cmp	r3, #64	@ 0x40
 800bb8a:	d108      	bne.n	800bb9e <HAL_RCC_OscConfig+0x272>
 800bb8c:	4b09      	ldr	r3, [pc, #36]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bb94:	4a07      	ldr	r2, [pc, #28]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bb96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb9a:	6053      	str	r3, [r2, #4]
 800bb9c:	e030      	b.n	800bc00 <HAL_RCC_OscConfig+0x2d4>
 800bb9e:	4b05      	ldr	r3, [pc, #20]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	031b      	lsls	r3, r3, #12
 800bbac:	4901      	ldr	r1, [pc, #4]	@ (800bbb4 <HAL_RCC_OscConfig+0x288>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	604b      	str	r3, [r1, #4]
 800bbb2:	e025      	b.n	800bc00 <HAL_RCC_OscConfig+0x2d4>
 800bbb4:	58024400 	.word	0x58024400
 800bbb8:	4b9a      	ldr	r3, [pc, #616]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	061b      	lsls	r3, r3, #24
 800bbc6:	4997      	ldr	r1, [pc, #604]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	604b      	str	r3, [r1, #4]
 800bbcc:	e018      	b.n	800bc00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bbce:	4b95      	ldr	r3, [pc, #596]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a94      	ldr	r2, [pc, #592]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bbd4:	f023 0301 	bic.w	r3, r3, #1
 800bbd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbda:	f7f9 ff1f 	bl	8005a1c <HAL_GetTick>
 800bbde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bbe0:	e008      	b.n	800bbf4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bbe2:	f7f9 ff1b 	bl	8005a1c <HAL_GetTick>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d901      	bls.n	800bbf4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e2ed      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bbf4:	4b8b      	ldr	r3, [pc, #556]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0304 	and.w	r3, r3, #4
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1f0      	bne.n	800bbe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0310 	and.w	r3, r3, #16
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 80a9 	beq.w	800bd60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc0e:	4b85      	ldr	r3, [pc, #532]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc18:	4b82      	ldr	r3, [pc, #520]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	2b08      	cmp	r3, #8
 800bc22:	d007      	beq.n	800bc34 <HAL_RCC_OscConfig+0x308>
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	2b18      	cmp	r3, #24
 800bc28:	d13a      	bne.n	800bca0 <HAL_RCC_OscConfig+0x374>
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f003 0303 	and.w	r3, r3, #3
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d135      	bne.n	800bca0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc34:	4b7b      	ldr	r3, [pc, #492]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d005      	beq.n	800bc4c <HAL_RCC_OscConfig+0x320>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	2b80      	cmp	r3, #128	@ 0x80
 800bc46:	d001      	beq.n	800bc4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e2c1      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc4c:	f7f9 ff16 	bl	8005a7c <HAL_GetREVID>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d817      	bhi.n	800bc8a <HAL_RCC_OscConfig+0x35e>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a1b      	ldr	r3, [r3, #32]
 800bc5e:	2b20      	cmp	r3, #32
 800bc60:	d108      	bne.n	800bc74 <HAL_RCC_OscConfig+0x348>
 800bc62:	4b70      	ldr	r3, [pc, #448]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bc6a:	4a6e      	ldr	r2, [pc, #440]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc72:	e075      	b.n	800bd60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc74:	4b6b      	ldr	r3, [pc, #428]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	069b      	lsls	r3, r3, #26
 800bc82:	4968      	ldr	r1, [pc, #416]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc84:	4313      	orrs	r3, r2
 800bc86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc88:	e06a      	b.n	800bd60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bc8a:	4b66      	ldr	r3, [pc, #408]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	061b      	lsls	r3, r3, #24
 800bc98:	4962      	ldr	r1, [pc, #392]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc9e:	e05f      	b.n	800bd60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	69db      	ldr	r3, [r3, #28]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d042      	beq.n	800bd2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bca8:	4b5e      	ldr	r3, [pc, #376]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a5d      	ldr	r2, [pc, #372]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bcae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb4:	f7f9 feb2 	bl	8005a1c <HAL_GetTick>
 800bcb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bcba:	e008      	b.n	800bcce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bcbc:	f7f9 feae 	bl	8005a1c <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d901      	bls.n	800bcce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bcca:	2303      	movs	r3, #3
 800bccc:	e280      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bcce:	4b55      	ldr	r3, [pc, #340]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0f0      	beq.n	800bcbc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcda:	f7f9 fecf 	bl	8005a7c <HAL_GetREVID>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d817      	bhi.n	800bd18 <HAL_RCC_OscConfig+0x3ec>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	d108      	bne.n	800bd02 <HAL_RCC_OscConfig+0x3d6>
 800bcf0:	4b4c      	ldr	r3, [pc, #304]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bcf8:	4a4a      	ldr	r2, [pc, #296]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bcfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bcfe:	6053      	str	r3, [r2, #4]
 800bd00:	e02e      	b.n	800bd60 <HAL_RCC_OscConfig+0x434>
 800bd02:	4b48      	ldr	r3, [pc, #288]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	069b      	lsls	r3, r3, #26
 800bd10:	4944      	ldr	r1, [pc, #272]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	604b      	str	r3, [r1, #4]
 800bd16:	e023      	b.n	800bd60 <HAL_RCC_OscConfig+0x434>
 800bd18:	4b42      	ldr	r3, [pc, #264]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	061b      	lsls	r3, r3, #24
 800bd26:	493f      	ldr	r1, [pc, #252]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	60cb      	str	r3, [r1, #12]
 800bd2c:	e018      	b.n	800bd60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bd2e:	4b3d      	ldr	r3, [pc, #244]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a3c      	ldr	r2, [pc, #240]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3a:	f7f9 fe6f 	bl	8005a1c <HAL_GetTick>
 800bd3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd40:	e008      	b.n	800bd54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bd42:	f7f9 fe6b 	bl	8005a1c <HAL_GetTick>
 800bd46:	4602      	mov	r2, r0
 800bd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4a:	1ad3      	subs	r3, r2, r3
 800bd4c:	2b02      	cmp	r3, #2
 800bd4e:	d901      	bls.n	800bd54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bd50:	2303      	movs	r3, #3
 800bd52:	e23d      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bd54:	4b33      	ldr	r3, [pc, #204]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f0      	bne.n	800bd42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d036      	beq.n	800bdda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d019      	beq.n	800bda8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd74:	4b2b      	ldr	r3, [pc, #172]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd78:	4a2a      	ldr	r2, [pc, #168]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd7a:	f043 0301 	orr.w	r3, r3, #1
 800bd7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd80:	f7f9 fe4c 	bl	8005a1c <HAL_GetTick>
 800bd84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd86:	e008      	b.n	800bd9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd88:	f7f9 fe48 	bl	8005a1c <HAL_GetTick>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d901      	bls.n	800bd9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e21a      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bd9a:	4b22      	ldr	r3, [pc, #136]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bd9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0f0      	beq.n	800bd88 <HAL_RCC_OscConfig+0x45c>
 800bda6:	e018      	b.n	800bdda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bda8:	4b1e      	ldr	r3, [pc, #120]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bdaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdac:	4a1d      	ldr	r2, [pc, #116]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bdae:	f023 0301 	bic.w	r3, r3, #1
 800bdb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdb4:	f7f9 fe32 	bl	8005a1c <HAL_GetTick>
 800bdb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bdba:	e008      	b.n	800bdce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bdbc:	f7f9 fe2e 	bl	8005a1c <HAL_GetTick>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d901      	bls.n	800bdce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e200      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bdce:	4b15      	ldr	r3, [pc, #84]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bdd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdd2:	f003 0302 	and.w	r3, r3, #2
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1f0      	bne.n	800bdbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0320 	and.w	r3, r3, #32
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d039      	beq.n	800be5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01c      	beq.n	800be28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bdee:	4b0d      	ldr	r3, [pc, #52]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a0c      	ldr	r2, [pc, #48]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800bdf4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bdf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bdfa:	f7f9 fe0f 	bl	8005a1c <HAL_GetTick>
 800bdfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be00:	e008      	b.n	800be14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be02:	f7f9 fe0b 	bl	8005a1c <HAL_GetTick>
 800be06:	4602      	mov	r2, r0
 800be08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	d901      	bls.n	800be14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e1dd      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be14:	4b03      	ldr	r3, [pc, #12]	@ (800be24 <HAL_RCC_OscConfig+0x4f8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d0f0      	beq.n	800be02 <HAL_RCC_OscConfig+0x4d6>
 800be20:	e01b      	b.n	800be5a <HAL_RCC_OscConfig+0x52e>
 800be22:	bf00      	nop
 800be24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800be28:	4b9b      	ldr	r3, [pc, #620]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a9a      	ldr	r2, [pc, #616]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800be2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800be34:	f7f9 fdf2 	bl	8005a1c <HAL_GetTick>
 800be38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be3a:	e008      	b.n	800be4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be3c:	f7f9 fdee 	bl	8005a1c <HAL_GetTick>
 800be40:	4602      	mov	r2, r0
 800be42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	2b02      	cmp	r3, #2
 800be48:	d901      	bls.n	800be4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800be4a:	2303      	movs	r3, #3
 800be4c:	e1c0      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800be4e:	4b92      	ldr	r3, [pc, #584]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1f0      	bne.n	800be3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 0304 	and.w	r3, r3, #4
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 8081 	beq.w	800bf6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800be68:	4b8c      	ldr	r3, [pc, #560]	@ (800c09c <HAL_RCC_OscConfig+0x770>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a8b      	ldr	r2, [pc, #556]	@ (800c09c <HAL_RCC_OscConfig+0x770>)
 800be6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be74:	f7f9 fdd2 	bl	8005a1c <HAL_GetTick>
 800be78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be7a:	e008      	b.n	800be8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be7c:	f7f9 fdce 	bl	8005a1c <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b64      	cmp	r3, #100	@ 0x64
 800be88:	d901      	bls.n	800be8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e1a0      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be8e:	4b83      	ldr	r3, [pc, #524]	@ (800c09c <HAL_RCC_OscConfig+0x770>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0f0      	beq.n	800be7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d106      	bne.n	800beb0 <HAL_RCC_OscConfig+0x584>
 800bea2:	4b7d      	ldr	r3, [pc, #500]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bea6:	4a7c      	ldr	r2, [pc, #496]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bea8:	f043 0301 	orr.w	r3, r3, #1
 800beac:	6713      	str	r3, [r2, #112]	@ 0x70
 800beae:	e02d      	b.n	800bf0c <HAL_RCC_OscConfig+0x5e0>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10c      	bne.n	800bed2 <HAL_RCC_OscConfig+0x5a6>
 800beb8:	4b77      	ldr	r3, [pc, #476]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800beba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bebc:	4a76      	ldr	r2, [pc, #472]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bebe:	f023 0301 	bic.w	r3, r3, #1
 800bec2:	6713      	str	r3, [r2, #112]	@ 0x70
 800bec4:	4b74      	ldr	r3, [pc, #464]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bec8:	4a73      	ldr	r2, [pc, #460]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800beca:	f023 0304 	bic.w	r3, r3, #4
 800bece:	6713      	str	r3, [r2, #112]	@ 0x70
 800bed0:	e01c      	b.n	800bf0c <HAL_RCC_OscConfig+0x5e0>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	d10c      	bne.n	800bef4 <HAL_RCC_OscConfig+0x5c8>
 800beda:	4b6f      	ldr	r3, [pc, #444]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bedc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bede:	4a6e      	ldr	r2, [pc, #440]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bee0:	f043 0304 	orr.w	r3, r3, #4
 800bee4:	6713      	str	r3, [r2, #112]	@ 0x70
 800bee6:	4b6c      	ldr	r3, [pc, #432]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800beea:	4a6b      	ldr	r2, [pc, #428]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800beec:	f043 0301 	orr.w	r3, r3, #1
 800bef0:	6713      	str	r3, [r2, #112]	@ 0x70
 800bef2:	e00b      	b.n	800bf0c <HAL_RCC_OscConfig+0x5e0>
 800bef4:	4b68      	ldr	r3, [pc, #416]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bef8:	4a67      	ldr	r2, [pc, #412]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	6713      	str	r3, [r2, #112]	@ 0x70
 800bf00:	4b65      	ldr	r3, [pc, #404]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bf02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf04:	4a64      	ldr	r2, [pc, #400]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bf06:	f023 0304 	bic.w	r3, r3, #4
 800bf0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d015      	beq.n	800bf40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf14:	f7f9 fd82 	bl	8005a1c <HAL_GetTick>
 800bf18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf1a:	e00a      	b.n	800bf32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf1c:	f7f9 fd7e 	bl	8005a1c <HAL_GetTick>
 800bf20:	4602      	mov	r2, r0
 800bf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d901      	bls.n	800bf32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e14e      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf32:	4b59      	ldr	r3, [pc, #356]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bf34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf36:	f003 0302 	and.w	r3, r3, #2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0ee      	beq.n	800bf1c <HAL_RCC_OscConfig+0x5f0>
 800bf3e:	e014      	b.n	800bf6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf40:	f7f9 fd6c 	bl	8005a1c <HAL_GetTick>
 800bf44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf46:	e00a      	b.n	800bf5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf48:	f7f9 fd68 	bl	8005a1c <HAL_GetTick>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d901      	bls.n	800bf5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	e138      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bf5e:	4b4e      	ldr	r3, [pc, #312]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bf60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf62:	f003 0302 	and.w	r3, r3, #2
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1ee      	bne.n	800bf48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 812d 	beq.w	800c1ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bf74:	4b48      	ldr	r3, [pc, #288]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf7c:	2b18      	cmp	r3, #24
 800bf7e:	f000 80bd 	beq.w	800c0fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	f040 809e 	bne.w	800c0c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf8c:	4b42      	ldr	r3, [pc, #264]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a41      	ldr	r2, [pc, #260]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bf92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bf96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf98:	f7f9 fd40 	bl	8005a1c <HAL_GetTick>
 800bf9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf9e:	e008      	b.n	800bfb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfa0:	f7f9 fd3c 	bl	8005a1c <HAL_GetTick>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d901      	bls.n	800bfb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e10e      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bfb2:	4b39      	ldr	r3, [pc, #228]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1f0      	bne.n	800bfa0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bfbe:	4b36      	ldr	r3, [pc, #216]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bfc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfc2:	4b37      	ldr	r3, [pc, #220]	@ (800c0a0 <HAL_RCC_OscConfig+0x774>)
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bfce:	0112      	lsls	r2, r2, #4
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	4931      	ldr	r1, [pc, #196]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	628b      	str	r3, [r1, #40]	@ 0x28
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	025b      	lsls	r3, r3, #9
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	431a      	orrs	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff2:	3b01      	subs	r3, #1
 800bff4:	041b      	lsls	r3, r3, #16
 800bff6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bffa:	431a      	orrs	r2, r3
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c000:	3b01      	subs	r3, #1
 800c002:	061b      	lsls	r3, r3, #24
 800c004:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c008:	4923      	ldr	r1, [pc, #140]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c00a:	4313      	orrs	r3, r2
 800c00c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c00e:	4b22      	ldr	r3, [pc, #136]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c012:	4a21      	ldr	r2, [pc, #132]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c014:	f023 0301 	bic.w	r3, r3, #1
 800c018:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c01a:	4b1f      	ldr	r3, [pc, #124]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c01c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c01e:	4b21      	ldr	r3, [pc, #132]	@ (800c0a4 <HAL_RCC_OscConfig+0x778>)
 800c020:	4013      	ands	r3, r2
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c026:	00d2      	lsls	r2, r2, #3
 800c028:	491b      	ldr	r1, [pc, #108]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c02a:	4313      	orrs	r3, r2
 800c02c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c02e:	4b1a      	ldr	r3, [pc, #104]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c032:	f023 020c 	bic.w	r2, r3, #12
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03a:	4917      	ldr	r1, [pc, #92]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c03c:	4313      	orrs	r3, r2
 800c03e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c040:	4b15      	ldr	r3, [pc, #84]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c044:	f023 0202 	bic.w	r2, r3, #2
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c04c:	4912      	ldr	r1, [pc, #72]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c04e:	4313      	orrs	r3, r2
 800c050:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c052:	4b11      	ldr	r3, [pc, #68]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c056:	4a10      	ldr	r2, [pc, #64]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c05c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c05e:	4b0e      	ldr	r3, [pc, #56]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c062:	4a0d      	ldr	r2, [pc, #52]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c06a:	4b0b      	ldr	r3, [pc, #44]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c06e:	4a0a      	ldr	r2, [pc, #40]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c076:	4b08      	ldr	r3, [pc, #32]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c07a:	4a07      	ldr	r2, [pc, #28]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c07c:	f043 0301 	orr.w	r3, r3, #1
 800c080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c082:	4b05      	ldr	r3, [pc, #20]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a04      	ldr	r2, [pc, #16]	@ (800c098 <HAL_RCC_OscConfig+0x76c>)
 800c088:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c08c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c08e:	f7f9 fcc5 	bl	8005a1c <HAL_GetTick>
 800c092:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c094:	e011      	b.n	800c0ba <HAL_RCC_OscConfig+0x78e>
 800c096:	bf00      	nop
 800c098:	58024400 	.word	0x58024400
 800c09c:	58024800 	.word	0x58024800
 800c0a0:	fffffc0c 	.word	0xfffffc0c
 800c0a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0a8:	f7f9 fcb8 	bl	8005a1c <HAL_GetTick>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d901      	bls.n	800c0ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e08a      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c0ba:	4b47      	ldr	r3, [pc, #284]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0f0      	beq.n	800c0a8 <HAL_RCC_OscConfig+0x77c>
 800c0c6:	e082      	b.n	800c1ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0c8:	4b43      	ldr	r3, [pc, #268]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a42      	ldr	r2, [pc, #264]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c0ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d4:	f7f9 fca2 	bl	8005a1c <HAL_GetTick>
 800c0d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0da:	e008      	b.n	800c0ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0dc:	f7f9 fc9e 	bl	8005a1c <HAL_GetTick>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d901      	bls.n	800c0ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e070      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c0ee:	4b3a      	ldr	r3, [pc, #232]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1f0      	bne.n	800c0dc <HAL_RCC_OscConfig+0x7b0>
 800c0fa:	e068      	b.n	800c1ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c0fc:	4b36      	ldr	r3, [pc, #216]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c100:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c102:	4b35      	ldr	r3, [pc, #212]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c106:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d031      	beq.n	800c174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	f003 0203 	and.w	r2, r3, #3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d12a      	bne.n	800c174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	091b      	lsrs	r3, r3, #4
 800c122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d122      	bne.n	800c174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c138:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d11a      	bne.n	800c174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	0a5b      	lsrs	r3, r3, #9
 800c142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d111      	bne.n	800c174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	0c1b      	lsrs	r3, r3, #16
 800c154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c15c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c15e:	429a      	cmp	r2, r3
 800c160:	d108      	bne.n	800c174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	0e1b      	lsrs	r3, r3, #24
 800c166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c16e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c170:	429a      	cmp	r2, r3
 800c172:	d001      	beq.n	800c178 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e02b      	b.n	800c1d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c178:	4b17      	ldr	r3, [pc, #92]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c17a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c17c:	08db      	lsrs	r3, r3, #3
 800c17e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c182:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d01f      	beq.n	800c1ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c18e:	4b12      	ldr	r3, [pc, #72]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c192:	4a11      	ldr	r2, [pc, #68]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c194:	f023 0301 	bic.w	r3, r3, #1
 800c198:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c19a:	f7f9 fc3f 	bl	8005a1c <HAL_GetTick>
 800c19e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c1a0:	bf00      	nop
 800c1a2:	f7f9 fc3b 	bl	8005a1c <HAL_GetTick>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d0f9      	beq.n	800c1a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c1b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c1dc <HAL_RCC_OscConfig+0x8b0>)
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c1ba:	00d2      	lsls	r2, r2, #3
 800c1bc:	4906      	ldr	r1, [pc, #24]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c1c2:	4b05      	ldr	r3, [pc, #20]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c6:	4a04      	ldr	r2, [pc, #16]	@ (800c1d8 <HAL_RCC_OscConfig+0x8ac>)
 800c1c8:	f043 0301 	orr.w	r3, r3, #1
 800c1cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3730      	adds	r7, #48	@ 0x30
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	58024400 	.word	0x58024400
 800c1dc:	ffff0007 	.word	0xffff0007

0800c1e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e19c      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c1f4:	4b8a      	ldr	r3, [pc, #552]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 030f 	and.w	r3, r3, #15
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d910      	bls.n	800c224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c202:	4b87      	ldr	r3, [pc, #540]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f023 020f 	bic.w	r2, r3, #15
 800c20a:	4985      	ldr	r1, [pc, #532]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	4313      	orrs	r3, r2
 800c210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c212:	4b83      	ldr	r3, [pc, #524]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 030f 	and.w	r3, r3, #15
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d001      	beq.n	800c224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e184      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f003 0304 	and.w	r3, r3, #4
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d010      	beq.n	800c252 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	4b7b      	ldr	r3, [pc, #492]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d908      	bls.n	800c252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c240:	4b78      	ldr	r3, [pc, #480]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	4975      	ldr	r1, [pc, #468]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 0308 	and.w	r3, r3, #8
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d010      	beq.n	800c280 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	695a      	ldr	r2, [r3, #20]
 800c262:	4b70      	ldr	r3, [pc, #448]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d908      	bls.n	800c280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c26e:	4b6d      	ldr	r3, [pc, #436]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c270:	69db      	ldr	r3, [r3, #28]
 800c272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	695b      	ldr	r3, [r3, #20]
 800c27a:	496a      	ldr	r1, [pc, #424]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c27c:	4313      	orrs	r3, r2
 800c27e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f003 0310 	and.w	r3, r3, #16
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d010      	beq.n	800c2ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	699a      	ldr	r2, [r3, #24]
 800c290:	4b64      	ldr	r3, [pc, #400]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c292:	69db      	ldr	r3, [r3, #28]
 800c294:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c298:	429a      	cmp	r2, r3
 800c29a:	d908      	bls.n	800c2ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c29c:	4b61      	ldr	r3, [pc, #388]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	495e      	ldr	r1, [pc, #376]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 0320 	and.w	r3, r3, #32
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d010      	beq.n	800c2dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	69da      	ldr	r2, [r3, #28]
 800c2be:	4b59      	ldr	r3, [pc, #356]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d908      	bls.n	800c2dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c2ca:	4b56      	ldr	r3, [pc, #344]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c2cc:	6a1b      	ldr	r3, [r3, #32]
 800c2ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	4953      	ldr	r1, [pc, #332]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d010      	beq.n	800c30a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68da      	ldr	r2, [r3, #12]
 800c2ec:	4b4d      	ldr	r3, [pc, #308]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	f003 030f 	and.w	r3, r3, #15
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d908      	bls.n	800c30a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2f8:	4b4a      	ldr	r3, [pc, #296]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	f023 020f 	bic.w	r2, r3, #15
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	4947      	ldr	r1, [pc, #284]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c306:	4313      	orrs	r3, r2
 800c308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 0301 	and.w	r3, r3, #1
 800c312:	2b00      	cmp	r3, #0
 800c314:	d055      	beq.n	800c3c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c316:	4b43      	ldr	r3, [pc, #268]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	4940      	ldr	r1, [pc, #256]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c324:	4313      	orrs	r3, r2
 800c326:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d107      	bne.n	800c340 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c330:	4b3c      	ldr	r3, [pc, #240]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d121      	bne.n	800c380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c33c:	2301      	movs	r3, #1
 800c33e:	e0f6      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	2b03      	cmp	r3, #3
 800c346:	d107      	bne.n	800c358 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c348:	4b36      	ldr	r3, [pc, #216]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d115      	bne.n	800c380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e0ea      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d107      	bne.n	800c370 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c360:	4b30      	ldr	r3, [pc, #192]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d109      	bne.n	800c380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e0de      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c370:	4b2c      	ldr	r3, [pc, #176]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 0304 	and.w	r3, r3, #4
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e0d6      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c380:	4b28      	ldr	r3, [pc, #160]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	f023 0207 	bic.w	r2, r3, #7
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	4925      	ldr	r1, [pc, #148]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c38e:	4313      	orrs	r3, r2
 800c390:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c392:	f7f9 fb43 	bl	8005a1c <HAL_GetTick>
 800c396:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c398:	e00a      	b.n	800c3b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c39a:	f7f9 fb3f 	bl	8005a1c <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d901      	bls.n	800c3b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e0be      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d1eb      	bne.n	800c39a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 0302 	and.w	r3, r3, #2
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d010      	beq.n	800c3f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68da      	ldr	r2, [r3, #12]
 800c3d2:	4b14      	ldr	r3, [pc, #80]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	f003 030f 	and.w	r3, r3, #15
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d208      	bcs.n	800c3f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3de:	4b11      	ldr	r3, [pc, #68]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	f023 020f 	bic.w	r2, r3, #15
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	490e      	ldr	r1, [pc, #56]	@ (800c424 <HAL_RCC_ClockConfig+0x244>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 030f 	and.w	r3, r3, #15
 800c3f8:	683a      	ldr	r2, [r7, #0]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d214      	bcs.n	800c428 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3fe:	4b08      	ldr	r3, [pc, #32]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f023 020f 	bic.w	r2, r3, #15
 800c406:	4906      	ldr	r1, [pc, #24]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c40e:	4b04      	ldr	r3, [pc, #16]	@ (800c420 <HAL_RCC_ClockConfig+0x240>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 030f 	and.w	r3, r3, #15
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d005      	beq.n	800c428 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e086      	b.n	800c52e <HAL_RCC_ClockConfig+0x34e>
 800c420:	52002000 	.word	0x52002000
 800c424:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0304 	and.w	r3, r3, #4
 800c430:	2b00      	cmp	r3, #0
 800c432:	d010      	beq.n	800c456 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691a      	ldr	r2, [r3, #16]
 800c438:	4b3f      	ldr	r3, [pc, #252]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c440:	429a      	cmp	r2, r3
 800c442:	d208      	bcs.n	800c456 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c444:	4b3c      	ldr	r3, [pc, #240]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	691b      	ldr	r3, [r3, #16]
 800c450:	4939      	ldr	r1, [pc, #228]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c452:	4313      	orrs	r3, r2
 800c454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 0308 	and.w	r3, r3, #8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d010      	beq.n	800c484 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	695a      	ldr	r2, [r3, #20]
 800c466:	4b34      	ldr	r3, [pc, #208]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c46e:	429a      	cmp	r2, r3
 800c470:	d208      	bcs.n	800c484 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c472:	4b31      	ldr	r3, [pc, #196]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	492e      	ldr	r1, [pc, #184]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c480:	4313      	orrs	r3, r2
 800c482:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0310 	and.w	r3, r3, #16
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d010      	beq.n	800c4b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	699a      	ldr	r2, [r3, #24]
 800c494:	4b28      	ldr	r3, [pc, #160]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c496:	69db      	ldr	r3, [r3, #28]
 800c498:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d208      	bcs.n	800c4b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c4a0:	4b25      	ldr	r3, [pc, #148]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	4922      	ldr	r1, [pc, #136]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 0320 	and.w	r3, r3, #32
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d010      	beq.n	800c4e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	69da      	ldr	r2, [r3, #28]
 800c4c2:	4b1d      	ldr	r3, [pc, #116]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d208      	bcs.n	800c4e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c4ce:	4b1a      	ldr	r3, [pc, #104]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	69db      	ldr	r3, [r3, #28]
 800c4da:	4917      	ldr	r1, [pc, #92]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c4e0:	f000 f834 	bl	800c54c <HAL_RCC_GetSysClockFreq>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	4b14      	ldr	r3, [pc, #80]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	0a1b      	lsrs	r3, r3, #8
 800c4ec:	f003 030f 	and.w	r3, r3, #15
 800c4f0:	4912      	ldr	r1, [pc, #72]	@ (800c53c <HAL_RCC_ClockConfig+0x35c>)
 800c4f2:	5ccb      	ldrb	r3, [r1, r3]
 800c4f4:	f003 031f 	and.w	r3, r3, #31
 800c4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c4fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c538 <HAL_RCC_ClockConfig+0x358>)
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	f003 030f 	and.w	r3, r3, #15
 800c506:	4a0d      	ldr	r2, [pc, #52]	@ (800c53c <HAL_RCC_ClockConfig+0x35c>)
 800c508:	5cd3      	ldrb	r3, [r2, r3]
 800c50a:	f003 031f 	and.w	r3, r3, #31
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	fa22 f303 	lsr.w	r3, r2, r3
 800c514:	4a0a      	ldr	r2, [pc, #40]	@ (800c540 <HAL_RCC_ClockConfig+0x360>)
 800c516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c518:	4a0a      	ldr	r2, [pc, #40]	@ (800c544 <HAL_RCC_ClockConfig+0x364>)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c51e:	4b0a      	ldr	r3, [pc, #40]	@ (800c548 <HAL_RCC_ClockConfig+0x368>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4618      	mov	r0, r3
 800c524:	f7f6 fe80 	bl	8003228 <HAL_InitTick>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	58024400 	.word	0x58024400
 800c53c:	08016d50 	.word	0x08016d50
 800c540:	24000004 	.word	0x24000004
 800c544:	24000000 	.word	0x24000000
 800c548:	24000034 	.word	0x24000034

0800c54c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b089      	sub	sp, #36	@ 0x24
 800c550:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c552:	4bb3      	ldr	r3, [pc, #716]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c55a:	2b18      	cmp	r3, #24
 800c55c:	f200 8155 	bhi.w	800c80a <HAL_RCC_GetSysClockFreq+0x2be>
 800c560:	a201      	add	r2, pc, #4	@ (adr r2, 800c568 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c566:	bf00      	nop
 800c568:	0800c5cd 	.word	0x0800c5cd
 800c56c:	0800c80b 	.word	0x0800c80b
 800c570:	0800c80b 	.word	0x0800c80b
 800c574:	0800c80b 	.word	0x0800c80b
 800c578:	0800c80b 	.word	0x0800c80b
 800c57c:	0800c80b 	.word	0x0800c80b
 800c580:	0800c80b 	.word	0x0800c80b
 800c584:	0800c80b 	.word	0x0800c80b
 800c588:	0800c5f3 	.word	0x0800c5f3
 800c58c:	0800c80b 	.word	0x0800c80b
 800c590:	0800c80b 	.word	0x0800c80b
 800c594:	0800c80b 	.word	0x0800c80b
 800c598:	0800c80b 	.word	0x0800c80b
 800c59c:	0800c80b 	.word	0x0800c80b
 800c5a0:	0800c80b 	.word	0x0800c80b
 800c5a4:	0800c80b 	.word	0x0800c80b
 800c5a8:	0800c5f9 	.word	0x0800c5f9
 800c5ac:	0800c80b 	.word	0x0800c80b
 800c5b0:	0800c80b 	.word	0x0800c80b
 800c5b4:	0800c80b 	.word	0x0800c80b
 800c5b8:	0800c80b 	.word	0x0800c80b
 800c5bc:	0800c80b 	.word	0x0800c80b
 800c5c0:	0800c80b 	.word	0x0800c80b
 800c5c4:	0800c80b 	.word	0x0800c80b
 800c5c8:	0800c5ff 	.word	0x0800c5ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5cc:	4b94      	ldr	r3, [pc, #592]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 0320 	and.w	r3, r3, #32
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5d8:	4b91      	ldr	r3, [pc, #580]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	08db      	lsrs	r3, r3, #3
 800c5de:	f003 0303 	and.w	r3, r3, #3
 800c5e2:	4a90      	ldr	r2, [pc, #576]	@ (800c824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c5ea:	e111      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c5ec:	4b8d      	ldr	r3, [pc, #564]	@ (800c824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c5ee:	61bb      	str	r3, [r7, #24]
      break;
 800c5f0:	e10e      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c5f2:	4b8d      	ldr	r3, [pc, #564]	@ (800c828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c5f4:	61bb      	str	r3, [r7, #24]
      break;
 800c5f6:	e10b      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c5f8:	4b8c      	ldr	r3, [pc, #560]	@ (800c82c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c5fa:	61bb      	str	r3, [r7, #24]
      break;
 800c5fc:	e108      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c5fe:	4b88      	ldr	r3, [pc, #544]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c602:	f003 0303 	and.w	r3, r3, #3
 800c606:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c608:	4b85      	ldr	r3, [pc, #532]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c60c:	091b      	lsrs	r3, r3, #4
 800c60e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c612:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c614:	4b82      	ldr	r3, [pc, #520]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c61e:	4b80      	ldr	r3, [pc, #512]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c622:	08db      	lsrs	r3, r3, #3
 800c624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	fb02 f303 	mul.w	r3, r2, r3
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c636:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 80e1 	beq.w	800c804 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b02      	cmp	r3, #2
 800c646:	f000 8083 	beq.w	800c750 <HAL_RCC_GetSysClockFreq+0x204>
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	f200 80a1 	bhi.w	800c794 <HAL_RCC_GetSysClockFreq+0x248>
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <HAL_RCC_GetSysClockFreq+0x114>
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d056      	beq.n	800c70c <HAL_RCC_GetSysClockFreq+0x1c0>
 800c65e:	e099      	b.n	800c794 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c660:	4b6f      	ldr	r3, [pc, #444]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f003 0320 	and.w	r3, r3, #32
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d02d      	beq.n	800c6c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c66c:	4b6c      	ldr	r3, [pc, #432]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	08db      	lsrs	r3, r3, #3
 800c672:	f003 0303 	and.w	r3, r3, #3
 800c676:	4a6b      	ldr	r2, [pc, #428]	@ (800c824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c678:	fa22 f303 	lsr.w	r3, r2, r3
 800c67c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	ee07 3a90 	vmov	s15, r3
 800c684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	ee07 3a90 	vmov	s15, r3
 800c68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c696:	4b62      	ldr	r3, [pc, #392]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c69e:	ee07 3a90 	vmov	s15, r3
 800c6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c6c6:	e087      	b.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	ee07 3a90 	vmov	s15, r3
 800c6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c834 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6da:	4b51      	ldr	r3, [pc, #324]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6e2:	ee07 3a90 	vmov	s15, r3
 800c6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800c6ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c70a:	e065      	b.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	ee07 3a90 	vmov	s15, r3
 800c712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c716:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c71a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c71e:	4b40      	ldr	r3, [pc, #256]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c72e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c732:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c73a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c73e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c74a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c74e:	e043      	b.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c83c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c75e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c762:	4b2f      	ldr	r3, [pc, #188]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76a:	ee07 3a90 	vmov	s15, r3
 800c76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c772:	ed97 6a02 	vldr	s12, [r7, #8]
 800c776:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c77a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c77e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c78e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c792:	e021      	b.n	800c7d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	ee07 3a90 	vmov	s15, r3
 800c79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c79e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a6:	4b1e      	ldr	r3, [pc, #120]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c7d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c7d8:	4b11      	ldr	r3, [pc, #68]	@ (800c820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7dc:	0a5b      	lsrs	r3, r3, #9
 800c7de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	ee07 3a90 	vmov	s15, r3
 800c7ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c7f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7fc:	ee17 3a90 	vmov	r3, s15
 800c800:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c802:	e005      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c804:	2300      	movs	r3, #0
 800c806:	61bb      	str	r3, [r7, #24]
      break;
 800c808:	e002      	b.n	800c810 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c80a:	4b07      	ldr	r3, [pc, #28]	@ (800c828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c80c:	61bb      	str	r3, [r7, #24]
      break;
 800c80e:	bf00      	nop
  }

  return sysclockfreq;
 800c810:	69bb      	ldr	r3, [r7, #24]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3724      	adds	r7, #36	@ 0x24
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	58024400 	.word	0x58024400
 800c824:	03d09000 	.word	0x03d09000
 800c828:	003d0900 	.word	0x003d0900
 800c82c:	017d7840 	.word	0x017d7840
 800c830:	46000000 	.word	0x46000000
 800c834:	4c742400 	.word	0x4c742400
 800c838:	4a742400 	.word	0x4a742400
 800c83c:	4bbebc20 	.word	0x4bbebc20

0800c840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b082      	sub	sp, #8
 800c844:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c846:	f7ff fe81 	bl	800c54c <HAL_RCC_GetSysClockFreq>
 800c84a:	4602      	mov	r2, r0
 800c84c:	4b10      	ldr	r3, [pc, #64]	@ (800c890 <HAL_RCC_GetHCLKFreq+0x50>)
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	0a1b      	lsrs	r3, r3, #8
 800c852:	f003 030f 	and.w	r3, r3, #15
 800c856:	490f      	ldr	r1, [pc, #60]	@ (800c894 <HAL_RCC_GetHCLKFreq+0x54>)
 800c858:	5ccb      	ldrb	r3, [r1, r3]
 800c85a:	f003 031f 	and.w	r3, r3, #31
 800c85e:	fa22 f303 	lsr.w	r3, r2, r3
 800c862:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c864:	4b0a      	ldr	r3, [pc, #40]	@ (800c890 <HAL_RCC_GetHCLKFreq+0x50>)
 800c866:	699b      	ldr	r3, [r3, #24]
 800c868:	f003 030f 	and.w	r3, r3, #15
 800c86c:	4a09      	ldr	r2, [pc, #36]	@ (800c894 <HAL_RCC_GetHCLKFreq+0x54>)
 800c86e:	5cd3      	ldrb	r3, [r2, r3]
 800c870:	f003 031f 	and.w	r3, r3, #31
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	fa22 f303 	lsr.w	r3, r2, r3
 800c87a:	4a07      	ldr	r2, [pc, #28]	@ (800c898 <HAL_RCC_GetHCLKFreq+0x58>)
 800c87c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c87e:	4a07      	ldr	r2, [pc, #28]	@ (800c89c <HAL_RCC_GetHCLKFreq+0x5c>)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c884:	4b04      	ldr	r3, [pc, #16]	@ (800c898 <HAL_RCC_GetHCLKFreq+0x58>)
 800c886:	681b      	ldr	r3, [r3, #0]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	58024400 	.word	0x58024400
 800c894:	08016d50 	.word	0x08016d50
 800c898:	24000004 	.word	0x24000004
 800c89c:	24000000 	.word	0x24000000

0800c8a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c8a4:	f7ff ffcc 	bl	800c840 <HAL_RCC_GetHCLKFreq>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	4b06      	ldr	r3, [pc, #24]	@ (800c8c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c8ac:	69db      	ldr	r3, [r3, #28]
 800c8ae:	091b      	lsrs	r3, r3, #4
 800c8b0:	f003 0307 	and.w	r3, r3, #7
 800c8b4:	4904      	ldr	r1, [pc, #16]	@ (800c8c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c8b6:	5ccb      	ldrb	r3, [r1, r3]
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	58024400 	.word	0x58024400
 800c8c8:	08016d50 	.word	0x08016d50

0800c8cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c8d0:	f7ff ffb6 	bl	800c840 <HAL_RCC_GetHCLKFreq>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	4b06      	ldr	r3, [pc, #24]	@ (800c8f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c8d8:	69db      	ldr	r3, [r3, #28]
 800c8da:	0a1b      	lsrs	r3, r3, #8
 800c8dc:	f003 0307 	and.w	r3, r3, #7
 800c8e0:	4904      	ldr	r1, [pc, #16]	@ (800c8f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c8e2:	5ccb      	ldrb	r3, [r1, r3]
 800c8e4:	f003 031f 	and.w	r3, r3, #31
 800c8e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	58024400 	.word	0x58024400
 800c8f4:	08016d50 	.word	0x08016d50

0800c8f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	223f      	movs	r2, #63	@ 0x3f
 800c906:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c908:	4b1a      	ldr	r3, [pc, #104]	@ (800c974 <HAL_RCC_GetClockConfig+0x7c>)
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	f003 0207 	and.w	r2, r3, #7
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c914:	4b17      	ldr	r3, [pc, #92]	@ (800c974 <HAL_RCC_GetClockConfig+0x7c>)
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c920:	4b14      	ldr	r3, [pc, #80]	@ (800c974 <HAL_RCC_GetClockConfig+0x7c>)
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	f003 020f 	and.w	r2, r3, #15
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c92c:	4b11      	ldr	r3, [pc, #68]	@ (800c974 <HAL_RCC_GetClockConfig+0x7c>)
 800c92e:	699b      	ldr	r3, [r3, #24]
 800c930:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c938:	4b0e      	ldr	r3, [pc, #56]	@ (800c974 <HAL_RCC_GetClockConfig+0x7c>)
 800c93a:	69db      	ldr	r3, [r3, #28]
 800c93c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c944:	4b0b      	ldr	r3, [pc, #44]	@ (800c974 <HAL_RCC_GetClockConfig+0x7c>)
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c950:	4b08      	ldr	r3, [pc, #32]	@ (800c974 <HAL_RCC_GetClockConfig+0x7c>)
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c95c:	4b06      	ldr	r3, [pc, #24]	@ (800c978 <HAL_RCC_GetClockConfig+0x80>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f003 020f 	and.w	r2, r3, #15
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	601a      	str	r2, [r3, #0]
}
 800c968:	bf00      	nop
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	58024400 	.word	0x58024400
 800c978:	52002000 	.word	0x52002000

0800c97c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c97c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c980:	b0ca      	sub	sp, #296	@ 0x128
 800c982:	af00      	add	r7, sp, #0
 800c984:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c988:	2300      	movs	r3, #0
 800c98a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c98e:	2300      	movs	r3, #0
 800c990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c9a0:	2500      	movs	r5, #0
 800c9a2:	ea54 0305 	orrs.w	r3, r4, r5
 800c9a6:	d049      	beq.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c9ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c9b2:	d02f      	beq.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c9b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c9b8:	d828      	bhi.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c9ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c9be:	d01a      	beq.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c9c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c9c4:	d822      	bhi.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c9ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9ce:	d007      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c9d0:	e01c      	b.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9d2:	4bb8      	ldr	r3, [pc, #736]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d6:	4ab7      	ldr	r2, [pc, #732]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c9d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c9de:	e01a      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9e4:	3308      	adds	r3, #8
 800c9e6:	2102      	movs	r1, #2
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f001 fc8f 	bl	800e30c <RCCEx_PLL2_Config>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c9f4:	e00f      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9fa:	3328      	adds	r3, #40	@ 0x28
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f001 fd36 	bl	800e470 <RCCEx_PLL3_Config>
 800ca04:	4603      	mov	r3, r0
 800ca06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ca0a:	e004      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ca12:	e000      	b.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ca14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10a      	bne.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ca1e:	4ba5      	ldr	r3, [pc, #660]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ca26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca2c:	4aa1      	ldr	r2, [pc, #644]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca2e:	430b      	orrs	r3, r1
 800ca30:	6513      	str	r3, [r2, #80]	@ 0x50
 800ca32:	e003      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ca3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ca48:	f04f 0900 	mov.w	r9, #0
 800ca4c:	ea58 0309 	orrs.w	r3, r8, r9
 800ca50:	d047      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ca52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca58:	2b04      	cmp	r3, #4
 800ca5a:	d82a      	bhi.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ca5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ca5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca62:	bf00      	nop
 800ca64:	0800ca79 	.word	0x0800ca79
 800ca68:	0800ca87 	.word	0x0800ca87
 800ca6c:	0800ca9d 	.word	0x0800ca9d
 800ca70:	0800cabb 	.word	0x0800cabb
 800ca74:	0800cabb 	.word	0x0800cabb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca78:	4b8e      	ldr	r3, [pc, #568]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7c:	4a8d      	ldr	r2, [pc, #564]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ca7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ca84:	e01a      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca8a:	3308      	adds	r3, #8
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 fc3c 	bl	800e30c <RCCEx_PLL2_Config>
 800ca94:	4603      	mov	r3, r0
 800ca96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ca9a:	e00f      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caa0:	3328      	adds	r3, #40	@ 0x28
 800caa2:	2100      	movs	r1, #0
 800caa4:	4618      	mov	r0, r3
 800caa6:	f001 fce3 	bl	800e470 <RCCEx_PLL3_Config>
 800caaa:	4603      	mov	r3, r0
 800caac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cab0:	e004      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cab2:	2301      	movs	r3, #1
 800cab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cab8:	e000      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800caba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cabc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10a      	bne.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cac4:	4b7b      	ldr	r3, [pc, #492]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cac8:	f023 0107 	bic.w	r1, r3, #7
 800cacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cad2:	4a78      	ldr	r2, [pc, #480]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cad4:	430b      	orrs	r3, r1
 800cad6:	6513      	str	r3, [r2, #80]	@ 0x50
 800cad8:	e003      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800caee:	f04f 0b00 	mov.w	fp, #0
 800caf2:	ea5a 030b 	orrs.w	r3, sl, fp
 800caf6:	d04c      	beq.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800caf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cafc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cafe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb02:	d030      	beq.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cb04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb08:	d829      	bhi.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb0a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb0c:	d02d      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cb0e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cb10:	d825      	bhi.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb12:	2b80      	cmp	r3, #128	@ 0x80
 800cb14:	d018      	beq.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cb16:	2b80      	cmp	r3, #128	@ 0x80
 800cb18:	d821      	bhi.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d002      	beq.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cb1e:	2b40      	cmp	r3, #64	@ 0x40
 800cb20:	d007      	beq.n	800cb32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cb22:	e01c      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb24:	4b63      	ldr	r3, [pc, #396]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb28:	4a62      	ldr	r2, [pc, #392]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb30:	e01c      	b.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb36:	3308      	adds	r3, #8
 800cb38:	2100      	movs	r1, #0
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f001 fbe6 	bl	800e30c <RCCEx_PLL2_Config>
 800cb40:	4603      	mov	r3, r0
 800cb42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb46:	e011      	b.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb4c:	3328      	adds	r3, #40	@ 0x28
 800cb4e:	2100      	movs	r1, #0
 800cb50:	4618      	mov	r0, r3
 800cb52:	f001 fc8d 	bl	800e470 <RCCEx_PLL3_Config>
 800cb56:	4603      	mov	r3, r0
 800cb58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cb5c:	e006      	b.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cb64:	e002      	b.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cb66:	bf00      	nop
 800cb68:	e000      	b.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800cb6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10a      	bne.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cb74:	4b4f      	ldr	r3, [pc, #316]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb78:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800cb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb82:	4a4c      	ldr	r2, [pc, #304]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cb84:	430b      	orrs	r3, r1
 800cb86:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb88:	e003      	b.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800cb9e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800cba2:	2300      	movs	r3, #0
 800cba4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800cba8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800cbac:	460b      	mov	r3, r1
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	d053      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800cbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cbba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cbbe:	d035      	beq.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800cbc0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cbc4:	d82e      	bhi.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbc6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cbca:	d031      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cbcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cbd0:	d828      	bhi.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cbd6:	d01a      	beq.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800cbd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cbdc:	d822      	bhi.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d003      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800cbe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cbe6:	d007      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cbe8:	e01c      	b.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbea:	4b32      	ldr	r3, [pc, #200]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbee:	4a31      	ldr	r2, [pc, #196]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cbf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cbf6:	e01c      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cbf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	2100      	movs	r1, #0
 800cc00:	4618      	mov	r0, r3
 800cc02:	f001 fb83 	bl	800e30c <RCCEx_PLL2_Config>
 800cc06:	4603      	mov	r3, r0
 800cc08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cc0c:	e011      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc12:	3328      	adds	r3, #40	@ 0x28
 800cc14:	2100      	movs	r1, #0
 800cc16:	4618      	mov	r0, r3
 800cc18:	f001 fc2a 	bl	800e470 <RCCEx_PLL3_Config>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cc22:	e006      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc2a:	e002      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cc2c:	bf00      	nop
 800cc2e:	e000      	b.n	800cc32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cc30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10b      	bne.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cc3a:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc3e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800cc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cc4a:	4a1a      	ldr	r2, [pc, #104]	@ (800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc4c:	430b      	orrs	r3, r1
 800cc4e:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc50:	e003      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800cc66:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cc70:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800cc74:	460b      	mov	r3, r1
 800cc76:	4313      	orrs	r3, r2
 800cc78:	d056      	beq.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cc82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc86:	d038      	beq.n	800ccfa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cc88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cc8c:	d831      	bhi.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cc8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cc92:	d034      	beq.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cc94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cc98:	d82b      	bhi.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cc9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc9e:	d01d      	beq.n	800ccdc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cca0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cca4:	d825      	bhi.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d006      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ccaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccae:	d00a      	beq.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ccb0:	e01f      	b.n	800ccf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ccb2:	bf00      	nop
 800ccb4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccb8:	4ba2      	ldr	r3, [pc, #648]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccbc:	4aa1      	ldr	r2, [pc, #644]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ccbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccc4:	e01c      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ccc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccca:	3308      	adds	r3, #8
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 fb1c 	bl	800e30c <RCCEx_PLL2_Config>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ccda:	e011      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cce0:	3328      	adds	r3, #40	@ 0x28
 800cce2:	2100      	movs	r1, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f001 fbc3 	bl	800e470 <RCCEx_PLL3_Config>
 800ccea:	4603      	mov	r3, r0
 800ccec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ccf0:	e006      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ccf8:	e002      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ccfa:	bf00      	nop
 800ccfc:	e000      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ccfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10b      	bne.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cd08:	4b8e      	ldr	r3, [pc, #568]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd0c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800cd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cd18:	4a8a      	ldr	r2, [pc, #552]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd1a:	430b      	orrs	r3, r1
 800cd1c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd1e:	e003      	b.n	800cd28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd30:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800cd34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd3e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800cd42:	460b      	mov	r3, r1
 800cd44:	4313      	orrs	r3, r2
 800cd46:	d03a      	beq.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd4e:	2b30      	cmp	r3, #48	@ 0x30
 800cd50:	d01f      	beq.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cd52:	2b30      	cmp	r3, #48	@ 0x30
 800cd54:	d819      	bhi.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cd56:	2b20      	cmp	r3, #32
 800cd58:	d00c      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	d815      	bhi.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d019      	beq.n	800cd96 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800cd62:	2b10      	cmp	r3, #16
 800cd64:	d111      	bne.n	800cd8a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd66:	4b77      	ldr	r3, [pc, #476]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd6a:	4a76      	ldr	r2, [pc, #472]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cd6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cd72:	e011      	b.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd78:	3308      	adds	r3, #8
 800cd7a:	2102      	movs	r1, #2
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f001 fac5 	bl	800e30c <RCCEx_PLL2_Config>
 800cd82:	4603      	mov	r3, r0
 800cd84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800cd88:	e006      	b.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd90:	e002      	b.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cd92:	bf00      	nop
 800cd94:	e000      	b.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800cd96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10a      	bne.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cda0:	4b68      	ldr	r3, [pc, #416]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cda2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cda4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800cda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdae:	4a65      	ldr	r2, [pc, #404]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cdb4:	e003      	b.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cdba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cdbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800cdca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800cdce:	2300      	movs	r3, #0
 800cdd0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800cdd4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4313      	orrs	r3, r2
 800cddc:	d051      	beq.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cdde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cde2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cde4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cde8:	d035      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800cdea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cdee:	d82e      	bhi.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cdf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cdf4:	d031      	beq.n	800ce5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800cdf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cdfa:	d828      	bhi.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800cdfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce00:	d01a      	beq.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ce02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce06:	d822      	bhi.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ce0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce10:	d007      	beq.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ce12:	e01c      	b.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce14:	4b4b      	ldr	r3, [pc, #300]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce18:	4a4a      	ldr	r2, [pc, #296]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce20:	e01c      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce26:	3308      	adds	r3, #8
 800ce28:	2100      	movs	r1, #0
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f001 fa6e 	bl	800e30c <RCCEx_PLL2_Config>
 800ce30:	4603      	mov	r3, r0
 800ce32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce36:	e011      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce3c:	3328      	adds	r3, #40	@ 0x28
 800ce3e:	2100      	movs	r1, #0
 800ce40:	4618      	mov	r0, r3
 800ce42:	f001 fb15 	bl	800e470 <RCCEx_PLL3_Config>
 800ce46:	4603      	mov	r3, r0
 800ce48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ce4c:	e006      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ce54:	e002      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ce56:	bf00      	nop
 800ce58:	e000      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ce5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10a      	bne.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ce64:	4b37      	ldr	r3, [pc, #220]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce68:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ce6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce72:	4a34      	ldr	r2, [pc, #208]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ce74:	430b      	orrs	r3, r1
 800ce76:	6513      	str	r3, [r2, #80]	@ 0x50
 800ce78:	e003      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ce82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce8a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ce8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ce92:	2300      	movs	r3, #0
 800ce94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ce98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	d056      	beq.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ceac:	d033      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ceae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ceb2:	d82c      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ceb4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ceb8:	d02f      	beq.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ceba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cebe:	d826      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cec0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cec4:	d02b      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800cec6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ceca:	d820      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800cecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ced0:	d012      	beq.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ced2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ced6:	d81a      	bhi.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d022      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cedc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cee0:	d115      	bne.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cee6:	3308      	adds	r3, #8
 800cee8:	2101      	movs	r1, #1
 800ceea:	4618      	mov	r0, r3
 800ceec:	f001 fa0e 	bl	800e30c <RCCEx_PLL2_Config>
 800cef0:	4603      	mov	r3, r0
 800cef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cef6:	e015      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cefc:	3328      	adds	r3, #40	@ 0x28
 800cefe:	2101      	movs	r1, #1
 800cf00:	4618      	mov	r0, r3
 800cf02:	f001 fab5 	bl	800e470 <RCCEx_PLL3_Config>
 800cf06:	4603      	mov	r3, r0
 800cf08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cf0c:	e00a      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf14:	e006      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf16:	bf00      	nop
 800cf18:	e004      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf1a:	bf00      	nop
 800cf1c:	e002      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf1e:	bf00      	nop
 800cf20:	e000      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cf22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d10d      	bne.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cf2c:	4b05      	ldr	r3, [pc, #20]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf30:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800cf34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf3a:	4a02      	ldr	r2, [pc, #8]	@ (800cf44 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf3c:	430b      	orrs	r3, r1
 800cf3e:	6513      	str	r3, [r2, #80]	@ 0x50
 800cf40:	e006      	b.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cf42:	bf00      	nop
 800cf44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cf50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf58:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cf5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cf60:	2300      	movs	r3, #0
 800cf62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf66:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	d055      	beq.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cf78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf7c:	d033      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cf7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf82:	d82c      	bhi.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf88:	d02f      	beq.n	800cfea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf8e:	d826      	bhi.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf90:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cf94:	d02b      	beq.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cf96:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cf9a:	d820      	bhi.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cf9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfa0:	d012      	beq.n	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cfa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfa6:	d81a      	bhi.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d022      	beq.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cfac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfb0:	d115      	bne.n	800cfde <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfb6:	3308      	adds	r3, #8
 800cfb8:	2101      	movs	r1, #1
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f001 f9a6 	bl	800e30c <RCCEx_PLL2_Config>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfc6:	e015      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cfc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfcc:	3328      	adds	r3, #40	@ 0x28
 800cfce:	2101      	movs	r1, #1
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f001 fa4d 	bl	800e470 <RCCEx_PLL3_Config>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cfdc:	e00a      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cfe4:	e006      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfe6:	bf00      	nop
 800cfe8:	e004      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfea:	bf00      	nop
 800cfec:	e002      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cfee:	bf00      	nop
 800cff0:	e000      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10b      	bne.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cffc:	4ba3      	ldr	r3, [pc, #652]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d000:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d008:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d00c:	4a9f      	ldr	r2, [pc, #636]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d00e:	430b      	orrs	r3, r1
 800d010:	6593      	str	r3, [r2, #88]	@ 0x58
 800d012:	e003      	b.n	800d01c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d024:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d02c:	2300      	movs	r3, #0
 800d02e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d036:	460b      	mov	r3, r1
 800d038:	4313      	orrs	r3, r2
 800d03a:	d037      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d046:	d00e      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d04c:	d816      	bhi.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d018      	beq.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d056:	d111      	bne.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d058:	4b8c      	ldr	r3, [pc, #560]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d05a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d05c:	4a8b      	ldr	r2, [pc, #556]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d05e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d062:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d064:	e00f      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d06a:	3308      	adds	r3, #8
 800d06c:	2101      	movs	r1, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f001 f94c 	bl	800e30c <RCCEx_PLL2_Config>
 800d074:	4603      	mov	r3, r0
 800d076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d07a:	e004      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d082:	e000      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d084:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10a      	bne.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d08e:	4b7f      	ldr	r3, [pc, #508]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d092:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d09a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d09c:	4a7b      	ldr	r2, [pc, #492]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d09e:	430b      	orrs	r3, r1
 800d0a0:	6513      	str	r3, [r2, #80]	@ 0x50
 800d0a2:	e003      	b.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d0b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d0c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4313      	orrs	r3, r2
 800d0ca:	d039      	beq.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0d2:	2b03      	cmp	r3, #3
 800d0d4:	d81c      	bhi.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0dc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0dc:	0800d119 	.word	0x0800d119
 800d0e0:	0800d0ed 	.word	0x0800d0ed
 800d0e4:	0800d0fb 	.word	0x0800d0fb
 800d0e8:	0800d119 	.word	0x0800d119
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0ec:	4b67      	ldr	r3, [pc, #412]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f0:	4a66      	ldr	r2, [pc, #408]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d0f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d0f8:	e00f      	b.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0fe:	3308      	adds	r3, #8
 800d100:	2102      	movs	r1, #2
 800d102:	4618      	mov	r0, r3
 800d104:	f001 f902 	bl	800e30c <RCCEx_PLL2_Config>
 800d108:	4603      	mov	r3, r0
 800d10a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d10e:	e004      	b.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d116:	e000      	b.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10a      	bne.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d122:	4b5a      	ldr	r3, [pc, #360]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d126:	f023 0103 	bic.w	r1, r3, #3
 800d12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d12e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d130:	4a56      	ldr	r2, [pc, #344]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d132:	430b      	orrs	r3, r1
 800d134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d136:	e003      	b.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d13c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d14c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d150:	2300      	movs	r3, #0
 800d152:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d156:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d15a:	460b      	mov	r3, r1
 800d15c:	4313      	orrs	r3, r2
 800d15e:	f000 809f 	beq.w	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d162:	4b4b      	ldr	r3, [pc, #300]	@ (800d290 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a4a      	ldr	r2, [pc, #296]	@ (800d290 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d16c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d16e:	f7f8 fc55 	bl	8005a1c <HAL_GetTick>
 800d172:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d176:	e00b      	b.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d178:	f7f8 fc50 	bl	8005a1c <HAL_GetTick>
 800d17c:	4602      	mov	r2, r0
 800d17e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	2b64      	cmp	r3, #100	@ 0x64
 800d186:	d903      	bls.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d188:	2303      	movs	r3, #3
 800d18a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d18e:	e005      	b.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d190:	4b3f      	ldr	r3, [pc, #252]	@ (800d290 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d0ed      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d19c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d179      	bne.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d1a4:	4b39      	ldr	r3, [pc, #228]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1a6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d1b0:	4053      	eors	r3, r2
 800d1b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d015      	beq.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d1ba:	4b34      	ldr	r3, [pc, #208]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d1c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d1c6:	4b31      	ldr	r3, [pc, #196]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1ca:	4a30      	ldr	r2, [pc, #192]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d1d0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d1d2:	4b2e      	ldr	r3, [pc, #184]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1d6:	4a2d      	ldr	r2, [pc, #180]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d1dc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d1de:	4a2b      	ldr	r2, [pc, #172]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d1e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d1e4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d1ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1f2:	d118      	bne.n	800d226 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1f4:	f7f8 fc12 	bl	8005a1c <HAL_GetTick>
 800d1f8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d1fc:	e00d      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1fe:	f7f8 fc0d 	bl	8005a1c <HAL_GetTick>
 800d202:	4602      	mov	r2, r0
 800d204:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800d208:	1ad2      	subs	r2, r2, r3
 800d20a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d20e:	429a      	cmp	r2, r3
 800d210:	d903      	bls.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800d218:	e005      	b.n	800d226 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d21a:	4b1c      	ldr	r3, [pc, #112]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d21c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d21e:	f003 0302 	and.w	r3, r3, #2
 800d222:	2b00      	cmp	r3, #0
 800d224:	d0eb      	beq.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d129      	bne.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d232:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d23a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d23e:	d10e      	bne.n	800d25e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d240:	4b12      	ldr	r3, [pc, #72]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d24c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d250:	091a      	lsrs	r2, r3, #4
 800d252:	4b10      	ldr	r3, [pc, #64]	@ (800d294 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d254:	4013      	ands	r3, r2
 800d256:	4a0d      	ldr	r2, [pc, #52]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d258:	430b      	orrs	r3, r1
 800d25a:	6113      	str	r3, [r2, #16]
 800d25c:	e005      	b.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d25e:	4b0b      	ldr	r3, [pc, #44]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	4a0a      	ldr	r2, [pc, #40]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d264:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d268:	6113      	str	r3, [r2, #16]
 800d26a:	4b08      	ldr	r3, [pc, #32]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d26c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d27a:	4a04      	ldr	r2, [pc, #16]	@ (800d28c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d27c:	430b      	orrs	r3, r1
 800d27e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d280:	e00e      	b.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800d28a:	e009      	b.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d28c:	58024400 	.word	0x58024400
 800d290:	58024800 	.word	0x58024800
 800d294:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d29c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	f002 0301 	and.w	r3, r2, #1
 800d2ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d2b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	f000 8089 	beq.w	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2c8:	2b28      	cmp	r3, #40	@ 0x28
 800d2ca:	d86b      	bhi.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d2cc:	a201      	add	r2, pc, #4	@ (adr r2, 800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d2:	bf00      	nop
 800d2d4:	0800d3ad 	.word	0x0800d3ad
 800d2d8:	0800d3a5 	.word	0x0800d3a5
 800d2dc:	0800d3a5 	.word	0x0800d3a5
 800d2e0:	0800d3a5 	.word	0x0800d3a5
 800d2e4:	0800d3a5 	.word	0x0800d3a5
 800d2e8:	0800d3a5 	.word	0x0800d3a5
 800d2ec:	0800d3a5 	.word	0x0800d3a5
 800d2f0:	0800d3a5 	.word	0x0800d3a5
 800d2f4:	0800d379 	.word	0x0800d379
 800d2f8:	0800d3a5 	.word	0x0800d3a5
 800d2fc:	0800d3a5 	.word	0x0800d3a5
 800d300:	0800d3a5 	.word	0x0800d3a5
 800d304:	0800d3a5 	.word	0x0800d3a5
 800d308:	0800d3a5 	.word	0x0800d3a5
 800d30c:	0800d3a5 	.word	0x0800d3a5
 800d310:	0800d3a5 	.word	0x0800d3a5
 800d314:	0800d38f 	.word	0x0800d38f
 800d318:	0800d3a5 	.word	0x0800d3a5
 800d31c:	0800d3a5 	.word	0x0800d3a5
 800d320:	0800d3a5 	.word	0x0800d3a5
 800d324:	0800d3a5 	.word	0x0800d3a5
 800d328:	0800d3a5 	.word	0x0800d3a5
 800d32c:	0800d3a5 	.word	0x0800d3a5
 800d330:	0800d3a5 	.word	0x0800d3a5
 800d334:	0800d3ad 	.word	0x0800d3ad
 800d338:	0800d3a5 	.word	0x0800d3a5
 800d33c:	0800d3a5 	.word	0x0800d3a5
 800d340:	0800d3a5 	.word	0x0800d3a5
 800d344:	0800d3a5 	.word	0x0800d3a5
 800d348:	0800d3a5 	.word	0x0800d3a5
 800d34c:	0800d3a5 	.word	0x0800d3a5
 800d350:	0800d3a5 	.word	0x0800d3a5
 800d354:	0800d3ad 	.word	0x0800d3ad
 800d358:	0800d3a5 	.word	0x0800d3a5
 800d35c:	0800d3a5 	.word	0x0800d3a5
 800d360:	0800d3a5 	.word	0x0800d3a5
 800d364:	0800d3a5 	.word	0x0800d3a5
 800d368:	0800d3a5 	.word	0x0800d3a5
 800d36c:	0800d3a5 	.word	0x0800d3a5
 800d370:	0800d3a5 	.word	0x0800d3a5
 800d374:	0800d3ad 	.word	0x0800d3ad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d37c:	3308      	adds	r3, #8
 800d37e:	2101      	movs	r1, #1
 800d380:	4618      	mov	r0, r3
 800d382:	f000 ffc3 	bl	800e30c <RCCEx_PLL2_Config>
 800d386:	4603      	mov	r3, r0
 800d388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d38c:	e00f      	b.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d392:	3328      	adds	r3, #40	@ 0x28
 800d394:	2101      	movs	r1, #1
 800d396:	4618      	mov	r0, r3
 800d398:	f001 f86a 	bl	800e470 <RCCEx_PLL3_Config>
 800d39c:	4603      	mov	r3, r0
 800d39e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d3a2:	e004      	b.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d3aa:	e000      	b.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d3b6:	4bbf      	ldr	r3, [pc, #764]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d3c4:	4abb      	ldr	r2, [pc, #748]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d3c6:	430b      	orrs	r3, r1
 800d3c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800d3ca:	e003      	b.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d3d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	f002 0302 	and.w	r3, r2, #2
 800d3e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d3ea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	d041      	beq.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3fa:	2b05      	cmp	r3, #5
 800d3fc:	d824      	bhi.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d404 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d404:	0800d451 	.word	0x0800d451
 800d408:	0800d41d 	.word	0x0800d41d
 800d40c:	0800d433 	.word	0x0800d433
 800d410:	0800d451 	.word	0x0800d451
 800d414:	0800d451 	.word	0x0800d451
 800d418:	0800d451 	.word	0x0800d451
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d420:	3308      	adds	r3, #8
 800d422:	2101      	movs	r1, #1
 800d424:	4618      	mov	r0, r3
 800d426:	f000 ff71 	bl	800e30c <RCCEx_PLL2_Config>
 800d42a:	4603      	mov	r3, r0
 800d42c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d430:	e00f      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d436:	3328      	adds	r3, #40	@ 0x28
 800d438:	2101      	movs	r1, #1
 800d43a:	4618      	mov	r0, r3
 800d43c:	f001 f818 	bl	800e470 <RCCEx_PLL3_Config>
 800d440:	4603      	mov	r3, r0
 800d442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d446:	e004      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d44e:	e000      	b.n	800d452 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d450:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10a      	bne.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d45a:	4b96      	ldr	r3, [pc, #600]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d45e:	f023 0107 	bic.w	r1, r3, #7
 800d462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d466:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d468:	4a92      	ldr	r2, [pc, #584]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d46a:	430b      	orrs	r3, r1
 800d46c:	6553      	str	r3, [r2, #84]	@ 0x54
 800d46e:	e003      	b.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	f002 0304 	and.w	r3, r2, #4
 800d484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d488:	2300      	movs	r3, #0
 800d48a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d48e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d492:	460b      	mov	r3, r1
 800d494:	4313      	orrs	r3, r2
 800d496:	d044      	beq.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d49c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4a0:	2b05      	cmp	r3, #5
 800d4a2:	d825      	bhi.n	800d4f0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d4a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d4ac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4aa:	bf00      	nop
 800d4ac:	0800d4f9 	.word	0x0800d4f9
 800d4b0:	0800d4c5 	.word	0x0800d4c5
 800d4b4:	0800d4db 	.word	0x0800d4db
 800d4b8:	0800d4f9 	.word	0x0800d4f9
 800d4bc:	0800d4f9 	.word	0x0800d4f9
 800d4c0:	0800d4f9 	.word	0x0800d4f9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4c8:	3308      	adds	r3, #8
 800d4ca:	2101      	movs	r1, #1
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 ff1d 	bl	800e30c <RCCEx_PLL2_Config>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4d8:	e00f      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4de:	3328      	adds	r3, #40	@ 0x28
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 ffc4 	bl	800e470 <RCCEx_PLL3_Config>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d4ee:	e004      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d4f6:	e000      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10b      	bne.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d502:	4b6c      	ldr	r3, [pc, #432]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d506:	f023 0107 	bic.w	r1, r3, #7
 800d50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d512:	4a68      	ldr	r2, [pc, #416]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d514:	430b      	orrs	r3, r1
 800d516:	6593      	str	r3, [r2, #88]	@ 0x58
 800d518:	e003      	b.n	800d522 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d51e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	f002 0320 	and.w	r3, r2, #32
 800d52e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d532:	2300      	movs	r3, #0
 800d534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d53c:	460b      	mov	r3, r1
 800d53e:	4313      	orrs	r3, r2
 800d540:	d055      	beq.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d54a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d54e:	d033      	beq.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d550:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d554:	d82c      	bhi.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d55a:	d02f      	beq.n	800d5bc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d55c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d560:	d826      	bhi.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d562:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d566:	d02b      	beq.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d568:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d56c:	d820      	bhi.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d56e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d572:	d012      	beq.n	800d59a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d578:	d81a      	bhi.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d022      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d57e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d582:	d115      	bne.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d588:	3308      	adds	r3, #8
 800d58a:	2100      	movs	r1, #0
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 febd 	bl	800e30c <RCCEx_PLL2_Config>
 800d592:	4603      	mov	r3, r0
 800d594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d598:	e015      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d59e:	3328      	adds	r3, #40	@ 0x28
 800d5a0:	2102      	movs	r1, #2
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 ff64 	bl	800e470 <RCCEx_PLL3_Config>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d5ae:	e00a      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d5b6:	e006      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5b8:	bf00      	nop
 800d5ba:	e004      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5bc:	bf00      	nop
 800d5be:	e002      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5c0:	bf00      	nop
 800d5c2:	e000      	b.n	800d5c6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d5c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d10b      	bne.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d5ce:	4b39      	ldr	r3, [pc, #228]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5d2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5de:	4a35      	ldr	r2, [pc, #212]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d5e0:	430b      	orrs	r3, r1
 800d5e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d5e4:	e003      	b.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d5fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d5fe:	2300      	movs	r3, #0
 800d600:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d604:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d608:	460b      	mov	r3, r1
 800d60a:	4313      	orrs	r3, r2
 800d60c:	d058      	beq.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d612:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d616:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d61a:	d033      	beq.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d61c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d620:	d82c      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d626:	d02f      	beq.n	800d688 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d62c:	d826      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d62e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d632:	d02b      	beq.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d634:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d638:	d820      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d63a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d63e:	d012      	beq.n	800d666 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d644:	d81a      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d022      	beq.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d64a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d64e:	d115      	bne.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d654:	3308      	adds	r3, #8
 800d656:	2100      	movs	r1, #0
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 fe57 	bl	800e30c <RCCEx_PLL2_Config>
 800d65e:	4603      	mov	r3, r0
 800d660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d664:	e015      	b.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d66a:	3328      	adds	r3, #40	@ 0x28
 800d66c:	2102      	movs	r1, #2
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 fefe 	bl	800e470 <RCCEx_PLL3_Config>
 800d674:	4603      	mov	r3, r0
 800d676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d67a:	e00a      	b.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d682:	e006      	b.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d684:	bf00      	nop
 800d686:	e004      	b.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d688:	bf00      	nop
 800d68a:	e002      	b.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d68c:	bf00      	nop
 800d68e:	e000      	b.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d690:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10e      	bne.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d69a:	4b06      	ldr	r3, [pc, #24]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d69c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d69e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d6aa:	4a02      	ldr	r2, [pc, #8]	@ (800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d6ac:	430b      	orrs	r3, r1
 800d6ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800d6b0:	e006      	b.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d6b2:	bf00      	nop
 800d6b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d6bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d6cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d6d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	d055      	beq.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d6e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d6e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d6ec:	d033      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d6ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d6f2:	d82c      	bhi.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d6f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6f8:	d02f      	beq.n	800d75a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d6fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6fe:	d826      	bhi.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d700:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d704:	d02b      	beq.n	800d75e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d706:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d70a:	d820      	bhi.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d70c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d710:	d012      	beq.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d712:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d716:	d81a      	bhi.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d022      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d71c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d720:	d115      	bne.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d726:	3308      	adds	r3, #8
 800d728:	2100      	movs	r1, #0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f000 fdee 	bl	800e30c <RCCEx_PLL2_Config>
 800d730:	4603      	mov	r3, r0
 800d732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d736:	e015      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d73c:	3328      	adds	r3, #40	@ 0x28
 800d73e:	2102      	movs	r1, #2
 800d740:	4618      	mov	r0, r3
 800d742:	f000 fe95 	bl	800e470 <RCCEx_PLL3_Config>
 800d746:	4603      	mov	r3, r0
 800d748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d74c:	e00a      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d74e:	2301      	movs	r3, #1
 800d750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d754:	e006      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d756:	bf00      	nop
 800d758:	e004      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d75a:	bf00      	nop
 800d75c:	e002      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d75e:	bf00      	nop
 800d760:	e000      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d762:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d10b      	bne.n	800d784 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d76c:	4ba1      	ldr	r3, [pc, #644]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d76e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d770:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d778:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d77c:	4a9d      	ldr	r2, [pc, #628]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d77e:	430b      	orrs	r3, r1
 800d780:	6593      	str	r3, [r2, #88]	@ 0x58
 800d782:	e003      	b.n	800d78c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f002 0308 	and.w	r3, r2, #8
 800d798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d79c:	2300      	movs	r3, #0
 800d79e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	d01e      	beq.n	800d7ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d7ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7b8:	d10c      	bne.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d7ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7be:	3328      	adds	r3, #40	@ 0x28
 800d7c0:	2102      	movs	r1, #2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fe54 	bl	800e470 <RCCEx_PLL3_Config>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d7d4:	4b87      	ldr	r3, [pc, #540]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7e4:	4a83      	ldr	r2, [pc, #524]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d7e6:	430b      	orrs	r3, r1
 800d7e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d7ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f2:	f002 0310 	and.w	r3, r2, #16
 800d7f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d800:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d804:	460b      	mov	r3, r1
 800d806:	4313      	orrs	r3, r2
 800d808:	d01e      	beq.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d80e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d816:	d10c      	bne.n	800d832 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d81c:	3328      	adds	r3, #40	@ 0x28
 800d81e:	2102      	movs	r1, #2
 800d820:	4618      	mov	r0, r3
 800d822:	f000 fe25 	bl	800e470 <RCCEx_PLL3_Config>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d002      	beq.n	800d832 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d832:	4b70      	ldr	r3, [pc, #448]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d836:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d83e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d842:	4a6c      	ldr	r2, [pc, #432]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d844:	430b      	orrs	r3, r1
 800d846:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d850:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d858:	2300      	movs	r3, #0
 800d85a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d85e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d862:	460b      	mov	r3, r1
 800d864:	4313      	orrs	r3, r2
 800d866:	d03e      	beq.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d86c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d874:	d022      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d87a:	d81b      	bhi.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d003      	beq.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d884:	d00b      	beq.n	800d89e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d886:	e015      	b.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d88c:	3308      	adds	r3, #8
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f000 fd3b 	bl	800e30c <RCCEx_PLL2_Config>
 800d896:	4603      	mov	r3, r0
 800d898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d89c:	e00f      	b.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8a2:	3328      	adds	r3, #40	@ 0x28
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 fde2 	bl	800e470 <RCCEx_PLL3_Config>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d8b2:	e004      	b.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d8ba:	e000      	b.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d8bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10b      	bne.n	800d8de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d8c6:	4b4b      	ldr	r3, [pc, #300]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d8d6:	4a47      	ldr	r2, [pc, #284]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d8d8:	430b      	orrs	r3, r1
 800d8da:	6593      	str	r3, [r2, #88]	@ 0x58
 800d8dc:	e003      	b.n	800d8e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d8f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d8f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4313      	orrs	r3, r2
 800d900:	d03b      	beq.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d90a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d90e:	d01f      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d910:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d914:	d818      	bhi.n	800d948 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d91a:	d003      	beq.n	800d924 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d91c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d920:	d007      	beq.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d922:	e011      	b.n	800d948 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d924:	4b33      	ldr	r3, [pc, #204]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d928:	4a32      	ldr	r2, [pc, #200]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d92a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d92e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d930:	e00f      	b.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d936:	3328      	adds	r3, #40	@ 0x28
 800d938:	2101      	movs	r1, #1
 800d93a:	4618      	mov	r0, r3
 800d93c:	f000 fd98 	bl	800e470 <RCCEx_PLL3_Config>
 800d940:	4603      	mov	r3, r0
 800d942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d946:	e004      	b.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d948:	2301      	movs	r3, #1
 800d94a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d94e:	e000      	b.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d950:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10b      	bne.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d95a:	4b26      	ldr	r3, [pc, #152]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d95e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d96a:	4a22      	ldr	r2, [pc, #136]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d96c:	430b      	orrs	r3, r1
 800d96e:	6553      	str	r3, [r2, #84]	@ 0x54
 800d970:	e003      	b.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d982:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d986:	673b      	str	r3, [r7, #112]	@ 0x70
 800d988:	2300      	movs	r3, #0
 800d98a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d98c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d990:	460b      	mov	r3, r1
 800d992:	4313      	orrs	r3, r2
 800d994:	d034      	beq.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d003      	beq.n	800d9a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d9a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9a4:	d007      	beq.n	800d9b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d9a6:	e011      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9a8:	4b12      	ldr	r3, [pc, #72]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ac:	4a11      	ldr	r2, [pc, #68]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9b4:	e00e      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9ba:	3308      	adds	r3, #8
 800d9bc:	2102      	movs	r1, #2
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f000 fca4 	bl	800e30c <RCCEx_PLL2_Config>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d9ca:	e003      	b.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d9d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10d      	bne.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d9dc:	4b05      	ldr	r3, [pc, #20]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d9e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d9e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ea:	4a02      	ldr	r2, [pc, #8]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d9ec:	430b      	orrs	r3, r1
 800d9ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d9f0:	e006      	b.n	800da00 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d9f2:	bf00      	nop
 800d9f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d9fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800da00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da08:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800da0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800da0e:	2300      	movs	r3, #0
 800da10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800da12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800da16:	460b      	mov	r3, r1
 800da18:	4313      	orrs	r3, r2
 800da1a:	d00c      	beq.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da20:	3328      	adds	r3, #40	@ 0x28
 800da22:	2102      	movs	r1, #2
 800da24:	4618      	mov	r0, r3
 800da26:	f000 fd23 	bl	800e470 <RCCEx_PLL3_Config>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800da36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800da42:	663b      	str	r3, [r7, #96]	@ 0x60
 800da44:	2300      	movs	r3, #0
 800da46:	667b      	str	r3, [r7, #100]	@ 0x64
 800da48:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800da4c:	460b      	mov	r3, r1
 800da4e:	4313      	orrs	r3, r2
 800da50:	d038      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800da52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800da56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800da5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da5e:	d018      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800da60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da64:	d811      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800da66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da6a:	d014      	beq.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800da6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da70:	d80b      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800da72:	2b00      	cmp	r3, #0
 800da74:	d011      	beq.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800da76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da7a:	d106      	bne.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da7c:	4bc3      	ldr	r3, [pc, #780]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da80:	4ac2      	ldr	r2, [pc, #776]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800da82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800da88:	e008      	b.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800da90:	e004      	b.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da92:	bf00      	nop
 800da94:	e002      	b.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da96:	bf00      	nop
 800da98:	e000      	b.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800da9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10b      	bne.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800daa4:	4bb9      	ldr	r3, [pc, #740]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800daa8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800daac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dab4:	4ab5      	ldr	r2, [pc, #724]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dab6:	430b      	orrs	r3, r1
 800dab8:	6553      	str	r3, [r2, #84]	@ 0x54
 800daba:	e003      	b.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dabc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dac0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800dad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dad2:	2300      	movs	r3, #0
 800dad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dad6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800dada:	460b      	mov	r3, r1
 800dadc:	4313      	orrs	r3, r2
 800dade:	d009      	beq.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800dae0:	4baa      	ldr	r3, [pc, #680]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dae4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daee:	4aa7      	ldr	r2, [pc, #668]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800daf0:	430b      	orrs	r3, r1
 800daf2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800daf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800db00:	653b      	str	r3, [r7, #80]	@ 0x50
 800db02:	2300      	movs	r3, #0
 800db04:	657b      	str	r3, [r7, #84]	@ 0x54
 800db06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800db0a:	460b      	mov	r3, r1
 800db0c:	4313      	orrs	r3, r2
 800db0e:	d00a      	beq.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800db10:	4b9e      	ldr	r3, [pc, #632]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800db18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800db20:	4a9a      	ldr	r2, [pc, #616]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db22:	430b      	orrs	r3, r1
 800db24:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800db26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800db32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db34:	2300      	movs	r3, #0
 800db36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800db3c:	460b      	mov	r3, r1
 800db3e:	4313      	orrs	r3, r2
 800db40:	d009      	beq.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800db42:	4b92      	ldr	r3, [pc, #584]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db46:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800db4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db50:	4a8e      	ldr	r2, [pc, #568]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db52:	430b      	orrs	r3, r1
 800db54:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800db56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800db62:	643b      	str	r3, [r7, #64]	@ 0x40
 800db64:	2300      	movs	r3, #0
 800db66:	647b      	str	r3, [r7, #68]	@ 0x44
 800db68:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800db6c:	460b      	mov	r3, r1
 800db6e:	4313      	orrs	r3, r2
 800db70:	d00e      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800db72:	4b86      	ldr	r3, [pc, #536]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	4a85      	ldr	r2, [pc, #532]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800db7c:	6113      	str	r3, [r2, #16]
 800db7e:	4b83      	ldr	r3, [pc, #524]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db80:	6919      	ldr	r1, [r3, #16]
 800db82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800db8a:	4a80      	ldr	r2, [pc, #512]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800db8c:	430b      	orrs	r3, r1
 800db8e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800db90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800db9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db9e:	2300      	movs	r3, #0
 800dba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dba2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800dba6:	460b      	mov	r3, r1
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	d009      	beq.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dbac:	4b77      	ldr	r3, [pc, #476]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbb0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbba:	4a74      	ldr	r2, [pc, #464]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbbc:	430b      	orrs	r3, r1
 800dbbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800dbcc:	633b      	str	r3, [r7, #48]	@ 0x30
 800dbce:	2300      	movs	r3, #0
 800dbd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	d00a      	beq.n	800dbf2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dbdc:	4b6b      	ldr	r3, [pc, #428]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbe0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800dbe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dbec:	4a67      	ldr	r2, [pc, #412]	@ (800dd8c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dbee:	430b      	orrs	r3, r1
 800dbf0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc04:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800dc08:	460b      	mov	r3, r1
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	d011      	beq.n	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc12:	3308      	adds	r3, #8
 800dc14:	2100      	movs	r1, #0
 800dc16:	4618      	mov	r0, r3
 800dc18:	f000 fb78 	bl	800e30c <RCCEx_PLL2_Config>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dc22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800dc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	6239      	str	r1, [r7, #32]
 800dc3e:	f003 0302 	and.w	r3, r3, #2
 800dc42:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	d011      	beq.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc52:	3308      	adds	r3, #8
 800dc54:	2101      	movs	r1, #1
 800dc56:	4618      	mov	r0, r3
 800dc58:	f000 fb58 	bl	800e30c <RCCEx_PLL2_Config>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dc62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dc6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800dc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	61b9      	str	r1, [r7, #24]
 800dc7e:	f003 0304 	and.w	r3, r3, #4
 800dc82:	61fb      	str	r3, [r7, #28]
 800dc84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	d011      	beq.n	800dcb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dc92:	3308      	adds	r3, #8
 800dc94:	2102      	movs	r1, #2
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 fb38 	bl	800e30c <RCCEx_PLL2_Config>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d003      	beq.n	800dcb2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcba:	2100      	movs	r1, #0
 800dcbc:	6139      	str	r1, [r7, #16]
 800dcbe:	f003 0308 	and.w	r3, r3, #8
 800dcc2:	617b      	str	r3, [r7, #20]
 800dcc4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	4313      	orrs	r3, r2
 800dccc:	d011      	beq.n	800dcf2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcd2:	3328      	adds	r3, #40	@ 0x28
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fbca 	bl	800e470 <RCCEx_PLL3_Config>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800dce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d003      	beq.n	800dcf2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dcee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	f003 0310 	and.w	r3, r3, #16
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	d011      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd12:	3328      	adds	r3, #40	@ 0x28
 800dd14:	2101      	movs	r1, #1
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 fbaa 	bl	800e470 <RCCEx_PLL3_Config>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dd22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d003      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	6039      	str	r1, [r7, #0]
 800dd3e:	f003 0320 	and.w	r3, r3, #32
 800dd42:	607b      	str	r3, [r7, #4]
 800dd44:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	d011      	beq.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800dd52:	3328      	adds	r3, #40	@ 0x28
 800dd54:	2102      	movs	r1, #2
 800dd56:	4618      	mov	r0, r3
 800dd58:	f000 fb8a 	bl	800e470 <RCCEx_PLL3_Config>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800dd62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800dd6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800dd72:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e000      	b.n	800dd80 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800dd86:	46bd      	mov	sp, r7
 800dd88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd8c:	58024400 	.word	0x58024400

0800dd90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800dd94:	f7fe fd54 	bl	800c840 <HAL_RCC_GetHCLKFreq>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	4b06      	ldr	r3, [pc, #24]	@ (800ddb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	091b      	lsrs	r3, r3, #4
 800dda0:	f003 0307 	and.w	r3, r3, #7
 800dda4:	4904      	ldr	r1, [pc, #16]	@ (800ddb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800dda6:	5ccb      	ldrb	r3, [r1, r3]
 800dda8:	f003 031f 	and.w	r3, r3, #31
 800ddac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	bd80      	pop	{r7, pc}
 800ddb4:	58024400 	.word	0x58024400
 800ddb8:	08016d50 	.word	0x08016d50

0800ddbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b089      	sub	sp, #36	@ 0x24
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ddc4:	4ba1      	ldr	r3, [pc, #644]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddc8:	f003 0303 	and.w	r3, r3, #3
 800ddcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ddce:	4b9f      	ldr	r3, [pc, #636]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ddd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd2:	0b1b      	lsrs	r3, r3, #12
 800ddd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ddd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ddda:	4b9c      	ldr	r3, [pc, #624]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddde:	091b      	lsrs	r3, r3, #4
 800dde0:	f003 0301 	and.w	r3, r3, #1
 800dde4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800dde6:	4b99      	ldr	r3, [pc, #612]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dde8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddea:	08db      	lsrs	r3, r3, #3
 800ddec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddf0:	693a      	ldr	r2, [r7, #16]
 800ddf2:	fb02 f303 	mul.w	r3, r2, r3
 800ddf6:	ee07 3a90 	vmov	s15, r3
 800ddfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 8111 	beq.w	800e02c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	f000 8083 	beq.w	800df18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	2b02      	cmp	r3, #2
 800de16:	f200 80a1 	bhi.w	800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d003      	beq.n	800de28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	2b01      	cmp	r3, #1
 800de24:	d056      	beq.n	800ded4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800de26:	e099      	b.n	800df5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de28:	4b88      	ldr	r3, [pc, #544]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 0320 	and.w	r3, r3, #32
 800de30:	2b00      	cmp	r3, #0
 800de32:	d02d      	beq.n	800de90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de34:	4b85      	ldr	r3, [pc, #532]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	08db      	lsrs	r3, r3, #3
 800de3a:	f003 0303 	and.w	r3, r3, #3
 800de3e:	4a84      	ldr	r2, [pc, #528]	@ (800e050 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800de40:	fa22 f303 	lsr.w	r3, r2, r3
 800de44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	ee07 3a90 	vmov	s15, r3
 800de4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	ee07 3a90 	vmov	s15, r3
 800de56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de5e:	4b7b      	ldr	r3, [pc, #492]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de66:	ee07 3a90 	vmov	s15, r3
 800de6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800de72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800de76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800de8e:	e087      	b.n	800dfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	ee07 3a90 	vmov	s15, r3
 800de96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e058 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800de9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dea2:	4b6a      	ldr	r3, [pc, #424]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deaa:	ee07 3a90 	vmov	s15, r3
 800deae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800deb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800deb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800deba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800debe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ded2:	e065      	b.n	800dfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	ee07 3a90 	vmov	s15, r3
 800deda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dede:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dee6:	4b59      	ldr	r3, [pc, #356]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deee:	ee07 3a90 	vmov	s15, r3
 800def2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800def6:	ed97 6a03 	vldr	s12, [r7, #12]
 800defa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800defe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df16:	e043      	b.n	800dfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	ee07 3a90 	vmov	s15, r3
 800df1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e060 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800df26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df2a:	4b48      	ldr	r3, [pc, #288]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df32:	ee07 3a90 	vmov	s15, r3
 800df36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800df3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df5a:	e021      	b.n	800dfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	ee07 3a90 	vmov	s15, r3
 800df62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e05c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800df6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df6e:	4b37      	ldr	r3, [pc, #220]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df76:	ee07 3a90 	vmov	s15, r3
 800df7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800df82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e054 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800dfa0:	4b2a      	ldr	r3, [pc, #168]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfa4:	0a5b      	lsrs	r3, r3, #9
 800dfa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfaa:	ee07 3a90 	vmov	s15, r3
 800dfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dfb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfba:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfc6:	ee17 2a90 	vmov	r2, s15
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800dfce:	4b1f      	ldr	r3, [pc, #124]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfd2:	0c1b      	lsrs	r3, r3, #16
 800dfd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfd8:	ee07 3a90 	vmov	s15, r3
 800dfdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dfe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfe8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dff4:	ee17 2a90 	vmov	r2, s15
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800dffc:	4b13      	ldr	r3, [pc, #76]	@ (800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e000:	0e1b      	lsrs	r3, r3, #24
 800e002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e006:	ee07 3a90 	vmov	s15, r3
 800e00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e00e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e016:	edd7 6a07 	vldr	s13, [r7, #28]
 800e01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e022:	ee17 2a90 	vmov	r2, s15
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e02a:	e008      	b.n	800e03e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2200      	movs	r2, #0
 800e036:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	609a      	str	r2, [r3, #8]
}
 800e03e:	bf00      	nop
 800e040:	3724      	adds	r7, #36	@ 0x24
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	58024400 	.word	0x58024400
 800e050:	03d09000 	.word	0x03d09000
 800e054:	46000000 	.word	0x46000000
 800e058:	4c742400 	.word	0x4c742400
 800e05c:	4a742400 	.word	0x4a742400
 800e060:	4bbebc20 	.word	0x4bbebc20

0800e064 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e064:	b480      	push	{r7}
 800e066:	b089      	sub	sp, #36	@ 0x24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e06c:	4ba1      	ldr	r3, [pc, #644]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e070:	f003 0303 	and.w	r3, r3, #3
 800e074:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e076:	4b9f      	ldr	r3, [pc, #636]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e07a:	0d1b      	lsrs	r3, r3, #20
 800e07c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e080:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e082:	4b9c      	ldr	r3, [pc, #624]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e086:	0a1b      	lsrs	r3, r3, #8
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e08e:	4b99      	ldr	r3, [pc, #612]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e092:	08db      	lsrs	r3, r3, #3
 800e094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e098:	693a      	ldr	r2, [r7, #16]
 800e09a:	fb02 f303 	mul.w	r3, r2, r3
 800e09e:	ee07 3a90 	vmov	s15, r3
 800e0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f000 8111 	beq.w	800e2d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	f000 8083 	beq.w	800e1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	f200 80a1 	bhi.w	800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d003      	beq.n	800e0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d056      	beq.n	800e17c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e0ce:	e099      	b.n	800e204 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0d0:	4b88      	ldr	r3, [pc, #544]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 0320 	and.w	r3, r3, #32
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d02d      	beq.n	800e138 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0dc:	4b85      	ldr	r3, [pc, #532]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	08db      	lsrs	r3, r3, #3
 800e0e2:	f003 0303 	and.w	r3, r3, #3
 800e0e6:	4a84      	ldr	r2, [pc, #528]	@ (800e2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	ee07 3a90 	vmov	s15, r3
 800e0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	ee07 3a90 	vmov	s15, r3
 800e0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e106:	4b7b      	ldr	r3, [pc, #492]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e10e:	ee07 3a90 	vmov	s15, r3
 800e112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e116:	ed97 6a03 	vldr	s12, [r7, #12]
 800e11a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e132:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e136:	e087      	b.n	800e248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	ee07 3a90 	vmov	s15, r3
 800e13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e142:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e300 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e14a:	4b6a      	ldr	r3, [pc, #424]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e14c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e152:	ee07 3a90 	vmov	s15, r3
 800e156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e15a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e15e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e16a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e17a:	e065      	b.n	800e248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	ee07 3a90 	vmov	s15, r3
 800e182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e186:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e18e:	4b59      	ldr	r3, [pc, #356]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e196:	ee07 3a90 	vmov	s15, r3
 800e19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e1be:	e043      	b.n	800e248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	ee07 3a90 	vmov	s15, r3
 800e1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e308 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1d2:	4b48      	ldr	r3, [pc, #288]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1da:	ee07 3a90 	vmov	s15, r3
 800e1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e202:	e021      	b.n	800e248 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	ee07 3a90 	vmov	s15, r3
 800e20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e20e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e216:	4b37      	ldr	r3, [pc, #220]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e21e:	ee07 3a90 	vmov	s15, r3
 800e222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e226:	ed97 6a03 	vldr	s12, [r7, #12]
 800e22a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e2fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e246:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e248:	4b2a      	ldr	r3, [pc, #168]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e24a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e24c:	0a5b      	lsrs	r3, r3, #9
 800e24e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e252:	ee07 3a90 	vmov	s15, r3
 800e256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e25a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e25e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e262:	edd7 6a07 	vldr	s13, [r7, #28]
 800e266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e26a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e26e:	ee17 2a90 	vmov	r2, s15
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e276:	4b1f      	ldr	r3, [pc, #124]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e27a:	0c1b      	lsrs	r3, r3, #16
 800e27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e280:	ee07 3a90 	vmov	s15, r3
 800e284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e28c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e290:	edd7 6a07 	vldr	s13, [r7, #28]
 800e294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e29c:	ee17 2a90 	vmov	r2, s15
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e2a4:	4b13      	ldr	r3, [pc, #76]	@ (800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2a8:	0e1b      	lsrs	r3, r3, #24
 800e2aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2ae:	ee07 3a90 	vmov	s15, r3
 800e2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2ca:	ee17 2a90 	vmov	r2, s15
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e2d2:	e008      	b.n	800e2e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	609a      	str	r2, [r3, #8]
}
 800e2e6:	bf00      	nop
 800e2e8:	3724      	adds	r7, #36	@ 0x24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	58024400 	.word	0x58024400
 800e2f8:	03d09000 	.word	0x03d09000
 800e2fc:	46000000 	.word	0x46000000
 800e300:	4c742400 	.word	0x4c742400
 800e304:	4a742400 	.word	0x4a742400
 800e308:	4bbebc20 	.word	0x4bbebc20

0800e30c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e31a:	4b53      	ldr	r3, [pc, #332]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e31e:	f003 0303 	and.w	r3, r3, #3
 800e322:	2b03      	cmp	r3, #3
 800e324:	d101      	bne.n	800e32a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	e099      	b.n	800e45e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e32a:	4b4f      	ldr	r3, [pc, #316]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	4a4e      	ldr	r2, [pc, #312]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e330:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e336:	f7f7 fb71 	bl	8005a1c <HAL_GetTick>
 800e33a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e33c:	e008      	b.n	800e350 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e33e:	f7f7 fb6d 	bl	8005a1c <HAL_GetTick>
 800e342:	4602      	mov	r2, r0
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	2b02      	cmp	r3, #2
 800e34a:	d901      	bls.n	800e350 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e34c:	2303      	movs	r3, #3
 800e34e:	e086      	b.n	800e45e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e350:	4b45      	ldr	r3, [pc, #276]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1f0      	bne.n	800e33e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e35c:	4b42      	ldr	r3, [pc, #264]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e360:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	031b      	lsls	r3, r3, #12
 800e36a:	493f      	ldr	r1, [pc, #252]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e36c:	4313      	orrs	r3, r2
 800e36e:	628b      	str	r3, [r1, #40]	@ 0x28
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	3b01      	subs	r3, #1
 800e376:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	3b01      	subs	r3, #1
 800e380:	025b      	lsls	r3, r3, #9
 800e382:	b29b      	uxth	r3, r3
 800e384:	431a      	orrs	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	3b01      	subs	r3, #1
 800e38c:	041b      	lsls	r3, r3, #16
 800e38e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e392:	431a      	orrs	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	691b      	ldr	r3, [r3, #16]
 800e398:	3b01      	subs	r3, #1
 800e39a:	061b      	lsls	r3, r3, #24
 800e39c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e3a0:	4931      	ldr	r1, [pc, #196]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e3a6:	4b30      	ldr	r3, [pc, #192]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	695b      	ldr	r3, [r3, #20]
 800e3b2:	492d      	ldr	r1, [pc, #180]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e3b8:	4b2b      	ldr	r3, [pc, #172]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3bc:	f023 0220 	bic.w	r2, r3, #32
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	699b      	ldr	r3, [r3, #24]
 800e3c4:	4928      	ldr	r1, [pc, #160]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e3ca:	4b27      	ldr	r3, [pc, #156]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ce:	4a26      	ldr	r2, [pc, #152]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3d0:	f023 0310 	bic.w	r3, r3, #16
 800e3d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e3d6:	4b24      	ldr	r3, [pc, #144]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e3da:	4b24      	ldr	r3, [pc, #144]	@ (800e46c <RCCEx_PLL2_Config+0x160>)
 800e3dc:	4013      	ands	r3, r2
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	69d2      	ldr	r2, [r2, #28]
 800e3e2:	00d2      	lsls	r2, r2, #3
 800e3e4:	4920      	ldr	r1, [pc, #128]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e3ea:	4b1f      	ldr	r3, [pc, #124]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3ee:	4a1e      	ldr	r2, [pc, #120]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3f0:	f043 0310 	orr.w	r3, r3, #16
 800e3f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d106      	bne.n	800e40a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e400:	4a19      	ldr	r2, [pc, #100]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e402:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e406:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e408:	e00f      	b.n	800e42a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d106      	bne.n	800e41e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e410:	4b15      	ldr	r3, [pc, #84]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e414:	4a14      	ldr	r2, [pc, #80]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e41a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e41c:	e005      	b.n	800e42a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e41e:	4b12      	ldr	r3, [pc, #72]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e422:	4a11      	ldr	r2, [pc, #68]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e424:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e428:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e42a:	4b0f      	ldr	r3, [pc, #60]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4a0e      	ldr	r2, [pc, #56]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e430:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e436:	f7f7 faf1 	bl	8005a1c <HAL_GetTick>
 800e43a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e43c:	e008      	b.n	800e450 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e43e:	f7f7 faed 	bl	8005a1c <HAL_GetTick>
 800e442:	4602      	mov	r2, r0
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d901      	bls.n	800e450 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e44c:	2303      	movs	r3, #3
 800e44e:	e006      	b.n	800e45e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e450:	4b05      	ldr	r3, [pc, #20]	@ (800e468 <RCCEx_PLL2_Config+0x15c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d0f0      	beq.n	800e43e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	58024400 	.word	0x58024400
 800e46c:	ffff0007 	.word	0xffff0007

0800e470 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e47e:	4b53      	ldr	r3, [pc, #332]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e482:	f003 0303 	and.w	r3, r3, #3
 800e486:	2b03      	cmp	r3, #3
 800e488:	d101      	bne.n	800e48e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	e099      	b.n	800e5c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e48e:	4b4f      	ldr	r3, [pc, #316]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a4e      	ldr	r2, [pc, #312]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e498:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e49a:	f7f7 fabf 	bl	8005a1c <HAL_GetTick>
 800e49e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e4a0:	e008      	b.n	800e4b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e4a2:	f7f7 fabb 	bl	8005a1c <HAL_GetTick>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d901      	bls.n	800e4b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	e086      	b.n	800e5c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e4b4:	4b45      	ldr	r3, [pc, #276]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d1f0      	bne.n	800e4a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e4c0:	4b42      	ldr	r3, [pc, #264]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	051b      	lsls	r3, r3, #20
 800e4ce:	493f      	ldr	r1, [pc, #252]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	628b      	str	r3, [r1, #40]	@ 0x28
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	025b      	lsls	r3, r3, #9
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	431a      	orrs	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	041b      	lsls	r3, r3, #16
 800e4f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e4f6:	431a      	orrs	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	691b      	ldr	r3, [r3, #16]
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	061b      	lsls	r3, r3, #24
 800e500:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e504:	4931      	ldr	r1, [pc, #196]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e506:	4313      	orrs	r3, r2
 800e508:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e50a:	4b30      	ldr	r3, [pc, #192]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e50e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	695b      	ldr	r3, [r3, #20]
 800e516:	492d      	ldr	r1, [pc, #180]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e518:	4313      	orrs	r3, r2
 800e51a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e51c:	4b2b      	ldr	r3, [pc, #172]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e520:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	699b      	ldr	r3, [r3, #24]
 800e528:	4928      	ldr	r1, [pc, #160]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e52a:	4313      	orrs	r3, r2
 800e52c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e52e:	4b27      	ldr	r3, [pc, #156]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e532:	4a26      	ldr	r2, [pc, #152]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e538:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e53a:	4b24      	ldr	r3, [pc, #144]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e53c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e53e:	4b24      	ldr	r3, [pc, #144]	@ (800e5d0 <RCCEx_PLL3_Config+0x160>)
 800e540:	4013      	ands	r3, r2
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	69d2      	ldr	r2, [r2, #28]
 800e546:	00d2      	lsls	r2, r2, #3
 800e548:	4920      	ldr	r1, [pc, #128]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e54a:	4313      	orrs	r3, r2
 800e54c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e54e:	4b1f      	ldr	r3, [pc, #124]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e552:	4a1e      	ldr	r2, [pc, #120]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e558:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d106      	bne.n	800e56e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e560:	4b1a      	ldr	r3, [pc, #104]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e564:	4a19      	ldr	r2, [pc, #100]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e566:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e56a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e56c:	e00f      	b.n	800e58e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d106      	bne.n	800e582 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e574:	4b15      	ldr	r3, [pc, #84]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e578:	4a14      	ldr	r2, [pc, #80]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e57a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e57e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e580:	e005      	b.n	800e58e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e582:	4b12      	ldr	r3, [pc, #72]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e586:	4a11      	ldr	r2, [pc, #68]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e588:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e58c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e58e:	4b0f      	ldr	r3, [pc, #60]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4a0e      	ldr	r2, [pc, #56]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e59a:	f7f7 fa3f 	bl	8005a1c <HAL_GetTick>
 800e59e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e5a0:	e008      	b.n	800e5b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e5a2:	f7f7 fa3b 	bl	8005a1c <HAL_GetTick>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d901      	bls.n	800e5b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	e006      	b.n	800e5c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e5b4:	4b05      	ldr	r3, [pc, #20]	@ (800e5cc <RCCEx_PLL3_Config+0x15c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d0f0      	beq.n	800e5a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	58024400 	.word	0x58024400
 800e5d0:	ffff0007 	.word	0xffff0007

0800e5d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e049      	b.n	800e67a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d106      	bne.n	800e600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f7f4 fcee 	bl	8002fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2202      	movs	r2, #2
 800e604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	3304      	adds	r3, #4
 800e610:	4619      	mov	r1, r3
 800e612:	4610      	mov	r0, r2
 800e614:	f000 fb52 	bl	800ecbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2201      	movs	r2, #1
 800e61c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2201      	movs	r2, #1
 800e624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2201      	movs	r2, #1
 800e62c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2201      	movs	r2, #1
 800e634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2201      	movs	r2, #1
 800e63c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2201      	movs	r2, #1
 800e644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2201      	movs	r2, #1
 800e654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2201      	movs	r2, #1
 800e65c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2201      	movs	r2, #1
 800e664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2201      	movs	r2, #1
 800e66c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3708      	adds	r7, #8
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
	...

0800e684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b01      	cmp	r3, #1
 800e696:	d001      	beq.n	800e69c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e698:	2301      	movs	r3, #1
 800e69a:	e054      	b.n	800e746 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2202      	movs	r2, #2
 800e6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	68da      	ldr	r2, [r3, #12]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f042 0201 	orr.w	r2, r2, #1
 800e6b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4a26      	ldr	r2, [pc, #152]	@ (800e754 <HAL_TIM_Base_Start_IT+0xd0>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d022      	beq.n	800e704 <HAL_TIM_Base_Start_IT+0x80>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6c6:	d01d      	beq.n	800e704 <HAL_TIM_Base_Start_IT+0x80>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	4a22      	ldr	r2, [pc, #136]	@ (800e758 <HAL_TIM_Base_Start_IT+0xd4>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d018      	beq.n	800e704 <HAL_TIM_Base_Start_IT+0x80>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4a21      	ldr	r2, [pc, #132]	@ (800e75c <HAL_TIM_Base_Start_IT+0xd8>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d013      	beq.n	800e704 <HAL_TIM_Base_Start_IT+0x80>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e760 <HAL_TIM_Base_Start_IT+0xdc>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d00e      	beq.n	800e704 <HAL_TIM_Base_Start_IT+0x80>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a1e      	ldr	r2, [pc, #120]	@ (800e764 <HAL_TIM_Base_Start_IT+0xe0>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d009      	beq.n	800e704 <HAL_TIM_Base_Start_IT+0x80>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e768 <HAL_TIM_Base_Start_IT+0xe4>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	d004      	beq.n	800e704 <HAL_TIM_Base_Start_IT+0x80>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4a1b      	ldr	r2, [pc, #108]	@ (800e76c <HAL_TIM_Base_Start_IT+0xe8>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d115      	bne.n	800e730 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	689a      	ldr	r2, [r3, #8]
 800e70a:	4b19      	ldr	r3, [pc, #100]	@ (800e770 <HAL_TIM_Base_Start_IT+0xec>)
 800e70c:	4013      	ands	r3, r2
 800e70e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b06      	cmp	r3, #6
 800e714:	d015      	beq.n	800e742 <HAL_TIM_Base_Start_IT+0xbe>
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e71c:	d011      	beq.n	800e742 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f042 0201 	orr.w	r2, r2, #1
 800e72c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e72e:	e008      	b.n	800e742 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f042 0201 	orr.w	r2, r2, #1
 800e73e:	601a      	str	r2, [r3, #0]
 800e740:	e000      	b.n	800e744 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3714      	adds	r7, #20
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	40010000 	.word	0x40010000
 800e758:	40000400 	.word	0x40000400
 800e75c:	40000800 	.word	0x40000800
 800e760:	40000c00 	.word	0x40000c00
 800e764:	40010400 	.word	0x40010400
 800e768:	40001800 	.word	0x40001800
 800e76c:	40014000 	.word	0x40014000
 800e770:	00010007 	.word	0x00010007

0800e774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d101      	bne.n	800e786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	e049      	b.n	800e81a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d106      	bne.n	800e7a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f841 	bl	800e822 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	f000 fa82 	bl	800ecbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2201      	movs	r2, #1
 800e804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e818:	2300      	movs	r3, #0
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3708      	adds	r7, #8
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e822:	b480      	push	{r7}
 800e824:	b083      	sub	sp, #12
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e82a:	bf00      	nop
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b084      	sub	sp, #16
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	f003 0302 	and.w	r3, r3, #2
 800e854:	2b00      	cmp	r3, #0
 800e856:	d020      	beq.n	800e89a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f003 0302 	and.w	r3, r3, #2
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d01b      	beq.n	800e89a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f06f 0202 	mvn.w	r2, #2
 800e86a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	f003 0303 	and.w	r3, r3, #3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d003      	beq.n	800e888 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 f9fd 	bl	800ec80 <HAL_TIM_IC_CaptureCallback>
 800e886:	e005      	b.n	800e894 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 f9ef 	bl	800ec6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fa00 	bl	800ec94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2200      	movs	r2, #0
 800e898:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	f003 0304 	and.w	r3, r3, #4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d020      	beq.n	800e8e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f003 0304 	and.w	r3, r3, #4
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d01b      	beq.n	800e8e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f06f 0204 	mvn.w	r2, #4
 800e8b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2202      	movs	r2, #2
 800e8bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	699b      	ldr	r3, [r3, #24]
 800e8c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d003      	beq.n	800e8d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f9d7 	bl	800ec80 <HAL_TIM_IC_CaptureCallback>
 800e8d2:	e005      	b.n	800e8e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f9c9 	bl	800ec6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 f9da 	bl	800ec94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	f003 0308 	and.w	r3, r3, #8
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d020      	beq.n	800e932 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f003 0308 	and.w	r3, r3, #8
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d01b      	beq.n	800e932 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f06f 0208 	mvn.w	r2, #8
 800e902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2204      	movs	r2, #4
 800e908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	f003 0303 	and.w	r3, r3, #3
 800e914:	2b00      	cmp	r3, #0
 800e916:	d003      	beq.n	800e920 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f9b1 	bl	800ec80 <HAL_TIM_IC_CaptureCallback>
 800e91e:	e005      	b.n	800e92c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f9a3 	bl	800ec6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f9b4 	bl	800ec94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	f003 0310 	and.w	r3, r3, #16
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d020      	beq.n	800e97e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f003 0310 	and.w	r3, r3, #16
 800e942:	2b00      	cmp	r3, #0
 800e944:	d01b      	beq.n	800e97e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f06f 0210 	mvn.w	r2, #16
 800e94e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2208      	movs	r2, #8
 800e954:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	69db      	ldr	r3, [r3, #28]
 800e95c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e960:	2b00      	cmp	r3, #0
 800e962:	d003      	beq.n	800e96c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f98b 	bl	800ec80 <HAL_TIM_IC_CaptureCallback>
 800e96a:	e005      	b.n	800e978 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f000 f97d 	bl	800ec6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f000 f98e 	bl	800ec94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00c      	beq.n	800e9a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d007      	beq.n	800e9a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f06f 0201 	mvn.w	r2, #1
 800e99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7f4 f83b 	bl	8002a18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d104      	bne.n	800e9b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00c      	beq.n	800e9d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d007      	beq.n	800e9d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e9c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 fcfc 	bl	800f3c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00c      	beq.n	800e9f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d007      	beq.n	800e9f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e9ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 fcf4 	bl	800f3dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00c      	beq.n	800ea18 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d007      	beq.n	800ea18 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ea10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f948 	bl	800eca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	f003 0320 	and.w	r3, r3, #32
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00c      	beq.n	800ea3c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f003 0320 	and.w	r3, r3, #32
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d007      	beq.n	800ea3c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f06f 0220 	mvn.w	r2, #32
 800ea34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 fcbc 	bl	800f3b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea3c:	bf00      	nop
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b086      	sub	sp, #24
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea50:	2300      	movs	r3, #0
 800ea52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d101      	bne.n	800ea62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ea5e:	2302      	movs	r3, #2
 800ea60:	e0ff      	b.n	800ec62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2201      	movs	r2, #1
 800ea66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b14      	cmp	r3, #20
 800ea6e:	f200 80f0 	bhi.w	800ec52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ea72:	a201      	add	r2, pc, #4	@ (adr r2, 800ea78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ea74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea78:	0800eacd 	.word	0x0800eacd
 800ea7c:	0800ec53 	.word	0x0800ec53
 800ea80:	0800ec53 	.word	0x0800ec53
 800ea84:	0800ec53 	.word	0x0800ec53
 800ea88:	0800eb0d 	.word	0x0800eb0d
 800ea8c:	0800ec53 	.word	0x0800ec53
 800ea90:	0800ec53 	.word	0x0800ec53
 800ea94:	0800ec53 	.word	0x0800ec53
 800ea98:	0800eb4f 	.word	0x0800eb4f
 800ea9c:	0800ec53 	.word	0x0800ec53
 800eaa0:	0800ec53 	.word	0x0800ec53
 800eaa4:	0800ec53 	.word	0x0800ec53
 800eaa8:	0800eb8f 	.word	0x0800eb8f
 800eaac:	0800ec53 	.word	0x0800ec53
 800eab0:	0800ec53 	.word	0x0800ec53
 800eab4:	0800ec53 	.word	0x0800ec53
 800eab8:	0800ebd1 	.word	0x0800ebd1
 800eabc:	0800ec53 	.word	0x0800ec53
 800eac0:	0800ec53 	.word	0x0800ec53
 800eac4:	0800ec53 	.word	0x0800ec53
 800eac8:	0800ec11 	.word	0x0800ec11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68b9      	ldr	r1, [r7, #8]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f000 f998 	bl	800ee08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	699a      	ldr	r2, [r3, #24]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f042 0208 	orr.w	r2, r2, #8
 800eae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	699a      	ldr	r2, [r3, #24]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f022 0204 	bic.w	r2, r2, #4
 800eaf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6999      	ldr	r1, [r3, #24]
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	691a      	ldr	r2, [r3, #16]
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	430a      	orrs	r2, r1
 800eb08:	619a      	str	r2, [r3, #24]
      break;
 800eb0a:	e0a5      	b.n	800ec58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68b9      	ldr	r1, [r7, #8]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fa08 	bl	800ef28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	699a      	ldr	r2, [r3, #24]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eb26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	699a      	ldr	r2, [r3, #24]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eb36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6999      	ldr	r1, [r3, #24]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	691b      	ldr	r3, [r3, #16]
 800eb42:	021a      	lsls	r2, r3, #8
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	430a      	orrs	r2, r1
 800eb4a:	619a      	str	r2, [r3, #24]
      break;
 800eb4c:	e084      	b.n	800ec58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 fa71 	bl	800f03c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	69da      	ldr	r2, [r3, #28]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f042 0208 	orr.w	r2, r2, #8
 800eb68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	69da      	ldr	r2, [r3, #28]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f022 0204 	bic.w	r2, r2, #4
 800eb78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	69d9      	ldr	r1, [r3, #28]
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	691a      	ldr	r2, [r3, #16]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	61da      	str	r2, [r3, #28]
      break;
 800eb8c:	e064      	b.n	800ec58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	68b9      	ldr	r1, [r7, #8]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 fad9 	bl	800f14c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	69da      	ldr	r2, [r3, #28]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	69da      	ldr	r2, [r3, #28]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ebb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	69d9      	ldr	r1, [r3, #28]
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	021a      	lsls	r2, r3, #8
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	430a      	orrs	r2, r1
 800ebcc:	61da      	str	r2, [r3, #28]
      break;
 800ebce:	e043      	b.n	800ec58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68b9      	ldr	r1, [r7, #8]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 fb22 	bl	800f220 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f042 0208 	orr.w	r2, r2, #8
 800ebea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f022 0204 	bic.w	r2, r2, #4
 800ebfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	691a      	ldr	r2, [r3, #16]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	430a      	orrs	r2, r1
 800ec0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ec0e:	e023      	b.n	800ec58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	68b9      	ldr	r1, [r7, #8]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 fb66 	bl	800f2e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	691b      	ldr	r3, [r3, #16]
 800ec46:	021a      	lsls	r2, r3, #8
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	430a      	orrs	r2, r1
 800ec4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ec50:	e002      	b.n	800ec58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ec52:	2301      	movs	r3, #1
 800ec54:	75fb      	strb	r3, [r7, #23]
      break;
 800ec56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3718      	adds	r7, #24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop

0800ec6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec74:	bf00      	nop
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec88:	bf00      	nop
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec9c:	bf00      	nop
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a46      	ldr	r2, [pc, #280]	@ (800ede8 <TIM_Base_SetConfig+0x12c>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d013      	beq.n	800ecfc <TIM_Base_SetConfig+0x40>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecda:	d00f      	beq.n	800ecfc <TIM_Base_SetConfig+0x40>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a43      	ldr	r2, [pc, #268]	@ (800edec <TIM_Base_SetConfig+0x130>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d00b      	beq.n	800ecfc <TIM_Base_SetConfig+0x40>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a42      	ldr	r2, [pc, #264]	@ (800edf0 <TIM_Base_SetConfig+0x134>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d007      	beq.n	800ecfc <TIM_Base_SetConfig+0x40>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a41      	ldr	r2, [pc, #260]	@ (800edf4 <TIM_Base_SetConfig+0x138>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d003      	beq.n	800ecfc <TIM_Base_SetConfig+0x40>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4a40      	ldr	r2, [pc, #256]	@ (800edf8 <TIM_Base_SetConfig+0x13c>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d108      	bne.n	800ed0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a35      	ldr	r2, [pc, #212]	@ (800ede8 <TIM_Base_SetConfig+0x12c>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d01f      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed1c:	d01b      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a32      	ldr	r2, [pc, #200]	@ (800edec <TIM_Base_SetConfig+0x130>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d017      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a31      	ldr	r2, [pc, #196]	@ (800edf0 <TIM_Base_SetConfig+0x134>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d013      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a30      	ldr	r2, [pc, #192]	@ (800edf4 <TIM_Base_SetConfig+0x138>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d00f      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a2f      	ldr	r2, [pc, #188]	@ (800edf8 <TIM_Base_SetConfig+0x13c>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d00b      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a2e      	ldr	r2, [pc, #184]	@ (800edfc <TIM_Base_SetConfig+0x140>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d007      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4a2d      	ldr	r2, [pc, #180]	@ (800ee00 <TIM_Base_SetConfig+0x144>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d003      	beq.n	800ed56 <TIM_Base_SetConfig+0x9a>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4a2c      	ldr	r2, [pc, #176]	@ (800ee04 <TIM_Base_SetConfig+0x148>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d108      	bne.n	800ed68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	695b      	ldr	r3, [r3, #20]
 800ed72:	4313      	orrs	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	689a      	ldr	r2, [r3, #8]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a16      	ldr	r2, [pc, #88]	@ (800ede8 <TIM_Base_SetConfig+0x12c>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d00f      	beq.n	800edb4 <TIM_Base_SetConfig+0xf8>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a18      	ldr	r2, [pc, #96]	@ (800edf8 <TIM_Base_SetConfig+0x13c>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d00b      	beq.n	800edb4 <TIM_Base_SetConfig+0xf8>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a17      	ldr	r2, [pc, #92]	@ (800edfc <TIM_Base_SetConfig+0x140>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d007      	beq.n	800edb4 <TIM_Base_SetConfig+0xf8>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4a16      	ldr	r2, [pc, #88]	@ (800ee00 <TIM_Base_SetConfig+0x144>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d003      	beq.n	800edb4 <TIM_Base_SetConfig+0xf8>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4a15      	ldr	r2, [pc, #84]	@ (800ee04 <TIM_Base_SetConfig+0x148>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d103      	bne.n	800edbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	691a      	ldr	r2, [r3, #16]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	f003 0301 	and.w	r3, r3, #1
 800edca:	2b01      	cmp	r3, #1
 800edcc:	d105      	bne.n	800edda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	f023 0201 	bic.w	r2, r3, #1
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	611a      	str	r2, [r3, #16]
  }
}
 800edda:	bf00      	nop
 800eddc:	3714      	adds	r7, #20
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	40010000 	.word	0x40010000
 800edec:	40000400 	.word	0x40000400
 800edf0:	40000800 	.word	0x40000800
 800edf4:	40000c00 	.word	0x40000c00
 800edf8:	40010400 	.word	0x40010400
 800edfc:	40014000 	.word	0x40014000
 800ee00:	40014400 	.word	0x40014400
 800ee04:	40014800 	.word	0x40014800

0800ee08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b087      	sub	sp, #28
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6a1b      	ldr	r3, [r3, #32]
 800ee1c:	f023 0201 	bic.w	r2, r3, #1
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	4b37      	ldr	r3, [pc, #220]	@ (800ef10 <TIM_OC1_SetConfig+0x108>)
 800ee34:	4013      	ands	r3, r2
 800ee36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f023 0303 	bic.w	r3, r3, #3
 800ee3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	4313      	orrs	r3, r2
 800ee48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	f023 0302 	bic.w	r3, r3, #2
 800ee50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a2d      	ldr	r2, [pc, #180]	@ (800ef14 <TIM_OC1_SetConfig+0x10c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d00f      	beq.n	800ee84 <TIM_OC1_SetConfig+0x7c>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4a2c      	ldr	r2, [pc, #176]	@ (800ef18 <TIM_OC1_SetConfig+0x110>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d00b      	beq.n	800ee84 <TIM_OC1_SetConfig+0x7c>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a2b      	ldr	r2, [pc, #172]	@ (800ef1c <TIM_OC1_SetConfig+0x114>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d007      	beq.n	800ee84 <TIM_OC1_SetConfig+0x7c>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a2a      	ldr	r2, [pc, #168]	@ (800ef20 <TIM_OC1_SetConfig+0x118>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d003      	beq.n	800ee84 <TIM_OC1_SetConfig+0x7c>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4a29      	ldr	r2, [pc, #164]	@ (800ef24 <TIM_OC1_SetConfig+0x11c>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d10c      	bne.n	800ee9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	f023 0308 	bic.w	r3, r3, #8
 800ee8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	697a      	ldr	r2, [r7, #20]
 800ee92:	4313      	orrs	r3, r2
 800ee94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	f023 0304 	bic.w	r3, r3, #4
 800ee9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	4a1c      	ldr	r2, [pc, #112]	@ (800ef14 <TIM_OC1_SetConfig+0x10c>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d00f      	beq.n	800eec6 <TIM_OC1_SetConfig+0xbe>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4a1b      	ldr	r2, [pc, #108]	@ (800ef18 <TIM_OC1_SetConfig+0x110>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d00b      	beq.n	800eec6 <TIM_OC1_SetConfig+0xbe>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	4a1a      	ldr	r2, [pc, #104]	@ (800ef1c <TIM_OC1_SetConfig+0x114>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d007      	beq.n	800eec6 <TIM_OC1_SetConfig+0xbe>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4a19      	ldr	r2, [pc, #100]	@ (800ef20 <TIM_OC1_SetConfig+0x118>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d003      	beq.n	800eec6 <TIM_OC1_SetConfig+0xbe>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4a18      	ldr	r2, [pc, #96]	@ (800ef24 <TIM_OC1_SetConfig+0x11c>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d111      	bne.n	800eeea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	4313      	orrs	r3, r2
 800eede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	693a      	ldr	r2, [r7, #16]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	685a      	ldr	r2, [r3, #4]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	697a      	ldr	r2, [r7, #20]
 800ef02:	621a      	str	r2, [r3, #32]
}
 800ef04:	bf00      	nop
 800ef06:	371c      	adds	r7, #28
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0e:	4770      	bx	lr
 800ef10:	fffeff8f 	.word	0xfffeff8f
 800ef14:	40010000 	.word	0x40010000
 800ef18:	40010400 	.word	0x40010400
 800ef1c:	40014000 	.word	0x40014000
 800ef20:	40014400 	.word	0x40014400
 800ef24:	40014800 	.word	0x40014800

0800ef28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b087      	sub	sp, #28
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a1b      	ldr	r3, [r3, #32]
 800ef36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a1b      	ldr	r3, [r3, #32]
 800ef3c:	f023 0210 	bic.w	r2, r3, #16
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	4b34      	ldr	r3, [pc, #208]	@ (800f024 <TIM_OC2_SetConfig+0xfc>)
 800ef54:	4013      	ands	r3, r2
 800ef56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	021b      	lsls	r3, r3, #8
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	f023 0320 	bic.w	r3, r3, #32
 800ef72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	689b      	ldr	r3, [r3, #8]
 800ef78:	011b      	lsls	r3, r3, #4
 800ef7a:	697a      	ldr	r2, [r7, #20]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a29      	ldr	r2, [pc, #164]	@ (800f028 <TIM_OC2_SetConfig+0x100>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d003      	beq.n	800ef90 <TIM_OC2_SetConfig+0x68>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a28      	ldr	r2, [pc, #160]	@ (800f02c <TIM_OC2_SetConfig+0x104>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d10d      	bne.n	800efac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	011b      	lsls	r3, r3, #4
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	4313      	orrs	r3, r2
 800efa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a1e      	ldr	r2, [pc, #120]	@ (800f028 <TIM_OC2_SetConfig+0x100>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d00f      	beq.n	800efd4 <TIM_OC2_SetConfig+0xac>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4a1d      	ldr	r2, [pc, #116]	@ (800f02c <TIM_OC2_SetConfig+0x104>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d00b      	beq.n	800efd4 <TIM_OC2_SetConfig+0xac>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a1c      	ldr	r2, [pc, #112]	@ (800f030 <TIM_OC2_SetConfig+0x108>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d007      	beq.n	800efd4 <TIM_OC2_SetConfig+0xac>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a1b      	ldr	r2, [pc, #108]	@ (800f034 <TIM_OC2_SetConfig+0x10c>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d003      	beq.n	800efd4 <TIM_OC2_SetConfig+0xac>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a1a      	ldr	r2, [pc, #104]	@ (800f038 <TIM_OC2_SetConfig+0x110>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d113      	bne.n	800effc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800efda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800efe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	695b      	ldr	r3, [r3, #20]
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	693a      	ldr	r2, [r7, #16]
 800efec:	4313      	orrs	r3, r2
 800efee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	699b      	ldr	r3, [r3, #24]
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	693a      	ldr	r2, [r7, #16]
 800eff8:	4313      	orrs	r3, r2
 800effa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	693a      	ldr	r2, [r7, #16]
 800f000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	621a      	str	r2, [r3, #32]
}
 800f016:	bf00      	nop
 800f018:	371c      	adds	r7, #28
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop
 800f024:	feff8fff 	.word	0xfeff8fff
 800f028:	40010000 	.word	0x40010000
 800f02c:	40010400 	.word	0x40010400
 800f030:	40014000 	.word	0x40014000
 800f034:	40014400 	.word	0x40014400
 800f038:	40014800 	.word	0x40014800

0800f03c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b087      	sub	sp, #28
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6a1b      	ldr	r3, [r3, #32]
 800f04a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6a1b      	ldr	r3, [r3, #32]
 800f050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	69db      	ldr	r3, [r3, #28]
 800f062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	4b33      	ldr	r3, [pc, #204]	@ (800f134 <TIM_OC3_SetConfig+0xf8>)
 800f068:	4013      	ands	r3, r2
 800f06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f023 0303 	bic.w	r3, r3, #3
 800f072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	021b      	lsls	r3, r3, #8
 800f08c:	697a      	ldr	r2, [r7, #20]
 800f08e:	4313      	orrs	r3, r2
 800f090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a28      	ldr	r2, [pc, #160]	@ (800f138 <TIM_OC3_SetConfig+0xfc>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d003      	beq.n	800f0a2 <TIM_OC3_SetConfig+0x66>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4a27      	ldr	r2, [pc, #156]	@ (800f13c <TIM_OC3_SetConfig+0x100>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d10d      	bne.n	800f0be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f0a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	021b      	lsls	r3, r3, #8
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f0bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a1d      	ldr	r2, [pc, #116]	@ (800f138 <TIM_OC3_SetConfig+0xfc>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d00f      	beq.n	800f0e6 <TIM_OC3_SetConfig+0xaa>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a1c      	ldr	r2, [pc, #112]	@ (800f13c <TIM_OC3_SetConfig+0x100>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00b      	beq.n	800f0e6 <TIM_OC3_SetConfig+0xaa>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a1b      	ldr	r2, [pc, #108]	@ (800f140 <TIM_OC3_SetConfig+0x104>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d007      	beq.n	800f0e6 <TIM_OC3_SetConfig+0xaa>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a1a      	ldr	r2, [pc, #104]	@ (800f144 <TIM_OC3_SetConfig+0x108>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d003      	beq.n	800f0e6 <TIM_OC3_SetConfig+0xaa>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a19      	ldr	r2, [pc, #100]	@ (800f148 <TIM_OC3_SetConfig+0x10c>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d113      	bne.n	800f10e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	695b      	ldr	r3, [r3, #20]
 800f0fa:	011b      	lsls	r3, r3, #4
 800f0fc:	693a      	ldr	r2, [r7, #16]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	011b      	lsls	r3, r3, #4
 800f108:	693a      	ldr	r2, [r7, #16]
 800f10a:	4313      	orrs	r3, r2
 800f10c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	693a      	ldr	r2, [r7, #16]
 800f112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	68fa      	ldr	r2, [r7, #12]
 800f118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	685a      	ldr	r2, [r3, #4]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	697a      	ldr	r2, [r7, #20]
 800f126:	621a      	str	r2, [r3, #32]
}
 800f128:	bf00      	nop
 800f12a:	371c      	adds	r7, #28
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr
 800f134:	fffeff8f 	.word	0xfffeff8f
 800f138:	40010000 	.word	0x40010000
 800f13c:	40010400 	.word	0x40010400
 800f140:	40014000 	.word	0x40014000
 800f144:	40014400 	.word	0x40014400
 800f148:	40014800 	.word	0x40014800

0800f14c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b087      	sub	sp, #28
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	6a1b      	ldr	r3, [r3, #32]
 800f15a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6a1b      	ldr	r3, [r3, #32]
 800f160:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	69db      	ldr	r3, [r3, #28]
 800f172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	4b24      	ldr	r3, [pc, #144]	@ (800f208 <TIM_OC4_SetConfig+0xbc>)
 800f178:	4013      	ands	r3, r2
 800f17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	021b      	lsls	r3, r3, #8
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	031b      	lsls	r3, r3, #12
 800f19e:	693a      	ldr	r2, [r7, #16]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a19      	ldr	r2, [pc, #100]	@ (800f20c <TIM_OC4_SetConfig+0xc0>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d00f      	beq.n	800f1cc <TIM_OC4_SetConfig+0x80>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a18      	ldr	r2, [pc, #96]	@ (800f210 <TIM_OC4_SetConfig+0xc4>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d00b      	beq.n	800f1cc <TIM_OC4_SetConfig+0x80>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a17      	ldr	r2, [pc, #92]	@ (800f214 <TIM_OC4_SetConfig+0xc8>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d007      	beq.n	800f1cc <TIM_OC4_SetConfig+0x80>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a16      	ldr	r2, [pc, #88]	@ (800f218 <TIM_OC4_SetConfig+0xcc>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d003      	beq.n	800f1cc <TIM_OC4_SetConfig+0x80>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a15      	ldr	r2, [pc, #84]	@ (800f21c <TIM_OC4_SetConfig+0xd0>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d109      	bne.n	800f1e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f1d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	019b      	lsls	r3, r3, #6
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	621a      	str	r2, [r3, #32]
}
 800f1fa:	bf00      	nop
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	feff8fff 	.word	0xfeff8fff
 800f20c:	40010000 	.word	0x40010000
 800f210:	40010400 	.word	0x40010400
 800f214:	40014000 	.word	0x40014000
 800f218:	40014400 	.word	0x40014400
 800f21c:	40014800 	.word	0x40014800

0800f220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f220:	b480      	push	{r7}
 800f222:	b087      	sub	sp, #28
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a1b      	ldr	r3, [r3, #32]
 800f22e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a1b      	ldr	r3, [r3, #32]
 800f234:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	4b21      	ldr	r3, [pc, #132]	@ (800f2d0 <TIM_OC5_SetConfig+0xb0>)
 800f24c:	4013      	ands	r3, r2
 800f24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	4313      	orrs	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	041b      	lsls	r3, r3, #16
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4a18      	ldr	r2, [pc, #96]	@ (800f2d4 <TIM_OC5_SetConfig+0xb4>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d00f      	beq.n	800f296 <TIM_OC5_SetConfig+0x76>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4a17      	ldr	r2, [pc, #92]	@ (800f2d8 <TIM_OC5_SetConfig+0xb8>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d00b      	beq.n	800f296 <TIM_OC5_SetConfig+0x76>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4a16      	ldr	r2, [pc, #88]	@ (800f2dc <TIM_OC5_SetConfig+0xbc>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d007      	beq.n	800f296 <TIM_OC5_SetConfig+0x76>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4a15      	ldr	r2, [pc, #84]	@ (800f2e0 <TIM_OC5_SetConfig+0xc0>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d003      	beq.n	800f296 <TIM_OC5_SetConfig+0x76>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4a14      	ldr	r2, [pc, #80]	@ (800f2e4 <TIM_OC5_SetConfig+0xc4>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d109      	bne.n	800f2aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f29c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	695b      	ldr	r3, [r3, #20]
 800f2a2:	021b      	lsls	r3, r3, #8
 800f2a4:	697a      	ldr	r2, [r7, #20]
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	697a      	ldr	r2, [r7, #20]
 800f2ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	68fa      	ldr	r2, [r7, #12]
 800f2b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	685a      	ldr	r2, [r3, #4]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	621a      	str	r2, [r3, #32]
}
 800f2c4:	bf00      	nop
 800f2c6:	371c      	adds	r7, #28
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr
 800f2d0:	fffeff8f 	.word	0xfffeff8f
 800f2d4:	40010000 	.word	0x40010000
 800f2d8:	40010400 	.word	0x40010400
 800f2dc:	40014000 	.word	0x40014000
 800f2e0:	40014400 	.word	0x40014400
 800f2e4:	40014800 	.word	0x40014800

0800f2e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b087      	sub	sp, #28
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a1b      	ldr	r3, [r3, #32]
 800f2f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6a1b      	ldr	r3, [r3, #32]
 800f2fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	4b22      	ldr	r3, [pc, #136]	@ (800f39c <TIM_OC6_SetConfig+0xb4>)
 800f314:	4013      	ands	r3, r2
 800f316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	021b      	lsls	r3, r3, #8
 800f31e:	68fa      	ldr	r2, [r7, #12]
 800f320:	4313      	orrs	r3, r2
 800f322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f32a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	051b      	lsls	r3, r3, #20
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	4313      	orrs	r3, r2
 800f336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	4a19      	ldr	r2, [pc, #100]	@ (800f3a0 <TIM_OC6_SetConfig+0xb8>)
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d00f      	beq.n	800f360 <TIM_OC6_SetConfig+0x78>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a18      	ldr	r2, [pc, #96]	@ (800f3a4 <TIM_OC6_SetConfig+0xbc>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d00b      	beq.n	800f360 <TIM_OC6_SetConfig+0x78>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4a17      	ldr	r2, [pc, #92]	@ (800f3a8 <TIM_OC6_SetConfig+0xc0>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d007      	beq.n	800f360 <TIM_OC6_SetConfig+0x78>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4a16      	ldr	r2, [pc, #88]	@ (800f3ac <TIM_OC6_SetConfig+0xc4>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d003      	beq.n	800f360 <TIM_OC6_SetConfig+0x78>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4a15      	ldr	r2, [pc, #84]	@ (800f3b0 <TIM_OC6_SetConfig+0xc8>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d109      	bne.n	800f374 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	695b      	ldr	r3, [r3, #20]
 800f36c:	029b      	lsls	r3, r3, #10
 800f36e:	697a      	ldr	r2, [r7, #20]
 800f370:	4313      	orrs	r3, r2
 800f372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	697a      	ldr	r2, [r7, #20]
 800f378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	621a      	str	r2, [r3, #32]
}
 800f38e:	bf00      	nop
 800f390:	371c      	adds	r7, #28
 800f392:	46bd      	mov	sp, r7
 800f394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	feff8fff 	.word	0xfeff8fff
 800f3a0:	40010000 	.word	0x40010000
 800f3a4:	40010400 	.word	0x40010400
 800f3a8:	40014000 	.word	0x40014000
 800f3ac:	40014400 	.word	0x40014400
 800f3b0:	40014800 	.word	0x40014800

0800f3b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f3e4:	bf00      	nop
 800f3e6:	370c      	adds	r7, #12
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d101      	bne.n	800f402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f3fe:	2301      	movs	r3, #1
 800f400:	e042      	b.n	800f488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d106      	bne.n	800f41a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7f3 fe3f 	bl	8003098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2224      	movs	r2, #36	@ 0x24
 800f41e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f022 0201 	bic.w	r2, r2, #1
 800f430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f436:	2b00      	cmp	r3, #0
 800f438:	d002      	beq.n	800f440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f001 fa4e 	bl	80108dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 fce3 	bl	800fe0c <UART_SetConfig>
 800f446:	4603      	mov	r3, r0
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d101      	bne.n	800f450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f44c:	2301      	movs	r3, #1
 800f44e:	e01b      	b.n	800f488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	685a      	ldr	r2, [r3, #4]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f45e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	689a      	ldr	r2, [r3, #8]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f46e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681a      	ldr	r2, [r3, #0]
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f042 0201 	orr.w	r2, r2, #1
 800f47e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f001 facd 	bl	8010a20 <UART_CheckIdleState>
 800f486:	4603      	mov	r3, r0
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b08a      	sub	sp, #40	@ 0x28
 800f494:	af02      	add	r7, sp, #8
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	603b      	str	r3, [r7, #0]
 800f49c:	4613      	mov	r3, r2
 800f49e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4a6:	2b20      	cmp	r3, #32
 800f4a8:	d17b      	bne.n	800f5a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d002      	beq.n	800f4b6 <HAL_UART_Transmit+0x26>
 800f4b0:	88fb      	ldrh	r3, [r7, #6]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e074      	b.n	800f5a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2221      	movs	r2, #33	@ 0x21
 800f4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f4ca:	f7f6 faa7 	bl	8005a1c <HAL_GetTick>
 800f4ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	88fa      	ldrh	r2, [r7, #6]
 800f4d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	88fa      	ldrh	r2, [r7, #6]
 800f4dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	689b      	ldr	r3, [r3, #8]
 800f4e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f4e8:	d108      	bne.n	800f4fc <HAL_UART_Transmit+0x6c>
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	691b      	ldr	r3, [r3, #16]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d104      	bne.n	800f4fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	61bb      	str	r3, [r7, #24]
 800f4fa:	e003      	b.n	800f504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f500:	2300      	movs	r3, #0
 800f502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f504:	e030      	b.n	800f568 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	2200      	movs	r2, #0
 800f50e:	2180      	movs	r1, #128	@ 0x80
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f001 fb2f 	bl	8010b74 <UART_WaitOnFlagUntilTimeout>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d005      	beq.n	800f528 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2220      	movs	r2, #32
 800f520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f524:	2303      	movs	r3, #3
 800f526:	e03d      	b.n	800f5a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10b      	bne.n	800f546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	461a      	mov	r2, r3
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f53c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	3302      	adds	r3, #2
 800f542:	61bb      	str	r3, [r7, #24]
 800f544:	e007      	b.n	800f556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	781a      	ldrb	r2, [r3, #0]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	3301      	adds	r3, #1
 800f554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	3b01      	subs	r3, #1
 800f560:	b29a      	uxth	r2, r3
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f56e:	b29b      	uxth	r3, r3
 800f570:	2b00      	cmp	r3, #0
 800f572:	d1c8      	bne.n	800f506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	2200      	movs	r2, #0
 800f57c:	2140      	movs	r1, #64	@ 0x40
 800f57e:	68f8      	ldr	r0, [r7, #12]
 800f580:	f001 faf8 	bl	8010b74 <UART_WaitOnFlagUntilTimeout>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d005      	beq.n	800f596 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2220      	movs	r2, #32
 800f58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f592:	2303      	movs	r3, #3
 800f594:	e006      	b.n	800f5a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2220      	movs	r2, #32
 800f59a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	e000      	b.n	800f5a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f5a2:	2302      	movs	r3, #2
  }
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3720      	adds	r7, #32
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}

0800f5ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08a      	sub	sp, #40	@ 0x28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f5c0:	2b20      	cmp	r3, #32
 800f5c2:	d137      	bne.n	800f634 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d002      	beq.n	800f5d0 <HAL_UART_Receive_IT+0x24>
 800f5ca:	88fb      	ldrh	r3, [r7, #6]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d101      	bne.n	800f5d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	e030      	b.n	800f636 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4a18      	ldr	r2, [pc, #96]	@ (800f640 <HAL_UART_Receive_IT+0x94>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d01f      	beq.n	800f624 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d018      	beq.n	800f624 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	e853 3f00 	ldrex	r3, [r3]
 800f5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f606:	627b      	str	r3, [r7, #36]	@ 0x24
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	461a      	mov	r2, r3
 800f60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f610:	623b      	str	r3, [r7, #32]
 800f612:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f614:	69f9      	ldr	r1, [r7, #28]
 800f616:	6a3a      	ldr	r2, [r7, #32]
 800f618:	e841 2300 	strex	r3, r2, [r1]
 800f61c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1e6      	bne.n	800f5f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f624:	88fb      	ldrh	r3, [r7, #6]
 800f626:	461a      	mov	r2, r3
 800f628:	68b9      	ldr	r1, [r7, #8]
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f001 fb10 	bl	8010c50 <UART_Start_Receive_IT>
 800f630:	4603      	mov	r3, r0
 800f632:	e000      	b.n	800f636 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f634:	2302      	movs	r3, #2
  }
}
 800f636:	4618      	mov	r0, r3
 800f638:	3728      	adds	r7, #40	@ 0x28
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	58000c00 	.word	0x58000c00

0800f644 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b0ba      	sub	sp, #232	@ 0xe8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	69db      	ldr	r3, [r3, #28]
 800f652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f66a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f66e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f672:	4013      	ands	r3, r2
 800f674:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d11b      	bne.n	800f6b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f684:	f003 0320 	and.w	r3, r3, #32
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d015      	beq.n	800f6b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f68c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f690:	f003 0320 	and.w	r3, r3, #32
 800f694:	2b00      	cmp	r3, #0
 800f696:	d105      	bne.n	800f6a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f69c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d009      	beq.n	800f6b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f000 8377 	beq.w	800fd9c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	4798      	blx	r3
      }
      return;
 800f6b6:	e371      	b.n	800fd9c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f6b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	f000 8123 	beq.w	800f908 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f6c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f6c6:	4b8d      	ldr	r3, [pc, #564]	@ (800f8fc <HAL_UART_IRQHandler+0x2b8>)
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d106      	bne.n	800f6dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f6ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f6d2:	4b8b      	ldr	r3, [pc, #556]	@ (800f900 <HAL_UART_IRQHandler+0x2bc>)
 800f6d4:	4013      	ands	r3, r2
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f000 8116 	beq.w	800f908 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6e0:	f003 0301 	and.w	r3, r3, #1
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d011      	beq.n	800f70c <HAL_UART_IRQHandler+0xc8>
 800f6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d00b      	beq.n	800f70c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f702:	f043 0201 	orr.w	r2, r3, #1
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f710:	f003 0302 	and.w	r3, r3, #2
 800f714:	2b00      	cmp	r3, #0
 800f716:	d011      	beq.n	800f73c <HAL_UART_IRQHandler+0xf8>
 800f718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f71c:	f003 0301 	and.w	r3, r3, #1
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00b      	beq.n	800f73c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	2202      	movs	r2, #2
 800f72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f732:	f043 0204 	orr.w	r2, r3, #4
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f740:	f003 0304 	and.w	r3, r3, #4
 800f744:	2b00      	cmp	r3, #0
 800f746:	d011      	beq.n	800f76c <HAL_UART_IRQHandler+0x128>
 800f748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f74c:	f003 0301 	and.w	r3, r3, #1
 800f750:	2b00      	cmp	r3, #0
 800f752:	d00b      	beq.n	800f76c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2204      	movs	r2, #4
 800f75a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f762:	f043 0202 	orr.w	r2, r3, #2
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f770:	f003 0308 	and.w	r3, r3, #8
 800f774:	2b00      	cmp	r3, #0
 800f776:	d017      	beq.n	800f7a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f77c:	f003 0320 	and.w	r3, r3, #32
 800f780:	2b00      	cmp	r3, #0
 800f782:	d105      	bne.n	800f790 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f784:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f788:	4b5c      	ldr	r3, [pc, #368]	@ (800f8fc <HAL_UART_IRQHandler+0x2b8>)
 800f78a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00b      	beq.n	800f7a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2208      	movs	r2, #8
 800f796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f79e:	f043 0208 	orr.w	r2, r3, #8
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d012      	beq.n	800f7da <HAL_UART_IRQHandler+0x196>
 800f7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00c      	beq.n	800f7da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f7c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7d0:	f043 0220 	orr.w	r2, r3, #32
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 82dd 	beq.w	800fda0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7ea:	f003 0320 	and.w	r3, r3, #32
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d013      	beq.n	800f81a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7f6:	f003 0320 	and.w	r3, r3, #32
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d105      	bne.n	800f80a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f806:	2b00      	cmp	r3, #0
 800f808:	d007      	beq.n	800f81a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d003      	beq.n	800f81a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f820:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f82e:	2b40      	cmp	r3, #64	@ 0x40
 800f830:	d005      	beq.n	800f83e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f836:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d054      	beq.n	800f8e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f001 fb28 	bl	8010e94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	689b      	ldr	r3, [r3, #8]
 800f84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f84e:	2b40      	cmp	r3, #64	@ 0x40
 800f850:	d146      	bne.n	800f8e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	3308      	adds	r3, #8
 800f858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f85c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f860:	e853 3f00 	ldrex	r3, [r3]
 800f864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f868:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f86c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	3308      	adds	r3, #8
 800f87a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f87e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f886:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f88a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f88e:	e841 2300 	strex	r3, r2, [r1]
 800f892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d1d9      	bne.n	800f852 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d017      	beq.n	800f8d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8ae:	4a15      	ldr	r2, [pc, #84]	@ (800f904 <HAL_UART_IRQHandler+0x2c0>)
 800f8b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7f7 ff0f 	bl	80076dc <HAL_DMA_Abort_IT>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d019      	beq.n	800f8f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f8d2:	4610      	mov	r0, r2
 800f8d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8d6:	e00f      	b.n	800f8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 fa81 	bl	800fde0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8de:	e00b      	b.n	800f8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f000 fa7d 	bl	800fde0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8e6:	e007      	b.n	800f8f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fa79 	bl	800fde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f8f6:	e253      	b.n	800fda0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8f8:	bf00      	nop
    return;
 800f8fa:	e251      	b.n	800fda0 <HAL_UART_IRQHandler+0x75c>
 800f8fc:	10000001 	.word	0x10000001
 800f900:	04000120 	.word	0x04000120
 800f904:	08010f61 	.word	0x08010f61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	f040 81e7 	bne.w	800fce0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f916:	f003 0310 	and.w	r3, r3, #16
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 81e0 	beq.w	800fce0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f924:	f003 0310 	and.w	r3, r3, #16
 800f928:	2b00      	cmp	r3, #0
 800f92a:	f000 81d9 	beq.w	800fce0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2210      	movs	r2, #16
 800f934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	689b      	ldr	r3, [r3, #8]
 800f93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f940:	2b40      	cmp	r3, #64	@ 0x40
 800f942:	f040 8151 	bne.w	800fbe8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a96      	ldr	r2, [pc, #600]	@ (800fba8 <HAL_UART_IRQHandler+0x564>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d068      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4a93      	ldr	r2, [pc, #588]	@ (800fbac <HAL_UART_IRQHandler+0x568>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d061      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4a91      	ldr	r2, [pc, #580]	@ (800fbb0 <HAL_UART_IRQHandler+0x56c>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d05a      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	4a8e      	ldr	r2, [pc, #568]	@ (800fbb4 <HAL_UART_IRQHandler+0x570>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d053      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4a8c      	ldr	r2, [pc, #560]	@ (800fbb8 <HAL_UART_IRQHandler+0x574>)
 800f988:	4293      	cmp	r3, r2
 800f98a:	d04c      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a89      	ldr	r2, [pc, #548]	@ (800fbbc <HAL_UART_IRQHandler+0x578>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d045      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a87      	ldr	r2, [pc, #540]	@ (800fbc0 <HAL_UART_IRQHandler+0x57c>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d03e      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a84      	ldr	r2, [pc, #528]	@ (800fbc4 <HAL_UART_IRQHandler+0x580>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d037      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	4a82      	ldr	r2, [pc, #520]	@ (800fbc8 <HAL_UART_IRQHandler+0x584>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d030      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a7f      	ldr	r2, [pc, #508]	@ (800fbcc <HAL_UART_IRQHandler+0x588>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d029      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a7d      	ldr	r2, [pc, #500]	@ (800fbd0 <HAL_UART_IRQHandler+0x58c>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d022      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a7a      	ldr	r2, [pc, #488]	@ (800fbd4 <HAL_UART_IRQHandler+0x590>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d01b      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	4a78      	ldr	r2, [pc, #480]	@ (800fbd8 <HAL_UART_IRQHandler+0x594>)
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d014      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a75      	ldr	r2, [pc, #468]	@ (800fbdc <HAL_UART_IRQHandler+0x598>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d00d      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4a73      	ldr	r2, [pc, #460]	@ (800fbe0 <HAL_UART_IRQHandler+0x59c>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d006      	beq.n	800fa26 <HAL_UART_IRQHandler+0x3e2>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a70      	ldr	r2, [pc, #448]	@ (800fbe4 <HAL_UART_IRQHandler+0x5a0>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d106      	bne.n	800fa34 <HAL_UART_IRQHandler+0x3f0>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	e005      	b.n	800fa40 <HAL_UART_IRQHandler+0x3fc>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 81ab 	beq.w	800fda4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fa54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	f080 81a3 	bcs.w	800fda4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa6e:	69db      	ldr	r3, [r3, #28]
 800fa70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa74:	f000 8087 	beq.w	800fb86 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fa84:	e853 3f00 	ldrex	r3, [r3]
 800fa88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fa8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fa90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800faa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800faa6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800faae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fab2:	e841 2300 	strex	r3, r2, [r1]
 800fab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800faba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d1da      	bne.n	800fa78 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3308      	adds	r3, #8
 800fac8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800facc:	e853 3f00 	ldrex	r3, [r3]
 800fad0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fad2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fad4:	f023 0301 	bic.w	r3, r3, #1
 800fad8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	3308      	adds	r3, #8
 800fae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fae6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800faea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800faee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800faf2:	e841 2300 	strex	r3, r2, [r1]
 800faf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800faf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d1e1      	bne.n	800fac2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	3308      	adds	r3, #8
 800fb04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb08:	e853 3f00 	ldrex	r3, [r3]
 800fb0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fb0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	3308      	adds	r3, #8
 800fb1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fb24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fb28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb2a:	e841 2300 	strex	r3, r2, [r1]
 800fb2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fb30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1e3      	bne.n	800fafe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2220      	movs	r2, #32
 800fb3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2200      	movs	r2, #0
 800fb42:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb4c:	e853 3f00 	ldrex	r3, [r3]
 800fb50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb54:	f023 0310 	bic.w	r3, r3, #16
 800fb58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	461a      	mov	r2, r3
 800fb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb66:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb6e:	e841 2300 	strex	r3, r2, [r1]
 800fb72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fb74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1e4      	bne.n	800fb44 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7f7 fa8d 	bl	80070a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2202      	movs	r2, #2
 800fb8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	1ad3      	subs	r3, r2, r3
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	4619      	mov	r1, r3
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 f927 	bl	800fdf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fba6:	e0fd      	b.n	800fda4 <HAL_UART_IRQHandler+0x760>
 800fba8:	40020010 	.word	0x40020010
 800fbac:	40020028 	.word	0x40020028
 800fbb0:	40020040 	.word	0x40020040
 800fbb4:	40020058 	.word	0x40020058
 800fbb8:	40020070 	.word	0x40020070
 800fbbc:	40020088 	.word	0x40020088
 800fbc0:	400200a0 	.word	0x400200a0
 800fbc4:	400200b8 	.word	0x400200b8
 800fbc8:	40020410 	.word	0x40020410
 800fbcc:	40020428 	.word	0x40020428
 800fbd0:	40020440 	.word	0x40020440
 800fbd4:	40020458 	.word	0x40020458
 800fbd8:	40020470 	.word	0x40020470
 800fbdc:	40020488 	.word	0x40020488
 800fbe0:	400204a0 	.word	0x400204a0
 800fbe4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	1ad3      	subs	r3, r2, r3
 800fbf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f000 80cf 	beq.w	800fda8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800fc0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	f000 80ca 	beq.w	800fda8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc1c:	e853 3f00 	ldrex	r3, [r3]
 800fc20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	461a      	mov	r2, r3
 800fc32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fc36:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc38:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc3e:	e841 2300 	strex	r3, r2, [r1]
 800fc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1e4      	bne.n	800fc14 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	3308      	adds	r3, #8
 800fc50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc54:	e853 3f00 	ldrex	r3, [r3]
 800fc58:	623b      	str	r3, [r7, #32]
   return(result);
 800fc5a:	6a3a      	ldr	r2, [r7, #32]
 800fc5c:	4b55      	ldr	r3, [pc, #340]	@ (800fdb4 <HAL_UART_IRQHandler+0x770>)
 800fc5e:	4013      	ands	r3, r2
 800fc60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	3308      	adds	r3, #8
 800fc6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fc6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800fc70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc76:	e841 2300 	strex	r3, r2, [r1]
 800fc7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1e3      	bne.n	800fc4a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2220      	movs	r2, #32
 800fc86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	e853 3f00 	ldrex	r3, [r3]
 800fca2:	60fb      	str	r3, [r7, #12]
   return(result);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f023 0310 	bic.w	r3, r3, #16
 800fcaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fcb8:	61fb      	str	r3, [r7, #28]
 800fcba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbc:	69b9      	ldr	r1, [r7, #24]
 800fcbe:	69fa      	ldr	r2, [r7, #28]
 800fcc0:	e841 2300 	strex	r3, r2, [r1]
 800fcc4:	617b      	str	r3, [r7, #20]
   return(result);
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1e4      	bne.n	800fc96 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2202      	movs	r2, #2
 800fcd0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fcd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 f88b 	bl	800fdf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fcde:	e063      	b.n	800fda8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d00e      	beq.n	800fd0a <HAL_UART_IRQHandler+0x6c6>
 800fcec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d008      	beq.n	800fd0a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fd00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f001 fe8a 	bl	8011a1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd08:	e051      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d014      	beq.n	800fd40 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d105      	bne.n	800fd2e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fd22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d008      	beq.n	800fd40 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d03a      	beq.n	800fdac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	4798      	blx	r3
    }
    return;
 800fd3e:	e035      	b.n	800fdac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d009      	beq.n	800fd60 <HAL_UART_IRQHandler+0x71c>
 800fd4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d003      	beq.n	800fd60 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f001 f917 	bl	8010f8c <UART_EndTransmit_IT>
    return;
 800fd5e:	e026      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d009      	beq.n	800fd80 <HAL_UART_IRQHandler+0x73c>
 800fd6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d003      	beq.n	800fd80 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f001 fe63 	bl	8011a44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd7e:	e016      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fd80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d010      	beq.n	800fdae <HAL_UART_IRQHandler+0x76a>
 800fd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	da0c      	bge.n	800fdae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f001 fe4b 	bl	8011a30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd9a:	e008      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
      return;
 800fd9c:	bf00      	nop
 800fd9e:	e006      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
    return;
 800fda0:	bf00      	nop
 800fda2:	e004      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
      return;
 800fda4:	bf00      	nop
 800fda6:	e002      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
      return;
 800fda8:	bf00      	nop
 800fdaa:	e000      	b.n	800fdae <HAL_UART_IRQHandler+0x76a>
    return;
 800fdac:	bf00      	nop
  }
}
 800fdae:	37e8      	adds	r7, #232	@ 0xe8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	effffffe 	.word	0xeffffffe

0800fdb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b083      	sub	sp, #12
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fdc0:	bf00      	nop
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fdd4:	bf00      	nop
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fde8:	bf00      	nop
 800fdea:	370c      	adds	r7, #12
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe00:	bf00      	nop
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fe10:	b092      	sub	sp, #72	@ 0x48
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe16:	2300      	movs	r3, #0
 800fe18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	689a      	ldr	r2, [r3, #8]
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	431a      	orrs	r2, r3
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	695b      	ldr	r3, [r3, #20]
 800fe2a:	431a      	orrs	r2, r3
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	69db      	ldr	r3, [r3, #28]
 800fe30:	4313      	orrs	r3, r2
 800fe32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	4bbe      	ldr	r3, [pc, #760]	@ (8010134 <UART_SetConfig+0x328>)
 800fe3c:	4013      	ands	r3, r2
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	6812      	ldr	r2, [r2, #0]
 800fe42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe44:	430b      	orrs	r3, r1
 800fe46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	68da      	ldr	r2, [r3, #12]
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	430a      	orrs	r2, r1
 800fe5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	699b      	ldr	r3, [r3, #24]
 800fe62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4ab3      	ldr	r2, [pc, #716]	@ (8010138 <UART_SetConfig+0x32c>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d004      	beq.n	800fe78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe74:	4313      	orrs	r3, r2
 800fe76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	689a      	ldr	r2, [r3, #8]
 800fe7e:	4baf      	ldr	r3, [pc, #700]	@ (801013c <UART_SetConfig+0x330>)
 800fe80:	4013      	ands	r3, r2
 800fe82:	697a      	ldr	r2, [r7, #20]
 800fe84:	6812      	ldr	r2, [r2, #0]
 800fe86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fe88:	430b      	orrs	r3, r1
 800fe8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe92:	f023 010f 	bic.w	r1, r3, #15
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	430a      	orrs	r2, r1
 800fea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4aa6      	ldr	r2, [pc, #664]	@ (8010140 <UART_SetConfig+0x334>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d177      	bne.n	800ff9c <UART_SetConfig+0x190>
 800feac:	4ba5      	ldr	r3, [pc, #660]	@ (8010144 <UART_SetConfig+0x338>)
 800feae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800feb4:	2b28      	cmp	r3, #40	@ 0x28
 800feb6:	d86d      	bhi.n	800ff94 <UART_SetConfig+0x188>
 800feb8:	a201      	add	r2, pc, #4	@ (adr r2, 800fec0 <UART_SetConfig+0xb4>)
 800feba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800febe:	bf00      	nop
 800fec0:	0800ff65 	.word	0x0800ff65
 800fec4:	0800ff95 	.word	0x0800ff95
 800fec8:	0800ff95 	.word	0x0800ff95
 800fecc:	0800ff95 	.word	0x0800ff95
 800fed0:	0800ff95 	.word	0x0800ff95
 800fed4:	0800ff95 	.word	0x0800ff95
 800fed8:	0800ff95 	.word	0x0800ff95
 800fedc:	0800ff95 	.word	0x0800ff95
 800fee0:	0800ff6d 	.word	0x0800ff6d
 800fee4:	0800ff95 	.word	0x0800ff95
 800fee8:	0800ff95 	.word	0x0800ff95
 800feec:	0800ff95 	.word	0x0800ff95
 800fef0:	0800ff95 	.word	0x0800ff95
 800fef4:	0800ff95 	.word	0x0800ff95
 800fef8:	0800ff95 	.word	0x0800ff95
 800fefc:	0800ff95 	.word	0x0800ff95
 800ff00:	0800ff75 	.word	0x0800ff75
 800ff04:	0800ff95 	.word	0x0800ff95
 800ff08:	0800ff95 	.word	0x0800ff95
 800ff0c:	0800ff95 	.word	0x0800ff95
 800ff10:	0800ff95 	.word	0x0800ff95
 800ff14:	0800ff95 	.word	0x0800ff95
 800ff18:	0800ff95 	.word	0x0800ff95
 800ff1c:	0800ff95 	.word	0x0800ff95
 800ff20:	0800ff7d 	.word	0x0800ff7d
 800ff24:	0800ff95 	.word	0x0800ff95
 800ff28:	0800ff95 	.word	0x0800ff95
 800ff2c:	0800ff95 	.word	0x0800ff95
 800ff30:	0800ff95 	.word	0x0800ff95
 800ff34:	0800ff95 	.word	0x0800ff95
 800ff38:	0800ff95 	.word	0x0800ff95
 800ff3c:	0800ff95 	.word	0x0800ff95
 800ff40:	0800ff85 	.word	0x0800ff85
 800ff44:	0800ff95 	.word	0x0800ff95
 800ff48:	0800ff95 	.word	0x0800ff95
 800ff4c:	0800ff95 	.word	0x0800ff95
 800ff50:	0800ff95 	.word	0x0800ff95
 800ff54:	0800ff95 	.word	0x0800ff95
 800ff58:	0800ff95 	.word	0x0800ff95
 800ff5c:	0800ff95 	.word	0x0800ff95
 800ff60:	0800ff8d 	.word	0x0800ff8d
 800ff64:	2301      	movs	r3, #1
 800ff66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff6a:	e222      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ff6c:	2304      	movs	r3, #4
 800ff6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff72:	e21e      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ff74:	2308      	movs	r3, #8
 800ff76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff7a:	e21a      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ff7c:	2310      	movs	r3, #16
 800ff7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff82:	e216      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ff84:	2320      	movs	r3, #32
 800ff86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8a:	e212      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ff8c:	2340      	movs	r3, #64	@ 0x40
 800ff8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff92:	e20e      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ff94:	2380      	movs	r3, #128	@ 0x80
 800ff96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff9a:	e20a      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	4a69      	ldr	r2, [pc, #420]	@ (8010148 <UART_SetConfig+0x33c>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d130      	bne.n	8010008 <UART_SetConfig+0x1fc>
 800ffa6:	4b67      	ldr	r3, [pc, #412]	@ (8010144 <UART_SetConfig+0x338>)
 800ffa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ffaa:	f003 0307 	and.w	r3, r3, #7
 800ffae:	2b05      	cmp	r3, #5
 800ffb0:	d826      	bhi.n	8010000 <UART_SetConfig+0x1f4>
 800ffb2:	a201      	add	r2, pc, #4	@ (adr r2, 800ffb8 <UART_SetConfig+0x1ac>)
 800ffb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb8:	0800ffd1 	.word	0x0800ffd1
 800ffbc:	0800ffd9 	.word	0x0800ffd9
 800ffc0:	0800ffe1 	.word	0x0800ffe1
 800ffc4:	0800ffe9 	.word	0x0800ffe9
 800ffc8:	0800fff1 	.word	0x0800fff1
 800ffcc:	0800fff9 	.word	0x0800fff9
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffd6:	e1ec      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ffd8:	2304      	movs	r3, #4
 800ffda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffde:	e1e8      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ffe0:	2308      	movs	r3, #8
 800ffe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffe6:	e1e4      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800ffe8:	2310      	movs	r3, #16
 800ffea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffee:	e1e0      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800fff0:	2320      	movs	r3, #32
 800fff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fff6:	e1dc      	b.n	80103b2 <UART_SetConfig+0x5a6>
 800fff8:	2340      	movs	r3, #64	@ 0x40
 800fffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fffe:	e1d8      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010000:	2380      	movs	r3, #128	@ 0x80
 8010002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010006:	e1d4      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a4f      	ldr	r2, [pc, #316]	@ (801014c <UART_SetConfig+0x340>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d130      	bne.n	8010074 <UART_SetConfig+0x268>
 8010012:	4b4c      	ldr	r3, [pc, #304]	@ (8010144 <UART_SetConfig+0x338>)
 8010014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010016:	f003 0307 	and.w	r3, r3, #7
 801001a:	2b05      	cmp	r3, #5
 801001c:	d826      	bhi.n	801006c <UART_SetConfig+0x260>
 801001e:	a201      	add	r2, pc, #4	@ (adr r2, 8010024 <UART_SetConfig+0x218>)
 8010020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010024:	0801003d 	.word	0x0801003d
 8010028:	08010045 	.word	0x08010045
 801002c:	0801004d 	.word	0x0801004d
 8010030:	08010055 	.word	0x08010055
 8010034:	0801005d 	.word	0x0801005d
 8010038:	08010065 	.word	0x08010065
 801003c:	2300      	movs	r3, #0
 801003e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010042:	e1b6      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010044:	2304      	movs	r3, #4
 8010046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801004a:	e1b2      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801004c:	2308      	movs	r3, #8
 801004e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010052:	e1ae      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010054:	2310      	movs	r3, #16
 8010056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801005a:	e1aa      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801005c:	2320      	movs	r3, #32
 801005e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010062:	e1a6      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010064:	2340      	movs	r3, #64	@ 0x40
 8010066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801006a:	e1a2      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801006c:	2380      	movs	r3, #128	@ 0x80
 801006e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010072:	e19e      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a35      	ldr	r2, [pc, #212]	@ (8010150 <UART_SetConfig+0x344>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d130      	bne.n	80100e0 <UART_SetConfig+0x2d4>
 801007e:	4b31      	ldr	r3, [pc, #196]	@ (8010144 <UART_SetConfig+0x338>)
 8010080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010082:	f003 0307 	and.w	r3, r3, #7
 8010086:	2b05      	cmp	r3, #5
 8010088:	d826      	bhi.n	80100d8 <UART_SetConfig+0x2cc>
 801008a:	a201      	add	r2, pc, #4	@ (adr r2, 8010090 <UART_SetConfig+0x284>)
 801008c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010090:	080100a9 	.word	0x080100a9
 8010094:	080100b1 	.word	0x080100b1
 8010098:	080100b9 	.word	0x080100b9
 801009c:	080100c1 	.word	0x080100c1
 80100a0:	080100c9 	.word	0x080100c9
 80100a4:	080100d1 	.word	0x080100d1
 80100a8:	2300      	movs	r3, #0
 80100aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ae:	e180      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80100b0:	2304      	movs	r3, #4
 80100b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100b6:	e17c      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80100b8:	2308      	movs	r3, #8
 80100ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100be:	e178      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80100c0:	2310      	movs	r3, #16
 80100c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100c6:	e174      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80100c8:	2320      	movs	r3, #32
 80100ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ce:	e170      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80100d0:	2340      	movs	r3, #64	@ 0x40
 80100d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100d6:	e16c      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80100d8:	2380      	movs	r3, #128	@ 0x80
 80100da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100de:	e168      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a1b      	ldr	r2, [pc, #108]	@ (8010154 <UART_SetConfig+0x348>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d142      	bne.n	8010170 <UART_SetConfig+0x364>
 80100ea:	4b16      	ldr	r3, [pc, #88]	@ (8010144 <UART_SetConfig+0x338>)
 80100ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100ee:	f003 0307 	and.w	r3, r3, #7
 80100f2:	2b05      	cmp	r3, #5
 80100f4:	d838      	bhi.n	8010168 <UART_SetConfig+0x35c>
 80100f6:	a201      	add	r2, pc, #4	@ (adr r2, 80100fc <UART_SetConfig+0x2f0>)
 80100f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fc:	08010115 	.word	0x08010115
 8010100:	0801011d 	.word	0x0801011d
 8010104:	08010125 	.word	0x08010125
 8010108:	0801012d 	.word	0x0801012d
 801010c:	08010159 	.word	0x08010159
 8010110:	08010161 	.word	0x08010161
 8010114:	2300      	movs	r3, #0
 8010116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801011a:	e14a      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801011c:	2304      	movs	r3, #4
 801011e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010122:	e146      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010124:	2308      	movs	r3, #8
 8010126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801012a:	e142      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801012c:	2310      	movs	r3, #16
 801012e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010132:	e13e      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010134:	cfff69f3 	.word	0xcfff69f3
 8010138:	58000c00 	.word	0x58000c00
 801013c:	11fff4ff 	.word	0x11fff4ff
 8010140:	40011000 	.word	0x40011000
 8010144:	58024400 	.word	0x58024400
 8010148:	40004400 	.word	0x40004400
 801014c:	40004800 	.word	0x40004800
 8010150:	40004c00 	.word	0x40004c00
 8010154:	40005000 	.word	0x40005000
 8010158:	2320      	movs	r3, #32
 801015a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801015e:	e128      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010160:	2340      	movs	r3, #64	@ 0x40
 8010162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010166:	e124      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010168:	2380      	movs	r3, #128	@ 0x80
 801016a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801016e:	e120      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4acb      	ldr	r2, [pc, #812]	@ (80104a4 <UART_SetConfig+0x698>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d176      	bne.n	8010268 <UART_SetConfig+0x45c>
 801017a:	4bcb      	ldr	r3, [pc, #812]	@ (80104a8 <UART_SetConfig+0x69c>)
 801017c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801017e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010182:	2b28      	cmp	r3, #40	@ 0x28
 8010184:	d86c      	bhi.n	8010260 <UART_SetConfig+0x454>
 8010186:	a201      	add	r2, pc, #4	@ (adr r2, 801018c <UART_SetConfig+0x380>)
 8010188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018c:	08010231 	.word	0x08010231
 8010190:	08010261 	.word	0x08010261
 8010194:	08010261 	.word	0x08010261
 8010198:	08010261 	.word	0x08010261
 801019c:	08010261 	.word	0x08010261
 80101a0:	08010261 	.word	0x08010261
 80101a4:	08010261 	.word	0x08010261
 80101a8:	08010261 	.word	0x08010261
 80101ac:	08010239 	.word	0x08010239
 80101b0:	08010261 	.word	0x08010261
 80101b4:	08010261 	.word	0x08010261
 80101b8:	08010261 	.word	0x08010261
 80101bc:	08010261 	.word	0x08010261
 80101c0:	08010261 	.word	0x08010261
 80101c4:	08010261 	.word	0x08010261
 80101c8:	08010261 	.word	0x08010261
 80101cc:	08010241 	.word	0x08010241
 80101d0:	08010261 	.word	0x08010261
 80101d4:	08010261 	.word	0x08010261
 80101d8:	08010261 	.word	0x08010261
 80101dc:	08010261 	.word	0x08010261
 80101e0:	08010261 	.word	0x08010261
 80101e4:	08010261 	.word	0x08010261
 80101e8:	08010261 	.word	0x08010261
 80101ec:	08010249 	.word	0x08010249
 80101f0:	08010261 	.word	0x08010261
 80101f4:	08010261 	.word	0x08010261
 80101f8:	08010261 	.word	0x08010261
 80101fc:	08010261 	.word	0x08010261
 8010200:	08010261 	.word	0x08010261
 8010204:	08010261 	.word	0x08010261
 8010208:	08010261 	.word	0x08010261
 801020c:	08010251 	.word	0x08010251
 8010210:	08010261 	.word	0x08010261
 8010214:	08010261 	.word	0x08010261
 8010218:	08010261 	.word	0x08010261
 801021c:	08010261 	.word	0x08010261
 8010220:	08010261 	.word	0x08010261
 8010224:	08010261 	.word	0x08010261
 8010228:	08010261 	.word	0x08010261
 801022c:	08010259 	.word	0x08010259
 8010230:	2301      	movs	r3, #1
 8010232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010236:	e0bc      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010238:	2304      	movs	r3, #4
 801023a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801023e:	e0b8      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010240:	2308      	movs	r3, #8
 8010242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010246:	e0b4      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010248:	2310      	movs	r3, #16
 801024a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801024e:	e0b0      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010250:	2320      	movs	r3, #32
 8010252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010256:	e0ac      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010258:	2340      	movs	r3, #64	@ 0x40
 801025a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801025e:	e0a8      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010260:	2380      	movs	r3, #128	@ 0x80
 8010262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010266:	e0a4      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a8f      	ldr	r2, [pc, #572]	@ (80104ac <UART_SetConfig+0x6a0>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d130      	bne.n	80102d4 <UART_SetConfig+0x4c8>
 8010272:	4b8d      	ldr	r3, [pc, #564]	@ (80104a8 <UART_SetConfig+0x69c>)
 8010274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010276:	f003 0307 	and.w	r3, r3, #7
 801027a:	2b05      	cmp	r3, #5
 801027c:	d826      	bhi.n	80102cc <UART_SetConfig+0x4c0>
 801027e:	a201      	add	r2, pc, #4	@ (adr r2, 8010284 <UART_SetConfig+0x478>)
 8010280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010284:	0801029d 	.word	0x0801029d
 8010288:	080102a5 	.word	0x080102a5
 801028c:	080102ad 	.word	0x080102ad
 8010290:	080102b5 	.word	0x080102b5
 8010294:	080102bd 	.word	0x080102bd
 8010298:	080102c5 	.word	0x080102c5
 801029c:	2300      	movs	r3, #0
 801029e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102a2:	e086      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80102a4:	2304      	movs	r3, #4
 80102a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102aa:	e082      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80102ac:	2308      	movs	r3, #8
 80102ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102b2:	e07e      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80102b4:	2310      	movs	r3, #16
 80102b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ba:	e07a      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80102bc:	2320      	movs	r3, #32
 80102be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102c2:	e076      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80102c4:	2340      	movs	r3, #64	@ 0x40
 80102c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ca:	e072      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80102cc:	2380      	movs	r3, #128	@ 0x80
 80102ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102d2:	e06e      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4a75      	ldr	r2, [pc, #468]	@ (80104b0 <UART_SetConfig+0x6a4>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d130      	bne.n	8010340 <UART_SetConfig+0x534>
 80102de:	4b72      	ldr	r3, [pc, #456]	@ (80104a8 <UART_SetConfig+0x69c>)
 80102e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80102e2:	f003 0307 	and.w	r3, r3, #7
 80102e6:	2b05      	cmp	r3, #5
 80102e8:	d826      	bhi.n	8010338 <UART_SetConfig+0x52c>
 80102ea:	a201      	add	r2, pc, #4	@ (adr r2, 80102f0 <UART_SetConfig+0x4e4>)
 80102ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f0:	08010309 	.word	0x08010309
 80102f4:	08010311 	.word	0x08010311
 80102f8:	08010319 	.word	0x08010319
 80102fc:	08010321 	.word	0x08010321
 8010300:	08010329 	.word	0x08010329
 8010304:	08010331 	.word	0x08010331
 8010308:	2300      	movs	r3, #0
 801030a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801030e:	e050      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010310:	2304      	movs	r3, #4
 8010312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010316:	e04c      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010318:	2308      	movs	r3, #8
 801031a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801031e:	e048      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010320:	2310      	movs	r3, #16
 8010322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010326:	e044      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010328:	2320      	movs	r3, #32
 801032a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801032e:	e040      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010330:	2340      	movs	r3, #64	@ 0x40
 8010332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010336:	e03c      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010338:	2380      	movs	r3, #128	@ 0x80
 801033a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801033e:	e038      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a5b      	ldr	r2, [pc, #364]	@ (80104b4 <UART_SetConfig+0x6a8>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d130      	bne.n	80103ac <UART_SetConfig+0x5a0>
 801034a:	4b57      	ldr	r3, [pc, #348]	@ (80104a8 <UART_SetConfig+0x69c>)
 801034c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801034e:	f003 0307 	and.w	r3, r3, #7
 8010352:	2b05      	cmp	r3, #5
 8010354:	d826      	bhi.n	80103a4 <UART_SetConfig+0x598>
 8010356:	a201      	add	r2, pc, #4	@ (adr r2, 801035c <UART_SetConfig+0x550>)
 8010358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801035c:	08010375 	.word	0x08010375
 8010360:	0801037d 	.word	0x0801037d
 8010364:	08010385 	.word	0x08010385
 8010368:	0801038d 	.word	0x0801038d
 801036c:	08010395 	.word	0x08010395
 8010370:	0801039d 	.word	0x0801039d
 8010374:	2302      	movs	r3, #2
 8010376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801037a:	e01a      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801037c:	2304      	movs	r3, #4
 801037e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010382:	e016      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010384:	2308      	movs	r3, #8
 8010386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801038a:	e012      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801038c:	2310      	movs	r3, #16
 801038e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010392:	e00e      	b.n	80103b2 <UART_SetConfig+0x5a6>
 8010394:	2320      	movs	r3, #32
 8010396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801039a:	e00a      	b.n	80103b2 <UART_SetConfig+0x5a6>
 801039c:	2340      	movs	r3, #64	@ 0x40
 801039e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103a2:	e006      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80103a4:	2380      	movs	r3, #128	@ 0x80
 80103a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103aa:	e002      	b.n	80103b2 <UART_SetConfig+0x5a6>
 80103ac:	2380      	movs	r3, #128	@ 0x80
 80103ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a3f      	ldr	r2, [pc, #252]	@ (80104b4 <UART_SetConfig+0x6a8>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	f040 80f8 	bne.w	80105ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80103be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80103c2:	2b20      	cmp	r3, #32
 80103c4:	dc46      	bgt.n	8010454 <UART_SetConfig+0x648>
 80103c6:	2b02      	cmp	r3, #2
 80103c8:	f2c0 8082 	blt.w	80104d0 <UART_SetConfig+0x6c4>
 80103cc:	3b02      	subs	r3, #2
 80103ce:	2b1e      	cmp	r3, #30
 80103d0:	d87e      	bhi.n	80104d0 <UART_SetConfig+0x6c4>
 80103d2:	a201      	add	r2, pc, #4	@ (adr r2, 80103d8 <UART_SetConfig+0x5cc>)
 80103d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103d8:	0801045b 	.word	0x0801045b
 80103dc:	080104d1 	.word	0x080104d1
 80103e0:	08010463 	.word	0x08010463
 80103e4:	080104d1 	.word	0x080104d1
 80103e8:	080104d1 	.word	0x080104d1
 80103ec:	080104d1 	.word	0x080104d1
 80103f0:	08010473 	.word	0x08010473
 80103f4:	080104d1 	.word	0x080104d1
 80103f8:	080104d1 	.word	0x080104d1
 80103fc:	080104d1 	.word	0x080104d1
 8010400:	080104d1 	.word	0x080104d1
 8010404:	080104d1 	.word	0x080104d1
 8010408:	080104d1 	.word	0x080104d1
 801040c:	080104d1 	.word	0x080104d1
 8010410:	08010483 	.word	0x08010483
 8010414:	080104d1 	.word	0x080104d1
 8010418:	080104d1 	.word	0x080104d1
 801041c:	080104d1 	.word	0x080104d1
 8010420:	080104d1 	.word	0x080104d1
 8010424:	080104d1 	.word	0x080104d1
 8010428:	080104d1 	.word	0x080104d1
 801042c:	080104d1 	.word	0x080104d1
 8010430:	080104d1 	.word	0x080104d1
 8010434:	080104d1 	.word	0x080104d1
 8010438:	080104d1 	.word	0x080104d1
 801043c:	080104d1 	.word	0x080104d1
 8010440:	080104d1 	.word	0x080104d1
 8010444:	080104d1 	.word	0x080104d1
 8010448:	080104d1 	.word	0x080104d1
 801044c:	080104d1 	.word	0x080104d1
 8010450:	080104c3 	.word	0x080104c3
 8010454:	2b40      	cmp	r3, #64	@ 0x40
 8010456:	d037      	beq.n	80104c8 <UART_SetConfig+0x6bc>
 8010458:	e03a      	b.n	80104d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801045a:	f7fd fc99 	bl	800dd90 <HAL_RCCEx_GetD3PCLK1Freq>
 801045e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010460:	e03c      	b.n	80104dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010466:	4618      	mov	r0, r3
 8010468:	f7fd fca8 	bl	800ddbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801046c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801046e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010470:	e034      	b.n	80104dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010472:	f107 0318 	add.w	r3, r7, #24
 8010476:	4618      	mov	r0, r3
 8010478:	f7fd fdf4 	bl	800e064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010480:	e02c      	b.n	80104dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010482:	4b09      	ldr	r3, [pc, #36]	@ (80104a8 <UART_SetConfig+0x69c>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f003 0320 	and.w	r3, r3, #32
 801048a:	2b00      	cmp	r3, #0
 801048c:	d016      	beq.n	80104bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801048e:	4b06      	ldr	r3, [pc, #24]	@ (80104a8 <UART_SetConfig+0x69c>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	08db      	lsrs	r3, r3, #3
 8010494:	f003 0303 	and.w	r3, r3, #3
 8010498:	4a07      	ldr	r2, [pc, #28]	@ (80104b8 <UART_SetConfig+0x6ac>)
 801049a:	fa22 f303 	lsr.w	r3, r2, r3
 801049e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80104a0:	e01c      	b.n	80104dc <UART_SetConfig+0x6d0>
 80104a2:	bf00      	nop
 80104a4:	40011400 	.word	0x40011400
 80104a8:	58024400 	.word	0x58024400
 80104ac:	40007800 	.word	0x40007800
 80104b0:	40007c00 	.word	0x40007c00
 80104b4:	58000c00 	.word	0x58000c00
 80104b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80104bc:	4b9d      	ldr	r3, [pc, #628]	@ (8010734 <UART_SetConfig+0x928>)
 80104be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104c0:	e00c      	b.n	80104dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80104c2:	4b9d      	ldr	r3, [pc, #628]	@ (8010738 <UART_SetConfig+0x92c>)
 80104c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104c6:	e009      	b.n	80104dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104ce:	e005      	b.n	80104dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80104d0:	2300      	movs	r3, #0
 80104d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80104d4:	2301      	movs	r3, #1
 80104d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80104da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80104dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f000 81de 	beq.w	80108a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e8:	4a94      	ldr	r2, [pc, #592]	@ (801073c <UART_SetConfig+0x930>)
 80104ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104ee:	461a      	mov	r2, r3
 80104f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80104f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	685a      	ldr	r2, [r3, #4]
 80104fc:	4613      	mov	r3, r2
 80104fe:	005b      	lsls	r3, r3, #1
 8010500:	4413      	add	r3, r2
 8010502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010504:	429a      	cmp	r2, r3
 8010506:	d305      	bcc.n	8010514 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801050e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010510:	429a      	cmp	r2, r3
 8010512:	d903      	bls.n	801051c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010514:	2301      	movs	r3, #1
 8010516:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801051a:	e1c1      	b.n	80108a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801051c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801051e:	2200      	movs	r2, #0
 8010520:	60bb      	str	r3, [r7, #8]
 8010522:	60fa      	str	r2, [r7, #12]
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010528:	4a84      	ldr	r2, [pc, #528]	@ (801073c <UART_SetConfig+0x930>)
 801052a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801052e:	b29b      	uxth	r3, r3
 8010530:	2200      	movs	r2, #0
 8010532:	603b      	str	r3, [r7, #0]
 8010534:	607a      	str	r2, [r7, #4]
 8010536:	e9d7 2300 	ldrd	r2, r3, [r7]
 801053a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801053e:	f7ef ff27 	bl	8000390 <__aeabi_uldivmod>
 8010542:	4602      	mov	r2, r0
 8010544:	460b      	mov	r3, r1
 8010546:	4610      	mov	r0, r2
 8010548:	4619      	mov	r1, r3
 801054a:	f04f 0200 	mov.w	r2, #0
 801054e:	f04f 0300 	mov.w	r3, #0
 8010552:	020b      	lsls	r3, r1, #8
 8010554:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010558:	0202      	lsls	r2, r0, #8
 801055a:	6979      	ldr	r1, [r7, #20]
 801055c:	6849      	ldr	r1, [r1, #4]
 801055e:	0849      	lsrs	r1, r1, #1
 8010560:	2000      	movs	r0, #0
 8010562:	460c      	mov	r4, r1
 8010564:	4605      	mov	r5, r0
 8010566:	eb12 0804 	adds.w	r8, r2, r4
 801056a:	eb43 0905 	adc.w	r9, r3, r5
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	469a      	mov	sl, r3
 8010576:	4693      	mov	fp, r2
 8010578:	4652      	mov	r2, sl
 801057a:	465b      	mov	r3, fp
 801057c:	4640      	mov	r0, r8
 801057e:	4649      	mov	r1, r9
 8010580:	f7ef ff06 	bl	8000390 <__aeabi_uldivmod>
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4613      	mov	r3, r2
 801058a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801058c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801058e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010592:	d308      	bcc.n	80105a6 <UART_SetConfig+0x79a>
 8010594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801059a:	d204      	bcs.n	80105a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105a2:	60da      	str	r2, [r3, #12]
 80105a4:	e17c      	b.n	80108a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80105ac:	e178      	b.n	80108a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	69db      	ldr	r3, [r3, #28]
 80105b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80105b6:	f040 80c5 	bne.w	8010744 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80105ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80105be:	2b20      	cmp	r3, #32
 80105c0:	dc48      	bgt.n	8010654 <UART_SetConfig+0x848>
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	db7b      	blt.n	80106be <UART_SetConfig+0x8b2>
 80105c6:	2b20      	cmp	r3, #32
 80105c8:	d879      	bhi.n	80106be <UART_SetConfig+0x8b2>
 80105ca:	a201      	add	r2, pc, #4	@ (adr r2, 80105d0 <UART_SetConfig+0x7c4>)
 80105cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d0:	0801065b 	.word	0x0801065b
 80105d4:	08010663 	.word	0x08010663
 80105d8:	080106bf 	.word	0x080106bf
 80105dc:	080106bf 	.word	0x080106bf
 80105e0:	0801066b 	.word	0x0801066b
 80105e4:	080106bf 	.word	0x080106bf
 80105e8:	080106bf 	.word	0x080106bf
 80105ec:	080106bf 	.word	0x080106bf
 80105f0:	0801067b 	.word	0x0801067b
 80105f4:	080106bf 	.word	0x080106bf
 80105f8:	080106bf 	.word	0x080106bf
 80105fc:	080106bf 	.word	0x080106bf
 8010600:	080106bf 	.word	0x080106bf
 8010604:	080106bf 	.word	0x080106bf
 8010608:	080106bf 	.word	0x080106bf
 801060c:	080106bf 	.word	0x080106bf
 8010610:	0801068b 	.word	0x0801068b
 8010614:	080106bf 	.word	0x080106bf
 8010618:	080106bf 	.word	0x080106bf
 801061c:	080106bf 	.word	0x080106bf
 8010620:	080106bf 	.word	0x080106bf
 8010624:	080106bf 	.word	0x080106bf
 8010628:	080106bf 	.word	0x080106bf
 801062c:	080106bf 	.word	0x080106bf
 8010630:	080106bf 	.word	0x080106bf
 8010634:	080106bf 	.word	0x080106bf
 8010638:	080106bf 	.word	0x080106bf
 801063c:	080106bf 	.word	0x080106bf
 8010640:	080106bf 	.word	0x080106bf
 8010644:	080106bf 	.word	0x080106bf
 8010648:	080106bf 	.word	0x080106bf
 801064c:	080106bf 	.word	0x080106bf
 8010650:	080106b1 	.word	0x080106b1
 8010654:	2b40      	cmp	r3, #64	@ 0x40
 8010656:	d02e      	beq.n	80106b6 <UART_SetConfig+0x8aa>
 8010658:	e031      	b.n	80106be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801065a:	f7fc f921 	bl	800c8a0 <HAL_RCC_GetPCLK1Freq>
 801065e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010660:	e033      	b.n	80106ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010662:	f7fc f933 	bl	800c8cc <HAL_RCC_GetPCLK2Freq>
 8010666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010668:	e02f      	b.n	80106ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801066a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801066e:	4618      	mov	r0, r3
 8010670:	f7fd fba4 	bl	800ddbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010678:	e027      	b.n	80106ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801067a:	f107 0318 	add.w	r3, r7, #24
 801067e:	4618      	mov	r0, r3
 8010680:	f7fd fcf0 	bl	800e064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010688:	e01f      	b.n	80106ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801068a:	4b2d      	ldr	r3, [pc, #180]	@ (8010740 <UART_SetConfig+0x934>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f003 0320 	and.w	r3, r3, #32
 8010692:	2b00      	cmp	r3, #0
 8010694:	d009      	beq.n	80106aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010696:	4b2a      	ldr	r3, [pc, #168]	@ (8010740 <UART_SetConfig+0x934>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	08db      	lsrs	r3, r3, #3
 801069c:	f003 0303 	and.w	r3, r3, #3
 80106a0:	4a24      	ldr	r2, [pc, #144]	@ (8010734 <UART_SetConfig+0x928>)
 80106a2:	fa22 f303 	lsr.w	r3, r2, r3
 80106a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80106a8:	e00f      	b.n	80106ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80106aa:	4b22      	ldr	r3, [pc, #136]	@ (8010734 <UART_SetConfig+0x928>)
 80106ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106ae:	e00c      	b.n	80106ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80106b0:	4b21      	ldr	r3, [pc, #132]	@ (8010738 <UART_SetConfig+0x92c>)
 80106b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106b4:	e009      	b.n	80106ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80106ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106bc:	e005      	b.n	80106ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80106be:	2300      	movs	r3, #0
 80106c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80106c2:	2301      	movs	r3, #1
 80106c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80106c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80106ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f000 80e7 	beq.w	80108a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106d6:	4a19      	ldr	r2, [pc, #100]	@ (801073c <UART_SetConfig+0x930>)
 80106d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106dc:	461a      	mov	r2, r3
 80106de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80106e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80106e4:	005a      	lsls	r2, r3, #1
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	085b      	lsrs	r3, r3, #1
 80106ec:	441a      	add	r2, r3
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80106f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106fa:	2b0f      	cmp	r3, #15
 80106fc:	d916      	bls.n	801072c <UART_SetConfig+0x920>
 80106fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010704:	d212      	bcs.n	801072c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010708:	b29b      	uxth	r3, r3
 801070a:	f023 030f 	bic.w	r3, r3, #15
 801070e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010712:	085b      	lsrs	r3, r3, #1
 8010714:	b29b      	uxth	r3, r3
 8010716:	f003 0307 	and.w	r3, r3, #7
 801071a:	b29a      	uxth	r2, r3
 801071c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801071e:	4313      	orrs	r3, r2
 8010720:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010728:	60da      	str	r2, [r3, #12]
 801072a:	e0b9      	b.n	80108a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801072c:	2301      	movs	r3, #1
 801072e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010732:	e0b5      	b.n	80108a0 <UART_SetConfig+0xa94>
 8010734:	03d09000 	.word	0x03d09000
 8010738:	003d0900 	.word	0x003d0900
 801073c:	08017cd4 	.word	0x08017cd4
 8010740:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010744:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010748:	2b20      	cmp	r3, #32
 801074a:	dc49      	bgt.n	80107e0 <UART_SetConfig+0x9d4>
 801074c:	2b00      	cmp	r3, #0
 801074e:	db7c      	blt.n	801084a <UART_SetConfig+0xa3e>
 8010750:	2b20      	cmp	r3, #32
 8010752:	d87a      	bhi.n	801084a <UART_SetConfig+0xa3e>
 8010754:	a201      	add	r2, pc, #4	@ (adr r2, 801075c <UART_SetConfig+0x950>)
 8010756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075a:	bf00      	nop
 801075c:	080107e7 	.word	0x080107e7
 8010760:	080107ef 	.word	0x080107ef
 8010764:	0801084b 	.word	0x0801084b
 8010768:	0801084b 	.word	0x0801084b
 801076c:	080107f7 	.word	0x080107f7
 8010770:	0801084b 	.word	0x0801084b
 8010774:	0801084b 	.word	0x0801084b
 8010778:	0801084b 	.word	0x0801084b
 801077c:	08010807 	.word	0x08010807
 8010780:	0801084b 	.word	0x0801084b
 8010784:	0801084b 	.word	0x0801084b
 8010788:	0801084b 	.word	0x0801084b
 801078c:	0801084b 	.word	0x0801084b
 8010790:	0801084b 	.word	0x0801084b
 8010794:	0801084b 	.word	0x0801084b
 8010798:	0801084b 	.word	0x0801084b
 801079c:	08010817 	.word	0x08010817
 80107a0:	0801084b 	.word	0x0801084b
 80107a4:	0801084b 	.word	0x0801084b
 80107a8:	0801084b 	.word	0x0801084b
 80107ac:	0801084b 	.word	0x0801084b
 80107b0:	0801084b 	.word	0x0801084b
 80107b4:	0801084b 	.word	0x0801084b
 80107b8:	0801084b 	.word	0x0801084b
 80107bc:	0801084b 	.word	0x0801084b
 80107c0:	0801084b 	.word	0x0801084b
 80107c4:	0801084b 	.word	0x0801084b
 80107c8:	0801084b 	.word	0x0801084b
 80107cc:	0801084b 	.word	0x0801084b
 80107d0:	0801084b 	.word	0x0801084b
 80107d4:	0801084b 	.word	0x0801084b
 80107d8:	0801084b 	.word	0x0801084b
 80107dc:	0801083d 	.word	0x0801083d
 80107e0:	2b40      	cmp	r3, #64	@ 0x40
 80107e2:	d02e      	beq.n	8010842 <UART_SetConfig+0xa36>
 80107e4:	e031      	b.n	801084a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107e6:	f7fc f85b 	bl	800c8a0 <HAL_RCC_GetPCLK1Freq>
 80107ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80107ec:	e033      	b.n	8010856 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107ee:	f7fc f86d 	bl	800c8cc <HAL_RCC_GetPCLK2Freq>
 80107f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80107f4:	e02f      	b.n	8010856 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fd fade 	bl	800ddbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010804:	e027      	b.n	8010856 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010806:	f107 0318 	add.w	r3, r7, #24
 801080a:	4618      	mov	r0, r3
 801080c:	f7fd fc2a 	bl	800e064 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010814:	e01f      	b.n	8010856 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010816:	4b2d      	ldr	r3, [pc, #180]	@ (80108cc <UART_SetConfig+0xac0>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f003 0320 	and.w	r3, r3, #32
 801081e:	2b00      	cmp	r3, #0
 8010820:	d009      	beq.n	8010836 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010822:	4b2a      	ldr	r3, [pc, #168]	@ (80108cc <UART_SetConfig+0xac0>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	08db      	lsrs	r3, r3, #3
 8010828:	f003 0303 	and.w	r3, r3, #3
 801082c:	4a28      	ldr	r2, [pc, #160]	@ (80108d0 <UART_SetConfig+0xac4>)
 801082e:	fa22 f303 	lsr.w	r3, r2, r3
 8010832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010834:	e00f      	b.n	8010856 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010836:	4b26      	ldr	r3, [pc, #152]	@ (80108d0 <UART_SetConfig+0xac4>)
 8010838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801083a:	e00c      	b.n	8010856 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801083c:	4b25      	ldr	r3, [pc, #148]	@ (80108d4 <UART_SetConfig+0xac8>)
 801083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010840:	e009      	b.n	8010856 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010848:	e005      	b.n	8010856 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801084a:	2300      	movs	r3, #0
 801084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801084e:	2301      	movs	r3, #1
 8010850:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010854:	bf00      	nop
    }

    if (pclk != 0U)
 8010856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010858:	2b00      	cmp	r3, #0
 801085a:	d021      	beq.n	80108a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010860:	4a1d      	ldr	r2, [pc, #116]	@ (80108d8 <UART_SetConfig+0xacc>)
 8010862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010866:	461a      	mov	r2, r3
 8010868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801086a:	fbb3 f2f2 	udiv	r2, r3, r2
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	085b      	lsrs	r3, r3, #1
 8010874:	441a      	add	r2, r3
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	fbb2 f3f3 	udiv	r3, r2, r3
 801087e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010882:	2b0f      	cmp	r3, #15
 8010884:	d909      	bls.n	801089a <UART_SetConfig+0xa8e>
 8010886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801088c:	d205      	bcs.n	801089a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801088e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010890:	b29a      	uxth	r2, r3
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	60da      	str	r2, [r3, #12]
 8010898:	e002      	b.n	80108a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801089a:	2301      	movs	r3, #1
 801089c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	2201      	movs	r2, #1
 80108a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	2201      	movs	r2, #1
 80108ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	2200      	movs	r2, #0
 80108b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	2200      	movs	r2, #0
 80108ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80108bc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	3748      	adds	r7, #72	@ 0x48
 80108c4:	46bd      	mov	sp, r7
 80108c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108ca:	bf00      	nop
 80108cc:	58024400 	.word	0x58024400
 80108d0:	03d09000 	.word	0x03d09000
 80108d4:	003d0900 	.word	0x003d0900
 80108d8:	08017cd4 	.word	0x08017cd4

080108dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108e8:	f003 0308 	and.w	r3, r3, #8
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d00a      	beq.n	8010906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	430a      	orrs	r2, r1
 8010904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801090a:	f003 0301 	and.w	r3, r3, #1
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00a      	beq.n	8010928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	430a      	orrs	r2, r1
 8010926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801092c:	f003 0302 	and.w	r3, r3, #2
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00a      	beq.n	801094a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	430a      	orrs	r2, r1
 8010948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801094e:	f003 0304 	and.w	r3, r3, #4
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00a      	beq.n	801096c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	430a      	orrs	r2, r1
 801096a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010970:	f003 0310 	and.w	r3, r3, #16
 8010974:	2b00      	cmp	r3, #0
 8010976:	d00a      	beq.n	801098e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	430a      	orrs	r2, r1
 801098c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010992:	f003 0320 	and.w	r3, r3, #32
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00a      	beq.n	80109b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	430a      	orrs	r2, r1
 80109ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d01a      	beq.n	80109f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	685b      	ldr	r3, [r3, #4]
 80109c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	430a      	orrs	r2, r1
 80109d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109da:	d10a      	bne.n	80109f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	430a      	orrs	r2, r1
 80109f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d00a      	beq.n	8010a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	430a      	orrs	r2, r1
 8010a12:	605a      	str	r2, [r3, #4]
  }
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b098      	sub	sp, #96	@ 0x60
 8010a24:	af02      	add	r7, sp, #8
 8010a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a30:	f7f4 fff4 	bl	8005a1c <HAL_GetTick>
 8010a34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f003 0308 	and.w	r3, r3, #8
 8010a40:	2b08      	cmp	r3, #8
 8010a42:	d12f      	bne.n	8010aa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 f88e 	bl	8010b74 <UART_WaitOnFlagUntilTimeout>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d022      	beq.n	8010aa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a66:	e853 3f00 	ldrex	r3, [r3]
 8010a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010a72:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	461a      	mov	r2, r3
 8010a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010a82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a84:	e841 2300 	strex	r3, r2, [r1]
 8010a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1e6      	bne.n	8010a5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2220      	movs	r2, #32
 8010a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	e063      	b.n	8010b6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f003 0304 	and.w	r3, r3, #4
 8010aae:	2b04      	cmp	r3, #4
 8010ab0:	d149      	bne.n	8010b46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ab2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010aba:	2200      	movs	r2, #0
 8010abc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 f857 	bl	8010b74 <UART_WaitOnFlagUntilTimeout>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d03c      	beq.n	8010b46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad4:	e853 3f00 	ldrex	r3, [r3]
 8010ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8010ada:	6a3b      	ldr	r3, [r7, #32]
 8010adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8010aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010af2:	e841 2300 	strex	r3, r2, [r1]
 8010af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d1e6      	bne.n	8010acc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	3308      	adds	r3, #8
 8010b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	e853 3f00 	ldrex	r3, [r3]
 8010b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f023 0301 	bic.w	r3, r3, #1
 8010b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	3308      	adds	r3, #8
 8010b1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b1e:	61fa      	str	r2, [r7, #28]
 8010b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b22:	69b9      	ldr	r1, [r7, #24]
 8010b24:	69fa      	ldr	r2, [r7, #28]
 8010b26:	e841 2300 	strex	r3, r2, [r1]
 8010b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d1e5      	bne.n	8010afe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2220      	movs	r2, #32
 8010b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b42:	2303      	movs	r3, #3
 8010b44:	e012      	b.n	8010b6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2220      	movs	r2, #32
 8010b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2220      	movs	r2, #32
 8010b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	2200      	movs	r2, #0
 8010b5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b6a:	2300      	movs	r3, #0
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3758      	adds	r7, #88	@ 0x58
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	603b      	str	r3, [r7, #0]
 8010b80:	4613      	mov	r3, r2
 8010b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b84:	e04f      	b.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b8c:	d04b      	beq.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b8e:	f7f4 ff45 	bl	8005a1c <HAL_GetTick>
 8010b92:	4602      	mov	r2, r0
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	1ad3      	subs	r3, r2, r3
 8010b98:	69ba      	ldr	r2, [r7, #24]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d302      	bcc.n	8010ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b9e:	69bb      	ldr	r3, [r7, #24]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d101      	bne.n	8010ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	e04e      	b.n	8010c46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f003 0304 	and.w	r3, r3, #4
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d037      	beq.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	2b80      	cmp	r3, #128	@ 0x80
 8010bba:	d034      	beq.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	2b40      	cmp	r3, #64	@ 0x40
 8010bc0:	d031      	beq.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	69db      	ldr	r3, [r3, #28]
 8010bc8:	f003 0308 	and.w	r3, r3, #8
 8010bcc:	2b08      	cmp	r3, #8
 8010bce:	d110      	bne.n	8010bf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2208      	movs	r2, #8
 8010bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f000 f95b 	bl	8010e94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2208      	movs	r2, #8
 8010be2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	2200      	movs	r2, #0
 8010bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e029      	b.n	8010c46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	69db      	ldr	r3, [r3, #28]
 8010bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010c00:	d111      	bne.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f000 f941 	bl	8010e94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2220      	movs	r2, #32
 8010c16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010c22:	2303      	movs	r3, #3
 8010c24:	e00f      	b.n	8010c46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	69da      	ldr	r2, [r3, #28]
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	4013      	ands	r3, r2
 8010c30:	68ba      	ldr	r2, [r7, #8]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	bf0c      	ite	eq
 8010c36:	2301      	moveq	r3, #1
 8010c38:	2300      	movne	r3, #0
 8010c3a:	b2db      	uxtb	r3, r3
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	79fb      	ldrb	r3, [r7, #7]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d0a0      	beq.n	8010b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c44:	2300      	movs	r3, #0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
	...

08010c50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b0a3      	sub	sp, #140	@ 0x8c
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	88fa      	ldrh	r2, [r7, #6]
 8010c68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	88fa      	ldrh	r2, [r7, #6]
 8010c70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2200      	movs	r2, #0
 8010c78:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	689b      	ldr	r3, [r3, #8]
 8010c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010c82:	d10e      	bne.n	8010ca2 <UART_Start_Receive_IT+0x52>
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	691b      	ldr	r3, [r3, #16]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d105      	bne.n	8010c98 <UART_Start_Receive_IT+0x48>
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010c92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010c96:	e02d      	b.n	8010cf4 <UART_Start_Receive_IT+0xa4>
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	22ff      	movs	r2, #255	@ 0xff
 8010c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010ca0:	e028      	b.n	8010cf4 <UART_Start_Receive_IT+0xa4>
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	689b      	ldr	r3, [r3, #8]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10d      	bne.n	8010cc6 <UART_Start_Receive_IT+0x76>
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	691b      	ldr	r3, [r3, #16]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d104      	bne.n	8010cbc <UART_Start_Receive_IT+0x6c>
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	22ff      	movs	r2, #255	@ 0xff
 8010cb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010cba:	e01b      	b.n	8010cf4 <UART_Start_Receive_IT+0xa4>
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	227f      	movs	r2, #127	@ 0x7f
 8010cc0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010cc4:	e016      	b.n	8010cf4 <UART_Start_Receive_IT+0xa4>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	689b      	ldr	r3, [r3, #8]
 8010cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010cce:	d10d      	bne.n	8010cec <UART_Start_Receive_IT+0x9c>
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	691b      	ldr	r3, [r3, #16]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d104      	bne.n	8010ce2 <UART_Start_Receive_IT+0x92>
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	227f      	movs	r2, #127	@ 0x7f
 8010cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010ce0:	e008      	b.n	8010cf4 <UART_Start_Receive_IT+0xa4>
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	223f      	movs	r2, #63	@ 0x3f
 8010ce6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010cea:	e003      	b.n	8010cf4 <UART_Start_Receive_IT+0xa4>
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2200      	movs	r2, #0
 8010cf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2222      	movs	r2, #34	@ 0x22
 8010d00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3308      	adds	r3, #8
 8010d0a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d0e:	e853 3f00 	ldrex	r3, [r3]
 8010d12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010d16:	f043 0301 	orr.w	r3, r3, #1
 8010d1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3308      	adds	r3, #8
 8010d24:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010d28:	673a      	str	r2, [r7, #112]	@ 0x70
 8010d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010d2e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010d30:	e841 2300 	strex	r3, r2, [r1]
 8010d34:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010d36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1e3      	bne.n	8010d04 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d44:	d14f      	bne.n	8010de6 <UART_Start_Receive_IT+0x196>
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010d4c:	88fa      	ldrh	r2, [r7, #6]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d349      	bcc.n	8010de6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010d5a:	d107      	bne.n	8010d6c <UART_Start_Receive_IT+0x11c>
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	691b      	ldr	r3, [r3, #16]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d103      	bne.n	8010d6c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	4a47      	ldr	r2, [pc, #284]	@ (8010e84 <UART_Start_Receive_IT+0x234>)
 8010d68:	675a      	str	r2, [r3, #116]	@ 0x74
 8010d6a:	e002      	b.n	8010d72 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	4a46      	ldr	r2, [pc, #280]	@ (8010e88 <UART_Start_Receive_IT+0x238>)
 8010d70:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	691b      	ldr	r3, [r3, #16]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d01a      	beq.n	8010db0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d82:	e853 3f00 	ldrex	r3, [r3]
 8010d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010d8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	461a      	mov	r2, r3
 8010d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010d9e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010da2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010da4:	e841 2300 	strex	r3, r2, [r1]
 8010da8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d1e4      	bne.n	8010d7a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3308      	adds	r3, #8
 8010db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dba:	e853 3f00 	ldrex	r3, [r3]
 8010dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3308      	adds	r3, #8
 8010dce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010dd0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010dd2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010dd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010dd8:	e841 2300 	strex	r3, r2, [r1]
 8010ddc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1e5      	bne.n	8010db0 <UART_Start_Receive_IT+0x160>
 8010de4:	e046      	b.n	8010e74 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010dee:	d107      	bne.n	8010e00 <UART_Start_Receive_IT+0x1b0>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d103      	bne.n	8010e00 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	4a24      	ldr	r2, [pc, #144]	@ (8010e8c <UART_Start_Receive_IT+0x23c>)
 8010dfc:	675a      	str	r2, [r3, #116]	@ 0x74
 8010dfe:	e002      	b.n	8010e06 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	4a23      	ldr	r2, [pc, #140]	@ (8010e90 <UART_Start_Receive_IT+0x240>)
 8010e04:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	691b      	ldr	r3, [r3, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d019      	beq.n	8010e42 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e16:	e853 3f00 	ldrex	r3, [r3]
 8010e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e1e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8010e22:	677b      	str	r3, [r7, #116]	@ 0x74
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e2e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e34:	e841 2300 	strex	r3, r2, [r1]
 8010e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d1e6      	bne.n	8010e0e <UART_Start_Receive_IT+0x1be>
 8010e40:	e018      	b.n	8010e74 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	e853 3f00 	ldrex	r3, [r3]
 8010e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	f043 0320 	orr.w	r3, r3, #32
 8010e56:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010e60:	623b      	str	r3, [r7, #32]
 8010e62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e64:	69f9      	ldr	r1, [r7, #28]
 8010e66:	6a3a      	ldr	r2, [r7, #32]
 8010e68:	e841 2300 	strex	r3, r2, [r1]
 8010e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8010e6e:	69bb      	ldr	r3, [r7, #24]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d1e6      	bne.n	8010e42 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010e74:	2300      	movs	r3, #0
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	378c      	adds	r7, #140	@ 0x8c
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	080116b5 	.word	0x080116b5
 8010e88:	08011355 	.word	0x08011355
 8010e8c:	0801119d 	.word	0x0801119d
 8010e90:	08010fe5 	.word	0x08010fe5

08010e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b095      	sub	sp, #84	@ 0x54
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ea4:	e853 3f00 	ldrex	r3, [r3]
 8010ea8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8010ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010ec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ec2:	e841 2300 	strex	r3, r2, [r1]
 8010ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d1e6      	bne.n	8010e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	3308      	adds	r3, #8
 8010ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed6:	6a3b      	ldr	r3, [r7, #32]
 8010ed8:	e853 3f00 	ldrex	r3, [r3]
 8010edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ede:	69fa      	ldr	r2, [r7, #28]
 8010ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8010f5c <UART_EndRxTransfer+0xc8>)
 8010ee2:	4013      	ands	r3, r2
 8010ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	3308      	adds	r3, #8
 8010eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ef6:	e841 2300 	strex	r3, r2, [r1]
 8010efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e5      	bne.n	8010ece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f06:	2b01      	cmp	r3, #1
 8010f08:	d118      	bne.n	8010f3c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	e853 3f00 	ldrex	r3, [r3]
 8010f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	f023 0310 	bic.w	r3, r3, #16
 8010f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	461a      	mov	r2, r3
 8010f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f28:	61bb      	str	r3, [r7, #24]
 8010f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f2c:	6979      	ldr	r1, [r7, #20]
 8010f2e:	69ba      	ldr	r2, [r7, #24]
 8010f30:	e841 2300 	strex	r3, r2, [r1]
 8010f34:	613b      	str	r3, [r7, #16]
   return(result);
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d1e6      	bne.n	8010f0a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2220      	movs	r2, #32
 8010f40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010f50:	bf00      	nop
 8010f52:	3754      	adds	r7, #84	@ 0x54
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr
 8010f5c:	effffffe 	.word	0xeffffffe

08010f60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b084      	sub	sp, #16
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f7fe ff2e 	bl	800fde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f84:	bf00      	nop
 8010f86:	3710      	adds	r7, #16
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b088      	sub	sp, #32
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	e853 3f00 	ldrex	r3, [r3]
 8010fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fa8:	61fb      	str	r3, [r7, #28]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	61bb      	str	r3, [r7, #24]
 8010fb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb6:	6979      	ldr	r1, [r7, #20]
 8010fb8:	69ba      	ldr	r2, [r7, #24]
 8010fba:	e841 2300 	strex	r3, r2, [r1]
 8010fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d1e6      	bne.n	8010f94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	2220      	movs	r2, #32
 8010fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7fe feef 	bl	800fdb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fda:	bf00      	nop
 8010fdc:	3720      	adds	r7, #32
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
	...

08010fe4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b09c      	sub	sp, #112	@ 0x70
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ff2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ffc:	2b22      	cmp	r3, #34	@ 0x22
 8010ffe:	f040 80be 	bne.w	801117e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011008:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801100c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011010:	b2d9      	uxtb	r1, r3
 8011012:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011016:	b2da      	uxtb	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801101c:	400a      	ands	r2, r1
 801101e:	b2d2      	uxtb	r2, r2
 8011020:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011026:	1c5a      	adds	r2, r3, #1
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011032:	b29b      	uxth	r3, r3
 8011034:	3b01      	subs	r3, #1
 8011036:	b29a      	uxth	r2, r3
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011044:	b29b      	uxth	r3, r3
 8011046:	2b00      	cmp	r3, #0
 8011048:	f040 80a1 	bne.w	801118e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011054:	e853 3f00 	ldrex	r3, [r3]
 8011058:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801105a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801105c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	461a      	mov	r2, r3
 8011068:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801106a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801106c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801106e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011070:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011072:	e841 2300 	strex	r3, r2, [r1]
 8011076:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1e6      	bne.n	801104c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	3308      	adds	r3, #8
 8011084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011088:	e853 3f00 	ldrex	r3, [r3]
 801108c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801108e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011090:	f023 0301 	bic.w	r3, r3, #1
 8011094:	667b      	str	r3, [r7, #100]	@ 0x64
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	3308      	adds	r3, #8
 801109c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801109e:	647a      	str	r2, [r7, #68]	@ 0x44
 80110a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80110a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80110a6:	e841 2300 	strex	r3, r2, [r1]
 80110aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80110ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1e5      	bne.n	801107e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2220      	movs	r2, #32
 80110b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2200      	movs	r2, #0
 80110be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a33      	ldr	r2, [pc, #204]	@ (8011198 <UART_RxISR_8BIT+0x1b4>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d01f      	beq.n	8011110 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d018      	beq.n	8011110 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e6:	e853 3f00 	ldrex	r3, [r3]
 80110ea:	623b      	str	r3, [r7, #32]
   return(result);
 80110ec:	6a3b      	ldr	r3, [r7, #32]
 80110ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80110f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	461a      	mov	r2, r3
 80110fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80110fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80110fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011100:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011104:	e841 2300 	strex	r3, r2, [r1]
 8011108:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801110a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1e6      	bne.n	80110de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011114:	2b01      	cmp	r3, #1
 8011116:	d12e      	bne.n	8011176 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	e853 3f00 	ldrex	r3, [r3]
 801112a:	60fb      	str	r3, [r7, #12]
   return(result);
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	f023 0310 	bic.w	r3, r3, #16
 8011132:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	461a      	mov	r2, r3
 801113a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801113c:	61fb      	str	r3, [r7, #28]
 801113e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011140:	69b9      	ldr	r1, [r7, #24]
 8011142:	69fa      	ldr	r2, [r7, #28]
 8011144:	e841 2300 	strex	r3, r2, [r1]
 8011148:	617b      	str	r3, [r7, #20]
   return(result);
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d1e6      	bne.n	801111e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	69db      	ldr	r3, [r3, #28]
 8011156:	f003 0310 	and.w	r3, r3, #16
 801115a:	2b10      	cmp	r3, #16
 801115c:	d103      	bne.n	8011166 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2210      	movs	r2, #16
 8011164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801116c:	4619      	mov	r1, r3
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f7fe fe40 	bl	800fdf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011174:	e00b      	b.n	801118e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	f7fe fe28 	bl	800fdcc <HAL_UART_RxCpltCallback>
}
 801117c:	e007      	b.n	801118e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	699a      	ldr	r2, [r3, #24]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f042 0208 	orr.w	r2, r2, #8
 801118c:	619a      	str	r2, [r3, #24]
}
 801118e:	bf00      	nop
 8011190:	3770      	adds	r7, #112	@ 0x70
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	58000c00 	.word	0x58000c00

0801119c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b09c      	sub	sp, #112	@ 0x70
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80111aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80111b4:	2b22      	cmp	r3, #34	@ 0x22
 80111b6:	f040 80be 	bne.w	8011336 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80111ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80111ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80111d2:	4013      	ands	r3, r2
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80111d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111de:	1c9a      	adds	r2, r3, #2
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	3b01      	subs	r3, #1
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f040 80a1 	bne.w	8011346 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801120a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801120c:	e853 3f00 	ldrex	r3, [r3]
 8011210:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011218:	667b      	str	r3, [r7, #100]	@ 0x64
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	461a      	mov	r2, r3
 8011220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011222:	657b      	str	r3, [r7, #84]	@ 0x54
 8011224:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011226:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011228:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801122a:	e841 2300 	strex	r3, r2, [r1]
 801122e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011232:	2b00      	cmp	r3, #0
 8011234:	d1e6      	bne.n	8011204 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	3308      	adds	r3, #8
 801123c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801123e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011240:	e853 3f00 	ldrex	r3, [r3]
 8011244:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011248:	f023 0301 	bic.w	r3, r3, #1
 801124c:	663b      	str	r3, [r7, #96]	@ 0x60
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	3308      	adds	r3, #8
 8011254:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011256:	643a      	str	r2, [r7, #64]	@ 0x40
 8011258:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801125a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801125c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801125e:	e841 2300 	strex	r3, r2, [r1]
 8011262:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011266:	2b00      	cmp	r3, #0
 8011268:	d1e5      	bne.n	8011236 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2220      	movs	r2, #32
 801126e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4a33      	ldr	r2, [pc, #204]	@ (8011350 <UART_RxISR_16BIT+0x1b4>)
 8011284:	4293      	cmp	r3, r2
 8011286:	d01f      	beq.n	80112c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011292:	2b00      	cmp	r3, #0
 8011294:	d018      	beq.n	80112c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	e853 3f00 	ldrex	r3, [r3]
 80112a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80112aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	461a      	mov	r2, r3
 80112b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112bc:	e841 2300 	strex	r3, r2, [r1]
 80112c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80112c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d1e6      	bne.n	8011296 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d12e      	bne.n	801132e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	e853 3f00 	ldrex	r3, [r3]
 80112e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	f023 0310 	bic.w	r3, r3, #16
 80112ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	461a      	mov	r2, r3
 80112f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112f4:	61bb      	str	r3, [r7, #24]
 80112f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112f8:	6979      	ldr	r1, [r7, #20]
 80112fa:	69ba      	ldr	r2, [r7, #24]
 80112fc:	e841 2300 	strex	r3, r2, [r1]
 8011300:	613b      	str	r3, [r7, #16]
   return(result);
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1e6      	bne.n	80112d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	69db      	ldr	r3, [r3, #28]
 801130e:	f003 0310 	and.w	r3, r3, #16
 8011312:	2b10      	cmp	r3, #16
 8011314:	d103      	bne.n	801131e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2210      	movs	r2, #16
 801131c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011324:	4619      	mov	r1, r3
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7fe fd64 	bl	800fdf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801132c:	e00b      	b.n	8011346 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f7fe fd4c 	bl	800fdcc <HAL_UART_RxCpltCallback>
}
 8011334:	e007      	b.n	8011346 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	699a      	ldr	r2, [r3, #24]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f042 0208 	orr.w	r2, r2, #8
 8011344:	619a      	str	r2, [r3, #24]
}
 8011346:	bf00      	nop
 8011348:	3770      	adds	r7, #112	@ 0x70
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	58000c00 	.word	0x58000c00

08011354 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b0ac      	sub	sp, #176	@ 0xb0
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011362:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	69db      	ldr	r3, [r3, #28]
 801136c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	689b      	ldr	r3, [r3, #8]
 8011380:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801138a:	2b22      	cmp	r3, #34	@ 0x22
 801138c:	f040 8180 	bne.w	8011690 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011396:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801139a:	e123      	b.n	80115e4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113a2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80113a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80113aa:	b2d9      	uxtb	r1, r3
 80113ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113b6:	400a      	ands	r2, r1
 80113b8:	b2d2      	uxtb	r2, r2
 80113ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113c0:	1c5a      	adds	r2, r3, #1
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	3b01      	subs	r3, #1
 80113d0:	b29a      	uxth	r2, r3
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	69db      	ldr	r3, [r3, #28]
 80113de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80113e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113e6:	f003 0307 	and.w	r3, r3, #7
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d053      	beq.n	8011496 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80113ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113f2:	f003 0301 	and.w	r3, r3, #1
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d011      	beq.n	801141e <UART_RxISR_8BIT_FIFOEN+0xca>
 80113fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80113fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011402:	2b00      	cmp	r3, #0
 8011404:	d00b      	beq.n	801141e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2201      	movs	r2, #1
 801140c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011414:	f043 0201 	orr.w	r2, r3, #1
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801141e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011422:	f003 0302 	and.w	r3, r3, #2
 8011426:	2b00      	cmp	r3, #0
 8011428:	d011      	beq.n	801144e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801142a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801142e:	f003 0301 	and.w	r3, r3, #1
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00b      	beq.n	801144e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2202      	movs	r2, #2
 801143c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011444:	f043 0204 	orr.w	r2, r3, #4
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801144e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011452:	f003 0304 	and.w	r3, r3, #4
 8011456:	2b00      	cmp	r3, #0
 8011458:	d011      	beq.n	801147e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801145a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801145e:	f003 0301 	and.w	r3, r3, #1
 8011462:	2b00      	cmp	r3, #0
 8011464:	d00b      	beq.n	801147e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2204      	movs	r2, #4
 801146c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011474:	f043 0202 	orr.w	r2, r3, #2
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011484:	2b00      	cmp	r3, #0
 8011486:	d006      	beq.n	8011496 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f7fe fca9 	bl	800fde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2200      	movs	r2, #0
 8011492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801149c:	b29b      	uxth	r3, r3
 801149e:	2b00      	cmp	r3, #0
 80114a0:	f040 80a0 	bne.w	80115e4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80114ac:	e853 3f00 	ldrex	r3, [r3]
 80114b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80114b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80114b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80114b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	461a      	mov	r2, r3
 80114c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80114c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80114c8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80114cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80114ce:	e841 2300 	strex	r3, r2, [r1]
 80114d2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80114d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1e4      	bne.n	80114a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	3308      	adds	r3, #8
 80114e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114e4:	e853 3f00 	ldrex	r3, [r3]
 80114e8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80114ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80114ec:	4b6e      	ldr	r3, [pc, #440]	@ (80116a8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80114ee:	4013      	ands	r3, r2
 80114f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	3308      	adds	r3, #8
 80114fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80114fe:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011500:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011502:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011504:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011506:	e841 2300 	strex	r3, r2, [r1]
 801150a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801150c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1e3      	bne.n	80114da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2220      	movs	r2, #32
 8011516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2200      	movs	r2, #0
 801151e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2200      	movs	r2, #0
 8011524:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	4a60      	ldr	r2, [pc, #384]	@ (80116ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d021      	beq.n	8011574 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801153a:	2b00      	cmp	r3, #0
 801153c:	d01a      	beq.n	8011574 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011546:	e853 3f00 	ldrex	r3, [r3]
 801154a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801154c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801154e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	461a      	mov	r2, r3
 801155c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011560:	657b      	str	r3, [r7, #84]	@ 0x54
 8011562:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011564:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011566:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011568:	e841 2300 	strex	r3, r2, [r1]
 801156c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801156e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1e4      	bne.n	801153e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011578:	2b01      	cmp	r3, #1
 801157a:	d130      	bne.n	80115de <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801158a:	e853 3f00 	ldrex	r3, [r3]
 801158e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011592:	f023 0310 	bic.w	r3, r3, #16
 8011596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	461a      	mov	r2, r3
 80115a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80115a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80115a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80115aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80115ac:	e841 2300 	strex	r3, r2, [r1]
 80115b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80115b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d1e4      	bne.n	8011582 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	69db      	ldr	r3, [r3, #28]
 80115be:	f003 0310 	and.w	r3, r3, #16
 80115c2:	2b10      	cmp	r3, #16
 80115c4:	d103      	bne.n	80115ce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2210      	movs	r2, #16
 80115cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80115d4:	4619      	mov	r1, r3
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7fe fc0c 	bl	800fdf4 <HAL_UARTEx_RxEventCallback>
 80115dc:	e002      	b.n	80115e4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7fe fbf4 	bl	800fdcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80115e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d006      	beq.n	80115fa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80115ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115f0:	f003 0320 	and.w	r3, r3, #32
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f47f aed1 	bne.w	801139c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011600:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011604:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011608:	2b00      	cmp	r3, #0
 801160a:	d049      	beq.n	80116a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011612:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011616:	429a      	cmp	r2, r3
 8011618:	d242      	bcs.n	80116a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3308      	adds	r3, #8
 8011620:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011622:	6a3b      	ldr	r3, [r7, #32]
 8011624:	e853 3f00 	ldrex	r3, [r3]
 8011628:	61fb      	str	r3, [r7, #28]
   return(result);
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	3308      	adds	r3, #8
 801163a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801163e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011640:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011646:	e841 2300 	strex	r3, r2, [r1]
 801164a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801164e:	2b00      	cmp	r3, #0
 8011650:	d1e3      	bne.n	801161a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4a16      	ldr	r2, [pc, #88]	@ (80116b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011656:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	e853 3f00 	ldrex	r3, [r3]
 8011664:	60bb      	str	r3, [r7, #8]
   return(result);
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	f043 0320 	orr.w	r3, r3, #32
 801166c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	461a      	mov	r2, r3
 8011676:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801167a:	61bb      	str	r3, [r7, #24]
 801167c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801167e:	6979      	ldr	r1, [r7, #20]
 8011680:	69ba      	ldr	r2, [r7, #24]
 8011682:	e841 2300 	strex	r3, r2, [r1]
 8011686:	613b      	str	r3, [r7, #16]
   return(result);
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d1e4      	bne.n	8011658 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801168e:	e007      	b.n	80116a0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	699a      	ldr	r2, [r3, #24]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f042 0208 	orr.w	r2, r2, #8
 801169e:	619a      	str	r2, [r3, #24]
}
 80116a0:	bf00      	nop
 80116a2:	37b0      	adds	r7, #176	@ 0xb0
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}
 80116a8:	effffffe 	.word	0xeffffffe
 80116ac:	58000c00 	.word	0x58000c00
 80116b0:	08010fe5 	.word	0x08010fe5

080116b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b0ae      	sub	sp, #184	@ 0xb8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80116c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	69db      	ldr	r3, [r3, #28]
 80116cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116ea:	2b22      	cmp	r3, #34	@ 0x22
 80116ec:	f040 8184 	bne.w	80119f8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80116f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80116fa:	e127      	b.n	801194c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011702:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801170a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801170e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011712:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011716:	4013      	ands	r3, r2
 8011718:	b29a      	uxth	r2, r3
 801171a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801171e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011724:	1c9a      	adds	r2, r3, #2
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011730:	b29b      	uxth	r3, r3
 8011732:	3b01      	subs	r3, #1
 8011734:	b29a      	uxth	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801174a:	f003 0307 	and.w	r3, r3, #7
 801174e:	2b00      	cmp	r3, #0
 8011750:	d053      	beq.n	80117fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011756:	f003 0301 	and.w	r3, r3, #1
 801175a:	2b00      	cmp	r3, #0
 801175c:	d011      	beq.n	8011782 <UART_RxISR_16BIT_FIFOEN+0xce>
 801175e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011766:	2b00      	cmp	r3, #0
 8011768:	d00b      	beq.n	8011782 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2201      	movs	r2, #1
 8011770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011778:	f043 0201 	orr.w	r2, r3, #1
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011782:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011786:	f003 0302 	and.w	r3, r3, #2
 801178a:	2b00      	cmp	r3, #0
 801178c:	d011      	beq.n	80117b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801178e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011792:	f003 0301 	and.w	r3, r3, #1
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00b      	beq.n	80117b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2202      	movs	r2, #2
 80117a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117a8:	f043 0204 	orr.w	r2, r3, #4
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80117b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80117b6:	f003 0304 	and.w	r3, r3, #4
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d011      	beq.n	80117e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80117be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00b      	beq.n	80117e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2204      	movs	r2, #4
 80117d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117d8:	f043 0202 	orr.w	r2, r3, #2
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d006      	beq.n	80117fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f7fe faf7 	bl	800fde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011800:	b29b      	uxth	r3, r3
 8011802:	2b00      	cmp	r3, #0
 8011804:	f040 80a2 	bne.w	801194c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801180e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011810:	e853 3f00 	ldrex	r3, [r3]
 8011814:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011816:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801181c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	461a      	mov	r2, r3
 8011826:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801182a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801182e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011830:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011832:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011836:	e841 2300 	strex	r3, r2, [r1]
 801183a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801183c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801183e:	2b00      	cmp	r3, #0
 8011840:	d1e2      	bne.n	8011808 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	3308      	adds	r3, #8
 8011848:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801184c:	e853 3f00 	ldrex	r3, [r3]
 8011850:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011852:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011854:	4b6e      	ldr	r3, [pc, #440]	@ (8011a10 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011856:	4013      	ands	r3, r2
 8011858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	3308      	adds	r3, #8
 8011862:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011868:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801186a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801186c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801186e:	e841 2300 	strex	r3, r2, [r1]
 8011872:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011874:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011876:	2b00      	cmp	r3, #0
 8011878:	d1e3      	bne.n	8011842 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2220      	movs	r2, #32
 801187e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2200      	movs	r2, #0
 8011886:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4a60      	ldr	r2, [pc, #384]	@ (8011a14 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011894:	4293      	cmp	r3, r2
 8011896:	d021      	beq.n	80118dc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d01a      	beq.n	80118dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118ae:	e853 3f00 	ldrex	r3, [r3]
 80118b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80118b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80118ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	461a      	mov	r2, r3
 80118c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80118c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80118ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80118ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80118d0:	e841 2300 	strex	r3, r2, [r1]
 80118d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80118d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d1e4      	bne.n	80118a6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d130      	bne.n	8011946 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2200      	movs	r2, #0
 80118e8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f2:	e853 3f00 	ldrex	r3, [r3]
 80118f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80118f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118fa:	f023 0310 	bic.w	r3, r3, #16
 80118fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	461a      	mov	r2, r3
 8011908:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801190c:	647b      	str	r3, [r7, #68]	@ 0x44
 801190e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011914:	e841 2300 	strex	r3, r2, [r1]
 8011918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801191a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1e4      	bne.n	80118ea <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	69db      	ldr	r3, [r3, #28]
 8011926:	f003 0310 	and.w	r3, r3, #16
 801192a:	2b10      	cmp	r3, #16
 801192c:	d103      	bne.n	8011936 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2210      	movs	r2, #16
 8011934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801193c:	4619      	mov	r1, r3
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7fe fa58 	bl	800fdf4 <HAL_UARTEx_RxEventCallback>
 8011944:	e002      	b.n	801194c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7fe fa40 	bl	800fdcc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801194c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011950:	2b00      	cmp	r3, #0
 8011952:	d006      	beq.n	8011962 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011958:	f003 0320 	and.w	r3, r3, #32
 801195c:	2b00      	cmp	r3, #0
 801195e:	f47f aecd 	bne.w	80116fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011968:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801196c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011970:	2b00      	cmp	r3, #0
 8011972:	d049      	beq.n	8011a08 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801197a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801197e:	429a      	cmp	r2, r3
 8011980:	d242      	bcs.n	8011a08 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	3308      	adds	r3, #8
 8011988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198c:	e853 3f00 	ldrex	r3, [r3]
 8011990:	623b      	str	r3, [r7, #32]
   return(result);
 8011992:	6a3b      	ldr	r3, [r7, #32]
 8011994:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	3308      	adds	r3, #8
 80119a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80119a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80119a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119ae:	e841 2300 	strex	r3, r2, [r1]
 80119b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80119b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d1e3      	bne.n	8011982 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	4a16      	ldr	r2, [pc, #88]	@ (8011a18 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80119be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	e853 3f00 	ldrex	r3, [r3]
 80119cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	f043 0320 	orr.w	r3, r3, #32
 80119d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	461a      	mov	r2, r3
 80119de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80119e2:	61fb      	str	r3, [r7, #28]
 80119e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e6:	69b9      	ldr	r1, [r7, #24]
 80119e8:	69fa      	ldr	r2, [r7, #28]
 80119ea:	e841 2300 	strex	r3, r2, [r1]
 80119ee:	617b      	str	r3, [r7, #20]
   return(result);
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1e4      	bne.n	80119c0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80119f6:	e007      	b.n	8011a08 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	699a      	ldr	r2, [r3, #24]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f042 0208 	orr.w	r2, r2, #8
 8011a06:	619a      	str	r2, [r3, #24]
}
 8011a08:	bf00      	nop
 8011a0a:	37b8      	adds	r7, #184	@ 0xb8
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	effffffe 	.word	0xeffffffe
 8011a14:	58000c00 	.word	0x58000c00
 8011a18:	0801119d 	.word	0x0801119d

08011a1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011a24:	bf00      	nop
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011a38:	bf00      	nop
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr

08011a44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b083      	sub	sp, #12
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011a4c:	bf00      	nop
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d101      	bne.n	8011a6e <HAL_UARTEx_DisableFifoMode+0x16>
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	e027      	b.n	8011abe <HAL_UARTEx_DisableFifoMode+0x66>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2201      	movs	r2, #1
 8011a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2224      	movs	r2, #36	@ 0x24
 8011a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	f022 0201 	bic.w	r2, r2, #1
 8011a94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011a9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	68fa      	ldr	r2, [r7, #12]
 8011aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2220      	movs	r2, #32
 8011ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3714      	adds	r7, #20
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b084      	sub	sp, #16
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d101      	bne.n	8011ae2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011ade:	2302      	movs	r3, #2
 8011ae0:	e02d      	b.n	8011b3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2224      	movs	r2, #36	@ 0x24
 8011aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f022 0201 	bic.w	r2, r2, #1
 8011b08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	683a      	ldr	r2, [r7, #0]
 8011b1a:	430a      	orrs	r2, r1
 8011b1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f000 f850 	bl	8011bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	68fa      	ldr	r2, [r7, #12]
 8011b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2220      	movs	r2, #32
 8011b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2200      	movs	r2, #0
 8011b38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011b3c:	2300      	movs	r3, #0
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b084      	sub	sp, #16
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
 8011b4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d101      	bne.n	8011b5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011b5a:	2302      	movs	r3, #2
 8011b5c:	e02d      	b.n	8011bba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2201      	movs	r2, #1
 8011b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2224      	movs	r2, #36	@ 0x24
 8011b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	f022 0201 	bic.w	r2, r2, #1
 8011b84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	683a      	ldr	r2, [r7, #0]
 8011b96:	430a      	orrs	r2, r1
 8011b98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f000 f812 	bl	8011bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	68fa      	ldr	r2, [r7, #12]
 8011ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2220      	movs	r2, #32
 8011bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011bb8:	2300      	movs	r3, #0
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
	...

08011bc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d108      	bne.n	8011be6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	2201      	movs	r2, #1
 8011bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2201      	movs	r2, #1
 8011be0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011be4:	e031      	b.n	8011c4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011be6:	2310      	movs	r3, #16
 8011be8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011bea:	2310      	movs	r3, #16
 8011bec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	689b      	ldr	r3, [r3, #8]
 8011bf4:	0e5b      	lsrs	r3, r3, #25
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	f003 0307 	and.w	r3, r3, #7
 8011bfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	689b      	ldr	r3, [r3, #8]
 8011c04:	0f5b      	lsrs	r3, r3, #29
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	f003 0307 	and.w	r3, r3, #7
 8011c0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011c0e:	7bbb      	ldrb	r3, [r7, #14]
 8011c10:	7b3a      	ldrb	r2, [r7, #12]
 8011c12:	4911      	ldr	r1, [pc, #68]	@ (8011c58 <UARTEx_SetNbDataToProcess+0x94>)
 8011c14:	5c8a      	ldrb	r2, [r1, r2]
 8011c16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011c1a:	7b3a      	ldrb	r2, [r7, #12]
 8011c1c:	490f      	ldr	r1, [pc, #60]	@ (8011c5c <UARTEx_SetNbDataToProcess+0x98>)
 8011c1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011c20:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011c2c:	7bfb      	ldrb	r3, [r7, #15]
 8011c2e:	7b7a      	ldrb	r2, [r7, #13]
 8011c30:	4909      	ldr	r1, [pc, #36]	@ (8011c58 <UARTEx_SetNbDataToProcess+0x94>)
 8011c32:	5c8a      	ldrb	r2, [r1, r2]
 8011c34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011c38:	7b7a      	ldrb	r2, [r7, #13]
 8011c3a:	4908      	ldr	r1, [pc, #32]	@ (8011c5c <UARTEx_SetNbDataToProcess+0x98>)
 8011c3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011c3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c42:	b29a      	uxth	r2, r3
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011c4a:	bf00      	nop
 8011c4c:	3714      	adds	r7, #20
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c54:	4770      	bx	lr
 8011c56:	bf00      	nop
 8011c58:	08017cec 	.word	0x08017cec
 8011c5c:	08017cf4 	.word	0x08017cf4

08011c60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b085      	sub	sp, #20
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	4603      	mov	r3, r0
 8011c68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c72:	2b84      	cmp	r3, #132	@ 0x84
 8011c74:	d005      	beq.n	8011c82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011c76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	3303      	adds	r3, #3
 8011c80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011c82:	68fb      	ldr	r3, [r7, #12]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3714      	adds	r7, #20
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr

08011c90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011c94:	f000 fefe 	bl	8012a94 <vTaskStartScheduler>
  
  return osOK;
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ca0:	b089      	sub	sp, #36	@ 0x24
 8011ca2:	af04      	add	r7, sp, #16
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	695b      	ldr	r3, [r3, #20]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d020      	beq.n	8011cf2 <osThreadCreate+0x54>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	699b      	ldr	r3, [r3, #24]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d01c      	beq.n	8011cf2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685c      	ldr	r4, [r3, #4]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	691e      	ldr	r6, [r3, #16]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ff ffc8 	bl	8011c60 <makeFreeRtosPriority>
 8011cd0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	695b      	ldr	r3, [r3, #20]
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cda:	9202      	str	r2, [sp, #8]
 8011cdc:	9301      	str	r3, [sp, #4]
 8011cde:	9100      	str	r1, [sp, #0]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	4632      	mov	r2, r6
 8011ce4:	4629      	mov	r1, r5
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f000 fcee 	bl	80126c8 <xTaskCreateStatic>
 8011cec:	4603      	mov	r3, r0
 8011cee:	60fb      	str	r3, [r7, #12]
 8011cf0:	e01c      	b.n	8011d2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	685c      	ldr	r4, [r3, #4]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cfe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7ff ffaa 	bl	8011c60 <makeFreeRtosPriority>
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	f107 030c 	add.w	r3, r7, #12
 8011d12:	9301      	str	r3, [sp, #4]
 8011d14:	9200      	str	r2, [sp, #0]
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	4632      	mov	r2, r6
 8011d1a:	4629      	mov	r1, r5
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f000 fd33 	bl	8012788 <xTaskCreate>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d001      	beq.n	8011d2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	e000      	b.n	8011d2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3714      	adds	r7, #20
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011d36:	b580      	push	{r7, lr}
 8011d38:	b084      	sub	sp, #16
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d001      	beq.n	8011d4c <osDelay+0x16>
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	e000      	b.n	8011d4e <osDelay+0x18>
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f000 fe6a 	bl	8012a28 <vTaskDelay>
  
  return osOK;
 8011d54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
	...

08011d60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b08a      	sub	sp, #40	@ 0x28
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011d6c:	f000 fefc 	bl	8012b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011d70:	4b5c      	ldr	r3, [pc, #368]	@ (8011ee4 <pvPortMalloc+0x184>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d101      	bne.n	8011d7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011d78:	f000 f924 	bl	8011fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8011ee8 <pvPortMalloc+0x188>)
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	4013      	ands	r3, r2
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	f040 8095 	bne.w	8011eb4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d01e      	beq.n	8011dce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011d90:	2208      	movs	r2, #8
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	4413      	add	r3, r2
 8011d96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f003 0307 	and.w	r3, r3, #7
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d015      	beq.n	8011dce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f023 0307 	bic.w	r3, r3, #7
 8011da8:	3308      	adds	r3, #8
 8011daa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f003 0307 	and.w	r3, r3, #7
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d00b      	beq.n	8011dce <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dba:	f383 8811 	msr	BASEPRI, r3
 8011dbe:	f3bf 8f6f 	isb	sy
 8011dc2:	f3bf 8f4f 	dsb	sy
 8011dc6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011dc8:	bf00      	nop
 8011dca:	bf00      	nop
 8011dcc:	e7fd      	b.n	8011dca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d06f      	beq.n	8011eb4 <pvPortMalloc+0x154>
 8011dd4:	4b45      	ldr	r3, [pc, #276]	@ (8011eec <pvPortMalloc+0x18c>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d86a      	bhi.n	8011eb4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011dde:	4b44      	ldr	r3, [pc, #272]	@ (8011ef0 <pvPortMalloc+0x190>)
 8011de0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011de2:	4b43      	ldr	r3, [pc, #268]	@ (8011ef0 <pvPortMalloc+0x190>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011de8:	e004      	b.n	8011df4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d903      	bls.n	8011e06 <pvPortMalloc+0xa6>
 8011dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d1f1      	bne.n	8011dea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011e06:	4b37      	ldr	r3, [pc, #220]	@ (8011ee4 <pvPortMalloc+0x184>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d051      	beq.n	8011eb4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011e10:	6a3b      	ldr	r3, [r7, #32]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2208      	movs	r2, #8
 8011e16:	4413      	add	r3, r2
 8011e18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	6a3b      	ldr	r3, [r7, #32]
 8011e20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e24:	685a      	ldr	r2, [r3, #4]
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	1ad2      	subs	r2, r2, r3
 8011e2a:	2308      	movs	r3, #8
 8011e2c:	005b      	lsls	r3, r3, #1
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d920      	bls.n	8011e74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	4413      	add	r3, r2
 8011e38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	f003 0307 	and.w	r3, r3, #7
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00b      	beq.n	8011e5c <pvPortMalloc+0xfc>
	__asm volatile
 8011e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	613b      	str	r3, [r7, #16]
}
 8011e56:	bf00      	nop
 8011e58:	bf00      	nop
 8011e5a:	e7fd      	b.n	8011e58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	1ad2      	subs	r2, r2, r3
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6a:	687a      	ldr	r2, [r7, #4]
 8011e6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011e6e:	69b8      	ldr	r0, [r7, #24]
 8011e70:	f000 f90a 	bl	8012088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e74:	4b1d      	ldr	r3, [pc, #116]	@ (8011eec <pvPortMalloc+0x18c>)
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8011eec <pvPortMalloc+0x18c>)
 8011e80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e82:	4b1a      	ldr	r3, [pc, #104]	@ (8011eec <pvPortMalloc+0x18c>)
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	4b1b      	ldr	r3, [pc, #108]	@ (8011ef4 <pvPortMalloc+0x194>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d203      	bcs.n	8011e96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011e8e:	4b17      	ldr	r3, [pc, #92]	@ (8011eec <pvPortMalloc+0x18c>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a18      	ldr	r2, [pc, #96]	@ (8011ef4 <pvPortMalloc+0x194>)
 8011e94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e98:	685a      	ldr	r2, [r3, #4]
 8011e9a:	4b13      	ldr	r3, [pc, #76]	@ (8011ee8 <pvPortMalloc+0x188>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	431a      	orrs	r2, r3
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011eaa:	4b13      	ldr	r3, [pc, #76]	@ (8011ef8 <pvPortMalloc+0x198>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	4a11      	ldr	r2, [pc, #68]	@ (8011ef8 <pvPortMalloc+0x198>)
 8011eb2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011eb4:	f000 fe66 	bl	8012b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	f003 0307 	and.w	r3, r3, #7
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d00b      	beq.n	8011eda <pvPortMalloc+0x17a>
	__asm volatile
 8011ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ec6:	f383 8811 	msr	BASEPRI, r3
 8011eca:	f3bf 8f6f 	isb	sy
 8011ece:	f3bf 8f4f 	dsb	sy
 8011ed2:	60fb      	str	r3, [r7, #12]
}
 8011ed4:	bf00      	nop
 8011ed6:	bf00      	nop
 8011ed8:	e7fd      	b.n	8011ed6 <pvPortMalloc+0x176>
	return pvReturn;
 8011eda:	69fb      	ldr	r3, [r7, #28]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3728      	adds	r7, #40	@ 0x28
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	24075630 	.word	0x24075630
 8011ee8:	24075644 	.word	0x24075644
 8011eec:	24075634 	.word	0x24075634
 8011ef0:	24075628 	.word	0x24075628
 8011ef4:	24075638 	.word	0x24075638
 8011ef8:	2407563c 	.word	0x2407563c

08011efc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d04f      	beq.n	8011fae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011f0e:	2308      	movs	r3, #8
 8011f10:	425b      	negs	r3, r3
 8011f12:	697a      	ldr	r2, [r7, #20]
 8011f14:	4413      	add	r3, r2
 8011f16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	685a      	ldr	r2, [r3, #4]
 8011f20:	4b25      	ldr	r3, [pc, #148]	@ (8011fb8 <vPortFree+0xbc>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4013      	ands	r3, r2
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d10b      	bne.n	8011f42 <vPortFree+0x46>
	__asm volatile
 8011f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f2e:	f383 8811 	msr	BASEPRI, r3
 8011f32:	f3bf 8f6f 	isb	sy
 8011f36:	f3bf 8f4f 	dsb	sy
 8011f3a:	60fb      	str	r3, [r7, #12]
}
 8011f3c:	bf00      	nop
 8011f3e:	bf00      	nop
 8011f40:	e7fd      	b.n	8011f3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00b      	beq.n	8011f62 <vPortFree+0x66>
	__asm volatile
 8011f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f4e:	f383 8811 	msr	BASEPRI, r3
 8011f52:	f3bf 8f6f 	isb	sy
 8011f56:	f3bf 8f4f 	dsb	sy
 8011f5a:	60bb      	str	r3, [r7, #8]
}
 8011f5c:	bf00      	nop
 8011f5e:	bf00      	nop
 8011f60:	e7fd      	b.n	8011f5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	685a      	ldr	r2, [r3, #4]
 8011f66:	4b14      	ldr	r3, [pc, #80]	@ (8011fb8 <vPortFree+0xbc>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	4013      	ands	r3, r2
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d01e      	beq.n	8011fae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d11a      	bne.n	8011fae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	685a      	ldr	r2, [r3, #4]
 8011f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8011fb8 <vPortFree+0xbc>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	43db      	mvns	r3, r3
 8011f82:	401a      	ands	r2, r3
 8011f84:	693b      	ldr	r3, [r7, #16]
 8011f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011f88:	f000 fdee 	bl	8012b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	685a      	ldr	r2, [r3, #4]
 8011f90:	4b0a      	ldr	r3, [pc, #40]	@ (8011fbc <vPortFree+0xc0>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	4413      	add	r3, r2
 8011f96:	4a09      	ldr	r2, [pc, #36]	@ (8011fbc <vPortFree+0xc0>)
 8011f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011f9a:	6938      	ldr	r0, [r7, #16]
 8011f9c:	f000 f874 	bl	8012088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011fa0:	4b07      	ldr	r3, [pc, #28]	@ (8011fc0 <vPortFree+0xc4>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	4a06      	ldr	r2, [pc, #24]	@ (8011fc0 <vPortFree+0xc4>)
 8011fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011faa:	f000 fdeb 	bl	8012b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011fae:	bf00      	nop
 8011fb0:	3718      	adds	r7, #24
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	24075644 	.word	0x24075644
 8011fbc:	24075634 	.word	0x24075634
 8011fc0:	24075640 	.word	0x24075640

08011fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b085      	sub	sp, #20
 8011fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011fca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8011fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011fd0:	4b27      	ldr	r3, [pc, #156]	@ (8012070 <prvHeapInit+0xac>)
 8011fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	f003 0307 	and.w	r3, r3, #7
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00c      	beq.n	8011ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	3307      	adds	r3, #7
 8011fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f023 0307 	bic.w	r3, r3, #7
 8011fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011fec:	68ba      	ldr	r2, [r7, #8]
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	1ad3      	subs	r3, r2, r3
 8011ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8012070 <prvHeapInit+0xac>)
 8011ff4:	4413      	add	r3, r2
 8011ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8012074 <prvHeapInit+0xb0>)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012002:	4b1c      	ldr	r3, [pc, #112]	@ (8012074 <prvHeapInit+0xb0>)
 8012004:	2200      	movs	r2, #0
 8012006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	68ba      	ldr	r2, [r7, #8]
 801200c:	4413      	add	r3, r2
 801200e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012010:	2208      	movs	r2, #8
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	1a9b      	subs	r3, r3, r2
 8012016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	f023 0307 	bic.w	r3, r3, #7
 801201e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	4a15      	ldr	r2, [pc, #84]	@ (8012078 <prvHeapInit+0xb4>)
 8012024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012026:	4b14      	ldr	r3, [pc, #80]	@ (8012078 <prvHeapInit+0xb4>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2200      	movs	r2, #0
 801202c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801202e:	4b12      	ldr	r3, [pc, #72]	@ (8012078 <prvHeapInit+0xb4>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	2200      	movs	r2, #0
 8012034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	1ad2      	subs	r2, r2, r3
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012044:	4b0c      	ldr	r3, [pc, #48]	@ (8012078 <prvHeapInit+0xb4>)
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	4a0a      	ldr	r2, [pc, #40]	@ (801207c <prvHeapInit+0xb8>)
 8012052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	4a09      	ldr	r2, [pc, #36]	@ (8012080 <prvHeapInit+0xbc>)
 801205a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801205c:	4b09      	ldr	r3, [pc, #36]	@ (8012084 <prvHeapInit+0xc0>)
 801205e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012062:	601a      	str	r2, [r3, #0]
}
 8012064:	bf00      	nop
 8012066:	3714      	adds	r7, #20
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	24071a28 	.word	0x24071a28
 8012074:	24075628 	.word	0x24075628
 8012078:	24075630 	.word	0x24075630
 801207c:	24075638 	.word	0x24075638
 8012080:	24075634 	.word	0x24075634
 8012084:	24075644 	.word	0x24075644

08012088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012088:	b480      	push	{r7}
 801208a:	b085      	sub	sp, #20
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012090:	4b28      	ldr	r3, [pc, #160]	@ (8012134 <prvInsertBlockIntoFreeList+0xac>)
 8012092:	60fb      	str	r3, [r7, #12]
 8012094:	e002      	b.n	801209c <prvInsertBlockIntoFreeList+0x14>
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	60fb      	str	r3, [r7, #12]
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d8f7      	bhi.n	8012096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	68ba      	ldr	r2, [r7, #8]
 80120b0:	4413      	add	r3, r2
 80120b2:	687a      	ldr	r2, [r7, #4]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d108      	bne.n	80120ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	685a      	ldr	r2, [r3, #4]
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	441a      	add	r2, r3
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	68ba      	ldr	r2, [r7, #8]
 80120d4:	441a      	add	r2, r3
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	429a      	cmp	r2, r3
 80120dc:	d118      	bne.n	8012110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	4b15      	ldr	r3, [pc, #84]	@ (8012138 <prvInsertBlockIntoFreeList+0xb0>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d00d      	beq.n	8012106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	685a      	ldr	r2, [r3, #4]
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	441a      	add	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	601a      	str	r2, [r3, #0]
 8012104:	e008      	b.n	8012118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012106:	4b0c      	ldr	r3, [pc, #48]	@ (8012138 <prvInsertBlockIntoFreeList+0xb0>)
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	601a      	str	r2, [r3, #0]
 801210e:	e003      	b.n	8012118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012118:	68fa      	ldr	r2, [r7, #12]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	429a      	cmp	r2, r3
 801211e:	d002      	beq.n	8012126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012126:	bf00      	nop
 8012128:	3714      	adds	r7, #20
 801212a:	46bd      	mov	sp, r7
 801212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012130:	4770      	bx	lr
 8012132:	bf00      	nop
 8012134:	24075628 	.word	0x24075628
 8012138:	24075630 	.word	0x24075630

0801213c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f103 0208 	add.w	r2, r3, #8
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f04f 32ff 	mov.w	r2, #4294967295
 8012154:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f103 0208 	add.w	r2, r3, #8
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f103 0208 	add.w	r2, r3, #8
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2200      	movs	r2, #0
 801216e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801218a:	bf00      	nop
 801218c:	370c      	adds	r7, #12
 801218e:	46bd      	mov	sp, r7
 8012190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012194:	4770      	bx	lr

08012196 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012196:	b480      	push	{r7}
 8012198:	b085      	sub	sp, #20
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
 801219e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	68fa      	ldr	r2, [r7, #12]
 80121aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	689a      	ldr	r2, [r3, #8]
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	689b      	ldr	r3, [r3, #8]
 80121b8:	683a      	ldr	r2, [r7, #0]
 80121ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	683a      	ldr	r2, [r7, #0]
 80121c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	1c5a      	adds	r2, r3, #1
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	601a      	str	r2, [r3, #0]
}
 80121d2:	bf00      	nop
 80121d4:	3714      	adds	r7, #20
 80121d6:	46bd      	mov	sp, r7
 80121d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121dc:	4770      	bx	lr

080121de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80121de:	b480      	push	{r7}
 80121e0:	b085      	sub	sp, #20
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
 80121e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121f4:	d103      	bne.n	80121fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	691b      	ldr	r3, [r3, #16]
 80121fa:	60fb      	str	r3, [r7, #12]
 80121fc:	e00c      	b.n	8012218 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	3308      	adds	r3, #8
 8012202:	60fb      	str	r3, [r7, #12]
 8012204:	e002      	b.n	801220c <vListInsert+0x2e>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	60fb      	str	r3, [r7, #12]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	68ba      	ldr	r2, [r7, #8]
 8012214:	429a      	cmp	r2, r3
 8012216:	d2f6      	bcs.n	8012206 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	685a      	ldr	r2, [r3, #4]
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	683a      	ldr	r2, [r7, #0]
 8012226:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	683a      	ldr	r2, [r7, #0]
 8012232:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	1c5a      	adds	r2, r3, #1
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	601a      	str	r2, [r3, #0]
}
 8012244:	bf00      	nop
 8012246:	3714      	adds	r7, #20
 8012248:	46bd      	mov	sp, r7
 801224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224e:	4770      	bx	lr

08012250 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	691b      	ldr	r3, [r3, #16]
 801225c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	6892      	ldr	r2, [r2, #8]
 8012266:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	689b      	ldr	r3, [r3, #8]
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	6852      	ldr	r2, [r2, #4]
 8012270:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	429a      	cmp	r2, r3
 801227a:	d103      	bne.n	8012284 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	689a      	ldr	r2, [r3, #8]
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2200      	movs	r2, #0
 8012288:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	1e5a      	subs	r2, r3, #1
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3714      	adds	r7, #20
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr

080122a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80122a4:	b480      	push	{r7}
 80122a6:	b085      	sub	sp, #20
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	3b04      	subs	r3, #4
 80122b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80122bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	3b04      	subs	r3, #4
 80122c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	f023 0201 	bic.w	r2, r3, #1
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	3b04      	subs	r3, #4
 80122d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80122d4:	4a0c      	ldr	r2, [pc, #48]	@ (8012308 <pxPortInitialiseStack+0x64>)
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	3b14      	subs	r3, #20
 80122de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	3b04      	subs	r3, #4
 80122ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	f06f 0202 	mvn.w	r2, #2
 80122f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	3b20      	subs	r3, #32
 80122f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80122fa:	68fb      	ldr	r3, [r7, #12]
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3714      	adds	r7, #20
 8012300:	46bd      	mov	sp, r7
 8012302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012306:	4770      	bx	lr
 8012308:	0801230d 	.word	0x0801230d

0801230c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801230c:	b480      	push	{r7}
 801230e:	b085      	sub	sp, #20
 8012310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012316:	4b13      	ldr	r3, [pc, #76]	@ (8012364 <prvTaskExitError+0x58>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801231e:	d00b      	beq.n	8012338 <prvTaskExitError+0x2c>
	__asm volatile
 8012320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012324:	f383 8811 	msr	BASEPRI, r3
 8012328:	f3bf 8f6f 	isb	sy
 801232c:	f3bf 8f4f 	dsb	sy
 8012330:	60fb      	str	r3, [r7, #12]
}
 8012332:	bf00      	nop
 8012334:	bf00      	nop
 8012336:	e7fd      	b.n	8012334 <prvTaskExitError+0x28>
	__asm volatile
 8012338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801233c:	f383 8811 	msr	BASEPRI, r3
 8012340:	f3bf 8f6f 	isb	sy
 8012344:	f3bf 8f4f 	dsb	sy
 8012348:	60bb      	str	r3, [r7, #8]
}
 801234a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801234c:	bf00      	nop
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d0fc      	beq.n	801234e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012354:	bf00      	nop
 8012356:	bf00      	nop
 8012358:	3714      	adds	r7, #20
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop
 8012364:	2400003c 	.word	0x2400003c
	...

08012370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012370:	4b07      	ldr	r3, [pc, #28]	@ (8012390 <pxCurrentTCBConst2>)
 8012372:	6819      	ldr	r1, [r3, #0]
 8012374:	6808      	ldr	r0, [r1, #0]
 8012376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237a:	f380 8809 	msr	PSP, r0
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f04f 0000 	mov.w	r0, #0
 8012386:	f380 8811 	msr	BASEPRI, r0
 801238a:	4770      	bx	lr
 801238c:	f3af 8000 	nop.w

08012390 <pxCurrentTCBConst2>:
 8012390:	24075650 	.word	0x24075650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012394:	bf00      	nop
 8012396:	bf00      	nop

08012398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012398:	4808      	ldr	r0, [pc, #32]	@ (80123bc <prvPortStartFirstTask+0x24>)
 801239a:	6800      	ldr	r0, [r0, #0]
 801239c:	6800      	ldr	r0, [r0, #0]
 801239e:	f380 8808 	msr	MSP, r0
 80123a2:	f04f 0000 	mov.w	r0, #0
 80123a6:	f380 8814 	msr	CONTROL, r0
 80123aa:	b662      	cpsie	i
 80123ac:	b661      	cpsie	f
 80123ae:	f3bf 8f4f 	dsb	sy
 80123b2:	f3bf 8f6f 	isb	sy
 80123b6:	df00      	svc	0
 80123b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80123ba:	bf00      	nop
 80123bc:	e000ed08 	.word	0xe000ed08

080123c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b086      	sub	sp, #24
 80123c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80123c6:	4b47      	ldr	r3, [pc, #284]	@ (80124e4 <xPortStartScheduler+0x124>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	4a47      	ldr	r2, [pc, #284]	@ (80124e8 <xPortStartScheduler+0x128>)
 80123cc:	4293      	cmp	r3, r2
 80123ce:	d10b      	bne.n	80123e8 <xPortStartScheduler+0x28>
	__asm volatile
 80123d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123d4:	f383 8811 	msr	BASEPRI, r3
 80123d8:	f3bf 8f6f 	isb	sy
 80123dc:	f3bf 8f4f 	dsb	sy
 80123e0:	613b      	str	r3, [r7, #16]
}
 80123e2:	bf00      	nop
 80123e4:	bf00      	nop
 80123e6:	e7fd      	b.n	80123e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80123e8:	4b3e      	ldr	r3, [pc, #248]	@ (80124e4 <xPortStartScheduler+0x124>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	4a3f      	ldr	r2, [pc, #252]	@ (80124ec <xPortStartScheduler+0x12c>)
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d10b      	bne.n	801240a <xPortStartScheduler+0x4a>
	__asm volatile
 80123f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123f6:	f383 8811 	msr	BASEPRI, r3
 80123fa:	f3bf 8f6f 	isb	sy
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	60fb      	str	r3, [r7, #12]
}
 8012404:	bf00      	nop
 8012406:	bf00      	nop
 8012408:	e7fd      	b.n	8012406 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801240a:	4b39      	ldr	r3, [pc, #228]	@ (80124f0 <xPortStartScheduler+0x130>)
 801240c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	b2db      	uxtb	r3, r3
 8012414:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	22ff      	movs	r2, #255	@ 0xff
 801241a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	b2db      	uxtb	r3, r3
 8012422:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012424:	78fb      	ldrb	r3, [r7, #3]
 8012426:	b2db      	uxtb	r3, r3
 8012428:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801242c:	b2da      	uxtb	r2, r3
 801242e:	4b31      	ldr	r3, [pc, #196]	@ (80124f4 <xPortStartScheduler+0x134>)
 8012430:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012432:	4b31      	ldr	r3, [pc, #196]	@ (80124f8 <xPortStartScheduler+0x138>)
 8012434:	2207      	movs	r2, #7
 8012436:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012438:	e009      	b.n	801244e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801243a:	4b2f      	ldr	r3, [pc, #188]	@ (80124f8 <xPortStartScheduler+0x138>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	3b01      	subs	r3, #1
 8012440:	4a2d      	ldr	r2, [pc, #180]	@ (80124f8 <xPortStartScheduler+0x138>)
 8012442:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012444:	78fb      	ldrb	r3, [r7, #3]
 8012446:	b2db      	uxtb	r3, r3
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	b2db      	uxtb	r3, r3
 801244c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801244e:	78fb      	ldrb	r3, [r7, #3]
 8012450:	b2db      	uxtb	r3, r3
 8012452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012456:	2b80      	cmp	r3, #128	@ 0x80
 8012458:	d0ef      	beq.n	801243a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801245a:	4b27      	ldr	r3, [pc, #156]	@ (80124f8 <xPortStartScheduler+0x138>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	f1c3 0307 	rsb	r3, r3, #7
 8012462:	2b04      	cmp	r3, #4
 8012464:	d00b      	beq.n	801247e <xPortStartScheduler+0xbe>
	__asm volatile
 8012466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801246a:	f383 8811 	msr	BASEPRI, r3
 801246e:	f3bf 8f6f 	isb	sy
 8012472:	f3bf 8f4f 	dsb	sy
 8012476:	60bb      	str	r3, [r7, #8]
}
 8012478:	bf00      	nop
 801247a:	bf00      	nop
 801247c:	e7fd      	b.n	801247a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801247e:	4b1e      	ldr	r3, [pc, #120]	@ (80124f8 <xPortStartScheduler+0x138>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	021b      	lsls	r3, r3, #8
 8012484:	4a1c      	ldr	r2, [pc, #112]	@ (80124f8 <xPortStartScheduler+0x138>)
 8012486:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012488:	4b1b      	ldr	r3, [pc, #108]	@ (80124f8 <xPortStartScheduler+0x138>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012490:	4a19      	ldr	r2, [pc, #100]	@ (80124f8 <xPortStartScheduler+0x138>)
 8012492:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	b2da      	uxtb	r2, r3
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801249c:	4b17      	ldr	r3, [pc, #92]	@ (80124fc <xPortStartScheduler+0x13c>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4a16      	ldr	r2, [pc, #88]	@ (80124fc <xPortStartScheduler+0x13c>)
 80124a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80124a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80124a8:	4b14      	ldr	r3, [pc, #80]	@ (80124fc <xPortStartScheduler+0x13c>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4a13      	ldr	r2, [pc, #76]	@ (80124fc <xPortStartScheduler+0x13c>)
 80124ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80124b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80124b4:	f000 f8da 	bl	801266c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80124b8:	4b11      	ldr	r3, [pc, #68]	@ (8012500 <xPortStartScheduler+0x140>)
 80124ba:	2200      	movs	r2, #0
 80124bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80124be:	f000 f8f9 	bl	80126b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80124c2:	4b10      	ldr	r3, [pc, #64]	@ (8012504 <xPortStartScheduler+0x144>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4a0f      	ldr	r2, [pc, #60]	@ (8012504 <xPortStartScheduler+0x144>)
 80124c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80124cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80124ce:	f7ff ff63 	bl	8012398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80124d2:	f000 fcaf 	bl	8012e34 <vTaskSwitchContext>
	prvTaskExitError();
 80124d6:	f7ff ff19 	bl	801230c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80124da:	2300      	movs	r3, #0
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3718      	adds	r7, #24
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	e000ed00 	.word	0xe000ed00
 80124e8:	410fc271 	.word	0x410fc271
 80124ec:	410fc270 	.word	0x410fc270
 80124f0:	e000e400 	.word	0xe000e400
 80124f4:	24075648 	.word	0x24075648
 80124f8:	2407564c 	.word	0x2407564c
 80124fc:	e000ed20 	.word	0xe000ed20
 8012500:	2400003c 	.word	0x2400003c
 8012504:	e000ef34 	.word	0xe000ef34

08012508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
	__asm volatile
 801250e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	607b      	str	r3, [r7, #4]
}
 8012520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012522:	4b10      	ldr	r3, [pc, #64]	@ (8012564 <vPortEnterCritical+0x5c>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	3301      	adds	r3, #1
 8012528:	4a0e      	ldr	r2, [pc, #56]	@ (8012564 <vPortEnterCritical+0x5c>)
 801252a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801252c:	4b0d      	ldr	r3, [pc, #52]	@ (8012564 <vPortEnterCritical+0x5c>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b01      	cmp	r3, #1
 8012532:	d110      	bne.n	8012556 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012534:	4b0c      	ldr	r3, [pc, #48]	@ (8012568 <vPortEnterCritical+0x60>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	b2db      	uxtb	r3, r3
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00b      	beq.n	8012556 <vPortEnterCritical+0x4e>
	__asm volatile
 801253e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012542:	f383 8811 	msr	BASEPRI, r3
 8012546:	f3bf 8f6f 	isb	sy
 801254a:	f3bf 8f4f 	dsb	sy
 801254e:	603b      	str	r3, [r7, #0]
}
 8012550:	bf00      	nop
 8012552:	bf00      	nop
 8012554:	e7fd      	b.n	8012552 <vPortEnterCritical+0x4a>
	}
}
 8012556:	bf00      	nop
 8012558:	370c      	adds	r7, #12
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop
 8012564:	2400003c 	.word	0x2400003c
 8012568:	e000ed04 	.word	0xe000ed04

0801256c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801256c:	b480      	push	{r7}
 801256e:	b083      	sub	sp, #12
 8012570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012572:	4b12      	ldr	r3, [pc, #72]	@ (80125bc <vPortExitCritical+0x50>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d10b      	bne.n	8012592 <vPortExitCritical+0x26>
	__asm volatile
 801257a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801257e:	f383 8811 	msr	BASEPRI, r3
 8012582:	f3bf 8f6f 	isb	sy
 8012586:	f3bf 8f4f 	dsb	sy
 801258a:	607b      	str	r3, [r7, #4]
}
 801258c:	bf00      	nop
 801258e:	bf00      	nop
 8012590:	e7fd      	b.n	801258e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012592:	4b0a      	ldr	r3, [pc, #40]	@ (80125bc <vPortExitCritical+0x50>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	3b01      	subs	r3, #1
 8012598:	4a08      	ldr	r2, [pc, #32]	@ (80125bc <vPortExitCritical+0x50>)
 801259a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801259c:	4b07      	ldr	r3, [pc, #28]	@ (80125bc <vPortExitCritical+0x50>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d105      	bne.n	80125b0 <vPortExitCritical+0x44>
 80125a4:	2300      	movs	r3, #0
 80125a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80125ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80125b0:	bf00      	nop
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr
 80125bc:	2400003c 	.word	0x2400003c

080125c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80125c0:	f3ef 8009 	mrs	r0, PSP
 80125c4:	f3bf 8f6f 	isb	sy
 80125c8:	4b15      	ldr	r3, [pc, #84]	@ (8012620 <pxCurrentTCBConst>)
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	f01e 0f10 	tst.w	lr, #16
 80125d0:	bf08      	it	eq
 80125d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80125d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125da:	6010      	str	r0, [r2, #0]
 80125dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80125e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80125e4:	f380 8811 	msr	BASEPRI, r0
 80125e8:	f3bf 8f4f 	dsb	sy
 80125ec:	f3bf 8f6f 	isb	sy
 80125f0:	f000 fc20 	bl	8012e34 <vTaskSwitchContext>
 80125f4:	f04f 0000 	mov.w	r0, #0
 80125f8:	f380 8811 	msr	BASEPRI, r0
 80125fc:	bc09      	pop	{r0, r3}
 80125fe:	6819      	ldr	r1, [r3, #0]
 8012600:	6808      	ldr	r0, [r1, #0]
 8012602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012606:	f01e 0f10 	tst.w	lr, #16
 801260a:	bf08      	it	eq
 801260c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012610:	f380 8809 	msr	PSP, r0
 8012614:	f3bf 8f6f 	isb	sy
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop
 801261c:	f3af 8000 	nop.w

08012620 <pxCurrentTCBConst>:
 8012620:	24075650 	.word	0x24075650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012624:	bf00      	nop
 8012626:	bf00      	nop

08012628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b082      	sub	sp, #8
 801262c:	af00      	add	r7, sp, #0
	__asm volatile
 801262e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	607b      	str	r3, [r7, #4]
}
 8012640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012642:	f000 fb3d 	bl	8012cc0 <xTaskIncrementTick>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d003      	beq.n	8012654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801264c:	4b06      	ldr	r3, [pc, #24]	@ (8012668 <SysTick_Handler+0x40>)
 801264e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012652:	601a      	str	r2, [r3, #0]
 8012654:	2300      	movs	r3, #0
 8012656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	f383 8811 	msr	BASEPRI, r3
}
 801265e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012660:	bf00      	nop
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}
 8012668:	e000ed04 	.word	0xe000ed04

0801266c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801266c:	b480      	push	{r7}
 801266e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012670:	4b0b      	ldr	r3, [pc, #44]	@ (80126a0 <vPortSetupTimerInterrupt+0x34>)
 8012672:	2200      	movs	r2, #0
 8012674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012676:	4b0b      	ldr	r3, [pc, #44]	@ (80126a4 <vPortSetupTimerInterrupt+0x38>)
 8012678:	2200      	movs	r2, #0
 801267a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801267c:	4b0a      	ldr	r3, [pc, #40]	@ (80126a8 <vPortSetupTimerInterrupt+0x3c>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	4a0a      	ldr	r2, [pc, #40]	@ (80126ac <vPortSetupTimerInterrupt+0x40>)
 8012682:	fba2 2303 	umull	r2, r3, r2, r3
 8012686:	099b      	lsrs	r3, r3, #6
 8012688:	4a09      	ldr	r2, [pc, #36]	@ (80126b0 <vPortSetupTimerInterrupt+0x44>)
 801268a:	3b01      	subs	r3, #1
 801268c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801268e:	4b04      	ldr	r3, [pc, #16]	@ (80126a0 <vPortSetupTimerInterrupt+0x34>)
 8012690:	2207      	movs	r2, #7
 8012692:	601a      	str	r2, [r3, #0]
}
 8012694:	bf00      	nop
 8012696:	46bd      	mov	sp, r7
 8012698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	e000e010 	.word	0xe000e010
 80126a4:	e000e018 	.word	0xe000e018
 80126a8:	24000000 	.word	0x24000000
 80126ac:	10624dd3 	.word	0x10624dd3
 80126b0:	e000e014 	.word	0xe000e014

080126b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80126b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80126c4 <vPortEnableVFP+0x10>
 80126b8:	6801      	ldr	r1, [r0, #0]
 80126ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80126be:	6001      	str	r1, [r0, #0]
 80126c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80126c2:	bf00      	nop
 80126c4:	e000ed88 	.word	0xe000ed88

080126c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b08e      	sub	sp, #56	@ 0x38
 80126cc:	af04      	add	r7, sp, #16
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	607a      	str	r2, [r7, #4]
 80126d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80126d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10b      	bne.n	80126f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80126dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	623b      	str	r3, [r7, #32]
}
 80126ee:	bf00      	nop
 80126f0:	bf00      	nop
 80126f2:	e7fd      	b.n	80126f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80126f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10b      	bne.n	8012712 <xTaskCreateStatic+0x4a>
	__asm volatile
 80126fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	61fb      	str	r3, [r7, #28]
}
 801270c:	bf00      	nop
 801270e:	bf00      	nop
 8012710:	e7fd      	b.n	801270e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012712:	23a0      	movs	r3, #160	@ 0xa0
 8012714:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	2ba0      	cmp	r3, #160	@ 0xa0
 801271a:	d00b      	beq.n	8012734 <xTaskCreateStatic+0x6c>
	__asm volatile
 801271c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012720:	f383 8811 	msr	BASEPRI, r3
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	61bb      	str	r3, [r7, #24]
}
 801272e:	bf00      	nop
 8012730:	bf00      	nop
 8012732:	e7fd      	b.n	8012730 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012734:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012738:	2b00      	cmp	r3, #0
 801273a:	d01e      	beq.n	801277a <xTaskCreateStatic+0xb2>
 801273c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801273e:	2b00      	cmp	r3, #0
 8012740:	d01b      	beq.n	801277a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012744:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801274a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274e:	2202      	movs	r2, #2
 8012750:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012754:	2300      	movs	r3, #0
 8012756:	9303      	str	r3, [sp, #12]
 8012758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801275a:	9302      	str	r3, [sp, #8]
 801275c:	f107 0314 	add.w	r3, r7, #20
 8012760:	9301      	str	r3, [sp, #4]
 8012762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	687a      	ldr	r2, [r7, #4]
 801276a:	68b9      	ldr	r1, [r7, #8]
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f000 f851 	bl	8012814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012772:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012774:	f000 f8ee 	bl	8012954 <prvAddNewTaskToReadyList>
 8012778:	e001      	b.n	801277e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801277a:	2300      	movs	r3, #0
 801277c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801277e:	697b      	ldr	r3, [r7, #20]
	}
 8012780:	4618      	mov	r0, r3
 8012782:	3728      	adds	r7, #40	@ 0x28
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08c      	sub	sp, #48	@ 0x30
 801278c:	af04      	add	r7, sp, #16
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	603b      	str	r3, [r7, #0]
 8012794:	4613      	mov	r3, r2
 8012796:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012798:	88fb      	ldrh	r3, [r7, #6]
 801279a:	009b      	lsls	r3, r3, #2
 801279c:	4618      	mov	r0, r3
 801279e:	f7ff fadf 	bl	8011d60 <pvPortMalloc>
 80127a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00e      	beq.n	80127c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80127aa:	20a0      	movs	r0, #160	@ 0xa0
 80127ac:	f7ff fad8 	bl	8011d60 <pvPortMalloc>
 80127b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d003      	beq.n	80127c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	697a      	ldr	r2, [r7, #20]
 80127bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80127be:	e005      	b.n	80127cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80127c0:	6978      	ldr	r0, [r7, #20]
 80127c2:	f7ff fb9b 	bl	8011efc <vPortFree>
 80127c6:	e001      	b.n	80127cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80127c8:	2300      	movs	r3, #0
 80127ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d017      	beq.n	8012802 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	2200      	movs	r2, #0
 80127d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80127da:	88fa      	ldrh	r2, [r7, #6]
 80127dc:	2300      	movs	r3, #0
 80127de:	9303      	str	r3, [sp, #12]
 80127e0:	69fb      	ldr	r3, [r7, #28]
 80127e2:	9302      	str	r3, [sp, #8]
 80127e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e6:	9301      	str	r3, [sp, #4]
 80127e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	68b9      	ldr	r1, [r7, #8]
 80127f0:	68f8      	ldr	r0, [r7, #12]
 80127f2:	f000 f80f 	bl	8012814 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80127f6:	69f8      	ldr	r0, [r7, #28]
 80127f8:	f000 f8ac 	bl	8012954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80127fc:	2301      	movs	r3, #1
 80127fe:	61bb      	str	r3, [r7, #24]
 8012800:	e002      	b.n	8012808 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012802:	f04f 33ff 	mov.w	r3, #4294967295
 8012806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012808:	69bb      	ldr	r3, [r7, #24]
	}
 801280a:	4618      	mov	r0, r3
 801280c:	3720      	adds	r7, #32
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
	...

08012814 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b088      	sub	sp, #32
 8012818:	af00      	add	r7, sp, #0
 801281a:	60f8      	str	r0, [r7, #12]
 801281c:	60b9      	str	r1, [r7, #8]
 801281e:	607a      	str	r2, [r7, #4]
 8012820:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012824:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012826:	6879      	ldr	r1, [r7, #4]
 8012828:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801282c:	440b      	add	r3, r1
 801282e:	009b      	lsls	r3, r3, #2
 8012830:	4413      	add	r3, r2
 8012832:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	f023 0307 	bic.w	r3, r3, #7
 801283a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801283c:	69bb      	ldr	r3, [r7, #24]
 801283e:	f003 0307 	and.w	r3, r3, #7
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00b      	beq.n	801285e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8012846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801284a:	f383 8811 	msr	BASEPRI, r3
 801284e:	f3bf 8f6f 	isb	sy
 8012852:	f3bf 8f4f 	dsb	sy
 8012856:	617b      	str	r3, [r7, #20]
}
 8012858:	bf00      	nop
 801285a:	bf00      	nop
 801285c:	e7fd      	b.n	801285a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d01f      	beq.n	80128a4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012864:	2300      	movs	r3, #0
 8012866:	61fb      	str	r3, [r7, #28]
 8012868:	e012      	b.n	8012890 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	69fb      	ldr	r3, [r7, #28]
 801286e:	4413      	add	r3, r2
 8012870:	7819      	ldrb	r1, [r3, #0]
 8012872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012874:	69fb      	ldr	r3, [r7, #28]
 8012876:	4413      	add	r3, r2
 8012878:	3334      	adds	r3, #52	@ 0x34
 801287a:	460a      	mov	r2, r1
 801287c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801287e:	68ba      	ldr	r2, [r7, #8]
 8012880:	69fb      	ldr	r3, [r7, #28]
 8012882:	4413      	add	r3, r2
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d006      	beq.n	8012898 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801288a:	69fb      	ldr	r3, [r7, #28]
 801288c:	3301      	adds	r3, #1
 801288e:	61fb      	str	r3, [r7, #28]
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	2b0f      	cmp	r3, #15
 8012894:	d9e9      	bls.n	801286a <prvInitialiseNewTask+0x56>
 8012896:	e000      	b.n	801289a <prvInitialiseNewTask+0x86>
			{
				break;
 8012898:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801289a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801289c:	2200      	movs	r2, #0
 801289e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80128a2:	e003      	b.n	80128ac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80128a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128a6:	2200      	movs	r2, #0
 80128a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80128ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ae:	2b06      	cmp	r3, #6
 80128b0:	d901      	bls.n	80128b6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80128b2:	2306      	movs	r3, #6
 80128b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80128b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80128bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128c0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80128c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128c4:	2200      	movs	r2, #0
 80128c6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80128c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ca:	3304      	adds	r3, #4
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7ff fc55 	bl	801217c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80128d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128d4:	3318      	adds	r3, #24
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7ff fc50 	bl	801217c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80128dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128e4:	f1c3 0207 	rsb	r2, r3, #7
 80128e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80128ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80128f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80128f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128f4:	2200      	movs	r2, #0
 80128f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80128fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128fc:	2200      	movs	r2, #0
 80128fe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012904:	334c      	adds	r3, #76	@ 0x4c
 8012906:	224c      	movs	r2, #76	@ 0x4c
 8012908:	2100      	movs	r1, #0
 801290a:	4618      	mov	r0, r3
 801290c:	f001 f9a7 	bl	8013c5e <memset>
 8012910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012912:	4a0d      	ldr	r2, [pc, #52]	@ (8012948 <prvInitialiseNewTask+0x134>)
 8012914:	651a      	str	r2, [r3, #80]	@ 0x50
 8012916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012918:	4a0c      	ldr	r2, [pc, #48]	@ (801294c <prvInitialiseNewTask+0x138>)
 801291a:	655a      	str	r2, [r3, #84]	@ 0x54
 801291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801291e:	4a0c      	ldr	r2, [pc, #48]	@ (8012950 <prvInitialiseNewTask+0x13c>)
 8012920:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012922:	683a      	ldr	r2, [r7, #0]
 8012924:	68f9      	ldr	r1, [r7, #12]
 8012926:	69b8      	ldr	r0, [r7, #24]
 8012928:	f7ff fcbc 	bl	80122a4 <pxPortInitialiseStack>
 801292c:	4602      	mov	r2, r0
 801292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012930:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012934:	2b00      	cmp	r3, #0
 8012936:	d002      	beq.n	801293e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801293a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801293c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801293e:	bf00      	nop
 8012940:	3720      	adds	r7, #32
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	2407577c 	.word	0x2407577c
 801294c:	240757e4 	.word	0x240757e4
 8012950:	2407584c 	.word	0x2407584c

08012954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801295c:	f7ff fdd4 	bl	8012508 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012960:	4b2a      	ldr	r3, [pc, #168]	@ (8012a0c <prvAddNewTaskToReadyList+0xb8>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	3301      	adds	r3, #1
 8012966:	4a29      	ldr	r2, [pc, #164]	@ (8012a0c <prvAddNewTaskToReadyList+0xb8>)
 8012968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801296a:	4b29      	ldr	r3, [pc, #164]	@ (8012a10 <prvAddNewTaskToReadyList+0xbc>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d109      	bne.n	8012986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012972:	4a27      	ldr	r2, [pc, #156]	@ (8012a10 <prvAddNewTaskToReadyList+0xbc>)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012978:	4b24      	ldr	r3, [pc, #144]	@ (8012a0c <prvAddNewTaskToReadyList+0xb8>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2b01      	cmp	r3, #1
 801297e:	d110      	bne.n	80129a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012980:	f000 fad4 	bl	8012f2c <prvInitialiseTaskLists>
 8012984:	e00d      	b.n	80129a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012986:	4b23      	ldr	r3, [pc, #140]	@ (8012a14 <prvAddNewTaskToReadyList+0xc0>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d109      	bne.n	80129a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801298e:	4b20      	ldr	r3, [pc, #128]	@ (8012a10 <prvAddNewTaskToReadyList+0xbc>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012998:	429a      	cmp	r2, r3
 801299a:	d802      	bhi.n	80129a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801299c:	4a1c      	ldr	r2, [pc, #112]	@ (8012a10 <prvAddNewTaskToReadyList+0xbc>)
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80129a2:	4b1d      	ldr	r3, [pc, #116]	@ (8012a18 <prvAddNewTaskToReadyList+0xc4>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	3301      	adds	r3, #1
 80129a8:	4a1b      	ldr	r2, [pc, #108]	@ (8012a18 <prvAddNewTaskToReadyList+0xc4>)
 80129aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129b0:	2201      	movs	r2, #1
 80129b2:	409a      	lsls	r2, r3
 80129b4:	4b19      	ldr	r3, [pc, #100]	@ (8012a1c <prvAddNewTaskToReadyList+0xc8>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4313      	orrs	r3, r2
 80129ba:	4a18      	ldr	r2, [pc, #96]	@ (8012a1c <prvAddNewTaskToReadyList+0xc8>)
 80129bc:	6013      	str	r3, [r2, #0]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129c2:	4613      	mov	r3, r2
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	4413      	add	r3, r2
 80129c8:	009b      	lsls	r3, r3, #2
 80129ca:	4a15      	ldr	r2, [pc, #84]	@ (8012a20 <prvAddNewTaskToReadyList+0xcc>)
 80129cc:	441a      	add	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	3304      	adds	r3, #4
 80129d2:	4619      	mov	r1, r3
 80129d4:	4610      	mov	r0, r2
 80129d6:	f7ff fbde 	bl	8012196 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80129da:	f7ff fdc7 	bl	801256c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80129de:	4b0d      	ldr	r3, [pc, #52]	@ (8012a14 <prvAddNewTaskToReadyList+0xc0>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d00e      	beq.n	8012a04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80129e6:	4b0a      	ldr	r3, [pc, #40]	@ (8012a10 <prvAddNewTaskToReadyList+0xbc>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d207      	bcs.n	8012a04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80129f4:	4b0b      	ldr	r3, [pc, #44]	@ (8012a24 <prvAddNewTaskToReadyList+0xd0>)
 80129f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80129fa:	601a      	str	r2, [r3, #0]
 80129fc:	f3bf 8f4f 	dsb	sy
 8012a00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a04:	bf00      	nop
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	24075750 	.word	0x24075750
 8012a10:	24075650 	.word	0x24075650
 8012a14:	2407575c 	.word	0x2407575c
 8012a18:	2407576c 	.word	0x2407576c
 8012a1c:	24075758 	.word	0x24075758
 8012a20:	24075654 	.word	0x24075654
 8012a24:	e000ed04 	.word	0xe000ed04

08012a28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012a30:	2300      	movs	r3, #0
 8012a32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d018      	beq.n	8012a6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012a3a:	4b14      	ldr	r3, [pc, #80]	@ (8012a8c <vTaskDelay+0x64>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d00b      	beq.n	8012a5a <vTaskDelay+0x32>
	__asm volatile
 8012a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a46:	f383 8811 	msr	BASEPRI, r3
 8012a4a:	f3bf 8f6f 	isb	sy
 8012a4e:	f3bf 8f4f 	dsb	sy
 8012a52:	60bb      	str	r3, [r7, #8]
}
 8012a54:	bf00      	nop
 8012a56:	bf00      	nop
 8012a58:	e7fd      	b.n	8012a56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012a5a:	f000 f885 	bl	8012b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012a5e:	2100      	movs	r1, #0
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 fb27 	bl	80130b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012a66:	f000 f88d 	bl	8012b84 <xTaskResumeAll>
 8012a6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d107      	bne.n	8012a82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012a72:	4b07      	ldr	r3, [pc, #28]	@ (8012a90 <vTaskDelay+0x68>)
 8012a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a78:	601a      	str	r2, [r3, #0]
 8012a7a:	f3bf 8f4f 	dsb	sy
 8012a7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a82:	bf00      	nop
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	24075778 	.word	0x24075778
 8012a90:	e000ed04 	.word	0xe000ed04

08012a94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b08a      	sub	sp, #40	@ 0x28
 8012a98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012aa2:	463a      	mov	r2, r7
 8012aa4:	1d39      	adds	r1, r7, #4
 8012aa6:	f107 0308 	add.w	r3, r7, #8
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7ee fbba 	bl	8001224 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012ab0:	6839      	ldr	r1, [r7, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	68ba      	ldr	r2, [r7, #8]
 8012ab6:	9202      	str	r2, [sp, #8]
 8012ab8:	9301      	str	r3, [sp, #4]
 8012aba:	2300      	movs	r3, #0
 8012abc:	9300      	str	r3, [sp, #0]
 8012abe:	2300      	movs	r3, #0
 8012ac0:	460a      	mov	r2, r1
 8012ac2:	4921      	ldr	r1, [pc, #132]	@ (8012b48 <vTaskStartScheduler+0xb4>)
 8012ac4:	4821      	ldr	r0, [pc, #132]	@ (8012b4c <vTaskStartScheduler+0xb8>)
 8012ac6:	f7ff fdff 	bl	80126c8 <xTaskCreateStatic>
 8012aca:	4603      	mov	r3, r0
 8012acc:	4a20      	ldr	r2, [pc, #128]	@ (8012b50 <vTaskStartScheduler+0xbc>)
 8012ace:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8012b50 <vTaskStartScheduler+0xbc>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d002      	beq.n	8012ade <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	617b      	str	r3, [r7, #20]
 8012adc:	e001      	b.n	8012ae2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	d11b      	bne.n	8012b20 <vTaskStartScheduler+0x8c>
	__asm volatile
 8012ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aec:	f383 8811 	msr	BASEPRI, r3
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	f3bf 8f4f 	dsb	sy
 8012af8:	613b      	str	r3, [r7, #16]
}
 8012afa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012afc:	4b15      	ldr	r3, [pc, #84]	@ (8012b54 <vTaskStartScheduler+0xc0>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	334c      	adds	r3, #76	@ 0x4c
 8012b02:	4a15      	ldr	r2, [pc, #84]	@ (8012b58 <vTaskStartScheduler+0xc4>)
 8012b04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012b06:	4b15      	ldr	r3, [pc, #84]	@ (8012b5c <vTaskStartScheduler+0xc8>)
 8012b08:	f04f 32ff 	mov.w	r2, #4294967295
 8012b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012b0e:	4b14      	ldr	r3, [pc, #80]	@ (8012b60 <vTaskStartScheduler+0xcc>)
 8012b10:	2201      	movs	r2, #1
 8012b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012b14:	4b13      	ldr	r3, [pc, #76]	@ (8012b64 <vTaskStartScheduler+0xd0>)
 8012b16:	2200      	movs	r2, #0
 8012b18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012b1a:	f7ff fc51 	bl	80123c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012b1e:	e00f      	b.n	8012b40 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b26:	d10b      	bne.n	8012b40 <vTaskStartScheduler+0xac>
	__asm volatile
 8012b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b2c:	f383 8811 	msr	BASEPRI, r3
 8012b30:	f3bf 8f6f 	isb	sy
 8012b34:	f3bf 8f4f 	dsb	sy
 8012b38:	60fb      	str	r3, [r7, #12]
}
 8012b3a:	bf00      	nop
 8012b3c:	bf00      	nop
 8012b3e:	e7fd      	b.n	8012b3c <vTaskStartScheduler+0xa8>
}
 8012b40:	bf00      	nop
 8012b42:	3718      	adds	r7, #24
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	08016d48 	.word	0x08016d48
 8012b4c:	08012efd 	.word	0x08012efd
 8012b50:	24075774 	.word	0x24075774
 8012b54:	24075650 	.word	0x24075650
 8012b58:	2400004c 	.word	0x2400004c
 8012b5c:	24075770 	.word	0x24075770
 8012b60:	2407575c 	.word	0x2407575c
 8012b64:	24075754 	.word	0x24075754

08012b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012b68:	b480      	push	{r7}
 8012b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012b6c:	4b04      	ldr	r3, [pc, #16]	@ (8012b80 <vTaskSuspendAll+0x18>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	3301      	adds	r3, #1
 8012b72:	4a03      	ldr	r2, [pc, #12]	@ (8012b80 <vTaskSuspendAll+0x18>)
 8012b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012b76:	bf00      	nop
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr
 8012b80:	24075778 	.word	0x24075778

08012b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012b92:	4b42      	ldr	r3, [pc, #264]	@ (8012c9c <xTaskResumeAll+0x118>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d10b      	bne.n	8012bb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8012b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b9e:	f383 8811 	msr	BASEPRI, r3
 8012ba2:	f3bf 8f6f 	isb	sy
 8012ba6:	f3bf 8f4f 	dsb	sy
 8012baa:	603b      	str	r3, [r7, #0]
}
 8012bac:	bf00      	nop
 8012bae:	bf00      	nop
 8012bb0:	e7fd      	b.n	8012bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012bb2:	f7ff fca9 	bl	8012508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012bb6:	4b39      	ldr	r3, [pc, #228]	@ (8012c9c <xTaskResumeAll+0x118>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	3b01      	subs	r3, #1
 8012bbc:	4a37      	ldr	r2, [pc, #220]	@ (8012c9c <xTaskResumeAll+0x118>)
 8012bbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bc0:	4b36      	ldr	r3, [pc, #216]	@ (8012c9c <xTaskResumeAll+0x118>)
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d161      	bne.n	8012c8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012bc8:	4b35      	ldr	r3, [pc, #212]	@ (8012ca0 <xTaskResumeAll+0x11c>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d05d      	beq.n	8012c8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012bd0:	e02e      	b.n	8012c30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bd2:	4b34      	ldr	r3, [pc, #208]	@ (8012ca4 <xTaskResumeAll+0x120>)
 8012bd4:	68db      	ldr	r3, [r3, #12]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	3318      	adds	r3, #24
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff fb36 	bl	8012250 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	3304      	adds	r3, #4
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7ff fb31 	bl	8012250 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	409a      	lsls	r2, r3
 8012bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8012ca8 <xTaskResumeAll+0x124>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8012ca8 <xTaskResumeAll+0x124>)
 8012bfe:	6013      	str	r3, [r2, #0]
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c04:	4613      	mov	r3, r2
 8012c06:	009b      	lsls	r3, r3, #2
 8012c08:	4413      	add	r3, r2
 8012c0a:	009b      	lsls	r3, r3, #2
 8012c0c:	4a27      	ldr	r2, [pc, #156]	@ (8012cac <xTaskResumeAll+0x128>)
 8012c0e:	441a      	add	r2, r3
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	3304      	adds	r3, #4
 8012c14:	4619      	mov	r1, r3
 8012c16:	4610      	mov	r0, r2
 8012c18:	f7ff fabd 	bl	8012196 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c20:	4b23      	ldr	r3, [pc, #140]	@ (8012cb0 <xTaskResumeAll+0x12c>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d302      	bcc.n	8012c30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012c2a:	4b22      	ldr	r3, [pc, #136]	@ (8012cb4 <xTaskResumeAll+0x130>)
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012c30:	4b1c      	ldr	r3, [pc, #112]	@ (8012ca4 <xTaskResumeAll+0x120>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1cc      	bne.n	8012bd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d001      	beq.n	8012c42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012c3e:	f000 fa19 	bl	8013074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012c42:	4b1d      	ldr	r3, [pc, #116]	@ (8012cb8 <xTaskResumeAll+0x134>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d010      	beq.n	8012c70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012c4e:	f000 f837 	bl	8012cc0 <xTaskIncrementTick>
 8012c52:	4603      	mov	r3, r0
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d002      	beq.n	8012c5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012c58:	4b16      	ldr	r3, [pc, #88]	@ (8012cb4 <xTaskResumeAll+0x130>)
 8012c5a:	2201      	movs	r2, #1
 8012c5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	3b01      	subs	r3, #1
 8012c62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1f1      	bne.n	8012c4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012c6a:	4b13      	ldr	r3, [pc, #76]	@ (8012cb8 <xTaskResumeAll+0x134>)
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012c70:	4b10      	ldr	r3, [pc, #64]	@ (8012cb4 <xTaskResumeAll+0x130>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d009      	beq.n	8012c8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8012cbc <xTaskResumeAll+0x138>)
 8012c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	f3bf 8f4f 	dsb	sy
 8012c88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012c8c:	f7ff fc6e 	bl	801256c <vPortExitCritical>

	return xAlreadyYielded;
 8012c90:	68bb      	ldr	r3, [r7, #8]
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}
 8012c9a:	bf00      	nop
 8012c9c:	24075778 	.word	0x24075778
 8012ca0:	24075750 	.word	0x24075750
 8012ca4:	24075710 	.word	0x24075710
 8012ca8:	24075758 	.word	0x24075758
 8012cac:	24075654 	.word	0x24075654
 8012cb0:	24075650 	.word	0x24075650
 8012cb4:	24075764 	.word	0x24075764
 8012cb8:	24075760 	.word	0x24075760
 8012cbc:	e000ed04 	.word	0xe000ed04

08012cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b086      	sub	sp, #24
 8012cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cca:	4b4f      	ldr	r3, [pc, #316]	@ (8012e08 <xTaskIncrementTick+0x148>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f040 808f 	bne.w	8012df2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8012e0c <xTaskIncrementTick+0x14c>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8012e0c <xTaskIncrementTick+0x14c>)
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d121      	bne.n	8012d2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8012ce8:	4b49      	ldr	r3, [pc, #292]	@ (8012e10 <xTaskIncrementTick+0x150>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d00b      	beq.n	8012d0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8012cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cf6:	f383 8811 	msr	BASEPRI, r3
 8012cfa:	f3bf 8f6f 	isb	sy
 8012cfe:	f3bf 8f4f 	dsb	sy
 8012d02:	603b      	str	r3, [r7, #0]
}
 8012d04:	bf00      	nop
 8012d06:	bf00      	nop
 8012d08:	e7fd      	b.n	8012d06 <xTaskIncrementTick+0x46>
 8012d0a:	4b41      	ldr	r3, [pc, #260]	@ (8012e10 <xTaskIncrementTick+0x150>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	60fb      	str	r3, [r7, #12]
 8012d10:	4b40      	ldr	r3, [pc, #256]	@ (8012e14 <xTaskIncrementTick+0x154>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4a3e      	ldr	r2, [pc, #248]	@ (8012e10 <xTaskIncrementTick+0x150>)
 8012d16:	6013      	str	r3, [r2, #0]
 8012d18:	4a3e      	ldr	r2, [pc, #248]	@ (8012e14 <xTaskIncrementTick+0x154>)
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	6013      	str	r3, [r2, #0]
 8012d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8012e18 <xTaskIncrementTick+0x158>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	3301      	adds	r3, #1
 8012d24:	4a3c      	ldr	r2, [pc, #240]	@ (8012e18 <xTaskIncrementTick+0x158>)
 8012d26:	6013      	str	r3, [r2, #0]
 8012d28:	f000 f9a4 	bl	8013074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8012e1c <xTaskIncrementTick+0x15c>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	693a      	ldr	r2, [r7, #16]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d348      	bcc.n	8012dc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d36:	4b36      	ldr	r3, [pc, #216]	@ (8012e10 <xTaskIncrementTick+0x150>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d104      	bne.n	8012d4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d40:	4b36      	ldr	r3, [pc, #216]	@ (8012e1c <xTaskIncrementTick+0x15c>)
 8012d42:	f04f 32ff 	mov.w	r2, #4294967295
 8012d46:	601a      	str	r2, [r3, #0]
					break;
 8012d48:	e03e      	b.n	8012dc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d4a:	4b31      	ldr	r3, [pc, #196]	@ (8012e10 <xTaskIncrementTick+0x150>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012d5a:	693a      	ldr	r2, [r7, #16]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d203      	bcs.n	8012d6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012d62:	4a2e      	ldr	r2, [pc, #184]	@ (8012e1c <xTaskIncrementTick+0x15c>)
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012d68:	e02e      	b.n	8012dc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ff fa6e 	bl	8012250 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d004      	beq.n	8012d86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	3318      	adds	r3, #24
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7ff fa65 	bl	8012250 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012d86:	68bb      	ldr	r3, [r7, #8]
 8012d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	409a      	lsls	r2, r3
 8012d8e:	4b24      	ldr	r3, [pc, #144]	@ (8012e20 <xTaskIncrementTick+0x160>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4313      	orrs	r3, r2
 8012d94:	4a22      	ldr	r2, [pc, #136]	@ (8012e20 <xTaskIncrementTick+0x160>)
 8012d96:	6013      	str	r3, [r2, #0]
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4413      	add	r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	4a1f      	ldr	r2, [pc, #124]	@ (8012e24 <xTaskIncrementTick+0x164>)
 8012da6:	441a      	add	r2, r3
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	3304      	adds	r3, #4
 8012dac:	4619      	mov	r1, r3
 8012dae:	4610      	mov	r0, r2
 8012db0:	f7ff f9f1 	bl	8012196 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012db8:	4b1b      	ldr	r3, [pc, #108]	@ (8012e28 <xTaskIncrementTick+0x168>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d3b9      	bcc.n	8012d36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012dc6:	e7b6      	b.n	8012d36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012dc8:	4b17      	ldr	r3, [pc, #92]	@ (8012e28 <xTaskIncrementTick+0x168>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dce:	4915      	ldr	r1, [pc, #84]	@ (8012e24 <xTaskIncrementTick+0x164>)
 8012dd0:	4613      	mov	r3, r2
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	4413      	add	r3, r2
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	440b      	add	r3, r1
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	d901      	bls.n	8012de4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012de0:	2301      	movs	r3, #1
 8012de2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012de4:	4b11      	ldr	r3, [pc, #68]	@ (8012e2c <xTaskIncrementTick+0x16c>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d007      	beq.n	8012dfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012dec:	2301      	movs	r3, #1
 8012dee:	617b      	str	r3, [r7, #20]
 8012df0:	e004      	b.n	8012dfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012df2:	4b0f      	ldr	r3, [pc, #60]	@ (8012e30 <xTaskIncrementTick+0x170>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	3301      	adds	r3, #1
 8012df8:	4a0d      	ldr	r2, [pc, #52]	@ (8012e30 <xTaskIncrementTick+0x170>)
 8012dfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012dfc:	697b      	ldr	r3, [r7, #20]
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	3718      	adds	r7, #24
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	24075778 	.word	0x24075778
 8012e0c:	24075754 	.word	0x24075754
 8012e10:	24075708 	.word	0x24075708
 8012e14:	2407570c 	.word	0x2407570c
 8012e18:	24075768 	.word	0x24075768
 8012e1c:	24075770 	.word	0x24075770
 8012e20:	24075758 	.word	0x24075758
 8012e24:	24075654 	.word	0x24075654
 8012e28:	24075650 	.word	0x24075650
 8012e2c:	24075764 	.word	0x24075764
 8012e30:	24075760 	.word	0x24075760

08012e34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012e34:	b480      	push	{r7}
 8012e36:	b087      	sub	sp, #28
 8012e38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8012ee4 <vTaskSwitchContext+0xb0>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d003      	beq.n	8012e4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012e42:	4b29      	ldr	r3, [pc, #164]	@ (8012ee8 <vTaskSwitchContext+0xb4>)
 8012e44:	2201      	movs	r2, #1
 8012e46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012e48:	e045      	b.n	8012ed6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8012e4a:	4b27      	ldr	r3, [pc, #156]	@ (8012ee8 <vTaskSwitchContext+0xb4>)
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e50:	4b26      	ldr	r3, [pc, #152]	@ (8012eec <vTaskSwitchContext+0xb8>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	fab3 f383 	clz	r3, r3
 8012e5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012e5e:	7afb      	ldrb	r3, [r7, #11]
 8012e60:	f1c3 031f 	rsb	r3, r3, #31
 8012e64:	617b      	str	r3, [r7, #20]
 8012e66:	4922      	ldr	r1, [pc, #136]	@ (8012ef0 <vTaskSwitchContext+0xbc>)
 8012e68:	697a      	ldr	r2, [r7, #20]
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	4413      	add	r3, r2
 8012e70:	009b      	lsls	r3, r3, #2
 8012e72:	440b      	add	r3, r1
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d10b      	bne.n	8012e92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8012e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e7e:	f383 8811 	msr	BASEPRI, r3
 8012e82:	f3bf 8f6f 	isb	sy
 8012e86:	f3bf 8f4f 	dsb	sy
 8012e8a:	607b      	str	r3, [r7, #4]
}
 8012e8c:	bf00      	nop
 8012e8e:	bf00      	nop
 8012e90:	e7fd      	b.n	8012e8e <vTaskSwitchContext+0x5a>
 8012e92:	697a      	ldr	r2, [r7, #20]
 8012e94:	4613      	mov	r3, r2
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	4413      	add	r3, r2
 8012e9a:	009b      	lsls	r3, r3, #2
 8012e9c:	4a14      	ldr	r2, [pc, #80]	@ (8012ef0 <vTaskSwitchContext+0xbc>)
 8012e9e:	4413      	add	r3, r2
 8012ea0:	613b      	str	r3, [r7, #16]
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	685a      	ldr	r2, [r3, #4]
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	605a      	str	r2, [r3, #4]
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	685a      	ldr	r2, [r3, #4]
 8012eb0:	693b      	ldr	r3, [r7, #16]
 8012eb2:	3308      	adds	r3, #8
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d104      	bne.n	8012ec2 <vTaskSwitchContext+0x8e>
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	685a      	ldr	r2, [r3, #4]
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	605a      	str	r2, [r3, #4]
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	68db      	ldr	r3, [r3, #12]
 8012ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8012ef4 <vTaskSwitchContext+0xc0>)
 8012eca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012ecc:	4b09      	ldr	r3, [pc, #36]	@ (8012ef4 <vTaskSwitchContext+0xc0>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	334c      	adds	r3, #76	@ 0x4c
 8012ed2:	4a09      	ldr	r2, [pc, #36]	@ (8012ef8 <vTaskSwitchContext+0xc4>)
 8012ed4:	6013      	str	r3, [r2, #0]
}
 8012ed6:	bf00      	nop
 8012ed8:	371c      	adds	r7, #28
 8012eda:	46bd      	mov	sp, r7
 8012edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee0:	4770      	bx	lr
 8012ee2:	bf00      	nop
 8012ee4:	24075778 	.word	0x24075778
 8012ee8:	24075764 	.word	0x24075764
 8012eec:	24075758 	.word	0x24075758
 8012ef0:	24075654 	.word	0x24075654
 8012ef4:	24075650 	.word	0x24075650
 8012ef8:	2400004c 	.word	0x2400004c

08012efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012f04:	f000 f852 	bl	8012fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012f08:	4b06      	ldr	r3, [pc, #24]	@ (8012f24 <prvIdleTask+0x28>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	d9f9      	bls.n	8012f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012f10:	4b05      	ldr	r3, [pc, #20]	@ (8012f28 <prvIdleTask+0x2c>)
 8012f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	f3bf 8f4f 	dsb	sy
 8012f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012f20:	e7f0      	b.n	8012f04 <prvIdleTask+0x8>
 8012f22:	bf00      	nop
 8012f24:	24075654 	.word	0x24075654
 8012f28:	e000ed04 	.word	0xe000ed04

08012f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f32:	2300      	movs	r3, #0
 8012f34:	607b      	str	r3, [r7, #4]
 8012f36:	e00c      	b.n	8012f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	009b      	lsls	r3, r3, #2
 8012f42:	4a12      	ldr	r2, [pc, #72]	@ (8012f8c <prvInitialiseTaskLists+0x60>)
 8012f44:	4413      	add	r3, r2
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7ff f8f8 	bl	801213c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	3301      	adds	r3, #1
 8012f50:	607b      	str	r3, [r7, #4]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b06      	cmp	r3, #6
 8012f56:	d9ef      	bls.n	8012f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012f58:	480d      	ldr	r0, [pc, #52]	@ (8012f90 <prvInitialiseTaskLists+0x64>)
 8012f5a:	f7ff f8ef 	bl	801213c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012f5e:	480d      	ldr	r0, [pc, #52]	@ (8012f94 <prvInitialiseTaskLists+0x68>)
 8012f60:	f7ff f8ec 	bl	801213c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012f64:	480c      	ldr	r0, [pc, #48]	@ (8012f98 <prvInitialiseTaskLists+0x6c>)
 8012f66:	f7ff f8e9 	bl	801213c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012f6a:	480c      	ldr	r0, [pc, #48]	@ (8012f9c <prvInitialiseTaskLists+0x70>)
 8012f6c:	f7ff f8e6 	bl	801213c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012f70:	480b      	ldr	r0, [pc, #44]	@ (8012fa0 <prvInitialiseTaskLists+0x74>)
 8012f72:	f7ff f8e3 	bl	801213c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012f76:	4b0b      	ldr	r3, [pc, #44]	@ (8012fa4 <prvInitialiseTaskLists+0x78>)
 8012f78:	4a05      	ldr	r2, [pc, #20]	@ (8012f90 <prvInitialiseTaskLists+0x64>)
 8012f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8012fa8 <prvInitialiseTaskLists+0x7c>)
 8012f7e:	4a05      	ldr	r2, [pc, #20]	@ (8012f94 <prvInitialiseTaskLists+0x68>)
 8012f80:	601a      	str	r2, [r3, #0]
}
 8012f82:	bf00      	nop
 8012f84:	3708      	adds	r7, #8
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	24075654 	.word	0x24075654
 8012f90:	240756e0 	.word	0x240756e0
 8012f94:	240756f4 	.word	0x240756f4
 8012f98:	24075710 	.word	0x24075710
 8012f9c:	24075724 	.word	0x24075724
 8012fa0:	2407573c 	.word	0x2407573c
 8012fa4:	24075708 	.word	0x24075708
 8012fa8:	2407570c 	.word	0x2407570c

08012fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012fb2:	e019      	b.n	8012fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012fb4:	f7ff faa8 	bl	8012508 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fb8:	4b10      	ldr	r3, [pc, #64]	@ (8012ffc <prvCheckTasksWaitingTermination+0x50>)
 8012fba:	68db      	ldr	r3, [r3, #12]
 8012fbc:	68db      	ldr	r3, [r3, #12]
 8012fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	3304      	adds	r3, #4
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7ff f943 	bl	8012250 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012fca:	4b0d      	ldr	r3, [pc, #52]	@ (8013000 <prvCheckTasksWaitingTermination+0x54>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8013000 <prvCheckTasksWaitingTermination+0x54>)
 8012fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8013004 <prvCheckTasksWaitingTermination+0x58>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	4a0a      	ldr	r2, [pc, #40]	@ (8013004 <prvCheckTasksWaitingTermination+0x58>)
 8012fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012fde:	f7ff fac5 	bl	801256c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f000 f810 	bl	8013008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012fe8:	4b06      	ldr	r3, [pc, #24]	@ (8013004 <prvCheckTasksWaitingTermination+0x58>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1e1      	bne.n	8012fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012ff0:	bf00      	nop
 8012ff2:	bf00      	nop
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	24075724 	.word	0x24075724
 8013000:	24075750 	.word	0x24075750
 8013004:	24075738 	.word	0x24075738

08013008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	334c      	adds	r3, #76	@ 0x4c
 8013014:	4618      	mov	r0, r3
 8013016:	f000 fe3f 	bl	8013c98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8013020:	2b00      	cmp	r3, #0
 8013022:	d108      	bne.n	8013036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013028:	4618      	mov	r0, r3
 801302a:	f7fe ff67 	bl	8011efc <vPortFree>
				vPortFree( pxTCB );
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7fe ff64 	bl	8011efc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013034:	e019      	b.n	801306a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801303c:	2b01      	cmp	r3, #1
 801303e:	d103      	bne.n	8013048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7fe ff5b 	bl	8011efc <vPortFree>
	}
 8013046:	e010      	b.n	801306a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801304e:	2b02      	cmp	r3, #2
 8013050:	d00b      	beq.n	801306a <prvDeleteTCB+0x62>
	__asm volatile
 8013052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013056:	f383 8811 	msr	BASEPRI, r3
 801305a:	f3bf 8f6f 	isb	sy
 801305e:	f3bf 8f4f 	dsb	sy
 8013062:	60fb      	str	r3, [r7, #12]
}
 8013064:	bf00      	nop
 8013066:	bf00      	nop
 8013068:	e7fd      	b.n	8013066 <prvDeleteTCB+0x5e>
	}
 801306a:	bf00      	nop
 801306c:	3710      	adds	r7, #16
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
	...

08013074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801307a:	4b0c      	ldr	r3, [pc, #48]	@ (80130ac <prvResetNextTaskUnblockTime+0x38>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d104      	bne.n	801308e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013084:	4b0a      	ldr	r3, [pc, #40]	@ (80130b0 <prvResetNextTaskUnblockTime+0x3c>)
 8013086:	f04f 32ff 	mov.w	r2, #4294967295
 801308a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801308c:	e008      	b.n	80130a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801308e:	4b07      	ldr	r3, [pc, #28]	@ (80130ac <prvResetNextTaskUnblockTime+0x38>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	68db      	ldr	r3, [r3, #12]
 8013096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	4a04      	ldr	r2, [pc, #16]	@ (80130b0 <prvResetNextTaskUnblockTime+0x3c>)
 801309e:	6013      	str	r3, [r2, #0]
}
 80130a0:	bf00      	nop
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr
 80130ac:	24075708 	.word	0x24075708
 80130b0:	24075770 	.word	0x24075770

080130b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80130be:	4b29      	ldr	r3, [pc, #164]	@ (8013164 <prvAddCurrentTaskToDelayedList+0xb0>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130c4:	4b28      	ldr	r3, [pc, #160]	@ (8013168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	3304      	adds	r3, #4
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7ff f8c0 	bl	8012250 <uxListRemove>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10b      	bne.n	80130ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80130d6:	4b24      	ldr	r3, [pc, #144]	@ (8013168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130dc:	2201      	movs	r2, #1
 80130de:	fa02 f303 	lsl.w	r3, r2, r3
 80130e2:	43da      	mvns	r2, r3
 80130e4:	4b21      	ldr	r3, [pc, #132]	@ (801316c <prvAddCurrentTaskToDelayedList+0xb8>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4013      	ands	r3, r2
 80130ea:	4a20      	ldr	r2, [pc, #128]	@ (801316c <prvAddCurrentTaskToDelayedList+0xb8>)
 80130ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130f4:	d10a      	bne.n	801310c <prvAddCurrentTaskToDelayedList+0x58>
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d007      	beq.n	801310c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80130fc:	4b1a      	ldr	r3, [pc, #104]	@ (8013168 <prvAddCurrentTaskToDelayedList+0xb4>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	3304      	adds	r3, #4
 8013102:	4619      	mov	r1, r3
 8013104:	481a      	ldr	r0, [pc, #104]	@ (8013170 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013106:	f7ff f846 	bl	8012196 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801310a:	e026      	b.n	801315a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801310c:	68fa      	ldr	r2, [r7, #12]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	4413      	add	r3, r2
 8013112:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013114:	4b14      	ldr	r3, [pc, #80]	@ (8013168 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	68ba      	ldr	r2, [r7, #8]
 801311a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801311c:	68ba      	ldr	r2, [r7, #8]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	429a      	cmp	r2, r3
 8013122:	d209      	bcs.n	8013138 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013124:	4b13      	ldr	r3, [pc, #76]	@ (8013174 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013126:	681a      	ldr	r2, [r3, #0]
 8013128:	4b0f      	ldr	r3, [pc, #60]	@ (8013168 <prvAddCurrentTaskToDelayedList+0xb4>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	3304      	adds	r3, #4
 801312e:	4619      	mov	r1, r3
 8013130:	4610      	mov	r0, r2
 8013132:	f7ff f854 	bl	80121de <vListInsert>
}
 8013136:	e010      	b.n	801315a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013138:	4b0f      	ldr	r3, [pc, #60]	@ (8013178 <prvAddCurrentTaskToDelayedList+0xc4>)
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	4b0a      	ldr	r3, [pc, #40]	@ (8013168 <prvAddCurrentTaskToDelayedList+0xb4>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	3304      	adds	r3, #4
 8013142:	4619      	mov	r1, r3
 8013144:	4610      	mov	r0, r2
 8013146:	f7ff f84a 	bl	80121de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801314a:	4b0c      	ldr	r3, [pc, #48]	@ (801317c <prvAddCurrentTaskToDelayedList+0xc8>)
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	68ba      	ldr	r2, [r7, #8]
 8013150:	429a      	cmp	r2, r3
 8013152:	d202      	bcs.n	801315a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013154:	4a09      	ldr	r2, [pc, #36]	@ (801317c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	6013      	str	r3, [r2, #0]
}
 801315a:	bf00      	nop
 801315c:	3710      	adds	r7, #16
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	24075754 	.word	0x24075754
 8013168:	24075650 	.word	0x24075650
 801316c:	24075758 	.word	0x24075758
 8013170:	2407573c 	.word	0x2407573c
 8013174:	2407570c 	.word	0x2407570c
 8013178:	24075708 	.word	0x24075708
 801317c:	24075770 	.word	0x24075770

08013180 <__cvt>:
 8013180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013182:	ed2d 8b02 	vpush	{d8}
 8013186:	eeb0 8b40 	vmov.f64	d8, d0
 801318a:	b085      	sub	sp, #20
 801318c:	4617      	mov	r7, r2
 801318e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013190:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013192:	ee18 2a90 	vmov	r2, s17
 8013196:	f025 0520 	bic.w	r5, r5, #32
 801319a:	2a00      	cmp	r2, #0
 801319c:	bfb6      	itet	lt
 801319e:	222d      	movlt	r2, #45	@ 0x2d
 80131a0:	2200      	movge	r2, #0
 80131a2:	eeb1 8b40 	vneglt.f64	d8, d0
 80131a6:	2d46      	cmp	r5, #70	@ 0x46
 80131a8:	460c      	mov	r4, r1
 80131aa:	701a      	strb	r2, [r3, #0]
 80131ac:	d004      	beq.n	80131b8 <__cvt+0x38>
 80131ae:	2d45      	cmp	r5, #69	@ 0x45
 80131b0:	d100      	bne.n	80131b4 <__cvt+0x34>
 80131b2:	3401      	adds	r4, #1
 80131b4:	2102      	movs	r1, #2
 80131b6:	e000      	b.n	80131ba <__cvt+0x3a>
 80131b8:	2103      	movs	r1, #3
 80131ba:	ab03      	add	r3, sp, #12
 80131bc:	9301      	str	r3, [sp, #4]
 80131be:	ab02      	add	r3, sp, #8
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	4622      	mov	r2, r4
 80131c4:	4633      	mov	r3, r6
 80131c6:	eeb0 0b48 	vmov.f64	d0, d8
 80131ca:	f000 feb5 	bl	8013f38 <_dtoa_r>
 80131ce:	2d47      	cmp	r5, #71	@ 0x47
 80131d0:	d114      	bne.n	80131fc <__cvt+0x7c>
 80131d2:	07fb      	lsls	r3, r7, #31
 80131d4:	d50a      	bpl.n	80131ec <__cvt+0x6c>
 80131d6:	1902      	adds	r2, r0, r4
 80131d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80131dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e0:	bf08      	it	eq
 80131e2:	9203      	streq	r2, [sp, #12]
 80131e4:	2130      	movs	r1, #48	@ 0x30
 80131e6:	9b03      	ldr	r3, [sp, #12]
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d319      	bcc.n	8013220 <__cvt+0xa0>
 80131ec:	9b03      	ldr	r3, [sp, #12]
 80131ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131f0:	1a1b      	subs	r3, r3, r0
 80131f2:	6013      	str	r3, [r2, #0]
 80131f4:	b005      	add	sp, #20
 80131f6:	ecbd 8b02 	vpop	{d8}
 80131fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131fc:	2d46      	cmp	r5, #70	@ 0x46
 80131fe:	eb00 0204 	add.w	r2, r0, r4
 8013202:	d1e9      	bne.n	80131d8 <__cvt+0x58>
 8013204:	7803      	ldrb	r3, [r0, #0]
 8013206:	2b30      	cmp	r3, #48	@ 0x30
 8013208:	d107      	bne.n	801321a <__cvt+0x9a>
 801320a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013212:	bf1c      	itt	ne
 8013214:	f1c4 0401 	rsbne	r4, r4, #1
 8013218:	6034      	strne	r4, [r6, #0]
 801321a:	6833      	ldr	r3, [r6, #0]
 801321c:	441a      	add	r2, r3
 801321e:	e7db      	b.n	80131d8 <__cvt+0x58>
 8013220:	1c5c      	adds	r4, r3, #1
 8013222:	9403      	str	r4, [sp, #12]
 8013224:	7019      	strb	r1, [r3, #0]
 8013226:	e7de      	b.n	80131e6 <__cvt+0x66>

08013228 <__exponent>:
 8013228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801322a:	2900      	cmp	r1, #0
 801322c:	bfba      	itte	lt
 801322e:	4249      	neglt	r1, r1
 8013230:	232d      	movlt	r3, #45	@ 0x2d
 8013232:	232b      	movge	r3, #43	@ 0x2b
 8013234:	2909      	cmp	r1, #9
 8013236:	7002      	strb	r2, [r0, #0]
 8013238:	7043      	strb	r3, [r0, #1]
 801323a:	dd29      	ble.n	8013290 <__exponent+0x68>
 801323c:	f10d 0307 	add.w	r3, sp, #7
 8013240:	461d      	mov	r5, r3
 8013242:	270a      	movs	r7, #10
 8013244:	461a      	mov	r2, r3
 8013246:	fbb1 f6f7 	udiv	r6, r1, r7
 801324a:	fb07 1416 	mls	r4, r7, r6, r1
 801324e:	3430      	adds	r4, #48	@ 0x30
 8013250:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013254:	460c      	mov	r4, r1
 8013256:	2c63      	cmp	r4, #99	@ 0x63
 8013258:	f103 33ff 	add.w	r3, r3, #4294967295
 801325c:	4631      	mov	r1, r6
 801325e:	dcf1      	bgt.n	8013244 <__exponent+0x1c>
 8013260:	3130      	adds	r1, #48	@ 0x30
 8013262:	1e94      	subs	r4, r2, #2
 8013264:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013268:	1c41      	adds	r1, r0, #1
 801326a:	4623      	mov	r3, r4
 801326c:	42ab      	cmp	r3, r5
 801326e:	d30a      	bcc.n	8013286 <__exponent+0x5e>
 8013270:	f10d 0309 	add.w	r3, sp, #9
 8013274:	1a9b      	subs	r3, r3, r2
 8013276:	42ac      	cmp	r4, r5
 8013278:	bf88      	it	hi
 801327a:	2300      	movhi	r3, #0
 801327c:	3302      	adds	r3, #2
 801327e:	4403      	add	r3, r0
 8013280:	1a18      	subs	r0, r3, r0
 8013282:	b003      	add	sp, #12
 8013284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013286:	f813 6b01 	ldrb.w	r6, [r3], #1
 801328a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801328e:	e7ed      	b.n	801326c <__exponent+0x44>
 8013290:	2330      	movs	r3, #48	@ 0x30
 8013292:	3130      	adds	r1, #48	@ 0x30
 8013294:	7083      	strb	r3, [r0, #2]
 8013296:	70c1      	strb	r1, [r0, #3]
 8013298:	1d03      	adds	r3, r0, #4
 801329a:	e7f1      	b.n	8013280 <__exponent+0x58>
 801329c:	0000      	movs	r0, r0
	...

080132a0 <_printf_float>:
 80132a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132a4:	b08d      	sub	sp, #52	@ 0x34
 80132a6:	460c      	mov	r4, r1
 80132a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80132ac:	4616      	mov	r6, r2
 80132ae:	461f      	mov	r7, r3
 80132b0:	4605      	mov	r5, r0
 80132b2:	f000 fcdd 	bl	8013c70 <_localeconv_r>
 80132b6:	f8d0 b000 	ldr.w	fp, [r0]
 80132ba:	4658      	mov	r0, fp
 80132bc:	f7ed f860 	bl	8000380 <strlen>
 80132c0:	2300      	movs	r3, #0
 80132c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80132c4:	f8d8 3000 	ldr.w	r3, [r8]
 80132c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80132cc:	6822      	ldr	r2, [r4, #0]
 80132ce:	9005      	str	r0, [sp, #20]
 80132d0:	3307      	adds	r3, #7
 80132d2:	f023 0307 	bic.w	r3, r3, #7
 80132d6:	f103 0108 	add.w	r1, r3, #8
 80132da:	f8c8 1000 	str.w	r1, [r8]
 80132de:	ed93 0b00 	vldr	d0, [r3]
 80132e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013540 <_printf_float+0x2a0>
 80132e6:	eeb0 7bc0 	vabs.f64	d7, d0
 80132ea:	eeb4 7b46 	vcmp.f64	d7, d6
 80132ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80132f6:	dd24      	ble.n	8013342 <_printf_float+0xa2>
 80132f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80132fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013300:	d502      	bpl.n	8013308 <_printf_float+0x68>
 8013302:	232d      	movs	r3, #45	@ 0x2d
 8013304:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013308:	498f      	ldr	r1, [pc, #572]	@ (8013548 <_printf_float+0x2a8>)
 801330a:	4b90      	ldr	r3, [pc, #576]	@ (801354c <_printf_float+0x2ac>)
 801330c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013310:	bf94      	ite	ls
 8013312:	4688      	movls	r8, r1
 8013314:	4698      	movhi	r8, r3
 8013316:	f022 0204 	bic.w	r2, r2, #4
 801331a:	2303      	movs	r3, #3
 801331c:	6123      	str	r3, [r4, #16]
 801331e:	6022      	str	r2, [r4, #0]
 8013320:	f04f 0a00 	mov.w	sl, #0
 8013324:	9700      	str	r7, [sp, #0]
 8013326:	4633      	mov	r3, r6
 8013328:	aa0b      	add	r2, sp, #44	@ 0x2c
 801332a:	4621      	mov	r1, r4
 801332c:	4628      	mov	r0, r5
 801332e:	f000 f9d1 	bl	80136d4 <_printf_common>
 8013332:	3001      	adds	r0, #1
 8013334:	f040 8089 	bne.w	801344a <_printf_float+0x1aa>
 8013338:	f04f 30ff 	mov.w	r0, #4294967295
 801333c:	b00d      	add	sp, #52	@ 0x34
 801333e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013342:	eeb4 0b40 	vcmp.f64	d0, d0
 8013346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334a:	d709      	bvc.n	8013360 <_printf_float+0xc0>
 801334c:	ee10 3a90 	vmov	r3, s1
 8013350:	2b00      	cmp	r3, #0
 8013352:	bfbc      	itt	lt
 8013354:	232d      	movlt	r3, #45	@ 0x2d
 8013356:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801335a:	497d      	ldr	r1, [pc, #500]	@ (8013550 <_printf_float+0x2b0>)
 801335c:	4b7d      	ldr	r3, [pc, #500]	@ (8013554 <_printf_float+0x2b4>)
 801335e:	e7d5      	b.n	801330c <_printf_float+0x6c>
 8013360:	6863      	ldr	r3, [r4, #4]
 8013362:	1c59      	adds	r1, r3, #1
 8013364:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013368:	d139      	bne.n	80133de <_printf_float+0x13e>
 801336a:	2306      	movs	r3, #6
 801336c:	6063      	str	r3, [r4, #4]
 801336e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013372:	2300      	movs	r3, #0
 8013374:	6022      	str	r2, [r4, #0]
 8013376:	9303      	str	r3, [sp, #12]
 8013378:	ab0a      	add	r3, sp, #40	@ 0x28
 801337a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801337e:	ab09      	add	r3, sp, #36	@ 0x24
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	6861      	ldr	r1, [r4, #4]
 8013384:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013388:	4628      	mov	r0, r5
 801338a:	f7ff fef9 	bl	8013180 <__cvt>
 801338e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013394:	4680      	mov	r8, r0
 8013396:	d129      	bne.n	80133ec <_printf_float+0x14c>
 8013398:	1cc8      	adds	r0, r1, #3
 801339a:	db02      	blt.n	80133a2 <_printf_float+0x102>
 801339c:	6863      	ldr	r3, [r4, #4]
 801339e:	4299      	cmp	r1, r3
 80133a0:	dd41      	ble.n	8013426 <_printf_float+0x186>
 80133a2:	f1a9 0902 	sub.w	r9, r9, #2
 80133a6:	fa5f f989 	uxtb.w	r9, r9
 80133aa:	3901      	subs	r1, #1
 80133ac:	464a      	mov	r2, r9
 80133ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80133b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80133b4:	f7ff ff38 	bl	8013228 <__exponent>
 80133b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80133ba:	1813      	adds	r3, r2, r0
 80133bc:	2a01      	cmp	r2, #1
 80133be:	4682      	mov	sl, r0
 80133c0:	6123      	str	r3, [r4, #16]
 80133c2:	dc02      	bgt.n	80133ca <_printf_float+0x12a>
 80133c4:	6822      	ldr	r2, [r4, #0]
 80133c6:	07d2      	lsls	r2, r2, #31
 80133c8:	d501      	bpl.n	80133ce <_printf_float+0x12e>
 80133ca:	3301      	adds	r3, #1
 80133cc:	6123      	str	r3, [r4, #16]
 80133ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d0a6      	beq.n	8013324 <_printf_float+0x84>
 80133d6:	232d      	movs	r3, #45	@ 0x2d
 80133d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80133dc:	e7a2      	b.n	8013324 <_printf_float+0x84>
 80133de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80133e2:	d1c4      	bne.n	801336e <_printf_float+0xce>
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d1c2      	bne.n	801336e <_printf_float+0xce>
 80133e8:	2301      	movs	r3, #1
 80133ea:	e7bf      	b.n	801336c <_printf_float+0xcc>
 80133ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80133f0:	d9db      	bls.n	80133aa <_printf_float+0x10a>
 80133f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80133f6:	d118      	bne.n	801342a <_printf_float+0x18a>
 80133f8:	2900      	cmp	r1, #0
 80133fa:	6863      	ldr	r3, [r4, #4]
 80133fc:	dd0b      	ble.n	8013416 <_printf_float+0x176>
 80133fe:	6121      	str	r1, [r4, #16]
 8013400:	b913      	cbnz	r3, 8013408 <_printf_float+0x168>
 8013402:	6822      	ldr	r2, [r4, #0]
 8013404:	07d0      	lsls	r0, r2, #31
 8013406:	d502      	bpl.n	801340e <_printf_float+0x16e>
 8013408:	3301      	adds	r3, #1
 801340a:	440b      	add	r3, r1
 801340c:	6123      	str	r3, [r4, #16]
 801340e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013410:	f04f 0a00 	mov.w	sl, #0
 8013414:	e7db      	b.n	80133ce <_printf_float+0x12e>
 8013416:	b913      	cbnz	r3, 801341e <_printf_float+0x17e>
 8013418:	6822      	ldr	r2, [r4, #0]
 801341a:	07d2      	lsls	r2, r2, #31
 801341c:	d501      	bpl.n	8013422 <_printf_float+0x182>
 801341e:	3302      	adds	r3, #2
 8013420:	e7f4      	b.n	801340c <_printf_float+0x16c>
 8013422:	2301      	movs	r3, #1
 8013424:	e7f2      	b.n	801340c <_printf_float+0x16c>
 8013426:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801342a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801342c:	4299      	cmp	r1, r3
 801342e:	db05      	blt.n	801343c <_printf_float+0x19c>
 8013430:	6823      	ldr	r3, [r4, #0]
 8013432:	6121      	str	r1, [r4, #16]
 8013434:	07d8      	lsls	r0, r3, #31
 8013436:	d5ea      	bpl.n	801340e <_printf_float+0x16e>
 8013438:	1c4b      	adds	r3, r1, #1
 801343a:	e7e7      	b.n	801340c <_printf_float+0x16c>
 801343c:	2900      	cmp	r1, #0
 801343e:	bfd4      	ite	le
 8013440:	f1c1 0202 	rsble	r2, r1, #2
 8013444:	2201      	movgt	r2, #1
 8013446:	4413      	add	r3, r2
 8013448:	e7e0      	b.n	801340c <_printf_float+0x16c>
 801344a:	6823      	ldr	r3, [r4, #0]
 801344c:	055a      	lsls	r2, r3, #21
 801344e:	d407      	bmi.n	8013460 <_printf_float+0x1c0>
 8013450:	6923      	ldr	r3, [r4, #16]
 8013452:	4642      	mov	r2, r8
 8013454:	4631      	mov	r1, r6
 8013456:	4628      	mov	r0, r5
 8013458:	47b8      	blx	r7
 801345a:	3001      	adds	r0, #1
 801345c:	d12a      	bne.n	80134b4 <_printf_float+0x214>
 801345e:	e76b      	b.n	8013338 <_printf_float+0x98>
 8013460:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013464:	f240 80e0 	bls.w	8013628 <_printf_float+0x388>
 8013468:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801346c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013474:	d133      	bne.n	80134de <_printf_float+0x23e>
 8013476:	4a38      	ldr	r2, [pc, #224]	@ (8013558 <_printf_float+0x2b8>)
 8013478:	2301      	movs	r3, #1
 801347a:	4631      	mov	r1, r6
 801347c:	4628      	mov	r0, r5
 801347e:	47b8      	blx	r7
 8013480:	3001      	adds	r0, #1
 8013482:	f43f af59 	beq.w	8013338 <_printf_float+0x98>
 8013486:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801348a:	4543      	cmp	r3, r8
 801348c:	db02      	blt.n	8013494 <_printf_float+0x1f4>
 801348e:	6823      	ldr	r3, [r4, #0]
 8013490:	07d8      	lsls	r0, r3, #31
 8013492:	d50f      	bpl.n	80134b4 <_printf_float+0x214>
 8013494:	9b05      	ldr	r3, [sp, #20]
 8013496:	465a      	mov	r2, fp
 8013498:	4631      	mov	r1, r6
 801349a:	4628      	mov	r0, r5
 801349c:	47b8      	blx	r7
 801349e:	3001      	adds	r0, #1
 80134a0:	f43f af4a 	beq.w	8013338 <_printf_float+0x98>
 80134a4:	f04f 0900 	mov.w	r9, #0
 80134a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80134ac:	f104 0a1a 	add.w	sl, r4, #26
 80134b0:	45c8      	cmp	r8, r9
 80134b2:	dc09      	bgt.n	80134c8 <_printf_float+0x228>
 80134b4:	6823      	ldr	r3, [r4, #0]
 80134b6:	079b      	lsls	r3, r3, #30
 80134b8:	f100 8107 	bmi.w	80136ca <_printf_float+0x42a>
 80134bc:	68e0      	ldr	r0, [r4, #12]
 80134be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134c0:	4298      	cmp	r0, r3
 80134c2:	bfb8      	it	lt
 80134c4:	4618      	movlt	r0, r3
 80134c6:	e739      	b.n	801333c <_printf_float+0x9c>
 80134c8:	2301      	movs	r3, #1
 80134ca:	4652      	mov	r2, sl
 80134cc:	4631      	mov	r1, r6
 80134ce:	4628      	mov	r0, r5
 80134d0:	47b8      	blx	r7
 80134d2:	3001      	adds	r0, #1
 80134d4:	f43f af30 	beq.w	8013338 <_printf_float+0x98>
 80134d8:	f109 0901 	add.w	r9, r9, #1
 80134dc:	e7e8      	b.n	80134b0 <_printf_float+0x210>
 80134de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	dc3b      	bgt.n	801355c <_printf_float+0x2bc>
 80134e4:	4a1c      	ldr	r2, [pc, #112]	@ (8013558 <_printf_float+0x2b8>)
 80134e6:	2301      	movs	r3, #1
 80134e8:	4631      	mov	r1, r6
 80134ea:	4628      	mov	r0, r5
 80134ec:	47b8      	blx	r7
 80134ee:	3001      	adds	r0, #1
 80134f0:	f43f af22 	beq.w	8013338 <_printf_float+0x98>
 80134f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80134f8:	ea59 0303 	orrs.w	r3, r9, r3
 80134fc:	d102      	bne.n	8013504 <_printf_float+0x264>
 80134fe:	6823      	ldr	r3, [r4, #0]
 8013500:	07d9      	lsls	r1, r3, #31
 8013502:	d5d7      	bpl.n	80134b4 <_printf_float+0x214>
 8013504:	9b05      	ldr	r3, [sp, #20]
 8013506:	465a      	mov	r2, fp
 8013508:	4631      	mov	r1, r6
 801350a:	4628      	mov	r0, r5
 801350c:	47b8      	blx	r7
 801350e:	3001      	adds	r0, #1
 8013510:	f43f af12 	beq.w	8013338 <_printf_float+0x98>
 8013514:	f04f 0a00 	mov.w	sl, #0
 8013518:	f104 0b1a 	add.w	fp, r4, #26
 801351c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801351e:	425b      	negs	r3, r3
 8013520:	4553      	cmp	r3, sl
 8013522:	dc01      	bgt.n	8013528 <_printf_float+0x288>
 8013524:	464b      	mov	r3, r9
 8013526:	e794      	b.n	8013452 <_printf_float+0x1b2>
 8013528:	2301      	movs	r3, #1
 801352a:	465a      	mov	r2, fp
 801352c:	4631      	mov	r1, r6
 801352e:	4628      	mov	r0, r5
 8013530:	47b8      	blx	r7
 8013532:	3001      	adds	r0, #1
 8013534:	f43f af00 	beq.w	8013338 <_printf_float+0x98>
 8013538:	f10a 0a01 	add.w	sl, sl, #1
 801353c:	e7ee      	b.n	801351c <_printf_float+0x27c>
 801353e:	bf00      	nop
 8013540:	ffffffff 	.word	0xffffffff
 8013544:	7fefffff 	.word	0x7fefffff
 8013548:	08017cfc 	.word	0x08017cfc
 801354c:	08017d00 	.word	0x08017d00
 8013550:	08017d04 	.word	0x08017d04
 8013554:	08017d08 	.word	0x08017d08
 8013558:	08017d0c 	.word	0x08017d0c
 801355c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801355e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013562:	4553      	cmp	r3, sl
 8013564:	bfa8      	it	ge
 8013566:	4653      	movge	r3, sl
 8013568:	2b00      	cmp	r3, #0
 801356a:	4699      	mov	r9, r3
 801356c:	dc37      	bgt.n	80135de <_printf_float+0x33e>
 801356e:	2300      	movs	r3, #0
 8013570:	9307      	str	r3, [sp, #28]
 8013572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013576:	f104 021a 	add.w	r2, r4, #26
 801357a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801357c:	9907      	ldr	r1, [sp, #28]
 801357e:	9306      	str	r3, [sp, #24]
 8013580:	eba3 0309 	sub.w	r3, r3, r9
 8013584:	428b      	cmp	r3, r1
 8013586:	dc31      	bgt.n	80135ec <_printf_float+0x34c>
 8013588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801358a:	459a      	cmp	sl, r3
 801358c:	dc3b      	bgt.n	8013606 <_printf_float+0x366>
 801358e:	6823      	ldr	r3, [r4, #0]
 8013590:	07da      	lsls	r2, r3, #31
 8013592:	d438      	bmi.n	8013606 <_printf_float+0x366>
 8013594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013596:	ebaa 0903 	sub.w	r9, sl, r3
 801359a:	9b06      	ldr	r3, [sp, #24]
 801359c:	ebaa 0303 	sub.w	r3, sl, r3
 80135a0:	4599      	cmp	r9, r3
 80135a2:	bfa8      	it	ge
 80135a4:	4699      	movge	r9, r3
 80135a6:	f1b9 0f00 	cmp.w	r9, #0
 80135aa:	dc34      	bgt.n	8013616 <_printf_float+0x376>
 80135ac:	f04f 0800 	mov.w	r8, #0
 80135b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135b4:	f104 0b1a 	add.w	fp, r4, #26
 80135b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135ba:	ebaa 0303 	sub.w	r3, sl, r3
 80135be:	eba3 0309 	sub.w	r3, r3, r9
 80135c2:	4543      	cmp	r3, r8
 80135c4:	f77f af76 	ble.w	80134b4 <_printf_float+0x214>
 80135c8:	2301      	movs	r3, #1
 80135ca:	465a      	mov	r2, fp
 80135cc:	4631      	mov	r1, r6
 80135ce:	4628      	mov	r0, r5
 80135d0:	47b8      	blx	r7
 80135d2:	3001      	adds	r0, #1
 80135d4:	f43f aeb0 	beq.w	8013338 <_printf_float+0x98>
 80135d8:	f108 0801 	add.w	r8, r8, #1
 80135dc:	e7ec      	b.n	80135b8 <_printf_float+0x318>
 80135de:	4642      	mov	r2, r8
 80135e0:	4631      	mov	r1, r6
 80135e2:	4628      	mov	r0, r5
 80135e4:	47b8      	blx	r7
 80135e6:	3001      	adds	r0, #1
 80135e8:	d1c1      	bne.n	801356e <_printf_float+0x2ce>
 80135ea:	e6a5      	b.n	8013338 <_printf_float+0x98>
 80135ec:	2301      	movs	r3, #1
 80135ee:	4631      	mov	r1, r6
 80135f0:	4628      	mov	r0, r5
 80135f2:	9206      	str	r2, [sp, #24]
 80135f4:	47b8      	blx	r7
 80135f6:	3001      	adds	r0, #1
 80135f8:	f43f ae9e 	beq.w	8013338 <_printf_float+0x98>
 80135fc:	9b07      	ldr	r3, [sp, #28]
 80135fe:	9a06      	ldr	r2, [sp, #24]
 8013600:	3301      	adds	r3, #1
 8013602:	9307      	str	r3, [sp, #28]
 8013604:	e7b9      	b.n	801357a <_printf_float+0x2da>
 8013606:	9b05      	ldr	r3, [sp, #20]
 8013608:	465a      	mov	r2, fp
 801360a:	4631      	mov	r1, r6
 801360c:	4628      	mov	r0, r5
 801360e:	47b8      	blx	r7
 8013610:	3001      	adds	r0, #1
 8013612:	d1bf      	bne.n	8013594 <_printf_float+0x2f4>
 8013614:	e690      	b.n	8013338 <_printf_float+0x98>
 8013616:	9a06      	ldr	r2, [sp, #24]
 8013618:	464b      	mov	r3, r9
 801361a:	4442      	add	r2, r8
 801361c:	4631      	mov	r1, r6
 801361e:	4628      	mov	r0, r5
 8013620:	47b8      	blx	r7
 8013622:	3001      	adds	r0, #1
 8013624:	d1c2      	bne.n	80135ac <_printf_float+0x30c>
 8013626:	e687      	b.n	8013338 <_printf_float+0x98>
 8013628:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801362c:	f1b9 0f01 	cmp.w	r9, #1
 8013630:	dc01      	bgt.n	8013636 <_printf_float+0x396>
 8013632:	07db      	lsls	r3, r3, #31
 8013634:	d536      	bpl.n	80136a4 <_printf_float+0x404>
 8013636:	2301      	movs	r3, #1
 8013638:	4642      	mov	r2, r8
 801363a:	4631      	mov	r1, r6
 801363c:	4628      	mov	r0, r5
 801363e:	47b8      	blx	r7
 8013640:	3001      	adds	r0, #1
 8013642:	f43f ae79 	beq.w	8013338 <_printf_float+0x98>
 8013646:	9b05      	ldr	r3, [sp, #20]
 8013648:	465a      	mov	r2, fp
 801364a:	4631      	mov	r1, r6
 801364c:	4628      	mov	r0, r5
 801364e:	47b8      	blx	r7
 8013650:	3001      	adds	r0, #1
 8013652:	f43f ae71 	beq.w	8013338 <_printf_float+0x98>
 8013656:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801365a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013662:	f109 39ff 	add.w	r9, r9, #4294967295
 8013666:	d018      	beq.n	801369a <_printf_float+0x3fa>
 8013668:	464b      	mov	r3, r9
 801366a:	f108 0201 	add.w	r2, r8, #1
 801366e:	4631      	mov	r1, r6
 8013670:	4628      	mov	r0, r5
 8013672:	47b8      	blx	r7
 8013674:	3001      	adds	r0, #1
 8013676:	d10c      	bne.n	8013692 <_printf_float+0x3f2>
 8013678:	e65e      	b.n	8013338 <_printf_float+0x98>
 801367a:	2301      	movs	r3, #1
 801367c:	465a      	mov	r2, fp
 801367e:	4631      	mov	r1, r6
 8013680:	4628      	mov	r0, r5
 8013682:	47b8      	blx	r7
 8013684:	3001      	adds	r0, #1
 8013686:	f43f ae57 	beq.w	8013338 <_printf_float+0x98>
 801368a:	f108 0801 	add.w	r8, r8, #1
 801368e:	45c8      	cmp	r8, r9
 8013690:	dbf3      	blt.n	801367a <_printf_float+0x3da>
 8013692:	4653      	mov	r3, sl
 8013694:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013698:	e6dc      	b.n	8013454 <_printf_float+0x1b4>
 801369a:	f04f 0800 	mov.w	r8, #0
 801369e:	f104 0b1a 	add.w	fp, r4, #26
 80136a2:	e7f4      	b.n	801368e <_printf_float+0x3ee>
 80136a4:	2301      	movs	r3, #1
 80136a6:	4642      	mov	r2, r8
 80136a8:	e7e1      	b.n	801366e <_printf_float+0x3ce>
 80136aa:	2301      	movs	r3, #1
 80136ac:	464a      	mov	r2, r9
 80136ae:	4631      	mov	r1, r6
 80136b0:	4628      	mov	r0, r5
 80136b2:	47b8      	blx	r7
 80136b4:	3001      	adds	r0, #1
 80136b6:	f43f ae3f 	beq.w	8013338 <_printf_float+0x98>
 80136ba:	f108 0801 	add.w	r8, r8, #1
 80136be:	68e3      	ldr	r3, [r4, #12]
 80136c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80136c2:	1a5b      	subs	r3, r3, r1
 80136c4:	4543      	cmp	r3, r8
 80136c6:	dcf0      	bgt.n	80136aa <_printf_float+0x40a>
 80136c8:	e6f8      	b.n	80134bc <_printf_float+0x21c>
 80136ca:	f04f 0800 	mov.w	r8, #0
 80136ce:	f104 0919 	add.w	r9, r4, #25
 80136d2:	e7f4      	b.n	80136be <_printf_float+0x41e>

080136d4 <_printf_common>:
 80136d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136d8:	4616      	mov	r6, r2
 80136da:	4698      	mov	r8, r3
 80136dc:	688a      	ldr	r2, [r1, #8]
 80136de:	690b      	ldr	r3, [r1, #16]
 80136e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80136e4:	4293      	cmp	r3, r2
 80136e6:	bfb8      	it	lt
 80136e8:	4613      	movlt	r3, r2
 80136ea:	6033      	str	r3, [r6, #0]
 80136ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80136f0:	4607      	mov	r7, r0
 80136f2:	460c      	mov	r4, r1
 80136f4:	b10a      	cbz	r2, 80136fa <_printf_common+0x26>
 80136f6:	3301      	adds	r3, #1
 80136f8:	6033      	str	r3, [r6, #0]
 80136fa:	6823      	ldr	r3, [r4, #0]
 80136fc:	0699      	lsls	r1, r3, #26
 80136fe:	bf42      	ittt	mi
 8013700:	6833      	ldrmi	r3, [r6, #0]
 8013702:	3302      	addmi	r3, #2
 8013704:	6033      	strmi	r3, [r6, #0]
 8013706:	6825      	ldr	r5, [r4, #0]
 8013708:	f015 0506 	ands.w	r5, r5, #6
 801370c:	d106      	bne.n	801371c <_printf_common+0x48>
 801370e:	f104 0a19 	add.w	sl, r4, #25
 8013712:	68e3      	ldr	r3, [r4, #12]
 8013714:	6832      	ldr	r2, [r6, #0]
 8013716:	1a9b      	subs	r3, r3, r2
 8013718:	42ab      	cmp	r3, r5
 801371a:	dc26      	bgt.n	801376a <_printf_common+0x96>
 801371c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013720:	6822      	ldr	r2, [r4, #0]
 8013722:	3b00      	subs	r3, #0
 8013724:	bf18      	it	ne
 8013726:	2301      	movne	r3, #1
 8013728:	0692      	lsls	r2, r2, #26
 801372a:	d42b      	bmi.n	8013784 <_printf_common+0xb0>
 801372c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013730:	4641      	mov	r1, r8
 8013732:	4638      	mov	r0, r7
 8013734:	47c8      	blx	r9
 8013736:	3001      	adds	r0, #1
 8013738:	d01e      	beq.n	8013778 <_printf_common+0xa4>
 801373a:	6823      	ldr	r3, [r4, #0]
 801373c:	6922      	ldr	r2, [r4, #16]
 801373e:	f003 0306 	and.w	r3, r3, #6
 8013742:	2b04      	cmp	r3, #4
 8013744:	bf02      	ittt	eq
 8013746:	68e5      	ldreq	r5, [r4, #12]
 8013748:	6833      	ldreq	r3, [r6, #0]
 801374a:	1aed      	subeq	r5, r5, r3
 801374c:	68a3      	ldr	r3, [r4, #8]
 801374e:	bf0c      	ite	eq
 8013750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013754:	2500      	movne	r5, #0
 8013756:	4293      	cmp	r3, r2
 8013758:	bfc4      	itt	gt
 801375a:	1a9b      	subgt	r3, r3, r2
 801375c:	18ed      	addgt	r5, r5, r3
 801375e:	2600      	movs	r6, #0
 8013760:	341a      	adds	r4, #26
 8013762:	42b5      	cmp	r5, r6
 8013764:	d11a      	bne.n	801379c <_printf_common+0xc8>
 8013766:	2000      	movs	r0, #0
 8013768:	e008      	b.n	801377c <_printf_common+0xa8>
 801376a:	2301      	movs	r3, #1
 801376c:	4652      	mov	r2, sl
 801376e:	4641      	mov	r1, r8
 8013770:	4638      	mov	r0, r7
 8013772:	47c8      	blx	r9
 8013774:	3001      	adds	r0, #1
 8013776:	d103      	bne.n	8013780 <_printf_common+0xac>
 8013778:	f04f 30ff 	mov.w	r0, #4294967295
 801377c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013780:	3501      	adds	r5, #1
 8013782:	e7c6      	b.n	8013712 <_printf_common+0x3e>
 8013784:	18e1      	adds	r1, r4, r3
 8013786:	1c5a      	adds	r2, r3, #1
 8013788:	2030      	movs	r0, #48	@ 0x30
 801378a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801378e:	4422      	add	r2, r4
 8013790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013798:	3302      	adds	r3, #2
 801379a:	e7c7      	b.n	801372c <_printf_common+0x58>
 801379c:	2301      	movs	r3, #1
 801379e:	4622      	mov	r2, r4
 80137a0:	4641      	mov	r1, r8
 80137a2:	4638      	mov	r0, r7
 80137a4:	47c8      	blx	r9
 80137a6:	3001      	adds	r0, #1
 80137a8:	d0e6      	beq.n	8013778 <_printf_common+0xa4>
 80137aa:	3601      	adds	r6, #1
 80137ac:	e7d9      	b.n	8013762 <_printf_common+0x8e>
	...

080137b0 <_printf_i>:
 80137b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80137b4:	7e0f      	ldrb	r7, [r1, #24]
 80137b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80137b8:	2f78      	cmp	r7, #120	@ 0x78
 80137ba:	4691      	mov	r9, r2
 80137bc:	4680      	mov	r8, r0
 80137be:	460c      	mov	r4, r1
 80137c0:	469a      	mov	sl, r3
 80137c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80137c6:	d807      	bhi.n	80137d8 <_printf_i+0x28>
 80137c8:	2f62      	cmp	r7, #98	@ 0x62
 80137ca:	d80a      	bhi.n	80137e2 <_printf_i+0x32>
 80137cc:	2f00      	cmp	r7, #0
 80137ce:	f000 80d2 	beq.w	8013976 <_printf_i+0x1c6>
 80137d2:	2f58      	cmp	r7, #88	@ 0x58
 80137d4:	f000 80b9 	beq.w	801394a <_printf_i+0x19a>
 80137d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80137dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80137e0:	e03a      	b.n	8013858 <_printf_i+0xa8>
 80137e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80137e6:	2b15      	cmp	r3, #21
 80137e8:	d8f6      	bhi.n	80137d8 <_printf_i+0x28>
 80137ea:	a101      	add	r1, pc, #4	@ (adr r1, 80137f0 <_printf_i+0x40>)
 80137ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80137f0:	08013849 	.word	0x08013849
 80137f4:	0801385d 	.word	0x0801385d
 80137f8:	080137d9 	.word	0x080137d9
 80137fc:	080137d9 	.word	0x080137d9
 8013800:	080137d9 	.word	0x080137d9
 8013804:	080137d9 	.word	0x080137d9
 8013808:	0801385d 	.word	0x0801385d
 801380c:	080137d9 	.word	0x080137d9
 8013810:	080137d9 	.word	0x080137d9
 8013814:	080137d9 	.word	0x080137d9
 8013818:	080137d9 	.word	0x080137d9
 801381c:	0801395d 	.word	0x0801395d
 8013820:	08013887 	.word	0x08013887
 8013824:	08013917 	.word	0x08013917
 8013828:	080137d9 	.word	0x080137d9
 801382c:	080137d9 	.word	0x080137d9
 8013830:	0801397f 	.word	0x0801397f
 8013834:	080137d9 	.word	0x080137d9
 8013838:	08013887 	.word	0x08013887
 801383c:	080137d9 	.word	0x080137d9
 8013840:	080137d9 	.word	0x080137d9
 8013844:	0801391f 	.word	0x0801391f
 8013848:	6833      	ldr	r3, [r6, #0]
 801384a:	1d1a      	adds	r2, r3, #4
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	6032      	str	r2, [r6, #0]
 8013850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013858:	2301      	movs	r3, #1
 801385a:	e09d      	b.n	8013998 <_printf_i+0x1e8>
 801385c:	6833      	ldr	r3, [r6, #0]
 801385e:	6820      	ldr	r0, [r4, #0]
 8013860:	1d19      	adds	r1, r3, #4
 8013862:	6031      	str	r1, [r6, #0]
 8013864:	0606      	lsls	r6, r0, #24
 8013866:	d501      	bpl.n	801386c <_printf_i+0xbc>
 8013868:	681d      	ldr	r5, [r3, #0]
 801386a:	e003      	b.n	8013874 <_printf_i+0xc4>
 801386c:	0645      	lsls	r5, r0, #25
 801386e:	d5fb      	bpl.n	8013868 <_printf_i+0xb8>
 8013870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013874:	2d00      	cmp	r5, #0
 8013876:	da03      	bge.n	8013880 <_printf_i+0xd0>
 8013878:	232d      	movs	r3, #45	@ 0x2d
 801387a:	426d      	negs	r5, r5
 801387c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013880:	4859      	ldr	r0, [pc, #356]	@ (80139e8 <_printf_i+0x238>)
 8013882:	230a      	movs	r3, #10
 8013884:	e011      	b.n	80138aa <_printf_i+0xfa>
 8013886:	6821      	ldr	r1, [r4, #0]
 8013888:	6833      	ldr	r3, [r6, #0]
 801388a:	0608      	lsls	r0, r1, #24
 801388c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013890:	d402      	bmi.n	8013898 <_printf_i+0xe8>
 8013892:	0649      	lsls	r1, r1, #25
 8013894:	bf48      	it	mi
 8013896:	b2ad      	uxthmi	r5, r5
 8013898:	2f6f      	cmp	r7, #111	@ 0x6f
 801389a:	4853      	ldr	r0, [pc, #332]	@ (80139e8 <_printf_i+0x238>)
 801389c:	6033      	str	r3, [r6, #0]
 801389e:	bf14      	ite	ne
 80138a0:	230a      	movne	r3, #10
 80138a2:	2308      	moveq	r3, #8
 80138a4:	2100      	movs	r1, #0
 80138a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80138aa:	6866      	ldr	r6, [r4, #4]
 80138ac:	60a6      	str	r6, [r4, #8]
 80138ae:	2e00      	cmp	r6, #0
 80138b0:	bfa2      	ittt	ge
 80138b2:	6821      	ldrge	r1, [r4, #0]
 80138b4:	f021 0104 	bicge.w	r1, r1, #4
 80138b8:	6021      	strge	r1, [r4, #0]
 80138ba:	b90d      	cbnz	r5, 80138c0 <_printf_i+0x110>
 80138bc:	2e00      	cmp	r6, #0
 80138be:	d04b      	beq.n	8013958 <_printf_i+0x1a8>
 80138c0:	4616      	mov	r6, r2
 80138c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80138c6:	fb03 5711 	mls	r7, r3, r1, r5
 80138ca:	5dc7      	ldrb	r7, [r0, r7]
 80138cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80138d0:	462f      	mov	r7, r5
 80138d2:	42bb      	cmp	r3, r7
 80138d4:	460d      	mov	r5, r1
 80138d6:	d9f4      	bls.n	80138c2 <_printf_i+0x112>
 80138d8:	2b08      	cmp	r3, #8
 80138da:	d10b      	bne.n	80138f4 <_printf_i+0x144>
 80138dc:	6823      	ldr	r3, [r4, #0]
 80138de:	07df      	lsls	r7, r3, #31
 80138e0:	d508      	bpl.n	80138f4 <_printf_i+0x144>
 80138e2:	6923      	ldr	r3, [r4, #16]
 80138e4:	6861      	ldr	r1, [r4, #4]
 80138e6:	4299      	cmp	r1, r3
 80138e8:	bfde      	ittt	le
 80138ea:	2330      	movle	r3, #48	@ 0x30
 80138ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80138f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80138f4:	1b92      	subs	r2, r2, r6
 80138f6:	6122      	str	r2, [r4, #16]
 80138f8:	f8cd a000 	str.w	sl, [sp]
 80138fc:	464b      	mov	r3, r9
 80138fe:	aa03      	add	r2, sp, #12
 8013900:	4621      	mov	r1, r4
 8013902:	4640      	mov	r0, r8
 8013904:	f7ff fee6 	bl	80136d4 <_printf_common>
 8013908:	3001      	adds	r0, #1
 801390a:	d14a      	bne.n	80139a2 <_printf_i+0x1f2>
 801390c:	f04f 30ff 	mov.w	r0, #4294967295
 8013910:	b004      	add	sp, #16
 8013912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013916:	6823      	ldr	r3, [r4, #0]
 8013918:	f043 0320 	orr.w	r3, r3, #32
 801391c:	6023      	str	r3, [r4, #0]
 801391e:	4833      	ldr	r0, [pc, #204]	@ (80139ec <_printf_i+0x23c>)
 8013920:	2778      	movs	r7, #120	@ 0x78
 8013922:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013926:	6823      	ldr	r3, [r4, #0]
 8013928:	6831      	ldr	r1, [r6, #0]
 801392a:	061f      	lsls	r7, r3, #24
 801392c:	f851 5b04 	ldr.w	r5, [r1], #4
 8013930:	d402      	bmi.n	8013938 <_printf_i+0x188>
 8013932:	065f      	lsls	r7, r3, #25
 8013934:	bf48      	it	mi
 8013936:	b2ad      	uxthmi	r5, r5
 8013938:	6031      	str	r1, [r6, #0]
 801393a:	07d9      	lsls	r1, r3, #31
 801393c:	bf44      	itt	mi
 801393e:	f043 0320 	orrmi.w	r3, r3, #32
 8013942:	6023      	strmi	r3, [r4, #0]
 8013944:	b11d      	cbz	r5, 801394e <_printf_i+0x19e>
 8013946:	2310      	movs	r3, #16
 8013948:	e7ac      	b.n	80138a4 <_printf_i+0xf4>
 801394a:	4827      	ldr	r0, [pc, #156]	@ (80139e8 <_printf_i+0x238>)
 801394c:	e7e9      	b.n	8013922 <_printf_i+0x172>
 801394e:	6823      	ldr	r3, [r4, #0]
 8013950:	f023 0320 	bic.w	r3, r3, #32
 8013954:	6023      	str	r3, [r4, #0]
 8013956:	e7f6      	b.n	8013946 <_printf_i+0x196>
 8013958:	4616      	mov	r6, r2
 801395a:	e7bd      	b.n	80138d8 <_printf_i+0x128>
 801395c:	6833      	ldr	r3, [r6, #0]
 801395e:	6825      	ldr	r5, [r4, #0]
 8013960:	6961      	ldr	r1, [r4, #20]
 8013962:	1d18      	adds	r0, r3, #4
 8013964:	6030      	str	r0, [r6, #0]
 8013966:	062e      	lsls	r6, r5, #24
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	d501      	bpl.n	8013970 <_printf_i+0x1c0>
 801396c:	6019      	str	r1, [r3, #0]
 801396e:	e002      	b.n	8013976 <_printf_i+0x1c6>
 8013970:	0668      	lsls	r0, r5, #25
 8013972:	d5fb      	bpl.n	801396c <_printf_i+0x1bc>
 8013974:	8019      	strh	r1, [r3, #0]
 8013976:	2300      	movs	r3, #0
 8013978:	6123      	str	r3, [r4, #16]
 801397a:	4616      	mov	r6, r2
 801397c:	e7bc      	b.n	80138f8 <_printf_i+0x148>
 801397e:	6833      	ldr	r3, [r6, #0]
 8013980:	1d1a      	adds	r2, r3, #4
 8013982:	6032      	str	r2, [r6, #0]
 8013984:	681e      	ldr	r6, [r3, #0]
 8013986:	6862      	ldr	r2, [r4, #4]
 8013988:	2100      	movs	r1, #0
 801398a:	4630      	mov	r0, r6
 801398c:	f7ec fca8 	bl	80002e0 <memchr>
 8013990:	b108      	cbz	r0, 8013996 <_printf_i+0x1e6>
 8013992:	1b80      	subs	r0, r0, r6
 8013994:	6060      	str	r0, [r4, #4]
 8013996:	6863      	ldr	r3, [r4, #4]
 8013998:	6123      	str	r3, [r4, #16]
 801399a:	2300      	movs	r3, #0
 801399c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80139a0:	e7aa      	b.n	80138f8 <_printf_i+0x148>
 80139a2:	6923      	ldr	r3, [r4, #16]
 80139a4:	4632      	mov	r2, r6
 80139a6:	4649      	mov	r1, r9
 80139a8:	4640      	mov	r0, r8
 80139aa:	47d0      	blx	sl
 80139ac:	3001      	adds	r0, #1
 80139ae:	d0ad      	beq.n	801390c <_printf_i+0x15c>
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	079b      	lsls	r3, r3, #30
 80139b4:	d413      	bmi.n	80139de <_printf_i+0x22e>
 80139b6:	68e0      	ldr	r0, [r4, #12]
 80139b8:	9b03      	ldr	r3, [sp, #12]
 80139ba:	4298      	cmp	r0, r3
 80139bc:	bfb8      	it	lt
 80139be:	4618      	movlt	r0, r3
 80139c0:	e7a6      	b.n	8013910 <_printf_i+0x160>
 80139c2:	2301      	movs	r3, #1
 80139c4:	4632      	mov	r2, r6
 80139c6:	4649      	mov	r1, r9
 80139c8:	4640      	mov	r0, r8
 80139ca:	47d0      	blx	sl
 80139cc:	3001      	adds	r0, #1
 80139ce:	d09d      	beq.n	801390c <_printf_i+0x15c>
 80139d0:	3501      	adds	r5, #1
 80139d2:	68e3      	ldr	r3, [r4, #12]
 80139d4:	9903      	ldr	r1, [sp, #12]
 80139d6:	1a5b      	subs	r3, r3, r1
 80139d8:	42ab      	cmp	r3, r5
 80139da:	dcf2      	bgt.n	80139c2 <_printf_i+0x212>
 80139dc:	e7eb      	b.n	80139b6 <_printf_i+0x206>
 80139de:	2500      	movs	r5, #0
 80139e0:	f104 0619 	add.w	r6, r4, #25
 80139e4:	e7f5      	b.n	80139d2 <_printf_i+0x222>
 80139e6:	bf00      	nop
 80139e8:	08017d0e 	.word	0x08017d0e
 80139ec:	08017d1f 	.word	0x08017d1f

080139f0 <std>:
 80139f0:	2300      	movs	r3, #0
 80139f2:	b510      	push	{r4, lr}
 80139f4:	4604      	mov	r4, r0
 80139f6:	e9c0 3300 	strd	r3, r3, [r0]
 80139fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139fe:	6083      	str	r3, [r0, #8]
 8013a00:	8181      	strh	r1, [r0, #12]
 8013a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8013a04:	81c2      	strh	r2, [r0, #14]
 8013a06:	6183      	str	r3, [r0, #24]
 8013a08:	4619      	mov	r1, r3
 8013a0a:	2208      	movs	r2, #8
 8013a0c:	305c      	adds	r0, #92	@ 0x5c
 8013a0e:	f000 f926 	bl	8013c5e <memset>
 8013a12:	4b0d      	ldr	r3, [pc, #52]	@ (8013a48 <std+0x58>)
 8013a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8013a16:	4b0d      	ldr	r3, [pc, #52]	@ (8013a4c <std+0x5c>)
 8013a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8013a50 <std+0x60>)
 8013a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8013a54 <std+0x64>)
 8013a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8013a22:	4b0d      	ldr	r3, [pc, #52]	@ (8013a58 <std+0x68>)
 8013a24:	6224      	str	r4, [r4, #32]
 8013a26:	429c      	cmp	r4, r3
 8013a28:	d006      	beq.n	8013a38 <std+0x48>
 8013a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013a2e:	4294      	cmp	r4, r2
 8013a30:	d002      	beq.n	8013a38 <std+0x48>
 8013a32:	33d0      	adds	r3, #208	@ 0xd0
 8013a34:	429c      	cmp	r4, r3
 8013a36:	d105      	bne.n	8013a44 <std+0x54>
 8013a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a40:	f000 b9e0 	b.w	8013e04 <__retarget_lock_init_recursive>
 8013a44:	bd10      	pop	{r4, pc}
 8013a46:	bf00      	nop
 8013a48:	08013bd9 	.word	0x08013bd9
 8013a4c:	08013bfb 	.word	0x08013bfb
 8013a50:	08013c33 	.word	0x08013c33
 8013a54:	08013c57 	.word	0x08013c57
 8013a58:	2407577c 	.word	0x2407577c

08013a5c <stdio_exit_handler>:
 8013a5c:	4a02      	ldr	r2, [pc, #8]	@ (8013a68 <stdio_exit_handler+0xc>)
 8013a5e:	4903      	ldr	r1, [pc, #12]	@ (8013a6c <stdio_exit_handler+0x10>)
 8013a60:	4803      	ldr	r0, [pc, #12]	@ (8013a70 <stdio_exit_handler+0x14>)
 8013a62:	f000 b869 	b.w	8013b38 <_fwalk_sglue>
 8013a66:	bf00      	nop
 8013a68:	24000040 	.word	0x24000040
 8013a6c:	08015925 	.word	0x08015925
 8013a70:	24000050 	.word	0x24000050

08013a74 <cleanup_stdio>:
 8013a74:	6841      	ldr	r1, [r0, #4]
 8013a76:	4b0c      	ldr	r3, [pc, #48]	@ (8013aa8 <cleanup_stdio+0x34>)
 8013a78:	4299      	cmp	r1, r3
 8013a7a:	b510      	push	{r4, lr}
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	d001      	beq.n	8013a84 <cleanup_stdio+0x10>
 8013a80:	f001 ff50 	bl	8015924 <_fflush_r>
 8013a84:	68a1      	ldr	r1, [r4, #8]
 8013a86:	4b09      	ldr	r3, [pc, #36]	@ (8013aac <cleanup_stdio+0x38>)
 8013a88:	4299      	cmp	r1, r3
 8013a8a:	d002      	beq.n	8013a92 <cleanup_stdio+0x1e>
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	f001 ff49 	bl	8015924 <_fflush_r>
 8013a92:	68e1      	ldr	r1, [r4, #12]
 8013a94:	4b06      	ldr	r3, [pc, #24]	@ (8013ab0 <cleanup_stdio+0x3c>)
 8013a96:	4299      	cmp	r1, r3
 8013a98:	d004      	beq.n	8013aa4 <cleanup_stdio+0x30>
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aa0:	f001 bf40 	b.w	8015924 <_fflush_r>
 8013aa4:	bd10      	pop	{r4, pc}
 8013aa6:	bf00      	nop
 8013aa8:	2407577c 	.word	0x2407577c
 8013aac:	240757e4 	.word	0x240757e4
 8013ab0:	2407584c 	.word	0x2407584c

08013ab4 <global_stdio_init.part.0>:
 8013ab4:	b510      	push	{r4, lr}
 8013ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8013ae4 <global_stdio_init.part.0+0x30>)
 8013ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8013ae8 <global_stdio_init.part.0+0x34>)
 8013aba:	4a0c      	ldr	r2, [pc, #48]	@ (8013aec <global_stdio_init.part.0+0x38>)
 8013abc:	601a      	str	r2, [r3, #0]
 8013abe:	4620      	mov	r0, r4
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	2104      	movs	r1, #4
 8013ac4:	f7ff ff94 	bl	80139f0 <std>
 8013ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013acc:	2201      	movs	r2, #1
 8013ace:	2109      	movs	r1, #9
 8013ad0:	f7ff ff8e 	bl	80139f0 <std>
 8013ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013ad8:	2202      	movs	r2, #2
 8013ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ade:	2112      	movs	r1, #18
 8013ae0:	f7ff bf86 	b.w	80139f0 <std>
 8013ae4:	240758b4 	.word	0x240758b4
 8013ae8:	2407577c 	.word	0x2407577c
 8013aec:	08013a5d 	.word	0x08013a5d

08013af0 <__sfp_lock_acquire>:
 8013af0:	4801      	ldr	r0, [pc, #4]	@ (8013af8 <__sfp_lock_acquire+0x8>)
 8013af2:	f000 b988 	b.w	8013e06 <__retarget_lock_acquire_recursive>
 8013af6:	bf00      	nop
 8013af8:	240758bd 	.word	0x240758bd

08013afc <__sfp_lock_release>:
 8013afc:	4801      	ldr	r0, [pc, #4]	@ (8013b04 <__sfp_lock_release+0x8>)
 8013afe:	f000 b983 	b.w	8013e08 <__retarget_lock_release_recursive>
 8013b02:	bf00      	nop
 8013b04:	240758bd 	.word	0x240758bd

08013b08 <__sinit>:
 8013b08:	b510      	push	{r4, lr}
 8013b0a:	4604      	mov	r4, r0
 8013b0c:	f7ff fff0 	bl	8013af0 <__sfp_lock_acquire>
 8013b10:	6a23      	ldr	r3, [r4, #32]
 8013b12:	b11b      	cbz	r3, 8013b1c <__sinit+0x14>
 8013b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b18:	f7ff bff0 	b.w	8013afc <__sfp_lock_release>
 8013b1c:	4b04      	ldr	r3, [pc, #16]	@ (8013b30 <__sinit+0x28>)
 8013b1e:	6223      	str	r3, [r4, #32]
 8013b20:	4b04      	ldr	r3, [pc, #16]	@ (8013b34 <__sinit+0x2c>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d1f5      	bne.n	8013b14 <__sinit+0xc>
 8013b28:	f7ff ffc4 	bl	8013ab4 <global_stdio_init.part.0>
 8013b2c:	e7f2      	b.n	8013b14 <__sinit+0xc>
 8013b2e:	bf00      	nop
 8013b30:	08013a75 	.word	0x08013a75
 8013b34:	240758b4 	.word	0x240758b4

08013b38 <_fwalk_sglue>:
 8013b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b3c:	4607      	mov	r7, r0
 8013b3e:	4688      	mov	r8, r1
 8013b40:	4614      	mov	r4, r2
 8013b42:	2600      	movs	r6, #0
 8013b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b48:	f1b9 0901 	subs.w	r9, r9, #1
 8013b4c:	d505      	bpl.n	8013b5a <_fwalk_sglue+0x22>
 8013b4e:	6824      	ldr	r4, [r4, #0]
 8013b50:	2c00      	cmp	r4, #0
 8013b52:	d1f7      	bne.n	8013b44 <_fwalk_sglue+0xc>
 8013b54:	4630      	mov	r0, r6
 8013b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b5a:	89ab      	ldrh	r3, [r5, #12]
 8013b5c:	2b01      	cmp	r3, #1
 8013b5e:	d907      	bls.n	8013b70 <_fwalk_sglue+0x38>
 8013b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b64:	3301      	adds	r3, #1
 8013b66:	d003      	beq.n	8013b70 <_fwalk_sglue+0x38>
 8013b68:	4629      	mov	r1, r5
 8013b6a:	4638      	mov	r0, r7
 8013b6c:	47c0      	blx	r8
 8013b6e:	4306      	orrs	r6, r0
 8013b70:	3568      	adds	r5, #104	@ 0x68
 8013b72:	e7e9      	b.n	8013b48 <_fwalk_sglue+0x10>

08013b74 <iprintf>:
 8013b74:	b40f      	push	{r0, r1, r2, r3}
 8013b76:	b507      	push	{r0, r1, r2, lr}
 8013b78:	4906      	ldr	r1, [pc, #24]	@ (8013b94 <iprintf+0x20>)
 8013b7a:	ab04      	add	r3, sp, #16
 8013b7c:	6808      	ldr	r0, [r1, #0]
 8013b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b82:	6881      	ldr	r1, [r0, #8]
 8013b84:	9301      	str	r3, [sp, #4]
 8013b86:	f001 fd31 	bl	80155ec <_vfiprintf_r>
 8013b8a:	b003      	add	sp, #12
 8013b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b90:	b004      	add	sp, #16
 8013b92:	4770      	bx	lr
 8013b94:	2400004c 	.word	0x2400004c

08013b98 <siprintf>:
 8013b98:	b40e      	push	{r1, r2, r3}
 8013b9a:	b500      	push	{lr}
 8013b9c:	b09c      	sub	sp, #112	@ 0x70
 8013b9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8013ba0:	9002      	str	r0, [sp, #8]
 8013ba2:	9006      	str	r0, [sp, #24]
 8013ba4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013ba8:	4809      	ldr	r0, [pc, #36]	@ (8013bd0 <siprintf+0x38>)
 8013baa:	9107      	str	r1, [sp, #28]
 8013bac:	9104      	str	r1, [sp, #16]
 8013bae:	4909      	ldr	r1, [pc, #36]	@ (8013bd4 <siprintf+0x3c>)
 8013bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bb4:	9105      	str	r1, [sp, #20]
 8013bb6:	6800      	ldr	r0, [r0, #0]
 8013bb8:	9301      	str	r3, [sp, #4]
 8013bba:	a902      	add	r1, sp, #8
 8013bbc:	f001 fbf0 	bl	80153a0 <_svfiprintf_r>
 8013bc0:	9b02      	ldr	r3, [sp, #8]
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	701a      	strb	r2, [r3, #0]
 8013bc6:	b01c      	add	sp, #112	@ 0x70
 8013bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bcc:	b003      	add	sp, #12
 8013bce:	4770      	bx	lr
 8013bd0:	2400004c 	.word	0x2400004c
 8013bd4:	ffff0208 	.word	0xffff0208

08013bd8 <__sread>:
 8013bd8:	b510      	push	{r4, lr}
 8013bda:	460c      	mov	r4, r1
 8013bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be0:	f000 f8c2 	bl	8013d68 <_read_r>
 8013be4:	2800      	cmp	r0, #0
 8013be6:	bfab      	itete	ge
 8013be8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013bea:	89a3      	ldrhlt	r3, [r4, #12]
 8013bec:	181b      	addge	r3, r3, r0
 8013bee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013bf2:	bfac      	ite	ge
 8013bf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013bf6:	81a3      	strhlt	r3, [r4, #12]
 8013bf8:	bd10      	pop	{r4, pc}

08013bfa <__swrite>:
 8013bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfe:	461f      	mov	r7, r3
 8013c00:	898b      	ldrh	r3, [r1, #12]
 8013c02:	05db      	lsls	r3, r3, #23
 8013c04:	4605      	mov	r5, r0
 8013c06:	460c      	mov	r4, r1
 8013c08:	4616      	mov	r6, r2
 8013c0a:	d505      	bpl.n	8013c18 <__swrite+0x1e>
 8013c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c10:	2302      	movs	r3, #2
 8013c12:	2200      	movs	r2, #0
 8013c14:	f000 f896 	bl	8013d44 <_lseek_r>
 8013c18:	89a3      	ldrh	r3, [r4, #12]
 8013c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013c22:	81a3      	strh	r3, [r4, #12]
 8013c24:	4632      	mov	r2, r6
 8013c26:	463b      	mov	r3, r7
 8013c28:	4628      	mov	r0, r5
 8013c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c2e:	f000 b8ad 	b.w	8013d8c <_write_r>

08013c32 <__sseek>:
 8013c32:	b510      	push	{r4, lr}
 8013c34:	460c      	mov	r4, r1
 8013c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c3a:	f000 f883 	bl	8013d44 <_lseek_r>
 8013c3e:	1c43      	adds	r3, r0, #1
 8013c40:	89a3      	ldrh	r3, [r4, #12]
 8013c42:	bf15      	itete	ne
 8013c44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013c46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013c4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013c4e:	81a3      	strheq	r3, [r4, #12]
 8013c50:	bf18      	it	ne
 8013c52:	81a3      	strhne	r3, [r4, #12]
 8013c54:	bd10      	pop	{r4, pc}

08013c56 <__sclose>:
 8013c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c5a:	f000 b80d 	b.w	8013c78 <_close_r>

08013c5e <memset>:
 8013c5e:	4402      	add	r2, r0
 8013c60:	4603      	mov	r3, r0
 8013c62:	4293      	cmp	r3, r2
 8013c64:	d100      	bne.n	8013c68 <memset+0xa>
 8013c66:	4770      	bx	lr
 8013c68:	f803 1b01 	strb.w	r1, [r3], #1
 8013c6c:	e7f9      	b.n	8013c62 <memset+0x4>
	...

08013c70 <_localeconv_r>:
 8013c70:	4800      	ldr	r0, [pc, #0]	@ (8013c74 <_localeconv_r+0x4>)
 8013c72:	4770      	bx	lr
 8013c74:	2400018c 	.word	0x2400018c

08013c78 <_close_r>:
 8013c78:	b538      	push	{r3, r4, r5, lr}
 8013c7a:	4d06      	ldr	r5, [pc, #24]	@ (8013c94 <_close_r+0x1c>)
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	4604      	mov	r4, r0
 8013c80:	4608      	mov	r0, r1
 8013c82:	602b      	str	r3, [r5, #0]
 8013c84:	f7ef fc04 	bl	8003490 <_close>
 8013c88:	1c43      	adds	r3, r0, #1
 8013c8a:	d102      	bne.n	8013c92 <_close_r+0x1a>
 8013c8c:	682b      	ldr	r3, [r5, #0]
 8013c8e:	b103      	cbz	r3, 8013c92 <_close_r+0x1a>
 8013c90:	6023      	str	r3, [r4, #0]
 8013c92:	bd38      	pop	{r3, r4, r5, pc}
 8013c94:	240758b8 	.word	0x240758b8

08013c98 <_reclaim_reent>:
 8013c98:	4b29      	ldr	r3, [pc, #164]	@ (8013d40 <_reclaim_reent+0xa8>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	4283      	cmp	r3, r0
 8013c9e:	b570      	push	{r4, r5, r6, lr}
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	d04b      	beq.n	8013d3c <_reclaim_reent+0xa4>
 8013ca4:	69c3      	ldr	r3, [r0, #28]
 8013ca6:	b1ab      	cbz	r3, 8013cd4 <_reclaim_reent+0x3c>
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	b16b      	cbz	r3, 8013cc8 <_reclaim_reent+0x30>
 8013cac:	2500      	movs	r5, #0
 8013cae:	69e3      	ldr	r3, [r4, #28]
 8013cb0:	68db      	ldr	r3, [r3, #12]
 8013cb2:	5959      	ldr	r1, [r3, r5]
 8013cb4:	2900      	cmp	r1, #0
 8013cb6:	d13b      	bne.n	8013d30 <_reclaim_reent+0x98>
 8013cb8:	3504      	adds	r5, #4
 8013cba:	2d80      	cmp	r5, #128	@ 0x80
 8013cbc:	d1f7      	bne.n	8013cae <_reclaim_reent+0x16>
 8013cbe:	69e3      	ldr	r3, [r4, #28]
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	68d9      	ldr	r1, [r3, #12]
 8013cc4:	f000 fe8e 	bl	80149e4 <_free_r>
 8013cc8:	69e3      	ldr	r3, [r4, #28]
 8013cca:	6819      	ldr	r1, [r3, #0]
 8013ccc:	b111      	cbz	r1, 8013cd4 <_reclaim_reent+0x3c>
 8013cce:	4620      	mov	r0, r4
 8013cd0:	f000 fe88 	bl	80149e4 <_free_r>
 8013cd4:	6961      	ldr	r1, [r4, #20]
 8013cd6:	b111      	cbz	r1, 8013cde <_reclaim_reent+0x46>
 8013cd8:	4620      	mov	r0, r4
 8013cda:	f000 fe83 	bl	80149e4 <_free_r>
 8013cde:	69e1      	ldr	r1, [r4, #28]
 8013ce0:	b111      	cbz	r1, 8013ce8 <_reclaim_reent+0x50>
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	f000 fe7e 	bl	80149e4 <_free_r>
 8013ce8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013cea:	b111      	cbz	r1, 8013cf2 <_reclaim_reent+0x5a>
 8013cec:	4620      	mov	r0, r4
 8013cee:	f000 fe79 	bl	80149e4 <_free_r>
 8013cf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013cf4:	b111      	cbz	r1, 8013cfc <_reclaim_reent+0x64>
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	f000 fe74 	bl	80149e4 <_free_r>
 8013cfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013cfe:	b111      	cbz	r1, 8013d06 <_reclaim_reent+0x6e>
 8013d00:	4620      	mov	r0, r4
 8013d02:	f000 fe6f 	bl	80149e4 <_free_r>
 8013d06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013d08:	b111      	cbz	r1, 8013d10 <_reclaim_reent+0x78>
 8013d0a:	4620      	mov	r0, r4
 8013d0c:	f000 fe6a 	bl	80149e4 <_free_r>
 8013d10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013d12:	b111      	cbz	r1, 8013d1a <_reclaim_reent+0x82>
 8013d14:	4620      	mov	r0, r4
 8013d16:	f000 fe65 	bl	80149e4 <_free_r>
 8013d1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013d1c:	b111      	cbz	r1, 8013d24 <_reclaim_reent+0x8c>
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f000 fe60 	bl	80149e4 <_free_r>
 8013d24:	6a23      	ldr	r3, [r4, #32]
 8013d26:	b14b      	cbz	r3, 8013d3c <_reclaim_reent+0xa4>
 8013d28:	4620      	mov	r0, r4
 8013d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d2e:	4718      	bx	r3
 8013d30:	680e      	ldr	r6, [r1, #0]
 8013d32:	4620      	mov	r0, r4
 8013d34:	f000 fe56 	bl	80149e4 <_free_r>
 8013d38:	4631      	mov	r1, r6
 8013d3a:	e7bb      	b.n	8013cb4 <_reclaim_reent+0x1c>
 8013d3c:	bd70      	pop	{r4, r5, r6, pc}
 8013d3e:	bf00      	nop
 8013d40:	2400004c 	.word	0x2400004c

08013d44 <_lseek_r>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	4d07      	ldr	r5, [pc, #28]	@ (8013d64 <_lseek_r+0x20>)
 8013d48:	4604      	mov	r4, r0
 8013d4a:	4608      	mov	r0, r1
 8013d4c:	4611      	mov	r1, r2
 8013d4e:	2200      	movs	r2, #0
 8013d50:	602a      	str	r2, [r5, #0]
 8013d52:	461a      	mov	r2, r3
 8013d54:	f7ef fbc3 	bl	80034de <_lseek>
 8013d58:	1c43      	adds	r3, r0, #1
 8013d5a:	d102      	bne.n	8013d62 <_lseek_r+0x1e>
 8013d5c:	682b      	ldr	r3, [r5, #0]
 8013d5e:	b103      	cbz	r3, 8013d62 <_lseek_r+0x1e>
 8013d60:	6023      	str	r3, [r4, #0]
 8013d62:	bd38      	pop	{r3, r4, r5, pc}
 8013d64:	240758b8 	.word	0x240758b8

08013d68 <_read_r>:
 8013d68:	b538      	push	{r3, r4, r5, lr}
 8013d6a:	4d07      	ldr	r5, [pc, #28]	@ (8013d88 <_read_r+0x20>)
 8013d6c:	4604      	mov	r4, r0
 8013d6e:	4608      	mov	r0, r1
 8013d70:	4611      	mov	r1, r2
 8013d72:	2200      	movs	r2, #0
 8013d74:	602a      	str	r2, [r5, #0]
 8013d76:	461a      	mov	r2, r3
 8013d78:	f7ef fb51 	bl	800341e <_read>
 8013d7c:	1c43      	adds	r3, r0, #1
 8013d7e:	d102      	bne.n	8013d86 <_read_r+0x1e>
 8013d80:	682b      	ldr	r3, [r5, #0]
 8013d82:	b103      	cbz	r3, 8013d86 <_read_r+0x1e>
 8013d84:	6023      	str	r3, [r4, #0]
 8013d86:	bd38      	pop	{r3, r4, r5, pc}
 8013d88:	240758b8 	.word	0x240758b8

08013d8c <_write_r>:
 8013d8c:	b538      	push	{r3, r4, r5, lr}
 8013d8e:	4d07      	ldr	r5, [pc, #28]	@ (8013dac <_write_r+0x20>)
 8013d90:	4604      	mov	r4, r0
 8013d92:	4608      	mov	r0, r1
 8013d94:	4611      	mov	r1, r2
 8013d96:	2200      	movs	r2, #0
 8013d98:	602a      	str	r2, [r5, #0]
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	f7ef fb5c 	bl	8003458 <_write>
 8013da0:	1c43      	adds	r3, r0, #1
 8013da2:	d102      	bne.n	8013daa <_write_r+0x1e>
 8013da4:	682b      	ldr	r3, [r5, #0]
 8013da6:	b103      	cbz	r3, 8013daa <_write_r+0x1e>
 8013da8:	6023      	str	r3, [r4, #0]
 8013daa:	bd38      	pop	{r3, r4, r5, pc}
 8013dac:	240758b8 	.word	0x240758b8

08013db0 <__errno>:
 8013db0:	4b01      	ldr	r3, [pc, #4]	@ (8013db8 <__errno+0x8>)
 8013db2:	6818      	ldr	r0, [r3, #0]
 8013db4:	4770      	bx	lr
 8013db6:	bf00      	nop
 8013db8:	2400004c 	.word	0x2400004c

08013dbc <__libc_init_array>:
 8013dbc:	b570      	push	{r4, r5, r6, lr}
 8013dbe:	4d0d      	ldr	r5, [pc, #52]	@ (8013df4 <__libc_init_array+0x38>)
 8013dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8013df8 <__libc_init_array+0x3c>)
 8013dc2:	1b64      	subs	r4, r4, r5
 8013dc4:	10a4      	asrs	r4, r4, #2
 8013dc6:	2600      	movs	r6, #0
 8013dc8:	42a6      	cmp	r6, r4
 8013dca:	d109      	bne.n	8013de0 <__libc_init_array+0x24>
 8013dcc:	4d0b      	ldr	r5, [pc, #44]	@ (8013dfc <__libc_init_array+0x40>)
 8013dce:	4c0c      	ldr	r4, [pc, #48]	@ (8013e00 <__libc_init_array+0x44>)
 8013dd0:	f002 fe10 	bl	80169f4 <_init>
 8013dd4:	1b64      	subs	r4, r4, r5
 8013dd6:	10a4      	asrs	r4, r4, #2
 8013dd8:	2600      	movs	r6, #0
 8013dda:	42a6      	cmp	r6, r4
 8013ddc:	d105      	bne.n	8013dea <__libc_init_array+0x2e>
 8013dde:	bd70      	pop	{r4, r5, r6, pc}
 8013de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013de4:	4798      	blx	r3
 8013de6:	3601      	adds	r6, #1
 8013de8:	e7ee      	b.n	8013dc8 <__libc_init_array+0xc>
 8013dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8013dee:	4798      	blx	r3
 8013df0:	3601      	adds	r6, #1
 8013df2:	e7f2      	b.n	8013dda <__libc_init_array+0x1e>
 8013df4:	08018250 	.word	0x08018250
 8013df8:	08018250 	.word	0x08018250
 8013dfc:	08018250 	.word	0x08018250
 8013e00:	08018254 	.word	0x08018254

08013e04 <__retarget_lock_init_recursive>:
 8013e04:	4770      	bx	lr

08013e06 <__retarget_lock_acquire_recursive>:
 8013e06:	4770      	bx	lr

08013e08 <__retarget_lock_release_recursive>:
 8013e08:	4770      	bx	lr

08013e0a <memcpy>:
 8013e0a:	440a      	add	r2, r1
 8013e0c:	4291      	cmp	r1, r2
 8013e0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e12:	d100      	bne.n	8013e16 <memcpy+0xc>
 8013e14:	4770      	bx	lr
 8013e16:	b510      	push	{r4, lr}
 8013e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e20:	4291      	cmp	r1, r2
 8013e22:	d1f9      	bne.n	8013e18 <memcpy+0xe>
 8013e24:	bd10      	pop	{r4, pc}

08013e26 <quorem>:
 8013e26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2a:	6903      	ldr	r3, [r0, #16]
 8013e2c:	690c      	ldr	r4, [r1, #16]
 8013e2e:	42a3      	cmp	r3, r4
 8013e30:	4607      	mov	r7, r0
 8013e32:	db7e      	blt.n	8013f32 <quorem+0x10c>
 8013e34:	3c01      	subs	r4, #1
 8013e36:	f101 0814 	add.w	r8, r1, #20
 8013e3a:	00a3      	lsls	r3, r4, #2
 8013e3c:	f100 0514 	add.w	r5, r0, #20
 8013e40:	9300      	str	r3, [sp, #0]
 8013e42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013e46:	9301      	str	r3, [sp, #4]
 8013e48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013e50:	3301      	adds	r3, #1
 8013e52:	429a      	cmp	r2, r3
 8013e54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013e58:	fbb2 f6f3 	udiv	r6, r2, r3
 8013e5c:	d32e      	bcc.n	8013ebc <quorem+0x96>
 8013e5e:	f04f 0a00 	mov.w	sl, #0
 8013e62:	46c4      	mov	ip, r8
 8013e64:	46ae      	mov	lr, r5
 8013e66:	46d3      	mov	fp, sl
 8013e68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013e6c:	b298      	uxth	r0, r3
 8013e6e:	fb06 a000 	mla	r0, r6, r0, sl
 8013e72:	0c02      	lsrs	r2, r0, #16
 8013e74:	0c1b      	lsrs	r3, r3, #16
 8013e76:	fb06 2303 	mla	r3, r6, r3, r2
 8013e7a:	f8de 2000 	ldr.w	r2, [lr]
 8013e7e:	b280      	uxth	r0, r0
 8013e80:	b292      	uxth	r2, r2
 8013e82:	1a12      	subs	r2, r2, r0
 8013e84:	445a      	add	r2, fp
 8013e86:	f8de 0000 	ldr.w	r0, [lr]
 8013e8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013e94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013e98:	b292      	uxth	r2, r2
 8013e9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013e9e:	45e1      	cmp	r9, ip
 8013ea0:	f84e 2b04 	str.w	r2, [lr], #4
 8013ea4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013ea8:	d2de      	bcs.n	8013e68 <quorem+0x42>
 8013eaa:	9b00      	ldr	r3, [sp, #0]
 8013eac:	58eb      	ldr	r3, [r5, r3]
 8013eae:	b92b      	cbnz	r3, 8013ebc <quorem+0x96>
 8013eb0:	9b01      	ldr	r3, [sp, #4]
 8013eb2:	3b04      	subs	r3, #4
 8013eb4:	429d      	cmp	r5, r3
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	d32f      	bcc.n	8013f1a <quorem+0xf4>
 8013eba:	613c      	str	r4, [r7, #16]
 8013ebc:	4638      	mov	r0, r7
 8013ebe:	f001 f90b 	bl	80150d8 <__mcmp>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	db25      	blt.n	8013f12 <quorem+0xec>
 8013ec6:	4629      	mov	r1, r5
 8013ec8:	2000      	movs	r0, #0
 8013eca:	f858 2b04 	ldr.w	r2, [r8], #4
 8013ece:	f8d1 c000 	ldr.w	ip, [r1]
 8013ed2:	fa1f fe82 	uxth.w	lr, r2
 8013ed6:	fa1f f38c 	uxth.w	r3, ip
 8013eda:	eba3 030e 	sub.w	r3, r3, lr
 8013ede:	4403      	add	r3, r0
 8013ee0:	0c12      	lsrs	r2, r2, #16
 8013ee2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013ee6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ef0:	45c1      	cmp	r9, r8
 8013ef2:	f841 3b04 	str.w	r3, [r1], #4
 8013ef6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013efa:	d2e6      	bcs.n	8013eca <quorem+0xa4>
 8013efc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f04:	b922      	cbnz	r2, 8013f10 <quorem+0xea>
 8013f06:	3b04      	subs	r3, #4
 8013f08:	429d      	cmp	r5, r3
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	d30b      	bcc.n	8013f26 <quorem+0x100>
 8013f0e:	613c      	str	r4, [r7, #16]
 8013f10:	3601      	adds	r6, #1
 8013f12:	4630      	mov	r0, r6
 8013f14:	b003      	add	sp, #12
 8013f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f1a:	6812      	ldr	r2, [r2, #0]
 8013f1c:	3b04      	subs	r3, #4
 8013f1e:	2a00      	cmp	r2, #0
 8013f20:	d1cb      	bne.n	8013eba <quorem+0x94>
 8013f22:	3c01      	subs	r4, #1
 8013f24:	e7c6      	b.n	8013eb4 <quorem+0x8e>
 8013f26:	6812      	ldr	r2, [r2, #0]
 8013f28:	3b04      	subs	r3, #4
 8013f2a:	2a00      	cmp	r2, #0
 8013f2c:	d1ef      	bne.n	8013f0e <quorem+0xe8>
 8013f2e:	3c01      	subs	r4, #1
 8013f30:	e7ea      	b.n	8013f08 <quorem+0xe2>
 8013f32:	2000      	movs	r0, #0
 8013f34:	e7ee      	b.n	8013f14 <quorem+0xee>
	...

08013f38 <_dtoa_r>:
 8013f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f3c:	ed2d 8b02 	vpush	{d8}
 8013f40:	69c7      	ldr	r7, [r0, #28]
 8013f42:	b091      	sub	sp, #68	@ 0x44
 8013f44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013f48:	ec55 4b10 	vmov	r4, r5, d0
 8013f4c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013f4e:	9107      	str	r1, [sp, #28]
 8013f50:	4681      	mov	r9, r0
 8013f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f54:	930d      	str	r3, [sp, #52]	@ 0x34
 8013f56:	b97f      	cbnz	r7, 8013f78 <_dtoa_r+0x40>
 8013f58:	2010      	movs	r0, #16
 8013f5a:	f000 fd8d 	bl	8014a78 <malloc>
 8013f5e:	4602      	mov	r2, r0
 8013f60:	f8c9 001c 	str.w	r0, [r9, #28]
 8013f64:	b920      	cbnz	r0, 8013f70 <_dtoa_r+0x38>
 8013f66:	4ba0      	ldr	r3, [pc, #640]	@ (80141e8 <_dtoa_r+0x2b0>)
 8013f68:	21ef      	movs	r1, #239	@ 0xef
 8013f6a:	48a0      	ldr	r0, [pc, #640]	@ (80141ec <_dtoa_r+0x2b4>)
 8013f6c:	f001 fdc0 	bl	8015af0 <__assert_func>
 8013f70:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013f74:	6007      	str	r7, [r0, #0]
 8013f76:	60c7      	str	r7, [r0, #12]
 8013f78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013f7c:	6819      	ldr	r1, [r3, #0]
 8013f7e:	b159      	cbz	r1, 8013f98 <_dtoa_r+0x60>
 8013f80:	685a      	ldr	r2, [r3, #4]
 8013f82:	604a      	str	r2, [r1, #4]
 8013f84:	2301      	movs	r3, #1
 8013f86:	4093      	lsls	r3, r2
 8013f88:	608b      	str	r3, [r1, #8]
 8013f8a:	4648      	mov	r0, r9
 8013f8c:	f000 fe6a 	bl	8014c64 <_Bfree>
 8013f90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013f94:	2200      	movs	r2, #0
 8013f96:	601a      	str	r2, [r3, #0]
 8013f98:	1e2b      	subs	r3, r5, #0
 8013f9a:	bfbb      	ittet	lt
 8013f9c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013fa0:	9303      	strlt	r3, [sp, #12]
 8013fa2:	2300      	movge	r3, #0
 8013fa4:	2201      	movlt	r2, #1
 8013fa6:	bfac      	ite	ge
 8013fa8:	6033      	strge	r3, [r6, #0]
 8013faa:	6032      	strlt	r2, [r6, #0]
 8013fac:	4b90      	ldr	r3, [pc, #576]	@ (80141f0 <_dtoa_r+0x2b8>)
 8013fae:	9e03      	ldr	r6, [sp, #12]
 8013fb0:	43b3      	bics	r3, r6
 8013fb2:	d110      	bne.n	8013fd6 <_dtoa_r+0x9e>
 8013fb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013fb6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013fba:	6013      	str	r3, [r2, #0]
 8013fbc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013fc0:	4323      	orrs	r3, r4
 8013fc2:	f000 84de 	beq.w	8014982 <_dtoa_r+0xa4a>
 8013fc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013fc8:	4f8a      	ldr	r7, [pc, #552]	@ (80141f4 <_dtoa_r+0x2bc>)
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f000 84e0 	beq.w	8014990 <_dtoa_r+0xa58>
 8013fd0:	1cfb      	adds	r3, r7, #3
 8013fd2:	f000 bcdb 	b.w	801498c <_dtoa_r+0xa54>
 8013fd6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013fda:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe2:	d10a      	bne.n	8013ffa <_dtoa_r+0xc2>
 8013fe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	6013      	str	r3, [r2, #0]
 8013fea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013fec:	b113      	cbz	r3, 8013ff4 <_dtoa_r+0xbc>
 8013fee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013ff0:	4b81      	ldr	r3, [pc, #516]	@ (80141f8 <_dtoa_r+0x2c0>)
 8013ff2:	6013      	str	r3, [r2, #0]
 8013ff4:	4f81      	ldr	r7, [pc, #516]	@ (80141fc <_dtoa_r+0x2c4>)
 8013ff6:	f000 bccb 	b.w	8014990 <_dtoa_r+0xa58>
 8013ffa:	aa0e      	add	r2, sp, #56	@ 0x38
 8013ffc:	a90f      	add	r1, sp, #60	@ 0x3c
 8013ffe:	4648      	mov	r0, r9
 8014000:	eeb0 0b48 	vmov.f64	d0, d8
 8014004:	f001 f918 	bl	8015238 <__d2b>
 8014008:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801400c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801400e:	9001      	str	r0, [sp, #4]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d045      	beq.n	80140a0 <_dtoa_r+0x168>
 8014014:	eeb0 7b48 	vmov.f64	d7, d8
 8014018:	ee18 1a90 	vmov	r1, s17
 801401c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014020:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014024:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014028:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801402c:	2500      	movs	r5, #0
 801402e:	ee07 1a90 	vmov	s15, r1
 8014032:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014036:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80141d0 <_dtoa_r+0x298>
 801403a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801403e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80141d8 <_dtoa_r+0x2a0>
 8014042:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014046:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80141e0 <_dtoa_r+0x2a8>
 801404a:	ee07 3a90 	vmov	s15, r3
 801404e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014052:	eeb0 7b46 	vmov.f64	d7, d6
 8014056:	eea4 7b05 	vfma.f64	d7, d4, d5
 801405a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801405e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014066:	ee16 8a90 	vmov	r8, s13
 801406a:	d508      	bpl.n	801407e <_dtoa_r+0x146>
 801406c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014070:	eeb4 6b47 	vcmp.f64	d6, d7
 8014074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014078:	bf18      	it	ne
 801407a:	f108 38ff 	addne.w	r8, r8, #4294967295
 801407e:	f1b8 0f16 	cmp.w	r8, #22
 8014082:	d82b      	bhi.n	80140dc <_dtoa_r+0x1a4>
 8014084:	495e      	ldr	r1, [pc, #376]	@ (8014200 <_dtoa_r+0x2c8>)
 8014086:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801408a:	ed91 7b00 	vldr	d7, [r1]
 801408e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014096:	d501      	bpl.n	801409c <_dtoa_r+0x164>
 8014098:	f108 38ff 	add.w	r8, r8, #4294967295
 801409c:	2100      	movs	r1, #0
 801409e:	e01e      	b.n	80140de <_dtoa_r+0x1a6>
 80140a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80140a2:	4413      	add	r3, r2
 80140a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80140a8:	2920      	cmp	r1, #32
 80140aa:	bfc1      	itttt	gt
 80140ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80140b0:	408e      	lslgt	r6, r1
 80140b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80140b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80140ba:	bfd6      	itet	le
 80140bc:	f1c1 0120 	rsble	r1, r1, #32
 80140c0:	4331      	orrgt	r1, r6
 80140c2:	fa04 f101 	lslle.w	r1, r4, r1
 80140c6:	ee07 1a90 	vmov	s15, r1
 80140ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80140ce:	3b01      	subs	r3, #1
 80140d0:	ee17 1a90 	vmov	r1, s15
 80140d4:	2501      	movs	r5, #1
 80140d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80140da:	e7a8      	b.n	801402e <_dtoa_r+0xf6>
 80140dc:	2101      	movs	r1, #1
 80140de:	1ad2      	subs	r2, r2, r3
 80140e0:	1e53      	subs	r3, r2, #1
 80140e2:	9306      	str	r3, [sp, #24]
 80140e4:	bf45      	ittet	mi
 80140e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80140ea:	9305      	strmi	r3, [sp, #20]
 80140ec:	2300      	movpl	r3, #0
 80140ee:	2300      	movmi	r3, #0
 80140f0:	bf4c      	ite	mi
 80140f2:	9306      	strmi	r3, [sp, #24]
 80140f4:	9305      	strpl	r3, [sp, #20]
 80140f6:	f1b8 0f00 	cmp.w	r8, #0
 80140fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80140fc:	db18      	blt.n	8014130 <_dtoa_r+0x1f8>
 80140fe:	9b06      	ldr	r3, [sp, #24]
 8014100:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8014104:	4443      	add	r3, r8
 8014106:	9306      	str	r3, [sp, #24]
 8014108:	2300      	movs	r3, #0
 801410a:	9a07      	ldr	r2, [sp, #28]
 801410c:	2a09      	cmp	r2, #9
 801410e:	d849      	bhi.n	80141a4 <_dtoa_r+0x26c>
 8014110:	2a05      	cmp	r2, #5
 8014112:	bfc4      	itt	gt
 8014114:	3a04      	subgt	r2, #4
 8014116:	9207      	strgt	r2, [sp, #28]
 8014118:	9a07      	ldr	r2, [sp, #28]
 801411a:	f1a2 0202 	sub.w	r2, r2, #2
 801411e:	bfcc      	ite	gt
 8014120:	2400      	movgt	r4, #0
 8014122:	2401      	movle	r4, #1
 8014124:	2a03      	cmp	r2, #3
 8014126:	d848      	bhi.n	80141ba <_dtoa_r+0x282>
 8014128:	e8df f002 	tbb	[pc, r2]
 801412c:	3a2c2e0b 	.word	0x3a2c2e0b
 8014130:	9b05      	ldr	r3, [sp, #20]
 8014132:	2200      	movs	r2, #0
 8014134:	eba3 0308 	sub.w	r3, r3, r8
 8014138:	9305      	str	r3, [sp, #20]
 801413a:	920a      	str	r2, [sp, #40]	@ 0x28
 801413c:	f1c8 0300 	rsb	r3, r8, #0
 8014140:	e7e3      	b.n	801410a <_dtoa_r+0x1d2>
 8014142:	2200      	movs	r2, #0
 8014144:	9208      	str	r2, [sp, #32]
 8014146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014148:	2a00      	cmp	r2, #0
 801414a:	dc39      	bgt.n	80141c0 <_dtoa_r+0x288>
 801414c:	f04f 0b01 	mov.w	fp, #1
 8014150:	46da      	mov	sl, fp
 8014152:	465a      	mov	r2, fp
 8014154:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8014158:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801415c:	2100      	movs	r1, #0
 801415e:	2004      	movs	r0, #4
 8014160:	f100 0614 	add.w	r6, r0, #20
 8014164:	4296      	cmp	r6, r2
 8014166:	d930      	bls.n	80141ca <_dtoa_r+0x292>
 8014168:	6079      	str	r1, [r7, #4]
 801416a:	4648      	mov	r0, r9
 801416c:	9304      	str	r3, [sp, #16]
 801416e:	f000 fd39 	bl	8014be4 <_Balloc>
 8014172:	9b04      	ldr	r3, [sp, #16]
 8014174:	4607      	mov	r7, r0
 8014176:	2800      	cmp	r0, #0
 8014178:	d146      	bne.n	8014208 <_dtoa_r+0x2d0>
 801417a:	4b22      	ldr	r3, [pc, #136]	@ (8014204 <_dtoa_r+0x2cc>)
 801417c:	4602      	mov	r2, r0
 801417e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014182:	e6f2      	b.n	8013f6a <_dtoa_r+0x32>
 8014184:	2201      	movs	r2, #1
 8014186:	e7dd      	b.n	8014144 <_dtoa_r+0x20c>
 8014188:	2200      	movs	r2, #0
 801418a:	9208      	str	r2, [sp, #32]
 801418c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801418e:	eb08 0b02 	add.w	fp, r8, r2
 8014192:	f10b 0a01 	add.w	sl, fp, #1
 8014196:	4652      	mov	r2, sl
 8014198:	2a01      	cmp	r2, #1
 801419a:	bfb8      	it	lt
 801419c:	2201      	movlt	r2, #1
 801419e:	e7db      	b.n	8014158 <_dtoa_r+0x220>
 80141a0:	2201      	movs	r2, #1
 80141a2:	e7f2      	b.n	801418a <_dtoa_r+0x252>
 80141a4:	2401      	movs	r4, #1
 80141a6:	2200      	movs	r2, #0
 80141a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80141ac:	f04f 3bff 	mov.w	fp, #4294967295
 80141b0:	2100      	movs	r1, #0
 80141b2:	46da      	mov	sl, fp
 80141b4:	2212      	movs	r2, #18
 80141b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80141b8:	e7ce      	b.n	8014158 <_dtoa_r+0x220>
 80141ba:	2201      	movs	r2, #1
 80141bc:	9208      	str	r2, [sp, #32]
 80141be:	e7f5      	b.n	80141ac <_dtoa_r+0x274>
 80141c0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80141c4:	46da      	mov	sl, fp
 80141c6:	465a      	mov	r2, fp
 80141c8:	e7c6      	b.n	8014158 <_dtoa_r+0x220>
 80141ca:	3101      	adds	r1, #1
 80141cc:	0040      	lsls	r0, r0, #1
 80141ce:	e7c7      	b.n	8014160 <_dtoa_r+0x228>
 80141d0:	636f4361 	.word	0x636f4361
 80141d4:	3fd287a7 	.word	0x3fd287a7
 80141d8:	8b60c8b3 	.word	0x8b60c8b3
 80141dc:	3fc68a28 	.word	0x3fc68a28
 80141e0:	509f79fb 	.word	0x509f79fb
 80141e4:	3fd34413 	.word	0x3fd34413
 80141e8:	08017d3d 	.word	0x08017d3d
 80141ec:	08017d54 	.word	0x08017d54
 80141f0:	7ff00000 	.word	0x7ff00000
 80141f4:	08017d39 	.word	0x08017d39
 80141f8:	08017d0d 	.word	0x08017d0d
 80141fc:	08017d0c 	.word	0x08017d0c
 8014200:	08017e50 	.word	0x08017e50
 8014204:	08017dac 	.word	0x08017dac
 8014208:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801420c:	f1ba 0f0e 	cmp.w	sl, #14
 8014210:	6010      	str	r0, [r2, #0]
 8014212:	d86f      	bhi.n	80142f4 <_dtoa_r+0x3bc>
 8014214:	2c00      	cmp	r4, #0
 8014216:	d06d      	beq.n	80142f4 <_dtoa_r+0x3bc>
 8014218:	f1b8 0f00 	cmp.w	r8, #0
 801421c:	f340 80c2 	ble.w	80143a4 <_dtoa_r+0x46c>
 8014220:	4aca      	ldr	r2, [pc, #808]	@ (801454c <_dtoa_r+0x614>)
 8014222:	f008 010f 	and.w	r1, r8, #15
 8014226:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801422a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801422e:	ed92 7b00 	vldr	d7, [r2]
 8014232:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014236:	f000 80a9 	beq.w	801438c <_dtoa_r+0x454>
 801423a:	4ac5      	ldr	r2, [pc, #788]	@ (8014550 <_dtoa_r+0x618>)
 801423c:	ed92 6b08 	vldr	d6, [r2, #32]
 8014240:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014244:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014248:	f001 010f 	and.w	r1, r1, #15
 801424c:	2203      	movs	r2, #3
 801424e:	48c0      	ldr	r0, [pc, #768]	@ (8014550 <_dtoa_r+0x618>)
 8014250:	2900      	cmp	r1, #0
 8014252:	f040 809d 	bne.w	8014390 <_dtoa_r+0x458>
 8014256:	ed9d 6b02 	vldr	d6, [sp, #8]
 801425a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801425e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014262:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014264:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014268:	2900      	cmp	r1, #0
 801426a:	f000 80c1 	beq.w	80143f0 <_dtoa_r+0x4b8>
 801426e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014272:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427a:	f140 80b9 	bpl.w	80143f0 <_dtoa_r+0x4b8>
 801427e:	f1ba 0f00 	cmp.w	sl, #0
 8014282:	f000 80b5 	beq.w	80143f0 <_dtoa_r+0x4b8>
 8014286:	f1bb 0f00 	cmp.w	fp, #0
 801428a:	dd31      	ble.n	80142f0 <_dtoa_r+0x3b8>
 801428c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014290:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014294:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014298:	f108 31ff 	add.w	r1, r8, #4294967295
 801429c:	9104      	str	r1, [sp, #16]
 801429e:	3201      	adds	r2, #1
 80142a0:	465c      	mov	r4, fp
 80142a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80142a6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80142aa:	ee07 2a90 	vmov	s15, r2
 80142ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80142b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80142b6:	ee15 2a90 	vmov	r2, s11
 80142ba:	ec51 0b15 	vmov	r0, r1, d5
 80142be:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80142c2:	2c00      	cmp	r4, #0
 80142c4:	f040 8098 	bne.w	80143f8 <_dtoa_r+0x4c0>
 80142c8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80142cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80142d0:	ec41 0b17 	vmov	d7, r0, r1
 80142d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80142d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142dc:	f300 8261 	bgt.w	80147a2 <_dtoa_r+0x86a>
 80142e0:	eeb1 7b47 	vneg.f64	d7, d7
 80142e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80142e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ec:	f100 80f5 	bmi.w	80144da <_dtoa_r+0x5a2>
 80142f0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80142f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80142f6:	2a00      	cmp	r2, #0
 80142f8:	f2c0 812c 	blt.w	8014554 <_dtoa_r+0x61c>
 80142fc:	f1b8 0f0e 	cmp.w	r8, #14
 8014300:	f300 8128 	bgt.w	8014554 <_dtoa_r+0x61c>
 8014304:	4b91      	ldr	r3, [pc, #580]	@ (801454c <_dtoa_r+0x614>)
 8014306:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801430a:	ed93 6b00 	vldr	d6, [r3]
 801430e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014310:	2b00      	cmp	r3, #0
 8014312:	da03      	bge.n	801431c <_dtoa_r+0x3e4>
 8014314:	f1ba 0f00 	cmp.w	sl, #0
 8014318:	f340 80d2 	ble.w	80144c0 <_dtoa_r+0x588>
 801431c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014324:	463e      	mov	r6, r7
 8014326:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801432a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801432e:	ee15 3a10 	vmov	r3, s10
 8014332:	3330      	adds	r3, #48	@ 0x30
 8014334:	f806 3b01 	strb.w	r3, [r6], #1
 8014338:	1bf3      	subs	r3, r6, r7
 801433a:	459a      	cmp	sl, r3
 801433c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014340:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014344:	f040 80f8 	bne.w	8014538 <_dtoa_r+0x600>
 8014348:	ee37 7b07 	vadd.f64	d7, d7, d7
 801434c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014354:	f300 80dd 	bgt.w	8014512 <_dtoa_r+0x5da>
 8014358:	eeb4 7b46 	vcmp.f64	d7, d6
 801435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014360:	d104      	bne.n	801436c <_dtoa_r+0x434>
 8014362:	ee15 3a10 	vmov	r3, s10
 8014366:	07db      	lsls	r3, r3, #31
 8014368:	f100 80d3 	bmi.w	8014512 <_dtoa_r+0x5da>
 801436c:	9901      	ldr	r1, [sp, #4]
 801436e:	4648      	mov	r0, r9
 8014370:	f000 fc78 	bl	8014c64 <_Bfree>
 8014374:	2300      	movs	r3, #0
 8014376:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014378:	7033      	strb	r3, [r6, #0]
 801437a:	f108 0301 	add.w	r3, r8, #1
 801437e:	6013      	str	r3, [r2, #0]
 8014380:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014382:	2b00      	cmp	r3, #0
 8014384:	f000 8304 	beq.w	8014990 <_dtoa_r+0xa58>
 8014388:	601e      	str	r6, [r3, #0]
 801438a:	e301      	b.n	8014990 <_dtoa_r+0xa58>
 801438c:	2202      	movs	r2, #2
 801438e:	e75e      	b.n	801424e <_dtoa_r+0x316>
 8014390:	07cc      	lsls	r4, r1, #31
 8014392:	d504      	bpl.n	801439e <_dtoa_r+0x466>
 8014394:	ed90 6b00 	vldr	d6, [r0]
 8014398:	3201      	adds	r2, #1
 801439a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801439e:	1049      	asrs	r1, r1, #1
 80143a0:	3008      	adds	r0, #8
 80143a2:	e755      	b.n	8014250 <_dtoa_r+0x318>
 80143a4:	d022      	beq.n	80143ec <_dtoa_r+0x4b4>
 80143a6:	f1c8 0100 	rsb	r1, r8, #0
 80143aa:	4a68      	ldr	r2, [pc, #416]	@ (801454c <_dtoa_r+0x614>)
 80143ac:	f001 000f 	and.w	r0, r1, #15
 80143b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80143b4:	ed92 7b00 	vldr	d7, [r2]
 80143b8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80143bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80143c0:	4863      	ldr	r0, [pc, #396]	@ (8014550 <_dtoa_r+0x618>)
 80143c2:	1109      	asrs	r1, r1, #4
 80143c4:	2400      	movs	r4, #0
 80143c6:	2202      	movs	r2, #2
 80143c8:	b929      	cbnz	r1, 80143d6 <_dtoa_r+0x49e>
 80143ca:	2c00      	cmp	r4, #0
 80143cc:	f43f af49 	beq.w	8014262 <_dtoa_r+0x32a>
 80143d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80143d4:	e745      	b.n	8014262 <_dtoa_r+0x32a>
 80143d6:	07ce      	lsls	r6, r1, #31
 80143d8:	d505      	bpl.n	80143e6 <_dtoa_r+0x4ae>
 80143da:	ed90 6b00 	vldr	d6, [r0]
 80143de:	3201      	adds	r2, #1
 80143e0:	2401      	movs	r4, #1
 80143e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80143e6:	1049      	asrs	r1, r1, #1
 80143e8:	3008      	adds	r0, #8
 80143ea:	e7ed      	b.n	80143c8 <_dtoa_r+0x490>
 80143ec:	2202      	movs	r2, #2
 80143ee:	e738      	b.n	8014262 <_dtoa_r+0x32a>
 80143f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80143f4:	4654      	mov	r4, sl
 80143f6:	e754      	b.n	80142a2 <_dtoa_r+0x36a>
 80143f8:	4a54      	ldr	r2, [pc, #336]	@ (801454c <_dtoa_r+0x614>)
 80143fa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80143fe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014402:	9a08      	ldr	r2, [sp, #32]
 8014404:	ec41 0b17 	vmov	d7, r0, r1
 8014408:	443c      	add	r4, r7
 801440a:	b34a      	cbz	r2, 8014460 <_dtoa_r+0x528>
 801440c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8014410:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014414:	463e      	mov	r6, r7
 8014416:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801441a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801441e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014422:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014426:	ee14 2a90 	vmov	r2, s9
 801442a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801442e:	3230      	adds	r2, #48	@ 0x30
 8014430:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014434:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443c:	f806 2b01 	strb.w	r2, [r6], #1
 8014440:	d438      	bmi.n	80144b4 <_dtoa_r+0x57c>
 8014442:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014446:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444e:	d462      	bmi.n	8014516 <_dtoa_r+0x5de>
 8014450:	42a6      	cmp	r6, r4
 8014452:	f43f af4d 	beq.w	80142f0 <_dtoa_r+0x3b8>
 8014456:	ee27 7b03 	vmul.f64	d7, d7, d3
 801445a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801445e:	e7e0      	b.n	8014422 <_dtoa_r+0x4ea>
 8014460:	4621      	mov	r1, r4
 8014462:	463e      	mov	r6, r7
 8014464:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014468:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801446c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014470:	ee14 2a90 	vmov	r2, s9
 8014474:	3230      	adds	r2, #48	@ 0x30
 8014476:	f806 2b01 	strb.w	r2, [r6], #1
 801447a:	42a6      	cmp	r6, r4
 801447c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014480:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014484:	d119      	bne.n	80144ba <_dtoa_r+0x582>
 8014486:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801448a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801448e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014496:	dc3e      	bgt.n	8014516 <_dtoa_r+0x5de>
 8014498:	ee35 5b47 	vsub.f64	d5, d5, d7
 801449c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80144a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a4:	f57f af24 	bpl.w	80142f0 <_dtoa_r+0x3b8>
 80144a8:	460e      	mov	r6, r1
 80144aa:	3901      	subs	r1, #1
 80144ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80144b0:	2b30      	cmp	r3, #48	@ 0x30
 80144b2:	d0f9      	beq.n	80144a8 <_dtoa_r+0x570>
 80144b4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80144b8:	e758      	b.n	801436c <_dtoa_r+0x434>
 80144ba:	ee26 6b03 	vmul.f64	d6, d6, d3
 80144be:	e7d5      	b.n	801446c <_dtoa_r+0x534>
 80144c0:	d10b      	bne.n	80144da <_dtoa_r+0x5a2>
 80144c2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80144c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80144ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80144d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d6:	f2c0 8161 	blt.w	801479c <_dtoa_r+0x864>
 80144da:	2400      	movs	r4, #0
 80144dc:	4625      	mov	r5, r4
 80144de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144e0:	43db      	mvns	r3, r3
 80144e2:	9304      	str	r3, [sp, #16]
 80144e4:	463e      	mov	r6, r7
 80144e6:	f04f 0800 	mov.w	r8, #0
 80144ea:	4621      	mov	r1, r4
 80144ec:	4648      	mov	r0, r9
 80144ee:	f000 fbb9 	bl	8014c64 <_Bfree>
 80144f2:	2d00      	cmp	r5, #0
 80144f4:	d0de      	beq.n	80144b4 <_dtoa_r+0x57c>
 80144f6:	f1b8 0f00 	cmp.w	r8, #0
 80144fa:	d005      	beq.n	8014508 <_dtoa_r+0x5d0>
 80144fc:	45a8      	cmp	r8, r5
 80144fe:	d003      	beq.n	8014508 <_dtoa_r+0x5d0>
 8014500:	4641      	mov	r1, r8
 8014502:	4648      	mov	r0, r9
 8014504:	f000 fbae 	bl	8014c64 <_Bfree>
 8014508:	4629      	mov	r1, r5
 801450a:	4648      	mov	r0, r9
 801450c:	f000 fbaa 	bl	8014c64 <_Bfree>
 8014510:	e7d0      	b.n	80144b4 <_dtoa_r+0x57c>
 8014512:	f8cd 8010 	str.w	r8, [sp, #16]
 8014516:	4633      	mov	r3, r6
 8014518:	461e      	mov	r6, r3
 801451a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801451e:	2a39      	cmp	r2, #57	@ 0x39
 8014520:	d106      	bne.n	8014530 <_dtoa_r+0x5f8>
 8014522:	429f      	cmp	r7, r3
 8014524:	d1f8      	bne.n	8014518 <_dtoa_r+0x5e0>
 8014526:	9a04      	ldr	r2, [sp, #16]
 8014528:	3201      	adds	r2, #1
 801452a:	9204      	str	r2, [sp, #16]
 801452c:	2230      	movs	r2, #48	@ 0x30
 801452e:	703a      	strb	r2, [r7, #0]
 8014530:	781a      	ldrb	r2, [r3, #0]
 8014532:	3201      	adds	r2, #1
 8014534:	701a      	strb	r2, [r3, #0]
 8014536:	e7bd      	b.n	80144b4 <_dtoa_r+0x57c>
 8014538:	ee27 7b04 	vmul.f64	d7, d7, d4
 801453c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014544:	f47f aeef 	bne.w	8014326 <_dtoa_r+0x3ee>
 8014548:	e710      	b.n	801436c <_dtoa_r+0x434>
 801454a:	bf00      	nop
 801454c:	08017e50 	.word	0x08017e50
 8014550:	08017e28 	.word	0x08017e28
 8014554:	9908      	ldr	r1, [sp, #32]
 8014556:	2900      	cmp	r1, #0
 8014558:	f000 80e3 	beq.w	8014722 <_dtoa_r+0x7ea>
 801455c:	9907      	ldr	r1, [sp, #28]
 801455e:	2901      	cmp	r1, #1
 8014560:	f300 80c8 	bgt.w	80146f4 <_dtoa_r+0x7bc>
 8014564:	2d00      	cmp	r5, #0
 8014566:	f000 80c1 	beq.w	80146ec <_dtoa_r+0x7b4>
 801456a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801456e:	9e05      	ldr	r6, [sp, #20]
 8014570:	461c      	mov	r4, r3
 8014572:	9304      	str	r3, [sp, #16]
 8014574:	9b05      	ldr	r3, [sp, #20]
 8014576:	4413      	add	r3, r2
 8014578:	9305      	str	r3, [sp, #20]
 801457a:	9b06      	ldr	r3, [sp, #24]
 801457c:	2101      	movs	r1, #1
 801457e:	4413      	add	r3, r2
 8014580:	4648      	mov	r0, r9
 8014582:	9306      	str	r3, [sp, #24]
 8014584:	f000 fc22 	bl	8014dcc <__i2b>
 8014588:	9b04      	ldr	r3, [sp, #16]
 801458a:	4605      	mov	r5, r0
 801458c:	b166      	cbz	r6, 80145a8 <_dtoa_r+0x670>
 801458e:	9a06      	ldr	r2, [sp, #24]
 8014590:	2a00      	cmp	r2, #0
 8014592:	dd09      	ble.n	80145a8 <_dtoa_r+0x670>
 8014594:	42b2      	cmp	r2, r6
 8014596:	9905      	ldr	r1, [sp, #20]
 8014598:	bfa8      	it	ge
 801459a:	4632      	movge	r2, r6
 801459c:	1a89      	subs	r1, r1, r2
 801459e:	9105      	str	r1, [sp, #20]
 80145a0:	9906      	ldr	r1, [sp, #24]
 80145a2:	1ab6      	subs	r6, r6, r2
 80145a4:	1a8a      	subs	r2, r1, r2
 80145a6:	9206      	str	r2, [sp, #24]
 80145a8:	b1fb      	cbz	r3, 80145ea <_dtoa_r+0x6b2>
 80145aa:	9a08      	ldr	r2, [sp, #32]
 80145ac:	2a00      	cmp	r2, #0
 80145ae:	f000 80bc 	beq.w	801472a <_dtoa_r+0x7f2>
 80145b2:	b19c      	cbz	r4, 80145dc <_dtoa_r+0x6a4>
 80145b4:	4629      	mov	r1, r5
 80145b6:	4622      	mov	r2, r4
 80145b8:	4648      	mov	r0, r9
 80145ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145bc:	f000 fcc6 	bl	8014f4c <__pow5mult>
 80145c0:	9a01      	ldr	r2, [sp, #4]
 80145c2:	4601      	mov	r1, r0
 80145c4:	4605      	mov	r5, r0
 80145c6:	4648      	mov	r0, r9
 80145c8:	f000 fc16 	bl	8014df8 <__multiply>
 80145cc:	9901      	ldr	r1, [sp, #4]
 80145ce:	9004      	str	r0, [sp, #16]
 80145d0:	4648      	mov	r0, r9
 80145d2:	f000 fb47 	bl	8014c64 <_Bfree>
 80145d6:	9a04      	ldr	r2, [sp, #16]
 80145d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80145da:	9201      	str	r2, [sp, #4]
 80145dc:	1b1a      	subs	r2, r3, r4
 80145de:	d004      	beq.n	80145ea <_dtoa_r+0x6b2>
 80145e0:	9901      	ldr	r1, [sp, #4]
 80145e2:	4648      	mov	r0, r9
 80145e4:	f000 fcb2 	bl	8014f4c <__pow5mult>
 80145e8:	9001      	str	r0, [sp, #4]
 80145ea:	2101      	movs	r1, #1
 80145ec:	4648      	mov	r0, r9
 80145ee:	f000 fbed 	bl	8014dcc <__i2b>
 80145f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145f4:	4604      	mov	r4, r0
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	f000 81d0 	beq.w	801499c <_dtoa_r+0xa64>
 80145fc:	461a      	mov	r2, r3
 80145fe:	4601      	mov	r1, r0
 8014600:	4648      	mov	r0, r9
 8014602:	f000 fca3 	bl	8014f4c <__pow5mult>
 8014606:	9b07      	ldr	r3, [sp, #28]
 8014608:	2b01      	cmp	r3, #1
 801460a:	4604      	mov	r4, r0
 801460c:	f300 8095 	bgt.w	801473a <_dtoa_r+0x802>
 8014610:	9b02      	ldr	r3, [sp, #8]
 8014612:	2b00      	cmp	r3, #0
 8014614:	f040 808b 	bne.w	801472e <_dtoa_r+0x7f6>
 8014618:	9b03      	ldr	r3, [sp, #12]
 801461a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801461e:	2a00      	cmp	r2, #0
 8014620:	f040 8087 	bne.w	8014732 <_dtoa_r+0x7fa>
 8014624:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014628:	0d12      	lsrs	r2, r2, #20
 801462a:	0512      	lsls	r2, r2, #20
 801462c:	2a00      	cmp	r2, #0
 801462e:	f000 8082 	beq.w	8014736 <_dtoa_r+0x7fe>
 8014632:	9b05      	ldr	r3, [sp, #20]
 8014634:	3301      	adds	r3, #1
 8014636:	9305      	str	r3, [sp, #20]
 8014638:	9b06      	ldr	r3, [sp, #24]
 801463a:	3301      	adds	r3, #1
 801463c:	9306      	str	r3, [sp, #24]
 801463e:	2301      	movs	r3, #1
 8014640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014644:	2b00      	cmp	r3, #0
 8014646:	f000 81af 	beq.w	80149a8 <_dtoa_r+0xa70>
 801464a:	6922      	ldr	r2, [r4, #16]
 801464c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014650:	6910      	ldr	r0, [r2, #16]
 8014652:	f000 fb6f 	bl	8014d34 <__hi0bits>
 8014656:	f1c0 0020 	rsb	r0, r0, #32
 801465a:	9b06      	ldr	r3, [sp, #24]
 801465c:	4418      	add	r0, r3
 801465e:	f010 001f 	ands.w	r0, r0, #31
 8014662:	d076      	beq.n	8014752 <_dtoa_r+0x81a>
 8014664:	f1c0 0220 	rsb	r2, r0, #32
 8014668:	2a04      	cmp	r2, #4
 801466a:	dd69      	ble.n	8014740 <_dtoa_r+0x808>
 801466c:	9b05      	ldr	r3, [sp, #20]
 801466e:	f1c0 001c 	rsb	r0, r0, #28
 8014672:	4403      	add	r3, r0
 8014674:	9305      	str	r3, [sp, #20]
 8014676:	9b06      	ldr	r3, [sp, #24]
 8014678:	4406      	add	r6, r0
 801467a:	4403      	add	r3, r0
 801467c:	9306      	str	r3, [sp, #24]
 801467e:	9b05      	ldr	r3, [sp, #20]
 8014680:	2b00      	cmp	r3, #0
 8014682:	dd05      	ble.n	8014690 <_dtoa_r+0x758>
 8014684:	9901      	ldr	r1, [sp, #4]
 8014686:	461a      	mov	r2, r3
 8014688:	4648      	mov	r0, r9
 801468a:	f000 fcb9 	bl	8015000 <__lshift>
 801468e:	9001      	str	r0, [sp, #4]
 8014690:	9b06      	ldr	r3, [sp, #24]
 8014692:	2b00      	cmp	r3, #0
 8014694:	dd05      	ble.n	80146a2 <_dtoa_r+0x76a>
 8014696:	4621      	mov	r1, r4
 8014698:	461a      	mov	r2, r3
 801469a:	4648      	mov	r0, r9
 801469c:	f000 fcb0 	bl	8015000 <__lshift>
 80146a0:	4604      	mov	r4, r0
 80146a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d056      	beq.n	8014756 <_dtoa_r+0x81e>
 80146a8:	9801      	ldr	r0, [sp, #4]
 80146aa:	4621      	mov	r1, r4
 80146ac:	f000 fd14 	bl	80150d8 <__mcmp>
 80146b0:	2800      	cmp	r0, #0
 80146b2:	da50      	bge.n	8014756 <_dtoa_r+0x81e>
 80146b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80146b8:	9304      	str	r3, [sp, #16]
 80146ba:	9901      	ldr	r1, [sp, #4]
 80146bc:	2300      	movs	r3, #0
 80146be:	220a      	movs	r2, #10
 80146c0:	4648      	mov	r0, r9
 80146c2:	f000 faf1 	bl	8014ca8 <__multadd>
 80146c6:	9b08      	ldr	r3, [sp, #32]
 80146c8:	9001      	str	r0, [sp, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	f000 816e 	beq.w	80149ac <_dtoa_r+0xa74>
 80146d0:	4629      	mov	r1, r5
 80146d2:	2300      	movs	r3, #0
 80146d4:	220a      	movs	r2, #10
 80146d6:	4648      	mov	r0, r9
 80146d8:	f000 fae6 	bl	8014ca8 <__multadd>
 80146dc:	f1bb 0f00 	cmp.w	fp, #0
 80146e0:	4605      	mov	r5, r0
 80146e2:	dc64      	bgt.n	80147ae <_dtoa_r+0x876>
 80146e4:	9b07      	ldr	r3, [sp, #28]
 80146e6:	2b02      	cmp	r3, #2
 80146e8:	dc3e      	bgt.n	8014768 <_dtoa_r+0x830>
 80146ea:	e060      	b.n	80147ae <_dtoa_r+0x876>
 80146ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80146ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80146f2:	e73c      	b.n	801456e <_dtoa_r+0x636>
 80146f4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80146f8:	42a3      	cmp	r3, r4
 80146fa:	bfbf      	itttt	lt
 80146fc:	1ae2      	sublt	r2, r4, r3
 80146fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014700:	189b      	addlt	r3, r3, r2
 8014702:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8014704:	bfae      	itee	ge
 8014706:	1b1c      	subge	r4, r3, r4
 8014708:	4623      	movlt	r3, r4
 801470a:	2400      	movlt	r4, #0
 801470c:	f1ba 0f00 	cmp.w	sl, #0
 8014710:	bfb5      	itete	lt
 8014712:	9a05      	ldrlt	r2, [sp, #20]
 8014714:	9e05      	ldrge	r6, [sp, #20]
 8014716:	eba2 060a 	sublt.w	r6, r2, sl
 801471a:	4652      	movge	r2, sl
 801471c:	bfb8      	it	lt
 801471e:	2200      	movlt	r2, #0
 8014720:	e727      	b.n	8014572 <_dtoa_r+0x63a>
 8014722:	9e05      	ldr	r6, [sp, #20]
 8014724:	9d08      	ldr	r5, [sp, #32]
 8014726:	461c      	mov	r4, r3
 8014728:	e730      	b.n	801458c <_dtoa_r+0x654>
 801472a:	461a      	mov	r2, r3
 801472c:	e758      	b.n	80145e0 <_dtoa_r+0x6a8>
 801472e:	2300      	movs	r3, #0
 8014730:	e786      	b.n	8014640 <_dtoa_r+0x708>
 8014732:	9b02      	ldr	r3, [sp, #8]
 8014734:	e784      	b.n	8014640 <_dtoa_r+0x708>
 8014736:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014738:	e783      	b.n	8014642 <_dtoa_r+0x70a>
 801473a:	2300      	movs	r3, #0
 801473c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801473e:	e784      	b.n	801464a <_dtoa_r+0x712>
 8014740:	d09d      	beq.n	801467e <_dtoa_r+0x746>
 8014742:	9b05      	ldr	r3, [sp, #20]
 8014744:	321c      	adds	r2, #28
 8014746:	4413      	add	r3, r2
 8014748:	9305      	str	r3, [sp, #20]
 801474a:	9b06      	ldr	r3, [sp, #24]
 801474c:	4416      	add	r6, r2
 801474e:	4413      	add	r3, r2
 8014750:	e794      	b.n	801467c <_dtoa_r+0x744>
 8014752:	4602      	mov	r2, r0
 8014754:	e7f5      	b.n	8014742 <_dtoa_r+0x80a>
 8014756:	f1ba 0f00 	cmp.w	sl, #0
 801475a:	f8cd 8010 	str.w	r8, [sp, #16]
 801475e:	46d3      	mov	fp, sl
 8014760:	dc21      	bgt.n	80147a6 <_dtoa_r+0x86e>
 8014762:	9b07      	ldr	r3, [sp, #28]
 8014764:	2b02      	cmp	r3, #2
 8014766:	dd1e      	ble.n	80147a6 <_dtoa_r+0x86e>
 8014768:	f1bb 0f00 	cmp.w	fp, #0
 801476c:	f47f aeb7 	bne.w	80144de <_dtoa_r+0x5a6>
 8014770:	4621      	mov	r1, r4
 8014772:	465b      	mov	r3, fp
 8014774:	2205      	movs	r2, #5
 8014776:	4648      	mov	r0, r9
 8014778:	f000 fa96 	bl	8014ca8 <__multadd>
 801477c:	4601      	mov	r1, r0
 801477e:	4604      	mov	r4, r0
 8014780:	9801      	ldr	r0, [sp, #4]
 8014782:	f000 fca9 	bl	80150d8 <__mcmp>
 8014786:	2800      	cmp	r0, #0
 8014788:	f77f aea9 	ble.w	80144de <_dtoa_r+0x5a6>
 801478c:	463e      	mov	r6, r7
 801478e:	2331      	movs	r3, #49	@ 0x31
 8014790:	f806 3b01 	strb.w	r3, [r6], #1
 8014794:	9b04      	ldr	r3, [sp, #16]
 8014796:	3301      	adds	r3, #1
 8014798:	9304      	str	r3, [sp, #16]
 801479a:	e6a4      	b.n	80144e6 <_dtoa_r+0x5ae>
 801479c:	f8cd 8010 	str.w	r8, [sp, #16]
 80147a0:	4654      	mov	r4, sl
 80147a2:	4625      	mov	r5, r4
 80147a4:	e7f2      	b.n	801478c <_dtoa_r+0x854>
 80147a6:	9b08      	ldr	r3, [sp, #32]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	f000 8103 	beq.w	80149b4 <_dtoa_r+0xa7c>
 80147ae:	2e00      	cmp	r6, #0
 80147b0:	dd05      	ble.n	80147be <_dtoa_r+0x886>
 80147b2:	4629      	mov	r1, r5
 80147b4:	4632      	mov	r2, r6
 80147b6:	4648      	mov	r0, r9
 80147b8:	f000 fc22 	bl	8015000 <__lshift>
 80147bc:	4605      	mov	r5, r0
 80147be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d058      	beq.n	8014876 <_dtoa_r+0x93e>
 80147c4:	6869      	ldr	r1, [r5, #4]
 80147c6:	4648      	mov	r0, r9
 80147c8:	f000 fa0c 	bl	8014be4 <_Balloc>
 80147cc:	4606      	mov	r6, r0
 80147ce:	b928      	cbnz	r0, 80147dc <_dtoa_r+0x8a4>
 80147d0:	4b82      	ldr	r3, [pc, #520]	@ (80149dc <_dtoa_r+0xaa4>)
 80147d2:	4602      	mov	r2, r0
 80147d4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80147d8:	f7ff bbc7 	b.w	8013f6a <_dtoa_r+0x32>
 80147dc:	692a      	ldr	r2, [r5, #16]
 80147de:	3202      	adds	r2, #2
 80147e0:	0092      	lsls	r2, r2, #2
 80147e2:	f105 010c 	add.w	r1, r5, #12
 80147e6:	300c      	adds	r0, #12
 80147e8:	f7ff fb0f 	bl	8013e0a <memcpy>
 80147ec:	2201      	movs	r2, #1
 80147ee:	4631      	mov	r1, r6
 80147f0:	4648      	mov	r0, r9
 80147f2:	f000 fc05 	bl	8015000 <__lshift>
 80147f6:	1c7b      	adds	r3, r7, #1
 80147f8:	9305      	str	r3, [sp, #20]
 80147fa:	eb07 030b 	add.w	r3, r7, fp
 80147fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8014800:	9b02      	ldr	r3, [sp, #8]
 8014802:	f003 0301 	and.w	r3, r3, #1
 8014806:	46a8      	mov	r8, r5
 8014808:	9308      	str	r3, [sp, #32]
 801480a:	4605      	mov	r5, r0
 801480c:	9b05      	ldr	r3, [sp, #20]
 801480e:	9801      	ldr	r0, [sp, #4]
 8014810:	4621      	mov	r1, r4
 8014812:	f103 3bff 	add.w	fp, r3, #4294967295
 8014816:	f7ff fb06 	bl	8013e26 <quorem>
 801481a:	4641      	mov	r1, r8
 801481c:	9002      	str	r0, [sp, #8]
 801481e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014822:	9801      	ldr	r0, [sp, #4]
 8014824:	f000 fc58 	bl	80150d8 <__mcmp>
 8014828:	462a      	mov	r2, r5
 801482a:	9006      	str	r0, [sp, #24]
 801482c:	4621      	mov	r1, r4
 801482e:	4648      	mov	r0, r9
 8014830:	f000 fc6e 	bl	8015110 <__mdiff>
 8014834:	68c2      	ldr	r2, [r0, #12]
 8014836:	4606      	mov	r6, r0
 8014838:	b9fa      	cbnz	r2, 801487a <_dtoa_r+0x942>
 801483a:	4601      	mov	r1, r0
 801483c:	9801      	ldr	r0, [sp, #4]
 801483e:	f000 fc4b 	bl	80150d8 <__mcmp>
 8014842:	4602      	mov	r2, r0
 8014844:	4631      	mov	r1, r6
 8014846:	4648      	mov	r0, r9
 8014848:	920a      	str	r2, [sp, #40]	@ 0x28
 801484a:	f000 fa0b 	bl	8014c64 <_Bfree>
 801484e:	9b07      	ldr	r3, [sp, #28]
 8014850:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014852:	9e05      	ldr	r6, [sp, #20]
 8014854:	ea43 0102 	orr.w	r1, r3, r2
 8014858:	9b08      	ldr	r3, [sp, #32]
 801485a:	4319      	orrs	r1, r3
 801485c:	d10f      	bne.n	801487e <_dtoa_r+0x946>
 801485e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014862:	d028      	beq.n	80148b6 <_dtoa_r+0x97e>
 8014864:	9b06      	ldr	r3, [sp, #24]
 8014866:	2b00      	cmp	r3, #0
 8014868:	dd02      	ble.n	8014870 <_dtoa_r+0x938>
 801486a:	9b02      	ldr	r3, [sp, #8]
 801486c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014870:	f88b a000 	strb.w	sl, [fp]
 8014874:	e639      	b.n	80144ea <_dtoa_r+0x5b2>
 8014876:	4628      	mov	r0, r5
 8014878:	e7bd      	b.n	80147f6 <_dtoa_r+0x8be>
 801487a:	2201      	movs	r2, #1
 801487c:	e7e2      	b.n	8014844 <_dtoa_r+0x90c>
 801487e:	9b06      	ldr	r3, [sp, #24]
 8014880:	2b00      	cmp	r3, #0
 8014882:	db04      	blt.n	801488e <_dtoa_r+0x956>
 8014884:	9907      	ldr	r1, [sp, #28]
 8014886:	430b      	orrs	r3, r1
 8014888:	9908      	ldr	r1, [sp, #32]
 801488a:	430b      	orrs	r3, r1
 801488c:	d120      	bne.n	80148d0 <_dtoa_r+0x998>
 801488e:	2a00      	cmp	r2, #0
 8014890:	ddee      	ble.n	8014870 <_dtoa_r+0x938>
 8014892:	9901      	ldr	r1, [sp, #4]
 8014894:	2201      	movs	r2, #1
 8014896:	4648      	mov	r0, r9
 8014898:	f000 fbb2 	bl	8015000 <__lshift>
 801489c:	4621      	mov	r1, r4
 801489e:	9001      	str	r0, [sp, #4]
 80148a0:	f000 fc1a 	bl	80150d8 <__mcmp>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	dc03      	bgt.n	80148b0 <_dtoa_r+0x978>
 80148a8:	d1e2      	bne.n	8014870 <_dtoa_r+0x938>
 80148aa:	f01a 0f01 	tst.w	sl, #1
 80148ae:	d0df      	beq.n	8014870 <_dtoa_r+0x938>
 80148b0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80148b4:	d1d9      	bne.n	801486a <_dtoa_r+0x932>
 80148b6:	2339      	movs	r3, #57	@ 0x39
 80148b8:	f88b 3000 	strb.w	r3, [fp]
 80148bc:	4633      	mov	r3, r6
 80148be:	461e      	mov	r6, r3
 80148c0:	3b01      	subs	r3, #1
 80148c2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80148c6:	2a39      	cmp	r2, #57	@ 0x39
 80148c8:	d053      	beq.n	8014972 <_dtoa_r+0xa3a>
 80148ca:	3201      	adds	r2, #1
 80148cc:	701a      	strb	r2, [r3, #0]
 80148ce:	e60c      	b.n	80144ea <_dtoa_r+0x5b2>
 80148d0:	2a00      	cmp	r2, #0
 80148d2:	dd07      	ble.n	80148e4 <_dtoa_r+0x9ac>
 80148d4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80148d8:	d0ed      	beq.n	80148b6 <_dtoa_r+0x97e>
 80148da:	f10a 0301 	add.w	r3, sl, #1
 80148de:	f88b 3000 	strb.w	r3, [fp]
 80148e2:	e602      	b.n	80144ea <_dtoa_r+0x5b2>
 80148e4:	9b05      	ldr	r3, [sp, #20]
 80148e6:	9a05      	ldr	r2, [sp, #20]
 80148e8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80148ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80148ee:	4293      	cmp	r3, r2
 80148f0:	d029      	beq.n	8014946 <_dtoa_r+0xa0e>
 80148f2:	9901      	ldr	r1, [sp, #4]
 80148f4:	2300      	movs	r3, #0
 80148f6:	220a      	movs	r2, #10
 80148f8:	4648      	mov	r0, r9
 80148fa:	f000 f9d5 	bl	8014ca8 <__multadd>
 80148fe:	45a8      	cmp	r8, r5
 8014900:	9001      	str	r0, [sp, #4]
 8014902:	f04f 0300 	mov.w	r3, #0
 8014906:	f04f 020a 	mov.w	r2, #10
 801490a:	4641      	mov	r1, r8
 801490c:	4648      	mov	r0, r9
 801490e:	d107      	bne.n	8014920 <_dtoa_r+0x9e8>
 8014910:	f000 f9ca 	bl	8014ca8 <__multadd>
 8014914:	4680      	mov	r8, r0
 8014916:	4605      	mov	r5, r0
 8014918:	9b05      	ldr	r3, [sp, #20]
 801491a:	3301      	adds	r3, #1
 801491c:	9305      	str	r3, [sp, #20]
 801491e:	e775      	b.n	801480c <_dtoa_r+0x8d4>
 8014920:	f000 f9c2 	bl	8014ca8 <__multadd>
 8014924:	4629      	mov	r1, r5
 8014926:	4680      	mov	r8, r0
 8014928:	2300      	movs	r3, #0
 801492a:	220a      	movs	r2, #10
 801492c:	4648      	mov	r0, r9
 801492e:	f000 f9bb 	bl	8014ca8 <__multadd>
 8014932:	4605      	mov	r5, r0
 8014934:	e7f0      	b.n	8014918 <_dtoa_r+0x9e0>
 8014936:	f1bb 0f00 	cmp.w	fp, #0
 801493a:	bfcc      	ite	gt
 801493c:	465e      	movgt	r6, fp
 801493e:	2601      	movle	r6, #1
 8014940:	443e      	add	r6, r7
 8014942:	f04f 0800 	mov.w	r8, #0
 8014946:	9901      	ldr	r1, [sp, #4]
 8014948:	2201      	movs	r2, #1
 801494a:	4648      	mov	r0, r9
 801494c:	f000 fb58 	bl	8015000 <__lshift>
 8014950:	4621      	mov	r1, r4
 8014952:	9001      	str	r0, [sp, #4]
 8014954:	f000 fbc0 	bl	80150d8 <__mcmp>
 8014958:	2800      	cmp	r0, #0
 801495a:	dcaf      	bgt.n	80148bc <_dtoa_r+0x984>
 801495c:	d102      	bne.n	8014964 <_dtoa_r+0xa2c>
 801495e:	f01a 0f01 	tst.w	sl, #1
 8014962:	d1ab      	bne.n	80148bc <_dtoa_r+0x984>
 8014964:	4633      	mov	r3, r6
 8014966:	461e      	mov	r6, r3
 8014968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801496c:	2a30      	cmp	r2, #48	@ 0x30
 801496e:	d0fa      	beq.n	8014966 <_dtoa_r+0xa2e>
 8014970:	e5bb      	b.n	80144ea <_dtoa_r+0x5b2>
 8014972:	429f      	cmp	r7, r3
 8014974:	d1a3      	bne.n	80148be <_dtoa_r+0x986>
 8014976:	9b04      	ldr	r3, [sp, #16]
 8014978:	3301      	adds	r3, #1
 801497a:	9304      	str	r3, [sp, #16]
 801497c:	2331      	movs	r3, #49	@ 0x31
 801497e:	703b      	strb	r3, [r7, #0]
 8014980:	e5b3      	b.n	80144ea <_dtoa_r+0x5b2>
 8014982:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014984:	4f16      	ldr	r7, [pc, #88]	@ (80149e0 <_dtoa_r+0xaa8>)
 8014986:	b11b      	cbz	r3, 8014990 <_dtoa_r+0xa58>
 8014988:	f107 0308 	add.w	r3, r7, #8
 801498c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801498e:	6013      	str	r3, [r2, #0]
 8014990:	4638      	mov	r0, r7
 8014992:	b011      	add	sp, #68	@ 0x44
 8014994:	ecbd 8b02 	vpop	{d8}
 8014998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499c:	9b07      	ldr	r3, [sp, #28]
 801499e:	2b01      	cmp	r3, #1
 80149a0:	f77f ae36 	ble.w	8014610 <_dtoa_r+0x6d8>
 80149a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80149a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80149a8:	2001      	movs	r0, #1
 80149aa:	e656      	b.n	801465a <_dtoa_r+0x722>
 80149ac:	f1bb 0f00 	cmp.w	fp, #0
 80149b0:	f77f aed7 	ble.w	8014762 <_dtoa_r+0x82a>
 80149b4:	463e      	mov	r6, r7
 80149b6:	9801      	ldr	r0, [sp, #4]
 80149b8:	4621      	mov	r1, r4
 80149ba:	f7ff fa34 	bl	8013e26 <quorem>
 80149be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80149c2:	f806 ab01 	strb.w	sl, [r6], #1
 80149c6:	1bf2      	subs	r2, r6, r7
 80149c8:	4593      	cmp	fp, r2
 80149ca:	ddb4      	ble.n	8014936 <_dtoa_r+0x9fe>
 80149cc:	9901      	ldr	r1, [sp, #4]
 80149ce:	2300      	movs	r3, #0
 80149d0:	220a      	movs	r2, #10
 80149d2:	4648      	mov	r0, r9
 80149d4:	f000 f968 	bl	8014ca8 <__multadd>
 80149d8:	9001      	str	r0, [sp, #4]
 80149da:	e7ec      	b.n	80149b6 <_dtoa_r+0xa7e>
 80149dc:	08017dac 	.word	0x08017dac
 80149e0:	08017d30 	.word	0x08017d30

080149e4 <_free_r>:
 80149e4:	b538      	push	{r3, r4, r5, lr}
 80149e6:	4605      	mov	r5, r0
 80149e8:	2900      	cmp	r1, #0
 80149ea:	d041      	beq.n	8014a70 <_free_r+0x8c>
 80149ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149f0:	1f0c      	subs	r4, r1, #4
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	bfb8      	it	lt
 80149f6:	18e4      	addlt	r4, r4, r3
 80149f8:	f000 f8e8 	bl	8014bcc <__malloc_lock>
 80149fc:	4a1d      	ldr	r2, [pc, #116]	@ (8014a74 <_free_r+0x90>)
 80149fe:	6813      	ldr	r3, [r2, #0]
 8014a00:	b933      	cbnz	r3, 8014a10 <_free_r+0x2c>
 8014a02:	6063      	str	r3, [r4, #4]
 8014a04:	6014      	str	r4, [r2, #0]
 8014a06:	4628      	mov	r0, r5
 8014a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a0c:	f000 b8e4 	b.w	8014bd8 <__malloc_unlock>
 8014a10:	42a3      	cmp	r3, r4
 8014a12:	d908      	bls.n	8014a26 <_free_r+0x42>
 8014a14:	6820      	ldr	r0, [r4, #0]
 8014a16:	1821      	adds	r1, r4, r0
 8014a18:	428b      	cmp	r3, r1
 8014a1a:	bf01      	itttt	eq
 8014a1c:	6819      	ldreq	r1, [r3, #0]
 8014a1e:	685b      	ldreq	r3, [r3, #4]
 8014a20:	1809      	addeq	r1, r1, r0
 8014a22:	6021      	streq	r1, [r4, #0]
 8014a24:	e7ed      	b.n	8014a02 <_free_r+0x1e>
 8014a26:	461a      	mov	r2, r3
 8014a28:	685b      	ldr	r3, [r3, #4]
 8014a2a:	b10b      	cbz	r3, 8014a30 <_free_r+0x4c>
 8014a2c:	42a3      	cmp	r3, r4
 8014a2e:	d9fa      	bls.n	8014a26 <_free_r+0x42>
 8014a30:	6811      	ldr	r1, [r2, #0]
 8014a32:	1850      	adds	r0, r2, r1
 8014a34:	42a0      	cmp	r0, r4
 8014a36:	d10b      	bne.n	8014a50 <_free_r+0x6c>
 8014a38:	6820      	ldr	r0, [r4, #0]
 8014a3a:	4401      	add	r1, r0
 8014a3c:	1850      	adds	r0, r2, r1
 8014a3e:	4283      	cmp	r3, r0
 8014a40:	6011      	str	r1, [r2, #0]
 8014a42:	d1e0      	bne.n	8014a06 <_free_r+0x22>
 8014a44:	6818      	ldr	r0, [r3, #0]
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	6053      	str	r3, [r2, #4]
 8014a4a:	4408      	add	r0, r1
 8014a4c:	6010      	str	r0, [r2, #0]
 8014a4e:	e7da      	b.n	8014a06 <_free_r+0x22>
 8014a50:	d902      	bls.n	8014a58 <_free_r+0x74>
 8014a52:	230c      	movs	r3, #12
 8014a54:	602b      	str	r3, [r5, #0]
 8014a56:	e7d6      	b.n	8014a06 <_free_r+0x22>
 8014a58:	6820      	ldr	r0, [r4, #0]
 8014a5a:	1821      	adds	r1, r4, r0
 8014a5c:	428b      	cmp	r3, r1
 8014a5e:	bf04      	itt	eq
 8014a60:	6819      	ldreq	r1, [r3, #0]
 8014a62:	685b      	ldreq	r3, [r3, #4]
 8014a64:	6063      	str	r3, [r4, #4]
 8014a66:	bf04      	itt	eq
 8014a68:	1809      	addeq	r1, r1, r0
 8014a6a:	6021      	streq	r1, [r4, #0]
 8014a6c:	6054      	str	r4, [r2, #4]
 8014a6e:	e7ca      	b.n	8014a06 <_free_r+0x22>
 8014a70:	bd38      	pop	{r3, r4, r5, pc}
 8014a72:	bf00      	nop
 8014a74:	240758c4 	.word	0x240758c4

08014a78 <malloc>:
 8014a78:	4b02      	ldr	r3, [pc, #8]	@ (8014a84 <malloc+0xc>)
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	6818      	ldr	r0, [r3, #0]
 8014a7e:	f000 b825 	b.w	8014acc <_malloc_r>
 8014a82:	bf00      	nop
 8014a84:	2400004c 	.word	0x2400004c

08014a88 <sbrk_aligned>:
 8014a88:	b570      	push	{r4, r5, r6, lr}
 8014a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8014ac8 <sbrk_aligned+0x40>)
 8014a8c:	460c      	mov	r4, r1
 8014a8e:	6831      	ldr	r1, [r6, #0]
 8014a90:	4605      	mov	r5, r0
 8014a92:	b911      	cbnz	r1, 8014a9a <sbrk_aligned+0x12>
 8014a94:	f001 f81c 	bl	8015ad0 <_sbrk_r>
 8014a98:	6030      	str	r0, [r6, #0]
 8014a9a:	4621      	mov	r1, r4
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	f001 f817 	bl	8015ad0 <_sbrk_r>
 8014aa2:	1c43      	adds	r3, r0, #1
 8014aa4:	d103      	bne.n	8014aae <sbrk_aligned+0x26>
 8014aa6:	f04f 34ff 	mov.w	r4, #4294967295
 8014aaa:	4620      	mov	r0, r4
 8014aac:	bd70      	pop	{r4, r5, r6, pc}
 8014aae:	1cc4      	adds	r4, r0, #3
 8014ab0:	f024 0403 	bic.w	r4, r4, #3
 8014ab4:	42a0      	cmp	r0, r4
 8014ab6:	d0f8      	beq.n	8014aaa <sbrk_aligned+0x22>
 8014ab8:	1a21      	subs	r1, r4, r0
 8014aba:	4628      	mov	r0, r5
 8014abc:	f001 f808 	bl	8015ad0 <_sbrk_r>
 8014ac0:	3001      	adds	r0, #1
 8014ac2:	d1f2      	bne.n	8014aaa <sbrk_aligned+0x22>
 8014ac4:	e7ef      	b.n	8014aa6 <sbrk_aligned+0x1e>
 8014ac6:	bf00      	nop
 8014ac8:	240758c0 	.word	0x240758c0

08014acc <_malloc_r>:
 8014acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ad0:	1ccd      	adds	r5, r1, #3
 8014ad2:	f025 0503 	bic.w	r5, r5, #3
 8014ad6:	3508      	adds	r5, #8
 8014ad8:	2d0c      	cmp	r5, #12
 8014ada:	bf38      	it	cc
 8014adc:	250c      	movcc	r5, #12
 8014ade:	2d00      	cmp	r5, #0
 8014ae0:	4606      	mov	r6, r0
 8014ae2:	db01      	blt.n	8014ae8 <_malloc_r+0x1c>
 8014ae4:	42a9      	cmp	r1, r5
 8014ae6:	d904      	bls.n	8014af2 <_malloc_r+0x26>
 8014ae8:	230c      	movs	r3, #12
 8014aea:	6033      	str	r3, [r6, #0]
 8014aec:	2000      	movs	r0, #0
 8014aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014bc8 <_malloc_r+0xfc>
 8014af6:	f000 f869 	bl	8014bcc <__malloc_lock>
 8014afa:	f8d8 3000 	ldr.w	r3, [r8]
 8014afe:	461c      	mov	r4, r3
 8014b00:	bb44      	cbnz	r4, 8014b54 <_malloc_r+0x88>
 8014b02:	4629      	mov	r1, r5
 8014b04:	4630      	mov	r0, r6
 8014b06:	f7ff ffbf 	bl	8014a88 <sbrk_aligned>
 8014b0a:	1c43      	adds	r3, r0, #1
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	d158      	bne.n	8014bc2 <_malloc_r+0xf6>
 8014b10:	f8d8 4000 	ldr.w	r4, [r8]
 8014b14:	4627      	mov	r7, r4
 8014b16:	2f00      	cmp	r7, #0
 8014b18:	d143      	bne.n	8014ba2 <_malloc_r+0xd6>
 8014b1a:	2c00      	cmp	r4, #0
 8014b1c:	d04b      	beq.n	8014bb6 <_malloc_r+0xea>
 8014b1e:	6823      	ldr	r3, [r4, #0]
 8014b20:	4639      	mov	r1, r7
 8014b22:	4630      	mov	r0, r6
 8014b24:	eb04 0903 	add.w	r9, r4, r3
 8014b28:	f000 ffd2 	bl	8015ad0 <_sbrk_r>
 8014b2c:	4581      	cmp	r9, r0
 8014b2e:	d142      	bne.n	8014bb6 <_malloc_r+0xea>
 8014b30:	6821      	ldr	r1, [r4, #0]
 8014b32:	1a6d      	subs	r5, r5, r1
 8014b34:	4629      	mov	r1, r5
 8014b36:	4630      	mov	r0, r6
 8014b38:	f7ff ffa6 	bl	8014a88 <sbrk_aligned>
 8014b3c:	3001      	adds	r0, #1
 8014b3e:	d03a      	beq.n	8014bb6 <_malloc_r+0xea>
 8014b40:	6823      	ldr	r3, [r4, #0]
 8014b42:	442b      	add	r3, r5
 8014b44:	6023      	str	r3, [r4, #0]
 8014b46:	f8d8 3000 	ldr.w	r3, [r8]
 8014b4a:	685a      	ldr	r2, [r3, #4]
 8014b4c:	bb62      	cbnz	r2, 8014ba8 <_malloc_r+0xdc>
 8014b4e:	f8c8 7000 	str.w	r7, [r8]
 8014b52:	e00f      	b.n	8014b74 <_malloc_r+0xa8>
 8014b54:	6822      	ldr	r2, [r4, #0]
 8014b56:	1b52      	subs	r2, r2, r5
 8014b58:	d420      	bmi.n	8014b9c <_malloc_r+0xd0>
 8014b5a:	2a0b      	cmp	r2, #11
 8014b5c:	d917      	bls.n	8014b8e <_malloc_r+0xc2>
 8014b5e:	1961      	adds	r1, r4, r5
 8014b60:	42a3      	cmp	r3, r4
 8014b62:	6025      	str	r5, [r4, #0]
 8014b64:	bf18      	it	ne
 8014b66:	6059      	strne	r1, [r3, #4]
 8014b68:	6863      	ldr	r3, [r4, #4]
 8014b6a:	bf08      	it	eq
 8014b6c:	f8c8 1000 	streq.w	r1, [r8]
 8014b70:	5162      	str	r2, [r4, r5]
 8014b72:	604b      	str	r3, [r1, #4]
 8014b74:	4630      	mov	r0, r6
 8014b76:	f000 f82f 	bl	8014bd8 <__malloc_unlock>
 8014b7a:	f104 000b 	add.w	r0, r4, #11
 8014b7e:	1d23      	adds	r3, r4, #4
 8014b80:	f020 0007 	bic.w	r0, r0, #7
 8014b84:	1ac2      	subs	r2, r0, r3
 8014b86:	bf1c      	itt	ne
 8014b88:	1a1b      	subne	r3, r3, r0
 8014b8a:	50a3      	strne	r3, [r4, r2]
 8014b8c:	e7af      	b.n	8014aee <_malloc_r+0x22>
 8014b8e:	6862      	ldr	r2, [r4, #4]
 8014b90:	42a3      	cmp	r3, r4
 8014b92:	bf0c      	ite	eq
 8014b94:	f8c8 2000 	streq.w	r2, [r8]
 8014b98:	605a      	strne	r2, [r3, #4]
 8014b9a:	e7eb      	b.n	8014b74 <_malloc_r+0xa8>
 8014b9c:	4623      	mov	r3, r4
 8014b9e:	6864      	ldr	r4, [r4, #4]
 8014ba0:	e7ae      	b.n	8014b00 <_malloc_r+0x34>
 8014ba2:	463c      	mov	r4, r7
 8014ba4:	687f      	ldr	r7, [r7, #4]
 8014ba6:	e7b6      	b.n	8014b16 <_malloc_r+0x4a>
 8014ba8:	461a      	mov	r2, r3
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	42a3      	cmp	r3, r4
 8014bae:	d1fb      	bne.n	8014ba8 <_malloc_r+0xdc>
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	6053      	str	r3, [r2, #4]
 8014bb4:	e7de      	b.n	8014b74 <_malloc_r+0xa8>
 8014bb6:	230c      	movs	r3, #12
 8014bb8:	6033      	str	r3, [r6, #0]
 8014bba:	4630      	mov	r0, r6
 8014bbc:	f000 f80c 	bl	8014bd8 <__malloc_unlock>
 8014bc0:	e794      	b.n	8014aec <_malloc_r+0x20>
 8014bc2:	6005      	str	r5, [r0, #0]
 8014bc4:	e7d6      	b.n	8014b74 <_malloc_r+0xa8>
 8014bc6:	bf00      	nop
 8014bc8:	240758c4 	.word	0x240758c4

08014bcc <__malloc_lock>:
 8014bcc:	4801      	ldr	r0, [pc, #4]	@ (8014bd4 <__malloc_lock+0x8>)
 8014bce:	f7ff b91a 	b.w	8013e06 <__retarget_lock_acquire_recursive>
 8014bd2:	bf00      	nop
 8014bd4:	240758bc 	.word	0x240758bc

08014bd8 <__malloc_unlock>:
 8014bd8:	4801      	ldr	r0, [pc, #4]	@ (8014be0 <__malloc_unlock+0x8>)
 8014bda:	f7ff b915 	b.w	8013e08 <__retarget_lock_release_recursive>
 8014bde:	bf00      	nop
 8014be0:	240758bc 	.word	0x240758bc

08014be4 <_Balloc>:
 8014be4:	b570      	push	{r4, r5, r6, lr}
 8014be6:	69c6      	ldr	r6, [r0, #28]
 8014be8:	4604      	mov	r4, r0
 8014bea:	460d      	mov	r5, r1
 8014bec:	b976      	cbnz	r6, 8014c0c <_Balloc+0x28>
 8014bee:	2010      	movs	r0, #16
 8014bf0:	f7ff ff42 	bl	8014a78 <malloc>
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	61e0      	str	r0, [r4, #28]
 8014bf8:	b920      	cbnz	r0, 8014c04 <_Balloc+0x20>
 8014bfa:	4b18      	ldr	r3, [pc, #96]	@ (8014c5c <_Balloc+0x78>)
 8014bfc:	4818      	ldr	r0, [pc, #96]	@ (8014c60 <_Balloc+0x7c>)
 8014bfe:	216b      	movs	r1, #107	@ 0x6b
 8014c00:	f000 ff76 	bl	8015af0 <__assert_func>
 8014c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c08:	6006      	str	r6, [r0, #0]
 8014c0a:	60c6      	str	r6, [r0, #12]
 8014c0c:	69e6      	ldr	r6, [r4, #28]
 8014c0e:	68f3      	ldr	r3, [r6, #12]
 8014c10:	b183      	cbz	r3, 8014c34 <_Balloc+0x50>
 8014c12:	69e3      	ldr	r3, [r4, #28]
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014c1a:	b9b8      	cbnz	r0, 8014c4c <_Balloc+0x68>
 8014c1c:	2101      	movs	r1, #1
 8014c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8014c22:	1d72      	adds	r2, r6, #5
 8014c24:	0092      	lsls	r2, r2, #2
 8014c26:	4620      	mov	r0, r4
 8014c28:	f000 ff80 	bl	8015b2c <_calloc_r>
 8014c2c:	b160      	cbz	r0, 8014c48 <_Balloc+0x64>
 8014c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014c32:	e00e      	b.n	8014c52 <_Balloc+0x6e>
 8014c34:	2221      	movs	r2, #33	@ 0x21
 8014c36:	2104      	movs	r1, #4
 8014c38:	4620      	mov	r0, r4
 8014c3a:	f000 ff77 	bl	8015b2c <_calloc_r>
 8014c3e:	69e3      	ldr	r3, [r4, #28]
 8014c40:	60f0      	str	r0, [r6, #12]
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d1e4      	bne.n	8014c12 <_Balloc+0x2e>
 8014c48:	2000      	movs	r0, #0
 8014c4a:	bd70      	pop	{r4, r5, r6, pc}
 8014c4c:	6802      	ldr	r2, [r0, #0]
 8014c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014c52:	2300      	movs	r3, #0
 8014c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014c58:	e7f7      	b.n	8014c4a <_Balloc+0x66>
 8014c5a:	bf00      	nop
 8014c5c:	08017d3d 	.word	0x08017d3d
 8014c60:	08017dbd 	.word	0x08017dbd

08014c64 <_Bfree>:
 8014c64:	b570      	push	{r4, r5, r6, lr}
 8014c66:	69c6      	ldr	r6, [r0, #28]
 8014c68:	4605      	mov	r5, r0
 8014c6a:	460c      	mov	r4, r1
 8014c6c:	b976      	cbnz	r6, 8014c8c <_Bfree+0x28>
 8014c6e:	2010      	movs	r0, #16
 8014c70:	f7ff ff02 	bl	8014a78 <malloc>
 8014c74:	4602      	mov	r2, r0
 8014c76:	61e8      	str	r0, [r5, #28]
 8014c78:	b920      	cbnz	r0, 8014c84 <_Bfree+0x20>
 8014c7a:	4b09      	ldr	r3, [pc, #36]	@ (8014ca0 <_Bfree+0x3c>)
 8014c7c:	4809      	ldr	r0, [pc, #36]	@ (8014ca4 <_Bfree+0x40>)
 8014c7e:	218f      	movs	r1, #143	@ 0x8f
 8014c80:	f000 ff36 	bl	8015af0 <__assert_func>
 8014c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c88:	6006      	str	r6, [r0, #0]
 8014c8a:	60c6      	str	r6, [r0, #12]
 8014c8c:	b13c      	cbz	r4, 8014c9e <_Bfree+0x3a>
 8014c8e:	69eb      	ldr	r3, [r5, #28]
 8014c90:	6862      	ldr	r2, [r4, #4]
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c98:	6021      	str	r1, [r4, #0]
 8014c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014c9e:	bd70      	pop	{r4, r5, r6, pc}
 8014ca0:	08017d3d 	.word	0x08017d3d
 8014ca4:	08017dbd 	.word	0x08017dbd

08014ca8 <__multadd>:
 8014ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cac:	690d      	ldr	r5, [r1, #16]
 8014cae:	4607      	mov	r7, r0
 8014cb0:	460c      	mov	r4, r1
 8014cb2:	461e      	mov	r6, r3
 8014cb4:	f101 0c14 	add.w	ip, r1, #20
 8014cb8:	2000      	movs	r0, #0
 8014cba:	f8dc 3000 	ldr.w	r3, [ip]
 8014cbe:	b299      	uxth	r1, r3
 8014cc0:	fb02 6101 	mla	r1, r2, r1, r6
 8014cc4:	0c1e      	lsrs	r6, r3, #16
 8014cc6:	0c0b      	lsrs	r3, r1, #16
 8014cc8:	fb02 3306 	mla	r3, r2, r6, r3
 8014ccc:	b289      	uxth	r1, r1
 8014cce:	3001      	adds	r0, #1
 8014cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014cd4:	4285      	cmp	r5, r0
 8014cd6:	f84c 1b04 	str.w	r1, [ip], #4
 8014cda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014cde:	dcec      	bgt.n	8014cba <__multadd+0x12>
 8014ce0:	b30e      	cbz	r6, 8014d26 <__multadd+0x7e>
 8014ce2:	68a3      	ldr	r3, [r4, #8]
 8014ce4:	42ab      	cmp	r3, r5
 8014ce6:	dc19      	bgt.n	8014d1c <__multadd+0x74>
 8014ce8:	6861      	ldr	r1, [r4, #4]
 8014cea:	4638      	mov	r0, r7
 8014cec:	3101      	adds	r1, #1
 8014cee:	f7ff ff79 	bl	8014be4 <_Balloc>
 8014cf2:	4680      	mov	r8, r0
 8014cf4:	b928      	cbnz	r0, 8014d02 <__multadd+0x5a>
 8014cf6:	4602      	mov	r2, r0
 8014cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8014d2c <__multadd+0x84>)
 8014cfa:	480d      	ldr	r0, [pc, #52]	@ (8014d30 <__multadd+0x88>)
 8014cfc:	21ba      	movs	r1, #186	@ 0xba
 8014cfe:	f000 fef7 	bl	8015af0 <__assert_func>
 8014d02:	6922      	ldr	r2, [r4, #16]
 8014d04:	3202      	adds	r2, #2
 8014d06:	f104 010c 	add.w	r1, r4, #12
 8014d0a:	0092      	lsls	r2, r2, #2
 8014d0c:	300c      	adds	r0, #12
 8014d0e:	f7ff f87c 	bl	8013e0a <memcpy>
 8014d12:	4621      	mov	r1, r4
 8014d14:	4638      	mov	r0, r7
 8014d16:	f7ff ffa5 	bl	8014c64 <_Bfree>
 8014d1a:	4644      	mov	r4, r8
 8014d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014d20:	3501      	adds	r5, #1
 8014d22:	615e      	str	r6, [r3, #20]
 8014d24:	6125      	str	r5, [r4, #16]
 8014d26:	4620      	mov	r0, r4
 8014d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d2c:	08017dac 	.word	0x08017dac
 8014d30:	08017dbd 	.word	0x08017dbd

08014d34 <__hi0bits>:
 8014d34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014d38:	4603      	mov	r3, r0
 8014d3a:	bf36      	itet	cc
 8014d3c:	0403      	lslcc	r3, r0, #16
 8014d3e:	2000      	movcs	r0, #0
 8014d40:	2010      	movcc	r0, #16
 8014d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014d46:	bf3c      	itt	cc
 8014d48:	021b      	lslcc	r3, r3, #8
 8014d4a:	3008      	addcc	r0, #8
 8014d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014d50:	bf3c      	itt	cc
 8014d52:	011b      	lslcc	r3, r3, #4
 8014d54:	3004      	addcc	r0, #4
 8014d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014d5a:	bf3c      	itt	cc
 8014d5c:	009b      	lslcc	r3, r3, #2
 8014d5e:	3002      	addcc	r0, #2
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	db05      	blt.n	8014d70 <__hi0bits+0x3c>
 8014d64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014d68:	f100 0001 	add.w	r0, r0, #1
 8014d6c:	bf08      	it	eq
 8014d6e:	2020      	moveq	r0, #32
 8014d70:	4770      	bx	lr

08014d72 <__lo0bits>:
 8014d72:	6803      	ldr	r3, [r0, #0]
 8014d74:	4602      	mov	r2, r0
 8014d76:	f013 0007 	ands.w	r0, r3, #7
 8014d7a:	d00b      	beq.n	8014d94 <__lo0bits+0x22>
 8014d7c:	07d9      	lsls	r1, r3, #31
 8014d7e:	d421      	bmi.n	8014dc4 <__lo0bits+0x52>
 8014d80:	0798      	lsls	r0, r3, #30
 8014d82:	bf49      	itett	mi
 8014d84:	085b      	lsrmi	r3, r3, #1
 8014d86:	089b      	lsrpl	r3, r3, #2
 8014d88:	2001      	movmi	r0, #1
 8014d8a:	6013      	strmi	r3, [r2, #0]
 8014d8c:	bf5c      	itt	pl
 8014d8e:	6013      	strpl	r3, [r2, #0]
 8014d90:	2002      	movpl	r0, #2
 8014d92:	4770      	bx	lr
 8014d94:	b299      	uxth	r1, r3
 8014d96:	b909      	cbnz	r1, 8014d9c <__lo0bits+0x2a>
 8014d98:	0c1b      	lsrs	r3, r3, #16
 8014d9a:	2010      	movs	r0, #16
 8014d9c:	b2d9      	uxtb	r1, r3
 8014d9e:	b909      	cbnz	r1, 8014da4 <__lo0bits+0x32>
 8014da0:	3008      	adds	r0, #8
 8014da2:	0a1b      	lsrs	r3, r3, #8
 8014da4:	0719      	lsls	r1, r3, #28
 8014da6:	bf04      	itt	eq
 8014da8:	091b      	lsreq	r3, r3, #4
 8014daa:	3004      	addeq	r0, #4
 8014dac:	0799      	lsls	r1, r3, #30
 8014dae:	bf04      	itt	eq
 8014db0:	089b      	lsreq	r3, r3, #2
 8014db2:	3002      	addeq	r0, #2
 8014db4:	07d9      	lsls	r1, r3, #31
 8014db6:	d403      	bmi.n	8014dc0 <__lo0bits+0x4e>
 8014db8:	085b      	lsrs	r3, r3, #1
 8014dba:	f100 0001 	add.w	r0, r0, #1
 8014dbe:	d003      	beq.n	8014dc8 <__lo0bits+0x56>
 8014dc0:	6013      	str	r3, [r2, #0]
 8014dc2:	4770      	bx	lr
 8014dc4:	2000      	movs	r0, #0
 8014dc6:	4770      	bx	lr
 8014dc8:	2020      	movs	r0, #32
 8014dca:	4770      	bx	lr

08014dcc <__i2b>:
 8014dcc:	b510      	push	{r4, lr}
 8014dce:	460c      	mov	r4, r1
 8014dd0:	2101      	movs	r1, #1
 8014dd2:	f7ff ff07 	bl	8014be4 <_Balloc>
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	b928      	cbnz	r0, 8014de6 <__i2b+0x1a>
 8014dda:	4b05      	ldr	r3, [pc, #20]	@ (8014df0 <__i2b+0x24>)
 8014ddc:	4805      	ldr	r0, [pc, #20]	@ (8014df4 <__i2b+0x28>)
 8014dde:	f240 1145 	movw	r1, #325	@ 0x145
 8014de2:	f000 fe85 	bl	8015af0 <__assert_func>
 8014de6:	2301      	movs	r3, #1
 8014de8:	6144      	str	r4, [r0, #20]
 8014dea:	6103      	str	r3, [r0, #16]
 8014dec:	bd10      	pop	{r4, pc}
 8014dee:	bf00      	nop
 8014df0:	08017dac 	.word	0x08017dac
 8014df4:	08017dbd 	.word	0x08017dbd

08014df8 <__multiply>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	4614      	mov	r4, r2
 8014dfe:	690a      	ldr	r2, [r1, #16]
 8014e00:	6923      	ldr	r3, [r4, #16]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	bfa8      	it	ge
 8014e06:	4623      	movge	r3, r4
 8014e08:	460f      	mov	r7, r1
 8014e0a:	bfa4      	itt	ge
 8014e0c:	460c      	movge	r4, r1
 8014e0e:	461f      	movge	r7, r3
 8014e10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014e14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014e18:	68a3      	ldr	r3, [r4, #8]
 8014e1a:	6861      	ldr	r1, [r4, #4]
 8014e1c:	eb0a 0609 	add.w	r6, sl, r9
 8014e20:	42b3      	cmp	r3, r6
 8014e22:	b085      	sub	sp, #20
 8014e24:	bfb8      	it	lt
 8014e26:	3101      	addlt	r1, #1
 8014e28:	f7ff fedc 	bl	8014be4 <_Balloc>
 8014e2c:	b930      	cbnz	r0, 8014e3c <__multiply+0x44>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	4b44      	ldr	r3, [pc, #272]	@ (8014f44 <__multiply+0x14c>)
 8014e32:	4845      	ldr	r0, [pc, #276]	@ (8014f48 <__multiply+0x150>)
 8014e34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014e38:	f000 fe5a 	bl	8015af0 <__assert_func>
 8014e3c:	f100 0514 	add.w	r5, r0, #20
 8014e40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014e44:	462b      	mov	r3, r5
 8014e46:	2200      	movs	r2, #0
 8014e48:	4543      	cmp	r3, r8
 8014e4a:	d321      	bcc.n	8014e90 <__multiply+0x98>
 8014e4c:	f107 0114 	add.w	r1, r7, #20
 8014e50:	f104 0214 	add.w	r2, r4, #20
 8014e54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014e58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014e5c:	9302      	str	r3, [sp, #8]
 8014e5e:	1b13      	subs	r3, r2, r4
 8014e60:	3b15      	subs	r3, #21
 8014e62:	f023 0303 	bic.w	r3, r3, #3
 8014e66:	3304      	adds	r3, #4
 8014e68:	f104 0715 	add.w	r7, r4, #21
 8014e6c:	42ba      	cmp	r2, r7
 8014e6e:	bf38      	it	cc
 8014e70:	2304      	movcc	r3, #4
 8014e72:	9301      	str	r3, [sp, #4]
 8014e74:	9b02      	ldr	r3, [sp, #8]
 8014e76:	9103      	str	r1, [sp, #12]
 8014e78:	428b      	cmp	r3, r1
 8014e7a:	d80c      	bhi.n	8014e96 <__multiply+0x9e>
 8014e7c:	2e00      	cmp	r6, #0
 8014e7e:	dd03      	ble.n	8014e88 <__multiply+0x90>
 8014e80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d05b      	beq.n	8014f40 <__multiply+0x148>
 8014e88:	6106      	str	r6, [r0, #16]
 8014e8a:	b005      	add	sp, #20
 8014e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e90:	f843 2b04 	str.w	r2, [r3], #4
 8014e94:	e7d8      	b.n	8014e48 <__multiply+0x50>
 8014e96:	f8b1 a000 	ldrh.w	sl, [r1]
 8014e9a:	f1ba 0f00 	cmp.w	sl, #0
 8014e9e:	d024      	beq.n	8014eea <__multiply+0xf2>
 8014ea0:	f104 0e14 	add.w	lr, r4, #20
 8014ea4:	46a9      	mov	r9, r5
 8014ea6:	f04f 0c00 	mov.w	ip, #0
 8014eaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014eae:	f8d9 3000 	ldr.w	r3, [r9]
 8014eb2:	fa1f fb87 	uxth.w	fp, r7
 8014eb6:	b29b      	uxth	r3, r3
 8014eb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8014ebc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014ec0:	f8d9 7000 	ldr.w	r7, [r9]
 8014ec4:	4463      	add	r3, ip
 8014ec6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014eca:	fb0a c70b 	mla	r7, sl, fp, ip
 8014ece:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014ed8:	4572      	cmp	r2, lr
 8014eda:	f849 3b04 	str.w	r3, [r9], #4
 8014ede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014ee2:	d8e2      	bhi.n	8014eaa <__multiply+0xb2>
 8014ee4:	9b01      	ldr	r3, [sp, #4]
 8014ee6:	f845 c003 	str.w	ip, [r5, r3]
 8014eea:	9b03      	ldr	r3, [sp, #12]
 8014eec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014ef0:	3104      	adds	r1, #4
 8014ef2:	f1b9 0f00 	cmp.w	r9, #0
 8014ef6:	d021      	beq.n	8014f3c <__multiply+0x144>
 8014ef8:	682b      	ldr	r3, [r5, #0]
 8014efa:	f104 0c14 	add.w	ip, r4, #20
 8014efe:	46ae      	mov	lr, r5
 8014f00:	f04f 0a00 	mov.w	sl, #0
 8014f04:	f8bc b000 	ldrh.w	fp, [ip]
 8014f08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014f0c:	fb09 770b 	mla	r7, r9, fp, r7
 8014f10:	4457      	add	r7, sl
 8014f12:	b29b      	uxth	r3, r3
 8014f14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014f18:	f84e 3b04 	str.w	r3, [lr], #4
 8014f1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014f20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014f24:	f8be 3000 	ldrh.w	r3, [lr]
 8014f28:	fb09 330a 	mla	r3, r9, sl, r3
 8014f2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014f30:	4562      	cmp	r2, ip
 8014f32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014f36:	d8e5      	bhi.n	8014f04 <__multiply+0x10c>
 8014f38:	9f01      	ldr	r7, [sp, #4]
 8014f3a:	51eb      	str	r3, [r5, r7]
 8014f3c:	3504      	adds	r5, #4
 8014f3e:	e799      	b.n	8014e74 <__multiply+0x7c>
 8014f40:	3e01      	subs	r6, #1
 8014f42:	e79b      	b.n	8014e7c <__multiply+0x84>
 8014f44:	08017dac 	.word	0x08017dac
 8014f48:	08017dbd 	.word	0x08017dbd

08014f4c <__pow5mult>:
 8014f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f50:	4615      	mov	r5, r2
 8014f52:	f012 0203 	ands.w	r2, r2, #3
 8014f56:	4607      	mov	r7, r0
 8014f58:	460e      	mov	r6, r1
 8014f5a:	d007      	beq.n	8014f6c <__pow5mult+0x20>
 8014f5c:	4c25      	ldr	r4, [pc, #148]	@ (8014ff4 <__pow5mult+0xa8>)
 8014f5e:	3a01      	subs	r2, #1
 8014f60:	2300      	movs	r3, #0
 8014f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014f66:	f7ff fe9f 	bl	8014ca8 <__multadd>
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	10ad      	asrs	r5, r5, #2
 8014f6e:	d03d      	beq.n	8014fec <__pow5mult+0xa0>
 8014f70:	69fc      	ldr	r4, [r7, #28]
 8014f72:	b97c      	cbnz	r4, 8014f94 <__pow5mult+0x48>
 8014f74:	2010      	movs	r0, #16
 8014f76:	f7ff fd7f 	bl	8014a78 <malloc>
 8014f7a:	4602      	mov	r2, r0
 8014f7c:	61f8      	str	r0, [r7, #28]
 8014f7e:	b928      	cbnz	r0, 8014f8c <__pow5mult+0x40>
 8014f80:	4b1d      	ldr	r3, [pc, #116]	@ (8014ff8 <__pow5mult+0xac>)
 8014f82:	481e      	ldr	r0, [pc, #120]	@ (8014ffc <__pow5mult+0xb0>)
 8014f84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014f88:	f000 fdb2 	bl	8015af0 <__assert_func>
 8014f8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014f90:	6004      	str	r4, [r0, #0]
 8014f92:	60c4      	str	r4, [r0, #12]
 8014f94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014f98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014f9c:	b94c      	cbnz	r4, 8014fb2 <__pow5mult+0x66>
 8014f9e:	f240 2171 	movw	r1, #625	@ 0x271
 8014fa2:	4638      	mov	r0, r7
 8014fa4:	f7ff ff12 	bl	8014dcc <__i2b>
 8014fa8:	2300      	movs	r3, #0
 8014faa:	f8c8 0008 	str.w	r0, [r8, #8]
 8014fae:	4604      	mov	r4, r0
 8014fb0:	6003      	str	r3, [r0, #0]
 8014fb2:	f04f 0900 	mov.w	r9, #0
 8014fb6:	07eb      	lsls	r3, r5, #31
 8014fb8:	d50a      	bpl.n	8014fd0 <__pow5mult+0x84>
 8014fba:	4631      	mov	r1, r6
 8014fbc:	4622      	mov	r2, r4
 8014fbe:	4638      	mov	r0, r7
 8014fc0:	f7ff ff1a 	bl	8014df8 <__multiply>
 8014fc4:	4631      	mov	r1, r6
 8014fc6:	4680      	mov	r8, r0
 8014fc8:	4638      	mov	r0, r7
 8014fca:	f7ff fe4b 	bl	8014c64 <_Bfree>
 8014fce:	4646      	mov	r6, r8
 8014fd0:	106d      	asrs	r5, r5, #1
 8014fd2:	d00b      	beq.n	8014fec <__pow5mult+0xa0>
 8014fd4:	6820      	ldr	r0, [r4, #0]
 8014fd6:	b938      	cbnz	r0, 8014fe8 <__pow5mult+0x9c>
 8014fd8:	4622      	mov	r2, r4
 8014fda:	4621      	mov	r1, r4
 8014fdc:	4638      	mov	r0, r7
 8014fde:	f7ff ff0b 	bl	8014df8 <__multiply>
 8014fe2:	6020      	str	r0, [r4, #0]
 8014fe4:	f8c0 9000 	str.w	r9, [r0]
 8014fe8:	4604      	mov	r4, r0
 8014fea:	e7e4      	b.n	8014fb6 <__pow5mult+0x6a>
 8014fec:	4630      	mov	r0, r6
 8014fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ff2:	bf00      	nop
 8014ff4:	08017e18 	.word	0x08017e18
 8014ff8:	08017d3d 	.word	0x08017d3d
 8014ffc:	08017dbd 	.word	0x08017dbd

08015000 <__lshift>:
 8015000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015004:	460c      	mov	r4, r1
 8015006:	6849      	ldr	r1, [r1, #4]
 8015008:	6923      	ldr	r3, [r4, #16]
 801500a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801500e:	68a3      	ldr	r3, [r4, #8]
 8015010:	4607      	mov	r7, r0
 8015012:	4691      	mov	r9, r2
 8015014:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015018:	f108 0601 	add.w	r6, r8, #1
 801501c:	42b3      	cmp	r3, r6
 801501e:	db0b      	blt.n	8015038 <__lshift+0x38>
 8015020:	4638      	mov	r0, r7
 8015022:	f7ff fddf 	bl	8014be4 <_Balloc>
 8015026:	4605      	mov	r5, r0
 8015028:	b948      	cbnz	r0, 801503e <__lshift+0x3e>
 801502a:	4602      	mov	r2, r0
 801502c:	4b28      	ldr	r3, [pc, #160]	@ (80150d0 <__lshift+0xd0>)
 801502e:	4829      	ldr	r0, [pc, #164]	@ (80150d4 <__lshift+0xd4>)
 8015030:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015034:	f000 fd5c 	bl	8015af0 <__assert_func>
 8015038:	3101      	adds	r1, #1
 801503a:	005b      	lsls	r3, r3, #1
 801503c:	e7ee      	b.n	801501c <__lshift+0x1c>
 801503e:	2300      	movs	r3, #0
 8015040:	f100 0114 	add.w	r1, r0, #20
 8015044:	f100 0210 	add.w	r2, r0, #16
 8015048:	4618      	mov	r0, r3
 801504a:	4553      	cmp	r3, sl
 801504c:	db33      	blt.n	80150b6 <__lshift+0xb6>
 801504e:	6920      	ldr	r0, [r4, #16]
 8015050:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015054:	f104 0314 	add.w	r3, r4, #20
 8015058:	f019 091f 	ands.w	r9, r9, #31
 801505c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015060:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015064:	d02b      	beq.n	80150be <__lshift+0xbe>
 8015066:	f1c9 0e20 	rsb	lr, r9, #32
 801506a:	468a      	mov	sl, r1
 801506c:	2200      	movs	r2, #0
 801506e:	6818      	ldr	r0, [r3, #0]
 8015070:	fa00 f009 	lsl.w	r0, r0, r9
 8015074:	4310      	orrs	r0, r2
 8015076:	f84a 0b04 	str.w	r0, [sl], #4
 801507a:	f853 2b04 	ldr.w	r2, [r3], #4
 801507e:	459c      	cmp	ip, r3
 8015080:	fa22 f20e 	lsr.w	r2, r2, lr
 8015084:	d8f3      	bhi.n	801506e <__lshift+0x6e>
 8015086:	ebac 0304 	sub.w	r3, ip, r4
 801508a:	3b15      	subs	r3, #21
 801508c:	f023 0303 	bic.w	r3, r3, #3
 8015090:	3304      	adds	r3, #4
 8015092:	f104 0015 	add.w	r0, r4, #21
 8015096:	4584      	cmp	ip, r0
 8015098:	bf38      	it	cc
 801509a:	2304      	movcc	r3, #4
 801509c:	50ca      	str	r2, [r1, r3]
 801509e:	b10a      	cbz	r2, 80150a4 <__lshift+0xa4>
 80150a0:	f108 0602 	add.w	r6, r8, #2
 80150a4:	3e01      	subs	r6, #1
 80150a6:	4638      	mov	r0, r7
 80150a8:	612e      	str	r6, [r5, #16]
 80150aa:	4621      	mov	r1, r4
 80150ac:	f7ff fdda 	bl	8014c64 <_Bfree>
 80150b0:	4628      	mov	r0, r5
 80150b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80150ba:	3301      	adds	r3, #1
 80150bc:	e7c5      	b.n	801504a <__lshift+0x4a>
 80150be:	3904      	subs	r1, #4
 80150c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80150c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80150c8:	459c      	cmp	ip, r3
 80150ca:	d8f9      	bhi.n	80150c0 <__lshift+0xc0>
 80150cc:	e7ea      	b.n	80150a4 <__lshift+0xa4>
 80150ce:	bf00      	nop
 80150d0:	08017dac 	.word	0x08017dac
 80150d4:	08017dbd 	.word	0x08017dbd

080150d8 <__mcmp>:
 80150d8:	690a      	ldr	r2, [r1, #16]
 80150da:	4603      	mov	r3, r0
 80150dc:	6900      	ldr	r0, [r0, #16]
 80150de:	1a80      	subs	r0, r0, r2
 80150e0:	b530      	push	{r4, r5, lr}
 80150e2:	d10e      	bne.n	8015102 <__mcmp+0x2a>
 80150e4:	3314      	adds	r3, #20
 80150e6:	3114      	adds	r1, #20
 80150e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80150ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80150f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80150f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80150f8:	4295      	cmp	r5, r2
 80150fa:	d003      	beq.n	8015104 <__mcmp+0x2c>
 80150fc:	d205      	bcs.n	801510a <__mcmp+0x32>
 80150fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015102:	bd30      	pop	{r4, r5, pc}
 8015104:	42a3      	cmp	r3, r4
 8015106:	d3f3      	bcc.n	80150f0 <__mcmp+0x18>
 8015108:	e7fb      	b.n	8015102 <__mcmp+0x2a>
 801510a:	2001      	movs	r0, #1
 801510c:	e7f9      	b.n	8015102 <__mcmp+0x2a>
	...

08015110 <__mdiff>:
 8015110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015114:	4689      	mov	r9, r1
 8015116:	4606      	mov	r6, r0
 8015118:	4611      	mov	r1, r2
 801511a:	4648      	mov	r0, r9
 801511c:	4614      	mov	r4, r2
 801511e:	f7ff ffdb 	bl	80150d8 <__mcmp>
 8015122:	1e05      	subs	r5, r0, #0
 8015124:	d112      	bne.n	801514c <__mdiff+0x3c>
 8015126:	4629      	mov	r1, r5
 8015128:	4630      	mov	r0, r6
 801512a:	f7ff fd5b 	bl	8014be4 <_Balloc>
 801512e:	4602      	mov	r2, r0
 8015130:	b928      	cbnz	r0, 801513e <__mdiff+0x2e>
 8015132:	4b3f      	ldr	r3, [pc, #252]	@ (8015230 <__mdiff+0x120>)
 8015134:	f240 2137 	movw	r1, #567	@ 0x237
 8015138:	483e      	ldr	r0, [pc, #248]	@ (8015234 <__mdiff+0x124>)
 801513a:	f000 fcd9 	bl	8015af0 <__assert_func>
 801513e:	2301      	movs	r3, #1
 8015140:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015144:	4610      	mov	r0, r2
 8015146:	b003      	add	sp, #12
 8015148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801514c:	bfbc      	itt	lt
 801514e:	464b      	movlt	r3, r9
 8015150:	46a1      	movlt	r9, r4
 8015152:	4630      	mov	r0, r6
 8015154:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015158:	bfba      	itte	lt
 801515a:	461c      	movlt	r4, r3
 801515c:	2501      	movlt	r5, #1
 801515e:	2500      	movge	r5, #0
 8015160:	f7ff fd40 	bl	8014be4 <_Balloc>
 8015164:	4602      	mov	r2, r0
 8015166:	b918      	cbnz	r0, 8015170 <__mdiff+0x60>
 8015168:	4b31      	ldr	r3, [pc, #196]	@ (8015230 <__mdiff+0x120>)
 801516a:	f240 2145 	movw	r1, #581	@ 0x245
 801516e:	e7e3      	b.n	8015138 <__mdiff+0x28>
 8015170:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015174:	6926      	ldr	r6, [r4, #16]
 8015176:	60c5      	str	r5, [r0, #12]
 8015178:	f109 0310 	add.w	r3, r9, #16
 801517c:	f109 0514 	add.w	r5, r9, #20
 8015180:	f104 0e14 	add.w	lr, r4, #20
 8015184:	f100 0b14 	add.w	fp, r0, #20
 8015188:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801518c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015190:	9301      	str	r3, [sp, #4]
 8015192:	46d9      	mov	r9, fp
 8015194:	f04f 0c00 	mov.w	ip, #0
 8015198:	9b01      	ldr	r3, [sp, #4]
 801519a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801519e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80151a2:	9301      	str	r3, [sp, #4]
 80151a4:	fa1f f38a 	uxth.w	r3, sl
 80151a8:	4619      	mov	r1, r3
 80151aa:	b283      	uxth	r3, r0
 80151ac:	1acb      	subs	r3, r1, r3
 80151ae:	0c00      	lsrs	r0, r0, #16
 80151b0:	4463      	add	r3, ip
 80151b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80151b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80151c0:	4576      	cmp	r6, lr
 80151c2:	f849 3b04 	str.w	r3, [r9], #4
 80151c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80151ca:	d8e5      	bhi.n	8015198 <__mdiff+0x88>
 80151cc:	1b33      	subs	r3, r6, r4
 80151ce:	3b15      	subs	r3, #21
 80151d0:	f023 0303 	bic.w	r3, r3, #3
 80151d4:	3415      	adds	r4, #21
 80151d6:	3304      	adds	r3, #4
 80151d8:	42a6      	cmp	r6, r4
 80151da:	bf38      	it	cc
 80151dc:	2304      	movcc	r3, #4
 80151de:	441d      	add	r5, r3
 80151e0:	445b      	add	r3, fp
 80151e2:	461e      	mov	r6, r3
 80151e4:	462c      	mov	r4, r5
 80151e6:	4544      	cmp	r4, r8
 80151e8:	d30e      	bcc.n	8015208 <__mdiff+0xf8>
 80151ea:	f108 0103 	add.w	r1, r8, #3
 80151ee:	1b49      	subs	r1, r1, r5
 80151f0:	f021 0103 	bic.w	r1, r1, #3
 80151f4:	3d03      	subs	r5, #3
 80151f6:	45a8      	cmp	r8, r5
 80151f8:	bf38      	it	cc
 80151fa:	2100      	movcc	r1, #0
 80151fc:	440b      	add	r3, r1
 80151fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015202:	b191      	cbz	r1, 801522a <__mdiff+0x11a>
 8015204:	6117      	str	r7, [r2, #16]
 8015206:	e79d      	b.n	8015144 <__mdiff+0x34>
 8015208:	f854 1b04 	ldr.w	r1, [r4], #4
 801520c:	46e6      	mov	lr, ip
 801520e:	0c08      	lsrs	r0, r1, #16
 8015210:	fa1c fc81 	uxtah	ip, ip, r1
 8015214:	4471      	add	r1, lr
 8015216:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801521a:	b289      	uxth	r1, r1
 801521c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015220:	f846 1b04 	str.w	r1, [r6], #4
 8015224:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015228:	e7dd      	b.n	80151e6 <__mdiff+0xd6>
 801522a:	3f01      	subs	r7, #1
 801522c:	e7e7      	b.n	80151fe <__mdiff+0xee>
 801522e:	bf00      	nop
 8015230:	08017dac 	.word	0x08017dac
 8015234:	08017dbd 	.word	0x08017dbd

08015238 <__d2b>:
 8015238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801523c:	460f      	mov	r7, r1
 801523e:	2101      	movs	r1, #1
 8015240:	ec59 8b10 	vmov	r8, r9, d0
 8015244:	4616      	mov	r6, r2
 8015246:	f7ff fccd 	bl	8014be4 <_Balloc>
 801524a:	4604      	mov	r4, r0
 801524c:	b930      	cbnz	r0, 801525c <__d2b+0x24>
 801524e:	4602      	mov	r2, r0
 8015250:	4b23      	ldr	r3, [pc, #140]	@ (80152e0 <__d2b+0xa8>)
 8015252:	4824      	ldr	r0, [pc, #144]	@ (80152e4 <__d2b+0xac>)
 8015254:	f240 310f 	movw	r1, #783	@ 0x30f
 8015258:	f000 fc4a 	bl	8015af0 <__assert_func>
 801525c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015264:	b10d      	cbz	r5, 801526a <__d2b+0x32>
 8015266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801526a:	9301      	str	r3, [sp, #4]
 801526c:	f1b8 0300 	subs.w	r3, r8, #0
 8015270:	d023      	beq.n	80152ba <__d2b+0x82>
 8015272:	4668      	mov	r0, sp
 8015274:	9300      	str	r3, [sp, #0]
 8015276:	f7ff fd7c 	bl	8014d72 <__lo0bits>
 801527a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801527e:	b1d0      	cbz	r0, 80152b6 <__d2b+0x7e>
 8015280:	f1c0 0320 	rsb	r3, r0, #32
 8015284:	fa02 f303 	lsl.w	r3, r2, r3
 8015288:	430b      	orrs	r3, r1
 801528a:	40c2      	lsrs	r2, r0
 801528c:	6163      	str	r3, [r4, #20]
 801528e:	9201      	str	r2, [sp, #4]
 8015290:	9b01      	ldr	r3, [sp, #4]
 8015292:	61a3      	str	r3, [r4, #24]
 8015294:	2b00      	cmp	r3, #0
 8015296:	bf0c      	ite	eq
 8015298:	2201      	moveq	r2, #1
 801529a:	2202      	movne	r2, #2
 801529c:	6122      	str	r2, [r4, #16]
 801529e:	b1a5      	cbz	r5, 80152ca <__d2b+0x92>
 80152a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80152a4:	4405      	add	r5, r0
 80152a6:	603d      	str	r5, [r7, #0]
 80152a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80152ac:	6030      	str	r0, [r6, #0]
 80152ae:	4620      	mov	r0, r4
 80152b0:	b003      	add	sp, #12
 80152b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152b6:	6161      	str	r1, [r4, #20]
 80152b8:	e7ea      	b.n	8015290 <__d2b+0x58>
 80152ba:	a801      	add	r0, sp, #4
 80152bc:	f7ff fd59 	bl	8014d72 <__lo0bits>
 80152c0:	9b01      	ldr	r3, [sp, #4]
 80152c2:	6163      	str	r3, [r4, #20]
 80152c4:	3020      	adds	r0, #32
 80152c6:	2201      	movs	r2, #1
 80152c8:	e7e8      	b.n	801529c <__d2b+0x64>
 80152ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80152ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80152d2:	6038      	str	r0, [r7, #0]
 80152d4:	6918      	ldr	r0, [r3, #16]
 80152d6:	f7ff fd2d 	bl	8014d34 <__hi0bits>
 80152da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80152de:	e7e5      	b.n	80152ac <__d2b+0x74>
 80152e0:	08017dac 	.word	0x08017dac
 80152e4:	08017dbd 	.word	0x08017dbd

080152e8 <__ssputs_r>:
 80152e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152ec:	688e      	ldr	r6, [r1, #8]
 80152ee:	461f      	mov	r7, r3
 80152f0:	42be      	cmp	r6, r7
 80152f2:	680b      	ldr	r3, [r1, #0]
 80152f4:	4682      	mov	sl, r0
 80152f6:	460c      	mov	r4, r1
 80152f8:	4690      	mov	r8, r2
 80152fa:	d82d      	bhi.n	8015358 <__ssputs_r+0x70>
 80152fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015300:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015304:	d026      	beq.n	8015354 <__ssputs_r+0x6c>
 8015306:	6965      	ldr	r5, [r4, #20]
 8015308:	6909      	ldr	r1, [r1, #16]
 801530a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801530e:	eba3 0901 	sub.w	r9, r3, r1
 8015312:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015316:	1c7b      	adds	r3, r7, #1
 8015318:	444b      	add	r3, r9
 801531a:	106d      	asrs	r5, r5, #1
 801531c:	429d      	cmp	r5, r3
 801531e:	bf38      	it	cc
 8015320:	461d      	movcc	r5, r3
 8015322:	0553      	lsls	r3, r2, #21
 8015324:	d527      	bpl.n	8015376 <__ssputs_r+0x8e>
 8015326:	4629      	mov	r1, r5
 8015328:	f7ff fbd0 	bl	8014acc <_malloc_r>
 801532c:	4606      	mov	r6, r0
 801532e:	b360      	cbz	r0, 801538a <__ssputs_r+0xa2>
 8015330:	6921      	ldr	r1, [r4, #16]
 8015332:	464a      	mov	r2, r9
 8015334:	f7fe fd69 	bl	8013e0a <memcpy>
 8015338:	89a3      	ldrh	r3, [r4, #12]
 801533a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801533e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015342:	81a3      	strh	r3, [r4, #12]
 8015344:	6126      	str	r6, [r4, #16]
 8015346:	6165      	str	r5, [r4, #20]
 8015348:	444e      	add	r6, r9
 801534a:	eba5 0509 	sub.w	r5, r5, r9
 801534e:	6026      	str	r6, [r4, #0]
 8015350:	60a5      	str	r5, [r4, #8]
 8015352:	463e      	mov	r6, r7
 8015354:	42be      	cmp	r6, r7
 8015356:	d900      	bls.n	801535a <__ssputs_r+0x72>
 8015358:	463e      	mov	r6, r7
 801535a:	6820      	ldr	r0, [r4, #0]
 801535c:	4632      	mov	r2, r6
 801535e:	4641      	mov	r1, r8
 8015360:	f000 fb9c 	bl	8015a9c <memmove>
 8015364:	68a3      	ldr	r3, [r4, #8]
 8015366:	1b9b      	subs	r3, r3, r6
 8015368:	60a3      	str	r3, [r4, #8]
 801536a:	6823      	ldr	r3, [r4, #0]
 801536c:	4433      	add	r3, r6
 801536e:	6023      	str	r3, [r4, #0]
 8015370:	2000      	movs	r0, #0
 8015372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015376:	462a      	mov	r2, r5
 8015378:	f000 fbfe 	bl	8015b78 <_realloc_r>
 801537c:	4606      	mov	r6, r0
 801537e:	2800      	cmp	r0, #0
 8015380:	d1e0      	bne.n	8015344 <__ssputs_r+0x5c>
 8015382:	6921      	ldr	r1, [r4, #16]
 8015384:	4650      	mov	r0, sl
 8015386:	f7ff fb2d 	bl	80149e4 <_free_r>
 801538a:	230c      	movs	r3, #12
 801538c:	f8ca 3000 	str.w	r3, [sl]
 8015390:	89a3      	ldrh	r3, [r4, #12]
 8015392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015396:	81a3      	strh	r3, [r4, #12]
 8015398:	f04f 30ff 	mov.w	r0, #4294967295
 801539c:	e7e9      	b.n	8015372 <__ssputs_r+0x8a>
	...

080153a0 <_svfiprintf_r>:
 80153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a4:	4698      	mov	r8, r3
 80153a6:	898b      	ldrh	r3, [r1, #12]
 80153a8:	061b      	lsls	r3, r3, #24
 80153aa:	b09d      	sub	sp, #116	@ 0x74
 80153ac:	4607      	mov	r7, r0
 80153ae:	460d      	mov	r5, r1
 80153b0:	4614      	mov	r4, r2
 80153b2:	d510      	bpl.n	80153d6 <_svfiprintf_r+0x36>
 80153b4:	690b      	ldr	r3, [r1, #16]
 80153b6:	b973      	cbnz	r3, 80153d6 <_svfiprintf_r+0x36>
 80153b8:	2140      	movs	r1, #64	@ 0x40
 80153ba:	f7ff fb87 	bl	8014acc <_malloc_r>
 80153be:	6028      	str	r0, [r5, #0]
 80153c0:	6128      	str	r0, [r5, #16]
 80153c2:	b930      	cbnz	r0, 80153d2 <_svfiprintf_r+0x32>
 80153c4:	230c      	movs	r3, #12
 80153c6:	603b      	str	r3, [r7, #0]
 80153c8:	f04f 30ff 	mov.w	r0, #4294967295
 80153cc:	b01d      	add	sp, #116	@ 0x74
 80153ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d2:	2340      	movs	r3, #64	@ 0x40
 80153d4:	616b      	str	r3, [r5, #20]
 80153d6:	2300      	movs	r3, #0
 80153d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80153da:	2320      	movs	r3, #32
 80153dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80153e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80153e4:	2330      	movs	r3, #48	@ 0x30
 80153e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015584 <_svfiprintf_r+0x1e4>
 80153ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80153ee:	f04f 0901 	mov.w	r9, #1
 80153f2:	4623      	mov	r3, r4
 80153f4:	469a      	mov	sl, r3
 80153f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80153fa:	b10a      	cbz	r2, 8015400 <_svfiprintf_r+0x60>
 80153fc:	2a25      	cmp	r2, #37	@ 0x25
 80153fe:	d1f9      	bne.n	80153f4 <_svfiprintf_r+0x54>
 8015400:	ebba 0b04 	subs.w	fp, sl, r4
 8015404:	d00b      	beq.n	801541e <_svfiprintf_r+0x7e>
 8015406:	465b      	mov	r3, fp
 8015408:	4622      	mov	r2, r4
 801540a:	4629      	mov	r1, r5
 801540c:	4638      	mov	r0, r7
 801540e:	f7ff ff6b 	bl	80152e8 <__ssputs_r>
 8015412:	3001      	adds	r0, #1
 8015414:	f000 80a7 	beq.w	8015566 <_svfiprintf_r+0x1c6>
 8015418:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801541a:	445a      	add	r2, fp
 801541c:	9209      	str	r2, [sp, #36]	@ 0x24
 801541e:	f89a 3000 	ldrb.w	r3, [sl]
 8015422:	2b00      	cmp	r3, #0
 8015424:	f000 809f 	beq.w	8015566 <_svfiprintf_r+0x1c6>
 8015428:	2300      	movs	r3, #0
 801542a:	f04f 32ff 	mov.w	r2, #4294967295
 801542e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015432:	f10a 0a01 	add.w	sl, sl, #1
 8015436:	9304      	str	r3, [sp, #16]
 8015438:	9307      	str	r3, [sp, #28]
 801543a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801543e:	931a      	str	r3, [sp, #104]	@ 0x68
 8015440:	4654      	mov	r4, sl
 8015442:	2205      	movs	r2, #5
 8015444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015448:	484e      	ldr	r0, [pc, #312]	@ (8015584 <_svfiprintf_r+0x1e4>)
 801544a:	f7ea ff49 	bl	80002e0 <memchr>
 801544e:	9a04      	ldr	r2, [sp, #16]
 8015450:	b9d8      	cbnz	r0, 801548a <_svfiprintf_r+0xea>
 8015452:	06d0      	lsls	r0, r2, #27
 8015454:	bf44      	itt	mi
 8015456:	2320      	movmi	r3, #32
 8015458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801545c:	0711      	lsls	r1, r2, #28
 801545e:	bf44      	itt	mi
 8015460:	232b      	movmi	r3, #43	@ 0x2b
 8015462:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015466:	f89a 3000 	ldrb.w	r3, [sl]
 801546a:	2b2a      	cmp	r3, #42	@ 0x2a
 801546c:	d015      	beq.n	801549a <_svfiprintf_r+0xfa>
 801546e:	9a07      	ldr	r2, [sp, #28]
 8015470:	4654      	mov	r4, sl
 8015472:	2000      	movs	r0, #0
 8015474:	f04f 0c0a 	mov.w	ip, #10
 8015478:	4621      	mov	r1, r4
 801547a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801547e:	3b30      	subs	r3, #48	@ 0x30
 8015480:	2b09      	cmp	r3, #9
 8015482:	d94b      	bls.n	801551c <_svfiprintf_r+0x17c>
 8015484:	b1b0      	cbz	r0, 80154b4 <_svfiprintf_r+0x114>
 8015486:	9207      	str	r2, [sp, #28]
 8015488:	e014      	b.n	80154b4 <_svfiprintf_r+0x114>
 801548a:	eba0 0308 	sub.w	r3, r0, r8
 801548e:	fa09 f303 	lsl.w	r3, r9, r3
 8015492:	4313      	orrs	r3, r2
 8015494:	9304      	str	r3, [sp, #16]
 8015496:	46a2      	mov	sl, r4
 8015498:	e7d2      	b.n	8015440 <_svfiprintf_r+0xa0>
 801549a:	9b03      	ldr	r3, [sp, #12]
 801549c:	1d19      	adds	r1, r3, #4
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	9103      	str	r1, [sp, #12]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	bfbb      	ittet	lt
 80154a6:	425b      	neglt	r3, r3
 80154a8:	f042 0202 	orrlt.w	r2, r2, #2
 80154ac:	9307      	strge	r3, [sp, #28]
 80154ae:	9307      	strlt	r3, [sp, #28]
 80154b0:	bfb8      	it	lt
 80154b2:	9204      	strlt	r2, [sp, #16]
 80154b4:	7823      	ldrb	r3, [r4, #0]
 80154b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80154b8:	d10a      	bne.n	80154d0 <_svfiprintf_r+0x130>
 80154ba:	7863      	ldrb	r3, [r4, #1]
 80154bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80154be:	d132      	bne.n	8015526 <_svfiprintf_r+0x186>
 80154c0:	9b03      	ldr	r3, [sp, #12]
 80154c2:	1d1a      	adds	r2, r3, #4
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	9203      	str	r2, [sp, #12]
 80154c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80154cc:	3402      	adds	r4, #2
 80154ce:	9305      	str	r3, [sp, #20]
 80154d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015594 <_svfiprintf_r+0x1f4>
 80154d4:	7821      	ldrb	r1, [r4, #0]
 80154d6:	2203      	movs	r2, #3
 80154d8:	4650      	mov	r0, sl
 80154da:	f7ea ff01 	bl	80002e0 <memchr>
 80154de:	b138      	cbz	r0, 80154f0 <_svfiprintf_r+0x150>
 80154e0:	9b04      	ldr	r3, [sp, #16]
 80154e2:	eba0 000a 	sub.w	r0, r0, sl
 80154e6:	2240      	movs	r2, #64	@ 0x40
 80154e8:	4082      	lsls	r2, r0
 80154ea:	4313      	orrs	r3, r2
 80154ec:	3401      	adds	r4, #1
 80154ee:	9304      	str	r3, [sp, #16]
 80154f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154f4:	4824      	ldr	r0, [pc, #144]	@ (8015588 <_svfiprintf_r+0x1e8>)
 80154f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80154fa:	2206      	movs	r2, #6
 80154fc:	f7ea fef0 	bl	80002e0 <memchr>
 8015500:	2800      	cmp	r0, #0
 8015502:	d036      	beq.n	8015572 <_svfiprintf_r+0x1d2>
 8015504:	4b21      	ldr	r3, [pc, #132]	@ (801558c <_svfiprintf_r+0x1ec>)
 8015506:	bb1b      	cbnz	r3, 8015550 <_svfiprintf_r+0x1b0>
 8015508:	9b03      	ldr	r3, [sp, #12]
 801550a:	3307      	adds	r3, #7
 801550c:	f023 0307 	bic.w	r3, r3, #7
 8015510:	3308      	adds	r3, #8
 8015512:	9303      	str	r3, [sp, #12]
 8015514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015516:	4433      	add	r3, r6
 8015518:	9309      	str	r3, [sp, #36]	@ 0x24
 801551a:	e76a      	b.n	80153f2 <_svfiprintf_r+0x52>
 801551c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015520:	460c      	mov	r4, r1
 8015522:	2001      	movs	r0, #1
 8015524:	e7a8      	b.n	8015478 <_svfiprintf_r+0xd8>
 8015526:	2300      	movs	r3, #0
 8015528:	3401      	adds	r4, #1
 801552a:	9305      	str	r3, [sp, #20]
 801552c:	4619      	mov	r1, r3
 801552e:	f04f 0c0a 	mov.w	ip, #10
 8015532:	4620      	mov	r0, r4
 8015534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015538:	3a30      	subs	r2, #48	@ 0x30
 801553a:	2a09      	cmp	r2, #9
 801553c:	d903      	bls.n	8015546 <_svfiprintf_r+0x1a6>
 801553e:	2b00      	cmp	r3, #0
 8015540:	d0c6      	beq.n	80154d0 <_svfiprintf_r+0x130>
 8015542:	9105      	str	r1, [sp, #20]
 8015544:	e7c4      	b.n	80154d0 <_svfiprintf_r+0x130>
 8015546:	fb0c 2101 	mla	r1, ip, r1, r2
 801554a:	4604      	mov	r4, r0
 801554c:	2301      	movs	r3, #1
 801554e:	e7f0      	b.n	8015532 <_svfiprintf_r+0x192>
 8015550:	ab03      	add	r3, sp, #12
 8015552:	9300      	str	r3, [sp, #0]
 8015554:	462a      	mov	r2, r5
 8015556:	4b0e      	ldr	r3, [pc, #56]	@ (8015590 <_svfiprintf_r+0x1f0>)
 8015558:	a904      	add	r1, sp, #16
 801555a:	4638      	mov	r0, r7
 801555c:	f7fd fea0 	bl	80132a0 <_printf_float>
 8015560:	1c42      	adds	r2, r0, #1
 8015562:	4606      	mov	r6, r0
 8015564:	d1d6      	bne.n	8015514 <_svfiprintf_r+0x174>
 8015566:	89ab      	ldrh	r3, [r5, #12]
 8015568:	065b      	lsls	r3, r3, #25
 801556a:	f53f af2d 	bmi.w	80153c8 <_svfiprintf_r+0x28>
 801556e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015570:	e72c      	b.n	80153cc <_svfiprintf_r+0x2c>
 8015572:	ab03      	add	r3, sp, #12
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	462a      	mov	r2, r5
 8015578:	4b05      	ldr	r3, [pc, #20]	@ (8015590 <_svfiprintf_r+0x1f0>)
 801557a:	a904      	add	r1, sp, #16
 801557c:	4638      	mov	r0, r7
 801557e:	f7fe f917 	bl	80137b0 <_printf_i>
 8015582:	e7ed      	b.n	8015560 <_svfiprintf_r+0x1c0>
 8015584:	08017f18 	.word	0x08017f18
 8015588:	08017f22 	.word	0x08017f22
 801558c:	080132a1 	.word	0x080132a1
 8015590:	080152e9 	.word	0x080152e9
 8015594:	08017f1e 	.word	0x08017f1e

08015598 <__sfputc_r>:
 8015598:	6893      	ldr	r3, [r2, #8]
 801559a:	3b01      	subs	r3, #1
 801559c:	2b00      	cmp	r3, #0
 801559e:	b410      	push	{r4}
 80155a0:	6093      	str	r3, [r2, #8]
 80155a2:	da08      	bge.n	80155b6 <__sfputc_r+0x1e>
 80155a4:	6994      	ldr	r4, [r2, #24]
 80155a6:	42a3      	cmp	r3, r4
 80155a8:	db01      	blt.n	80155ae <__sfputc_r+0x16>
 80155aa:	290a      	cmp	r1, #10
 80155ac:	d103      	bne.n	80155b6 <__sfputc_r+0x1e>
 80155ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155b2:	f000 b9df 	b.w	8015974 <__swbuf_r>
 80155b6:	6813      	ldr	r3, [r2, #0]
 80155b8:	1c58      	adds	r0, r3, #1
 80155ba:	6010      	str	r0, [r2, #0]
 80155bc:	7019      	strb	r1, [r3, #0]
 80155be:	4608      	mov	r0, r1
 80155c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80155c4:	4770      	bx	lr

080155c6 <__sfputs_r>:
 80155c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c8:	4606      	mov	r6, r0
 80155ca:	460f      	mov	r7, r1
 80155cc:	4614      	mov	r4, r2
 80155ce:	18d5      	adds	r5, r2, r3
 80155d0:	42ac      	cmp	r4, r5
 80155d2:	d101      	bne.n	80155d8 <__sfputs_r+0x12>
 80155d4:	2000      	movs	r0, #0
 80155d6:	e007      	b.n	80155e8 <__sfputs_r+0x22>
 80155d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155dc:	463a      	mov	r2, r7
 80155de:	4630      	mov	r0, r6
 80155e0:	f7ff ffda 	bl	8015598 <__sfputc_r>
 80155e4:	1c43      	adds	r3, r0, #1
 80155e6:	d1f3      	bne.n	80155d0 <__sfputs_r+0xa>
 80155e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080155ec <_vfiprintf_r>:
 80155ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155f0:	460d      	mov	r5, r1
 80155f2:	b09d      	sub	sp, #116	@ 0x74
 80155f4:	4614      	mov	r4, r2
 80155f6:	4698      	mov	r8, r3
 80155f8:	4606      	mov	r6, r0
 80155fa:	b118      	cbz	r0, 8015604 <_vfiprintf_r+0x18>
 80155fc:	6a03      	ldr	r3, [r0, #32]
 80155fe:	b90b      	cbnz	r3, 8015604 <_vfiprintf_r+0x18>
 8015600:	f7fe fa82 	bl	8013b08 <__sinit>
 8015604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015606:	07d9      	lsls	r1, r3, #31
 8015608:	d405      	bmi.n	8015616 <_vfiprintf_r+0x2a>
 801560a:	89ab      	ldrh	r3, [r5, #12]
 801560c:	059a      	lsls	r2, r3, #22
 801560e:	d402      	bmi.n	8015616 <_vfiprintf_r+0x2a>
 8015610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015612:	f7fe fbf8 	bl	8013e06 <__retarget_lock_acquire_recursive>
 8015616:	89ab      	ldrh	r3, [r5, #12]
 8015618:	071b      	lsls	r3, r3, #28
 801561a:	d501      	bpl.n	8015620 <_vfiprintf_r+0x34>
 801561c:	692b      	ldr	r3, [r5, #16]
 801561e:	b99b      	cbnz	r3, 8015648 <_vfiprintf_r+0x5c>
 8015620:	4629      	mov	r1, r5
 8015622:	4630      	mov	r0, r6
 8015624:	f000 f9e4 	bl	80159f0 <__swsetup_r>
 8015628:	b170      	cbz	r0, 8015648 <_vfiprintf_r+0x5c>
 801562a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801562c:	07dc      	lsls	r4, r3, #31
 801562e:	d504      	bpl.n	801563a <_vfiprintf_r+0x4e>
 8015630:	f04f 30ff 	mov.w	r0, #4294967295
 8015634:	b01d      	add	sp, #116	@ 0x74
 8015636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801563a:	89ab      	ldrh	r3, [r5, #12]
 801563c:	0598      	lsls	r0, r3, #22
 801563e:	d4f7      	bmi.n	8015630 <_vfiprintf_r+0x44>
 8015640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015642:	f7fe fbe1 	bl	8013e08 <__retarget_lock_release_recursive>
 8015646:	e7f3      	b.n	8015630 <_vfiprintf_r+0x44>
 8015648:	2300      	movs	r3, #0
 801564a:	9309      	str	r3, [sp, #36]	@ 0x24
 801564c:	2320      	movs	r3, #32
 801564e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015652:	f8cd 800c 	str.w	r8, [sp, #12]
 8015656:	2330      	movs	r3, #48	@ 0x30
 8015658:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015808 <_vfiprintf_r+0x21c>
 801565c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015660:	f04f 0901 	mov.w	r9, #1
 8015664:	4623      	mov	r3, r4
 8015666:	469a      	mov	sl, r3
 8015668:	f813 2b01 	ldrb.w	r2, [r3], #1
 801566c:	b10a      	cbz	r2, 8015672 <_vfiprintf_r+0x86>
 801566e:	2a25      	cmp	r2, #37	@ 0x25
 8015670:	d1f9      	bne.n	8015666 <_vfiprintf_r+0x7a>
 8015672:	ebba 0b04 	subs.w	fp, sl, r4
 8015676:	d00b      	beq.n	8015690 <_vfiprintf_r+0xa4>
 8015678:	465b      	mov	r3, fp
 801567a:	4622      	mov	r2, r4
 801567c:	4629      	mov	r1, r5
 801567e:	4630      	mov	r0, r6
 8015680:	f7ff ffa1 	bl	80155c6 <__sfputs_r>
 8015684:	3001      	adds	r0, #1
 8015686:	f000 80a7 	beq.w	80157d8 <_vfiprintf_r+0x1ec>
 801568a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801568c:	445a      	add	r2, fp
 801568e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015690:	f89a 3000 	ldrb.w	r3, [sl]
 8015694:	2b00      	cmp	r3, #0
 8015696:	f000 809f 	beq.w	80157d8 <_vfiprintf_r+0x1ec>
 801569a:	2300      	movs	r3, #0
 801569c:	f04f 32ff 	mov.w	r2, #4294967295
 80156a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80156a4:	f10a 0a01 	add.w	sl, sl, #1
 80156a8:	9304      	str	r3, [sp, #16]
 80156aa:	9307      	str	r3, [sp, #28]
 80156ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80156b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80156b2:	4654      	mov	r4, sl
 80156b4:	2205      	movs	r2, #5
 80156b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156ba:	4853      	ldr	r0, [pc, #332]	@ (8015808 <_vfiprintf_r+0x21c>)
 80156bc:	f7ea fe10 	bl	80002e0 <memchr>
 80156c0:	9a04      	ldr	r2, [sp, #16]
 80156c2:	b9d8      	cbnz	r0, 80156fc <_vfiprintf_r+0x110>
 80156c4:	06d1      	lsls	r1, r2, #27
 80156c6:	bf44      	itt	mi
 80156c8:	2320      	movmi	r3, #32
 80156ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80156ce:	0713      	lsls	r3, r2, #28
 80156d0:	bf44      	itt	mi
 80156d2:	232b      	movmi	r3, #43	@ 0x2b
 80156d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80156d8:	f89a 3000 	ldrb.w	r3, [sl]
 80156dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80156de:	d015      	beq.n	801570c <_vfiprintf_r+0x120>
 80156e0:	9a07      	ldr	r2, [sp, #28]
 80156e2:	4654      	mov	r4, sl
 80156e4:	2000      	movs	r0, #0
 80156e6:	f04f 0c0a 	mov.w	ip, #10
 80156ea:	4621      	mov	r1, r4
 80156ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156f0:	3b30      	subs	r3, #48	@ 0x30
 80156f2:	2b09      	cmp	r3, #9
 80156f4:	d94b      	bls.n	801578e <_vfiprintf_r+0x1a2>
 80156f6:	b1b0      	cbz	r0, 8015726 <_vfiprintf_r+0x13a>
 80156f8:	9207      	str	r2, [sp, #28]
 80156fa:	e014      	b.n	8015726 <_vfiprintf_r+0x13a>
 80156fc:	eba0 0308 	sub.w	r3, r0, r8
 8015700:	fa09 f303 	lsl.w	r3, r9, r3
 8015704:	4313      	orrs	r3, r2
 8015706:	9304      	str	r3, [sp, #16]
 8015708:	46a2      	mov	sl, r4
 801570a:	e7d2      	b.n	80156b2 <_vfiprintf_r+0xc6>
 801570c:	9b03      	ldr	r3, [sp, #12]
 801570e:	1d19      	adds	r1, r3, #4
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	9103      	str	r1, [sp, #12]
 8015714:	2b00      	cmp	r3, #0
 8015716:	bfbb      	ittet	lt
 8015718:	425b      	neglt	r3, r3
 801571a:	f042 0202 	orrlt.w	r2, r2, #2
 801571e:	9307      	strge	r3, [sp, #28]
 8015720:	9307      	strlt	r3, [sp, #28]
 8015722:	bfb8      	it	lt
 8015724:	9204      	strlt	r2, [sp, #16]
 8015726:	7823      	ldrb	r3, [r4, #0]
 8015728:	2b2e      	cmp	r3, #46	@ 0x2e
 801572a:	d10a      	bne.n	8015742 <_vfiprintf_r+0x156>
 801572c:	7863      	ldrb	r3, [r4, #1]
 801572e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015730:	d132      	bne.n	8015798 <_vfiprintf_r+0x1ac>
 8015732:	9b03      	ldr	r3, [sp, #12]
 8015734:	1d1a      	adds	r2, r3, #4
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	9203      	str	r2, [sp, #12]
 801573a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801573e:	3402      	adds	r4, #2
 8015740:	9305      	str	r3, [sp, #20]
 8015742:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015818 <_vfiprintf_r+0x22c>
 8015746:	7821      	ldrb	r1, [r4, #0]
 8015748:	2203      	movs	r2, #3
 801574a:	4650      	mov	r0, sl
 801574c:	f7ea fdc8 	bl	80002e0 <memchr>
 8015750:	b138      	cbz	r0, 8015762 <_vfiprintf_r+0x176>
 8015752:	9b04      	ldr	r3, [sp, #16]
 8015754:	eba0 000a 	sub.w	r0, r0, sl
 8015758:	2240      	movs	r2, #64	@ 0x40
 801575a:	4082      	lsls	r2, r0
 801575c:	4313      	orrs	r3, r2
 801575e:	3401      	adds	r4, #1
 8015760:	9304      	str	r3, [sp, #16]
 8015762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015766:	4829      	ldr	r0, [pc, #164]	@ (801580c <_vfiprintf_r+0x220>)
 8015768:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801576c:	2206      	movs	r2, #6
 801576e:	f7ea fdb7 	bl	80002e0 <memchr>
 8015772:	2800      	cmp	r0, #0
 8015774:	d03f      	beq.n	80157f6 <_vfiprintf_r+0x20a>
 8015776:	4b26      	ldr	r3, [pc, #152]	@ (8015810 <_vfiprintf_r+0x224>)
 8015778:	bb1b      	cbnz	r3, 80157c2 <_vfiprintf_r+0x1d6>
 801577a:	9b03      	ldr	r3, [sp, #12]
 801577c:	3307      	adds	r3, #7
 801577e:	f023 0307 	bic.w	r3, r3, #7
 8015782:	3308      	adds	r3, #8
 8015784:	9303      	str	r3, [sp, #12]
 8015786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015788:	443b      	add	r3, r7
 801578a:	9309      	str	r3, [sp, #36]	@ 0x24
 801578c:	e76a      	b.n	8015664 <_vfiprintf_r+0x78>
 801578e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015792:	460c      	mov	r4, r1
 8015794:	2001      	movs	r0, #1
 8015796:	e7a8      	b.n	80156ea <_vfiprintf_r+0xfe>
 8015798:	2300      	movs	r3, #0
 801579a:	3401      	adds	r4, #1
 801579c:	9305      	str	r3, [sp, #20]
 801579e:	4619      	mov	r1, r3
 80157a0:	f04f 0c0a 	mov.w	ip, #10
 80157a4:	4620      	mov	r0, r4
 80157a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80157aa:	3a30      	subs	r2, #48	@ 0x30
 80157ac:	2a09      	cmp	r2, #9
 80157ae:	d903      	bls.n	80157b8 <_vfiprintf_r+0x1cc>
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d0c6      	beq.n	8015742 <_vfiprintf_r+0x156>
 80157b4:	9105      	str	r1, [sp, #20]
 80157b6:	e7c4      	b.n	8015742 <_vfiprintf_r+0x156>
 80157b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80157bc:	4604      	mov	r4, r0
 80157be:	2301      	movs	r3, #1
 80157c0:	e7f0      	b.n	80157a4 <_vfiprintf_r+0x1b8>
 80157c2:	ab03      	add	r3, sp, #12
 80157c4:	9300      	str	r3, [sp, #0]
 80157c6:	462a      	mov	r2, r5
 80157c8:	4b12      	ldr	r3, [pc, #72]	@ (8015814 <_vfiprintf_r+0x228>)
 80157ca:	a904      	add	r1, sp, #16
 80157cc:	4630      	mov	r0, r6
 80157ce:	f7fd fd67 	bl	80132a0 <_printf_float>
 80157d2:	4607      	mov	r7, r0
 80157d4:	1c78      	adds	r0, r7, #1
 80157d6:	d1d6      	bne.n	8015786 <_vfiprintf_r+0x19a>
 80157d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80157da:	07d9      	lsls	r1, r3, #31
 80157dc:	d405      	bmi.n	80157ea <_vfiprintf_r+0x1fe>
 80157de:	89ab      	ldrh	r3, [r5, #12]
 80157e0:	059a      	lsls	r2, r3, #22
 80157e2:	d402      	bmi.n	80157ea <_vfiprintf_r+0x1fe>
 80157e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80157e6:	f7fe fb0f 	bl	8013e08 <__retarget_lock_release_recursive>
 80157ea:	89ab      	ldrh	r3, [r5, #12]
 80157ec:	065b      	lsls	r3, r3, #25
 80157ee:	f53f af1f 	bmi.w	8015630 <_vfiprintf_r+0x44>
 80157f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80157f4:	e71e      	b.n	8015634 <_vfiprintf_r+0x48>
 80157f6:	ab03      	add	r3, sp, #12
 80157f8:	9300      	str	r3, [sp, #0]
 80157fa:	462a      	mov	r2, r5
 80157fc:	4b05      	ldr	r3, [pc, #20]	@ (8015814 <_vfiprintf_r+0x228>)
 80157fe:	a904      	add	r1, sp, #16
 8015800:	4630      	mov	r0, r6
 8015802:	f7fd ffd5 	bl	80137b0 <_printf_i>
 8015806:	e7e4      	b.n	80157d2 <_vfiprintf_r+0x1e6>
 8015808:	08017f18 	.word	0x08017f18
 801580c:	08017f22 	.word	0x08017f22
 8015810:	080132a1 	.word	0x080132a1
 8015814:	080155c7 	.word	0x080155c7
 8015818:	08017f1e 	.word	0x08017f1e

0801581c <__sflush_r>:
 801581c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015824:	0716      	lsls	r6, r2, #28
 8015826:	4605      	mov	r5, r0
 8015828:	460c      	mov	r4, r1
 801582a:	d454      	bmi.n	80158d6 <__sflush_r+0xba>
 801582c:	684b      	ldr	r3, [r1, #4]
 801582e:	2b00      	cmp	r3, #0
 8015830:	dc02      	bgt.n	8015838 <__sflush_r+0x1c>
 8015832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015834:	2b00      	cmp	r3, #0
 8015836:	dd48      	ble.n	80158ca <__sflush_r+0xae>
 8015838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801583a:	2e00      	cmp	r6, #0
 801583c:	d045      	beq.n	80158ca <__sflush_r+0xae>
 801583e:	2300      	movs	r3, #0
 8015840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015844:	682f      	ldr	r7, [r5, #0]
 8015846:	6a21      	ldr	r1, [r4, #32]
 8015848:	602b      	str	r3, [r5, #0]
 801584a:	d030      	beq.n	80158ae <__sflush_r+0x92>
 801584c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801584e:	89a3      	ldrh	r3, [r4, #12]
 8015850:	0759      	lsls	r1, r3, #29
 8015852:	d505      	bpl.n	8015860 <__sflush_r+0x44>
 8015854:	6863      	ldr	r3, [r4, #4]
 8015856:	1ad2      	subs	r2, r2, r3
 8015858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801585a:	b10b      	cbz	r3, 8015860 <__sflush_r+0x44>
 801585c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801585e:	1ad2      	subs	r2, r2, r3
 8015860:	2300      	movs	r3, #0
 8015862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015864:	6a21      	ldr	r1, [r4, #32]
 8015866:	4628      	mov	r0, r5
 8015868:	47b0      	blx	r6
 801586a:	1c43      	adds	r3, r0, #1
 801586c:	89a3      	ldrh	r3, [r4, #12]
 801586e:	d106      	bne.n	801587e <__sflush_r+0x62>
 8015870:	6829      	ldr	r1, [r5, #0]
 8015872:	291d      	cmp	r1, #29
 8015874:	d82b      	bhi.n	80158ce <__sflush_r+0xb2>
 8015876:	4a2a      	ldr	r2, [pc, #168]	@ (8015920 <__sflush_r+0x104>)
 8015878:	410a      	asrs	r2, r1
 801587a:	07d6      	lsls	r6, r2, #31
 801587c:	d427      	bmi.n	80158ce <__sflush_r+0xb2>
 801587e:	2200      	movs	r2, #0
 8015880:	6062      	str	r2, [r4, #4]
 8015882:	04d9      	lsls	r1, r3, #19
 8015884:	6922      	ldr	r2, [r4, #16]
 8015886:	6022      	str	r2, [r4, #0]
 8015888:	d504      	bpl.n	8015894 <__sflush_r+0x78>
 801588a:	1c42      	adds	r2, r0, #1
 801588c:	d101      	bne.n	8015892 <__sflush_r+0x76>
 801588e:	682b      	ldr	r3, [r5, #0]
 8015890:	b903      	cbnz	r3, 8015894 <__sflush_r+0x78>
 8015892:	6560      	str	r0, [r4, #84]	@ 0x54
 8015894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015896:	602f      	str	r7, [r5, #0]
 8015898:	b1b9      	cbz	r1, 80158ca <__sflush_r+0xae>
 801589a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801589e:	4299      	cmp	r1, r3
 80158a0:	d002      	beq.n	80158a8 <__sflush_r+0x8c>
 80158a2:	4628      	mov	r0, r5
 80158a4:	f7ff f89e 	bl	80149e4 <_free_r>
 80158a8:	2300      	movs	r3, #0
 80158aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80158ac:	e00d      	b.n	80158ca <__sflush_r+0xae>
 80158ae:	2301      	movs	r3, #1
 80158b0:	4628      	mov	r0, r5
 80158b2:	47b0      	blx	r6
 80158b4:	4602      	mov	r2, r0
 80158b6:	1c50      	adds	r0, r2, #1
 80158b8:	d1c9      	bne.n	801584e <__sflush_r+0x32>
 80158ba:	682b      	ldr	r3, [r5, #0]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d0c6      	beq.n	801584e <__sflush_r+0x32>
 80158c0:	2b1d      	cmp	r3, #29
 80158c2:	d001      	beq.n	80158c8 <__sflush_r+0xac>
 80158c4:	2b16      	cmp	r3, #22
 80158c6:	d11e      	bne.n	8015906 <__sflush_r+0xea>
 80158c8:	602f      	str	r7, [r5, #0]
 80158ca:	2000      	movs	r0, #0
 80158cc:	e022      	b.n	8015914 <__sflush_r+0xf8>
 80158ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80158d2:	b21b      	sxth	r3, r3
 80158d4:	e01b      	b.n	801590e <__sflush_r+0xf2>
 80158d6:	690f      	ldr	r7, [r1, #16]
 80158d8:	2f00      	cmp	r7, #0
 80158da:	d0f6      	beq.n	80158ca <__sflush_r+0xae>
 80158dc:	0793      	lsls	r3, r2, #30
 80158de:	680e      	ldr	r6, [r1, #0]
 80158e0:	bf08      	it	eq
 80158e2:	694b      	ldreq	r3, [r1, #20]
 80158e4:	600f      	str	r7, [r1, #0]
 80158e6:	bf18      	it	ne
 80158e8:	2300      	movne	r3, #0
 80158ea:	eba6 0807 	sub.w	r8, r6, r7
 80158ee:	608b      	str	r3, [r1, #8]
 80158f0:	f1b8 0f00 	cmp.w	r8, #0
 80158f4:	dde9      	ble.n	80158ca <__sflush_r+0xae>
 80158f6:	6a21      	ldr	r1, [r4, #32]
 80158f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80158fa:	4643      	mov	r3, r8
 80158fc:	463a      	mov	r2, r7
 80158fe:	4628      	mov	r0, r5
 8015900:	47b0      	blx	r6
 8015902:	2800      	cmp	r0, #0
 8015904:	dc08      	bgt.n	8015918 <__sflush_r+0xfc>
 8015906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801590a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801590e:	81a3      	strh	r3, [r4, #12]
 8015910:	f04f 30ff 	mov.w	r0, #4294967295
 8015914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015918:	4407      	add	r7, r0
 801591a:	eba8 0800 	sub.w	r8, r8, r0
 801591e:	e7e7      	b.n	80158f0 <__sflush_r+0xd4>
 8015920:	dfbffffe 	.word	0xdfbffffe

08015924 <_fflush_r>:
 8015924:	b538      	push	{r3, r4, r5, lr}
 8015926:	690b      	ldr	r3, [r1, #16]
 8015928:	4605      	mov	r5, r0
 801592a:	460c      	mov	r4, r1
 801592c:	b913      	cbnz	r3, 8015934 <_fflush_r+0x10>
 801592e:	2500      	movs	r5, #0
 8015930:	4628      	mov	r0, r5
 8015932:	bd38      	pop	{r3, r4, r5, pc}
 8015934:	b118      	cbz	r0, 801593e <_fflush_r+0x1a>
 8015936:	6a03      	ldr	r3, [r0, #32]
 8015938:	b90b      	cbnz	r3, 801593e <_fflush_r+0x1a>
 801593a:	f7fe f8e5 	bl	8013b08 <__sinit>
 801593e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d0f3      	beq.n	801592e <_fflush_r+0xa>
 8015946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015948:	07d0      	lsls	r0, r2, #31
 801594a:	d404      	bmi.n	8015956 <_fflush_r+0x32>
 801594c:	0599      	lsls	r1, r3, #22
 801594e:	d402      	bmi.n	8015956 <_fflush_r+0x32>
 8015950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015952:	f7fe fa58 	bl	8013e06 <__retarget_lock_acquire_recursive>
 8015956:	4628      	mov	r0, r5
 8015958:	4621      	mov	r1, r4
 801595a:	f7ff ff5f 	bl	801581c <__sflush_r>
 801595e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015960:	07da      	lsls	r2, r3, #31
 8015962:	4605      	mov	r5, r0
 8015964:	d4e4      	bmi.n	8015930 <_fflush_r+0xc>
 8015966:	89a3      	ldrh	r3, [r4, #12]
 8015968:	059b      	lsls	r3, r3, #22
 801596a:	d4e1      	bmi.n	8015930 <_fflush_r+0xc>
 801596c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801596e:	f7fe fa4b 	bl	8013e08 <__retarget_lock_release_recursive>
 8015972:	e7dd      	b.n	8015930 <_fflush_r+0xc>

08015974 <__swbuf_r>:
 8015974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015976:	460e      	mov	r6, r1
 8015978:	4614      	mov	r4, r2
 801597a:	4605      	mov	r5, r0
 801597c:	b118      	cbz	r0, 8015986 <__swbuf_r+0x12>
 801597e:	6a03      	ldr	r3, [r0, #32]
 8015980:	b90b      	cbnz	r3, 8015986 <__swbuf_r+0x12>
 8015982:	f7fe f8c1 	bl	8013b08 <__sinit>
 8015986:	69a3      	ldr	r3, [r4, #24]
 8015988:	60a3      	str	r3, [r4, #8]
 801598a:	89a3      	ldrh	r3, [r4, #12]
 801598c:	071a      	lsls	r2, r3, #28
 801598e:	d501      	bpl.n	8015994 <__swbuf_r+0x20>
 8015990:	6923      	ldr	r3, [r4, #16]
 8015992:	b943      	cbnz	r3, 80159a6 <__swbuf_r+0x32>
 8015994:	4621      	mov	r1, r4
 8015996:	4628      	mov	r0, r5
 8015998:	f000 f82a 	bl	80159f0 <__swsetup_r>
 801599c:	b118      	cbz	r0, 80159a6 <__swbuf_r+0x32>
 801599e:	f04f 37ff 	mov.w	r7, #4294967295
 80159a2:	4638      	mov	r0, r7
 80159a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159a6:	6823      	ldr	r3, [r4, #0]
 80159a8:	6922      	ldr	r2, [r4, #16]
 80159aa:	1a98      	subs	r0, r3, r2
 80159ac:	6963      	ldr	r3, [r4, #20]
 80159ae:	b2f6      	uxtb	r6, r6
 80159b0:	4283      	cmp	r3, r0
 80159b2:	4637      	mov	r7, r6
 80159b4:	dc05      	bgt.n	80159c2 <__swbuf_r+0x4e>
 80159b6:	4621      	mov	r1, r4
 80159b8:	4628      	mov	r0, r5
 80159ba:	f7ff ffb3 	bl	8015924 <_fflush_r>
 80159be:	2800      	cmp	r0, #0
 80159c0:	d1ed      	bne.n	801599e <__swbuf_r+0x2a>
 80159c2:	68a3      	ldr	r3, [r4, #8]
 80159c4:	3b01      	subs	r3, #1
 80159c6:	60a3      	str	r3, [r4, #8]
 80159c8:	6823      	ldr	r3, [r4, #0]
 80159ca:	1c5a      	adds	r2, r3, #1
 80159cc:	6022      	str	r2, [r4, #0]
 80159ce:	701e      	strb	r6, [r3, #0]
 80159d0:	6962      	ldr	r2, [r4, #20]
 80159d2:	1c43      	adds	r3, r0, #1
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d004      	beq.n	80159e2 <__swbuf_r+0x6e>
 80159d8:	89a3      	ldrh	r3, [r4, #12]
 80159da:	07db      	lsls	r3, r3, #31
 80159dc:	d5e1      	bpl.n	80159a2 <__swbuf_r+0x2e>
 80159de:	2e0a      	cmp	r6, #10
 80159e0:	d1df      	bne.n	80159a2 <__swbuf_r+0x2e>
 80159e2:	4621      	mov	r1, r4
 80159e4:	4628      	mov	r0, r5
 80159e6:	f7ff ff9d 	bl	8015924 <_fflush_r>
 80159ea:	2800      	cmp	r0, #0
 80159ec:	d0d9      	beq.n	80159a2 <__swbuf_r+0x2e>
 80159ee:	e7d6      	b.n	801599e <__swbuf_r+0x2a>

080159f0 <__swsetup_r>:
 80159f0:	b538      	push	{r3, r4, r5, lr}
 80159f2:	4b29      	ldr	r3, [pc, #164]	@ (8015a98 <__swsetup_r+0xa8>)
 80159f4:	4605      	mov	r5, r0
 80159f6:	6818      	ldr	r0, [r3, #0]
 80159f8:	460c      	mov	r4, r1
 80159fa:	b118      	cbz	r0, 8015a04 <__swsetup_r+0x14>
 80159fc:	6a03      	ldr	r3, [r0, #32]
 80159fe:	b90b      	cbnz	r3, 8015a04 <__swsetup_r+0x14>
 8015a00:	f7fe f882 	bl	8013b08 <__sinit>
 8015a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a08:	0719      	lsls	r1, r3, #28
 8015a0a:	d422      	bmi.n	8015a52 <__swsetup_r+0x62>
 8015a0c:	06da      	lsls	r2, r3, #27
 8015a0e:	d407      	bmi.n	8015a20 <__swsetup_r+0x30>
 8015a10:	2209      	movs	r2, #9
 8015a12:	602a      	str	r2, [r5, #0]
 8015a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a18:	81a3      	strh	r3, [r4, #12]
 8015a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a1e:	e033      	b.n	8015a88 <__swsetup_r+0x98>
 8015a20:	0758      	lsls	r0, r3, #29
 8015a22:	d512      	bpl.n	8015a4a <__swsetup_r+0x5a>
 8015a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a26:	b141      	cbz	r1, 8015a3a <__swsetup_r+0x4a>
 8015a28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a2c:	4299      	cmp	r1, r3
 8015a2e:	d002      	beq.n	8015a36 <__swsetup_r+0x46>
 8015a30:	4628      	mov	r0, r5
 8015a32:	f7fe ffd7 	bl	80149e4 <_free_r>
 8015a36:	2300      	movs	r3, #0
 8015a38:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a3a:	89a3      	ldrh	r3, [r4, #12]
 8015a3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015a40:	81a3      	strh	r3, [r4, #12]
 8015a42:	2300      	movs	r3, #0
 8015a44:	6063      	str	r3, [r4, #4]
 8015a46:	6923      	ldr	r3, [r4, #16]
 8015a48:	6023      	str	r3, [r4, #0]
 8015a4a:	89a3      	ldrh	r3, [r4, #12]
 8015a4c:	f043 0308 	orr.w	r3, r3, #8
 8015a50:	81a3      	strh	r3, [r4, #12]
 8015a52:	6923      	ldr	r3, [r4, #16]
 8015a54:	b94b      	cbnz	r3, 8015a6a <__swsetup_r+0x7a>
 8015a56:	89a3      	ldrh	r3, [r4, #12]
 8015a58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015a60:	d003      	beq.n	8015a6a <__swsetup_r+0x7a>
 8015a62:	4621      	mov	r1, r4
 8015a64:	4628      	mov	r0, r5
 8015a66:	f000 f8fb 	bl	8015c60 <__smakebuf_r>
 8015a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a6e:	f013 0201 	ands.w	r2, r3, #1
 8015a72:	d00a      	beq.n	8015a8a <__swsetup_r+0x9a>
 8015a74:	2200      	movs	r2, #0
 8015a76:	60a2      	str	r2, [r4, #8]
 8015a78:	6962      	ldr	r2, [r4, #20]
 8015a7a:	4252      	negs	r2, r2
 8015a7c:	61a2      	str	r2, [r4, #24]
 8015a7e:	6922      	ldr	r2, [r4, #16]
 8015a80:	b942      	cbnz	r2, 8015a94 <__swsetup_r+0xa4>
 8015a82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015a86:	d1c5      	bne.n	8015a14 <__swsetup_r+0x24>
 8015a88:	bd38      	pop	{r3, r4, r5, pc}
 8015a8a:	0799      	lsls	r1, r3, #30
 8015a8c:	bf58      	it	pl
 8015a8e:	6962      	ldrpl	r2, [r4, #20]
 8015a90:	60a2      	str	r2, [r4, #8]
 8015a92:	e7f4      	b.n	8015a7e <__swsetup_r+0x8e>
 8015a94:	2000      	movs	r0, #0
 8015a96:	e7f7      	b.n	8015a88 <__swsetup_r+0x98>
 8015a98:	2400004c 	.word	0x2400004c

08015a9c <memmove>:
 8015a9c:	4288      	cmp	r0, r1
 8015a9e:	b510      	push	{r4, lr}
 8015aa0:	eb01 0402 	add.w	r4, r1, r2
 8015aa4:	d902      	bls.n	8015aac <memmove+0x10>
 8015aa6:	4284      	cmp	r4, r0
 8015aa8:	4623      	mov	r3, r4
 8015aaa:	d807      	bhi.n	8015abc <memmove+0x20>
 8015aac:	1e43      	subs	r3, r0, #1
 8015aae:	42a1      	cmp	r1, r4
 8015ab0:	d008      	beq.n	8015ac4 <memmove+0x28>
 8015ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015aba:	e7f8      	b.n	8015aae <memmove+0x12>
 8015abc:	4402      	add	r2, r0
 8015abe:	4601      	mov	r1, r0
 8015ac0:	428a      	cmp	r2, r1
 8015ac2:	d100      	bne.n	8015ac6 <memmove+0x2a>
 8015ac4:	bd10      	pop	{r4, pc}
 8015ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015ace:	e7f7      	b.n	8015ac0 <memmove+0x24>

08015ad0 <_sbrk_r>:
 8015ad0:	b538      	push	{r3, r4, r5, lr}
 8015ad2:	4d06      	ldr	r5, [pc, #24]	@ (8015aec <_sbrk_r+0x1c>)
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	4604      	mov	r4, r0
 8015ad8:	4608      	mov	r0, r1
 8015ada:	602b      	str	r3, [r5, #0]
 8015adc:	f7ed fd0c 	bl	80034f8 <_sbrk>
 8015ae0:	1c43      	adds	r3, r0, #1
 8015ae2:	d102      	bne.n	8015aea <_sbrk_r+0x1a>
 8015ae4:	682b      	ldr	r3, [r5, #0]
 8015ae6:	b103      	cbz	r3, 8015aea <_sbrk_r+0x1a>
 8015ae8:	6023      	str	r3, [r4, #0]
 8015aea:	bd38      	pop	{r3, r4, r5, pc}
 8015aec:	240758b8 	.word	0x240758b8

08015af0 <__assert_func>:
 8015af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015af2:	4614      	mov	r4, r2
 8015af4:	461a      	mov	r2, r3
 8015af6:	4b09      	ldr	r3, [pc, #36]	@ (8015b1c <__assert_func+0x2c>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	4605      	mov	r5, r0
 8015afc:	68d8      	ldr	r0, [r3, #12]
 8015afe:	b954      	cbnz	r4, 8015b16 <__assert_func+0x26>
 8015b00:	4b07      	ldr	r3, [pc, #28]	@ (8015b20 <__assert_func+0x30>)
 8015b02:	461c      	mov	r4, r3
 8015b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b08:	9100      	str	r1, [sp, #0]
 8015b0a:	462b      	mov	r3, r5
 8015b0c:	4905      	ldr	r1, [pc, #20]	@ (8015b24 <__assert_func+0x34>)
 8015b0e:	f000 f86f 	bl	8015bf0 <fiprintf>
 8015b12:	f000 f903 	bl	8015d1c <abort>
 8015b16:	4b04      	ldr	r3, [pc, #16]	@ (8015b28 <__assert_func+0x38>)
 8015b18:	e7f4      	b.n	8015b04 <__assert_func+0x14>
 8015b1a:	bf00      	nop
 8015b1c:	2400004c 	.word	0x2400004c
 8015b20:	08017f6e 	.word	0x08017f6e
 8015b24:	08017f40 	.word	0x08017f40
 8015b28:	08017f33 	.word	0x08017f33

08015b2c <_calloc_r>:
 8015b2c:	b570      	push	{r4, r5, r6, lr}
 8015b2e:	fba1 5402 	umull	r5, r4, r1, r2
 8015b32:	b93c      	cbnz	r4, 8015b44 <_calloc_r+0x18>
 8015b34:	4629      	mov	r1, r5
 8015b36:	f7fe ffc9 	bl	8014acc <_malloc_r>
 8015b3a:	4606      	mov	r6, r0
 8015b3c:	b928      	cbnz	r0, 8015b4a <_calloc_r+0x1e>
 8015b3e:	2600      	movs	r6, #0
 8015b40:	4630      	mov	r0, r6
 8015b42:	bd70      	pop	{r4, r5, r6, pc}
 8015b44:	220c      	movs	r2, #12
 8015b46:	6002      	str	r2, [r0, #0]
 8015b48:	e7f9      	b.n	8015b3e <_calloc_r+0x12>
 8015b4a:	462a      	mov	r2, r5
 8015b4c:	4621      	mov	r1, r4
 8015b4e:	f7fe f886 	bl	8013c5e <memset>
 8015b52:	e7f5      	b.n	8015b40 <_calloc_r+0x14>

08015b54 <__ascii_mbtowc>:
 8015b54:	b082      	sub	sp, #8
 8015b56:	b901      	cbnz	r1, 8015b5a <__ascii_mbtowc+0x6>
 8015b58:	a901      	add	r1, sp, #4
 8015b5a:	b142      	cbz	r2, 8015b6e <__ascii_mbtowc+0x1a>
 8015b5c:	b14b      	cbz	r3, 8015b72 <__ascii_mbtowc+0x1e>
 8015b5e:	7813      	ldrb	r3, [r2, #0]
 8015b60:	600b      	str	r3, [r1, #0]
 8015b62:	7812      	ldrb	r2, [r2, #0]
 8015b64:	1e10      	subs	r0, r2, #0
 8015b66:	bf18      	it	ne
 8015b68:	2001      	movne	r0, #1
 8015b6a:	b002      	add	sp, #8
 8015b6c:	4770      	bx	lr
 8015b6e:	4610      	mov	r0, r2
 8015b70:	e7fb      	b.n	8015b6a <__ascii_mbtowc+0x16>
 8015b72:	f06f 0001 	mvn.w	r0, #1
 8015b76:	e7f8      	b.n	8015b6a <__ascii_mbtowc+0x16>

08015b78 <_realloc_r>:
 8015b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b7c:	4680      	mov	r8, r0
 8015b7e:	4615      	mov	r5, r2
 8015b80:	460c      	mov	r4, r1
 8015b82:	b921      	cbnz	r1, 8015b8e <_realloc_r+0x16>
 8015b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b88:	4611      	mov	r1, r2
 8015b8a:	f7fe bf9f 	b.w	8014acc <_malloc_r>
 8015b8e:	b92a      	cbnz	r2, 8015b9c <_realloc_r+0x24>
 8015b90:	f7fe ff28 	bl	80149e4 <_free_r>
 8015b94:	2400      	movs	r4, #0
 8015b96:	4620      	mov	r0, r4
 8015b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b9c:	f000 f8c5 	bl	8015d2a <_malloc_usable_size_r>
 8015ba0:	4285      	cmp	r5, r0
 8015ba2:	4606      	mov	r6, r0
 8015ba4:	d802      	bhi.n	8015bac <_realloc_r+0x34>
 8015ba6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015baa:	d8f4      	bhi.n	8015b96 <_realloc_r+0x1e>
 8015bac:	4629      	mov	r1, r5
 8015bae:	4640      	mov	r0, r8
 8015bb0:	f7fe ff8c 	bl	8014acc <_malloc_r>
 8015bb4:	4607      	mov	r7, r0
 8015bb6:	2800      	cmp	r0, #0
 8015bb8:	d0ec      	beq.n	8015b94 <_realloc_r+0x1c>
 8015bba:	42b5      	cmp	r5, r6
 8015bbc:	462a      	mov	r2, r5
 8015bbe:	4621      	mov	r1, r4
 8015bc0:	bf28      	it	cs
 8015bc2:	4632      	movcs	r2, r6
 8015bc4:	f7fe f921 	bl	8013e0a <memcpy>
 8015bc8:	4621      	mov	r1, r4
 8015bca:	4640      	mov	r0, r8
 8015bcc:	f7fe ff0a 	bl	80149e4 <_free_r>
 8015bd0:	463c      	mov	r4, r7
 8015bd2:	e7e0      	b.n	8015b96 <_realloc_r+0x1e>

08015bd4 <__ascii_wctomb>:
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	4608      	mov	r0, r1
 8015bd8:	b141      	cbz	r1, 8015bec <__ascii_wctomb+0x18>
 8015bda:	2aff      	cmp	r2, #255	@ 0xff
 8015bdc:	d904      	bls.n	8015be8 <__ascii_wctomb+0x14>
 8015bde:	228a      	movs	r2, #138	@ 0x8a
 8015be0:	601a      	str	r2, [r3, #0]
 8015be2:	f04f 30ff 	mov.w	r0, #4294967295
 8015be6:	4770      	bx	lr
 8015be8:	700a      	strb	r2, [r1, #0]
 8015bea:	2001      	movs	r0, #1
 8015bec:	4770      	bx	lr
	...

08015bf0 <fiprintf>:
 8015bf0:	b40e      	push	{r1, r2, r3}
 8015bf2:	b503      	push	{r0, r1, lr}
 8015bf4:	4601      	mov	r1, r0
 8015bf6:	ab03      	add	r3, sp, #12
 8015bf8:	4805      	ldr	r0, [pc, #20]	@ (8015c10 <fiprintf+0x20>)
 8015bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bfe:	6800      	ldr	r0, [r0, #0]
 8015c00:	9301      	str	r3, [sp, #4]
 8015c02:	f7ff fcf3 	bl	80155ec <_vfiprintf_r>
 8015c06:	b002      	add	sp, #8
 8015c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c0c:	b003      	add	sp, #12
 8015c0e:	4770      	bx	lr
 8015c10:	2400004c 	.word	0x2400004c

08015c14 <__swhatbuf_r>:
 8015c14:	b570      	push	{r4, r5, r6, lr}
 8015c16:	460c      	mov	r4, r1
 8015c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c1c:	2900      	cmp	r1, #0
 8015c1e:	b096      	sub	sp, #88	@ 0x58
 8015c20:	4615      	mov	r5, r2
 8015c22:	461e      	mov	r6, r3
 8015c24:	da0d      	bge.n	8015c42 <__swhatbuf_r+0x2e>
 8015c26:	89a3      	ldrh	r3, [r4, #12]
 8015c28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015c2c:	f04f 0100 	mov.w	r1, #0
 8015c30:	bf14      	ite	ne
 8015c32:	2340      	movne	r3, #64	@ 0x40
 8015c34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015c38:	2000      	movs	r0, #0
 8015c3a:	6031      	str	r1, [r6, #0]
 8015c3c:	602b      	str	r3, [r5, #0]
 8015c3e:	b016      	add	sp, #88	@ 0x58
 8015c40:	bd70      	pop	{r4, r5, r6, pc}
 8015c42:	466a      	mov	r2, sp
 8015c44:	f000 f848 	bl	8015cd8 <_fstat_r>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	dbec      	blt.n	8015c26 <__swhatbuf_r+0x12>
 8015c4c:	9901      	ldr	r1, [sp, #4]
 8015c4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015c52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015c56:	4259      	negs	r1, r3
 8015c58:	4159      	adcs	r1, r3
 8015c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015c5e:	e7eb      	b.n	8015c38 <__swhatbuf_r+0x24>

08015c60 <__smakebuf_r>:
 8015c60:	898b      	ldrh	r3, [r1, #12]
 8015c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c64:	079d      	lsls	r5, r3, #30
 8015c66:	4606      	mov	r6, r0
 8015c68:	460c      	mov	r4, r1
 8015c6a:	d507      	bpl.n	8015c7c <__smakebuf_r+0x1c>
 8015c6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015c70:	6023      	str	r3, [r4, #0]
 8015c72:	6123      	str	r3, [r4, #16]
 8015c74:	2301      	movs	r3, #1
 8015c76:	6163      	str	r3, [r4, #20]
 8015c78:	b003      	add	sp, #12
 8015c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c7c:	ab01      	add	r3, sp, #4
 8015c7e:	466a      	mov	r2, sp
 8015c80:	f7ff ffc8 	bl	8015c14 <__swhatbuf_r>
 8015c84:	9f00      	ldr	r7, [sp, #0]
 8015c86:	4605      	mov	r5, r0
 8015c88:	4639      	mov	r1, r7
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	f7fe ff1e 	bl	8014acc <_malloc_r>
 8015c90:	b948      	cbnz	r0, 8015ca6 <__smakebuf_r+0x46>
 8015c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c96:	059a      	lsls	r2, r3, #22
 8015c98:	d4ee      	bmi.n	8015c78 <__smakebuf_r+0x18>
 8015c9a:	f023 0303 	bic.w	r3, r3, #3
 8015c9e:	f043 0302 	orr.w	r3, r3, #2
 8015ca2:	81a3      	strh	r3, [r4, #12]
 8015ca4:	e7e2      	b.n	8015c6c <__smakebuf_r+0xc>
 8015ca6:	89a3      	ldrh	r3, [r4, #12]
 8015ca8:	6020      	str	r0, [r4, #0]
 8015caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015cae:	81a3      	strh	r3, [r4, #12]
 8015cb0:	9b01      	ldr	r3, [sp, #4]
 8015cb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015cb6:	b15b      	cbz	r3, 8015cd0 <__smakebuf_r+0x70>
 8015cb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	f000 f81d 	bl	8015cfc <_isatty_r>
 8015cc2:	b128      	cbz	r0, 8015cd0 <__smakebuf_r+0x70>
 8015cc4:	89a3      	ldrh	r3, [r4, #12]
 8015cc6:	f023 0303 	bic.w	r3, r3, #3
 8015cca:	f043 0301 	orr.w	r3, r3, #1
 8015cce:	81a3      	strh	r3, [r4, #12]
 8015cd0:	89a3      	ldrh	r3, [r4, #12]
 8015cd2:	431d      	orrs	r5, r3
 8015cd4:	81a5      	strh	r5, [r4, #12]
 8015cd6:	e7cf      	b.n	8015c78 <__smakebuf_r+0x18>

08015cd8 <_fstat_r>:
 8015cd8:	b538      	push	{r3, r4, r5, lr}
 8015cda:	4d07      	ldr	r5, [pc, #28]	@ (8015cf8 <_fstat_r+0x20>)
 8015cdc:	2300      	movs	r3, #0
 8015cde:	4604      	mov	r4, r0
 8015ce0:	4608      	mov	r0, r1
 8015ce2:	4611      	mov	r1, r2
 8015ce4:	602b      	str	r3, [r5, #0]
 8015ce6:	f7ed fbdf 	bl	80034a8 <_fstat>
 8015cea:	1c43      	adds	r3, r0, #1
 8015cec:	d102      	bne.n	8015cf4 <_fstat_r+0x1c>
 8015cee:	682b      	ldr	r3, [r5, #0]
 8015cf0:	b103      	cbz	r3, 8015cf4 <_fstat_r+0x1c>
 8015cf2:	6023      	str	r3, [r4, #0]
 8015cf4:	bd38      	pop	{r3, r4, r5, pc}
 8015cf6:	bf00      	nop
 8015cf8:	240758b8 	.word	0x240758b8

08015cfc <_isatty_r>:
 8015cfc:	b538      	push	{r3, r4, r5, lr}
 8015cfe:	4d06      	ldr	r5, [pc, #24]	@ (8015d18 <_isatty_r+0x1c>)
 8015d00:	2300      	movs	r3, #0
 8015d02:	4604      	mov	r4, r0
 8015d04:	4608      	mov	r0, r1
 8015d06:	602b      	str	r3, [r5, #0]
 8015d08:	f7ed fbde 	bl	80034c8 <_isatty>
 8015d0c:	1c43      	adds	r3, r0, #1
 8015d0e:	d102      	bne.n	8015d16 <_isatty_r+0x1a>
 8015d10:	682b      	ldr	r3, [r5, #0]
 8015d12:	b103      	cbz	r3, 8015d16 <_isatty_r+0x1a>
 8015d14:	6023      	str	r3, [r4, #0]
 8015d16:	bd38      	pop	{r3, r4, r5, pc}
 8015d18:	240758b8 	.word	0x240758b8

08015d1c <abort>:
 8015d1c:	b508      	push	{r3, lr}
 8015d1e:	2006      	movs	r0, #6
 8015d20:	f000 f834 	bl	8015d8c <raise>
 8015d24:	2001      	movs	r0, #1
 8015d26:	f7ed fb6f 	bl	8003408 <_exit>

08015d2a <_malloc_usable_size_r>:
 8015d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d2e:	1f18      	subs	r0, r3, #4
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	bfbc      	itt	lt
 8015d34:	580b      	ldrlt	r3, [r1, r0]
 8015d36:	18c0      	addlt	r0, r0, r3
 8015d38:	4770      	bx	lr

08015d3a <_raise_r>:
 8015d3a:	291f      	cmp	r1, #31
 8015d3c:	b538      	push	{r3, r4, r5, lr}
 8015d3e:	4605      	mov	r5, r0
 8015d40:	460c      	mov	r4, r1
 8015d42:	d904      	bls.n	8015d4e <_raise_r+0x14>
 8015d44:	2316      	movs	r3, #22
 8015d46:	6003      	str	r3, [r0, #0]
 8015d48:	f04f 30ff 	mov.w	r0, #4294967295
 8015d4c:	bd38      	pop	{r3, r4, r5, pc}
 8015d4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015d50:	b112      	cbz	r2, 8015d58 <_raise_r+0x1e>
 8015d52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d56:	b94b      	cbnz	r3, 8015d6c <_raise_r+0x32>
 8015d58:	4628      	mov	r0, r5
 8015d5a:	f000 f831 	bl	8015dc0 <_getpid_r>
 8015d5e:	4622      	mov	r2, r4
 8015d60:	4601      	mov	r1, r0
 8015d62:	4628      	mov	r0, r5
 8015d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d68:	f000 b818 	b.w	8015d9c <_kill_r>
 8015d6c:	2b01      	cmp	r3, #1
 8015d6e:	d00a      	beq.n	8015d86 <_raise_r+0x4c>
 8015d70:	1c59      	adds	r1, r3, #1
 8015d72:	d103      	bne.n	8015d7c <_raise_r+0x42>
 8015d74:	2316      	movs	r3, #22
 8015d76:	6003      	str	r3, [r0, #0]
 8015d78:	2001      	movs	r0, #1
 8015d7a:	e7e7      	b.n	8015d4c <_raise_r+0x12>
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015d82:	4620      	mov	r0, r4
 8015d84:	4798      	blx	r3
 8015d86:	2000      	movs	r0, #0
 8015d88:	e7e0      	b.n	8015d4c <_raise_r+0x12>
	...

08015d8c <raise>:
 8015d8c:	4b02      	ldr	r3, [pc, #8]	@ (8015d98 <raise+0xc>)
 8015d8e:	4601      	mov	r1, r0
 8015d90:	6818      	ldr	r0, [r3, #0]
 8015d92:	f7ff bfd2 	b.w	8015d3a <_raise_r>
 8015d96:	bf00      	nop
 8015d98:	2400004c 	.word	0x2400004c

08015d9c <_kill_r>:
 8015d9c:	b538      	push	{r3, r4, r5, lr}
 8015d9e:	4d07      	ldr	r5, [pc, #28]	@ (8015dbc <_kill_r+0x20>)
 8015da0:	2300      	movs	r3, #0
 8015da2:	4604      	mov	r4, r0
 8015da4:	4608      	mov	r0, r1
 8015da6:	4611      	mov	r1, r2
 8015da8:	602b      	str	r3, [r5, #0]
 8015daa:	f7ed fb1d 	bl	80033e8 <_kill>
 8015dae:	1c43      	adds	r3, r0, #1
 8015db0:	d102      	bne.n	8015db8 <_kill_r+0x1c>
 8015db2:	682b      	ldr	r3, [r5, #0]
 8015db4:	b103      	cbz	r3, 8015db8 <_kill_r+0x1c>
 8015db6:	6023      	str	r3, [r4, #0]
 8015db8:	bd38      	pop	{r3, r4, r5, pc}
 8015dba:	bf00      	nop
 8015dbc:	240758b8 	.word	0x240758b8

08015dc0 <_getpid_r>:
 8015dc0:	f7ed bb0a 	b.w	80033d8 <_getpid>
 8015dc4:	0000      	movs	r0, r0
	...

08015dc8 <cos>:
 8015dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015dca:	eeb0 7b40 	vmov.f64	d7, d0
 8015dce:	ee17 3a90 	vmov	r3, s15
 8015dd2:	4a21      	ldr	r2, [pc, #132]	@ (8015e58 <cos+0x90>)
 8015dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015dd8:	4293      	cmp	r3, r2
 8015dda:	d806      	bhi.n	8015dea <cos+0x22>
 8015ddc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015e50 <cos+0x88>
 8015de0:	b005      	add	sp, #20
 8015de2:	f85d eb04 	ldr.w	lr, [sp], #4
 8015de6:	f000 b8ff 	b.w	8015fe8 <__kernel_cos>
 8015dea:	4a1c      	ldr	r2, [pc, #112]	@ (8015e5c <cos+0x94>)
 8015dec:	4293      	cmp	r3, r2
 8015dee:	d904      	bls.n	8015dfa <cos+0x32>
 8015df0:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015df4:	b005      	add	sp, #20
 8015df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8015dfa:	4668      	mov	r0, sp
 8015dfc:	f000 f9b4 	bl	8016168 <__ieee754_rem_pio2>
 8015e00:	f000 0003 	and.w	r0, r0, #3
 8015e04:	2801      	cmp	r0, #1
 8015e06:	d009      	beq.n	8015e1c <cos+0x54>
 8015e08:	2802      	cmp	r0, #2
 8015e0a:	d010      	beq.n	8015e2e <cos+0x66>
 8015e0c:	b9b0      	cbnz	r0, 8015e3c <cos+0x74>
 8015e0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e12:	ed9d 0b00 	vldr	d0, [sp]
 8015e16:	f000 f8e7 	bl	8015fe8 <__kernel_cos>
 8015e1a:	e7eb      	b.n	8015df4 <cos+0x2c>
 8015e1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e20:	ed9d 0b00 	vldr	d0, [sp]
 8015e24:	f000 f948 	bl	80160b8 <__kernel_sin>
 8015e28:	eeb1 0b40 	vneg.f64	d0, d0
 8015e2c:	e7e2      	b.n	8015df4 <cos+0x2c>
 8015e2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e32:	ed9d 0b00 	vldr	d0, [sp]
 8015e36:	f000 f8d7 	bl	8015fe8 <__kernel_cos>
 8015e3a:	e7f5      	b.n	8015e28 <cos+0x60>
 8015e3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015e40:	ed9d 0b00 	vldr	d0, [sp]
 8015e44:	2001      	movs	r0, #1
 8015e46:	f000 f937 	bl	80160b8 <__kernel_sin>
 8015e4a:	e7d3      	b.n	8015df4 <cos+0x2c>
 8015e4c:	f3af 8000 	nop.w
	...
 8015e58:	3fe921fb 	.word	0x3fe921fb
 8015e5c:	7fefffff 	.word	0x7fefffff

08015e60 <sin>:
 8015e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015e62:	eeb0 7b40 	vmov.f64	d7, d0
 8015e66:	ee17 3a90 	vmov	r3, s15
 8015e6a:	4a21      	ldr	r2, [pc, #132]	@ (8015ef0 <sin+0x90>)
 8015e6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015e70:	4293      	cmp	r3, r2
 8015e72:	d807      	bhi.n	8015e84 <sin+0x24>
 8015e74:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015ee8 <sin+0x88>
 8015e78:	2000      	movs	r0, #0
 8015e7a:	b005      	add	sp, #20
 8015e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e80:	f000 b91a 	b.w	80160b8 <__kernel_sin>
 8015e84:	4a1b      	ldr	r2, [pc, #108]	@ (8015ef4 <sin+0x94>)
 8015e86:	4293      	cmp	r3, r2
 8015e88:	d904      	bls.n	8015e94 <sin+0x34>
 8015e8a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015e8e:	b005      	add	sp, #20
 8015e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e94:	4668      	mov	r0, sp
 8015e96:	f000 f967 	bl	8016168 <__ieee754_rem_pio2>
 8015e9a:	f000 0003 	and.w	r0, r0, #3
 8015e9e:	2801      	cmp	r0, #1
 8015ea0:	d00a      	beq.n	8015eb8 <sin+0x58>
 8015ea2:	2802      	cmp	r0, #2
 8015ea4:	d00f      	beq.n	8015ec6 <sin+0x66>
 8015ea6:	b9c0      	cbnz	r0, 8015eda <sin+0x7a>
 8015ea8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015eac:	ed9d 0b00 	vldr	d0, [sp]
 8015eb0:	2001      	movs	r0, #1
 8015eb2:	f000 f901 	bl	80160b8 <__kernel_sin>
 8015eb6:	e7ea      	b.n	8015e8e <sin+0x2e>
 8015eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015ebc:	ed9d 0b00 	vldr	d0, [sp]
 8015ec0:	f000 f892 	bl	8015fe8 <__kernel_cos>
 8015ec4:	e7e3      	b.n	8015e8e <sin+0x2e>
 8015ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015eca:	ed9d 0b00 	vldr	d0, [sp]
 8015ece:	2001      	movs	r0, #1
 8015ed0:	f000 f8f2 	bl	80160b8 <__kernel_sin>
 8015ed4:	eeb1 0b40 	vneg.f64	d0, d0
 8015ed8:	e7d9      	b.n	8015e8e <sin+0x2e>
 8015eda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015ede:	ed9d 0b00 	vldr	d0, [sp]
 8015ee2:	f000 f881 	bl	8015fe8 <__kernel_cos>
 8015ee6:	e7f5      	b.n	8015ed4 <sin+0x74>
	...
 8015ef0:	3fe921fb 	.word	0x3fe921fb
 8015ef4:	7fefffff 	.word	0x7fefffff

08015ef8 <floor>:
 8015ef8:	ee10 3a90 	vmov	r3, s1
 8015efc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8015f00:	ee10 2a10 	vmov	r2, s0
 8015f04:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8015f08:	2913      	cmp	r1, #19
 8015f0a:	b530      	push	{r4, r5, lr}
 8015f0c:	4615      	mov	r5, r2
 8015f0e:	dc33      	bgt.n	8015f78 <floor+0x80>
 8015f10:	2900      	cmp	r1, #0
 8015f12:	da18      	bge.n	8015f46 <floor+0x4e>
 8015f14:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8015fd8 <floor+0xe0>
 8015f18:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015f1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f24:	dd0a      	ble.n	8015f3c <floor+0x44>
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	da50      	bge.n	8015fcc <floor+0xd4>
 8015f2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015f2e:	4313      	orrs	r3, r2
 8015f30:	2200      	movs	r2, #0
 8015f32:	4293      	cmp	r3, r2
 8015f34:	4b2a      	ldr	r3, [pc, #168]	@ (8015fe0 <floor+0xe8>)
 8015f36:	bf08      	it	eq
 8015f38:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	4610      	mov	r0, r2
 8015f40:	ec41 0b10 	vmov	d0, r0, r1
 8015f44:	e01f      	b.n	8015f86 <floor+0x8e>
 8015f46:	4827      	ldr	r0, [pc, #156]	@ (8015fe4 <floor+0xec>)
 8015f48:	4108      	asrs	r0, r1
 8015f4a:	ea03 0400 	and.w	r4, r3, r0
 8015f4e:	4314      	orrs	r4, r2
 8015f50:	d019      	beq.n	8015f86 <floor+0x8e>
 8015f52:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015fd8 <floor+0xe0>
 8015f56:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015f5a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f62:	ddeb      	ble.n	8015f3c <floor+0x44>
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	bfbe      	ittt	lt
 8015f68:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8015f6c:	410a      	asrlt	r2, r1
 8015f6e:	189b      	addlt	r3, r3, r2
 8015f70:	ea23 0300 	bic.w	r3, r3, r0
 8015f74:	2200      	movs	r2, #0
 8015f76:	e7e1      	b.n	8015f3c <floor+0x44>
 8015f78:	2933      	cmp	r1, #51	@ 0x33
 8015f7a:	dd05      	ble.n	8015f88 <floor+0x90>
 8015f7c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015f80:	d101      	bne.n	8015f86 <floor+0x8e>
 8015f82:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015f86:	bd30      	pop	{r4, r5, pc}
 8015f88:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8015f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f90:	40e0      	lsrs	r0, r4
 8015f92:	4210      	tst	r0, r2
 8015f94:	d0f7      	beq.n	8015f86 <floor+0x8e>
 8015f96:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015fd8 <floor+0xe0>
 8015f9a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015f9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fa6:	ddc9      	ble.n	8015f3c <floor+0x44>
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	da02      	bge.n	8015fb2 <floor+0xba>
 8015fac:	2914      	cmp	r1, #20
 8015fae:	d103      	bne.n	8015fb8 <floor+0xc0>
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	ea22 0200 	bic.w	r2, r2, r0
 8015fb6:	e7c1      	b.n	8015f3c <floor+0x44>
 8015fb8:	2401      	movs	r4, #1
 8015fba:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8015fbe:	fa04 f101 	lsl.w	r1, r4, r1
 8015fc2:	440a      	add	r2, r1
 8015fc4:	42aa      	cmp	r2, r5
 8015fc6:	bf38      	it	cc
 8015fc8:	191b      	addcc	r3, r3, r4
 8015fca:	e7f2      	b.n	8015fb2 <floor+0xba>
 8015fcc:	2200      	movs	r2, #0
 8015fce:	4613      	mov	r3, r2
 8015fd0:	e7b4      	b.n	8015f3c <floor+0x44>
 8015fd2:	bf00      	nop
 8015fd4:	f3af 8000 	nop.w
 8015fd8:	8800759c 	.word	0x8800759c
 8015fdc:	7e37e43c 	.word	0x7e37e43c
 8015fe0:	bff00000 	.word	0xbff00000
 8015fe4:	000fffff 	.word	0x000fffff

08015fe8 <__kernel_cos>:
 8015fe8:	eeb0 5b40 	vmov.f64	d5, d0
 8015fec:	ee15 1a90 	vmov	r1, s11
 8015ff0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8015ff4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015ff8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8015ffc:	d204      	bcs.n	8016008 <__kernel_cos+0x20>
 8015ffe:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8016002:	ee17 3a90 	vmov	r3, s15
 8016006:	b343      	cbz	r3, 801605a <__kernel_cos+0x72>
 8016008:	ee25 6b05 	vmul.f64	d6, d5, d5
 801600c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8016010:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8016080 <__kernel_cos+0x98>
 8016014:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8016088 <__kernel_cos+0xa0>
 8016018:	eea6 4b07 	vfma.f64	d4, d6, d7
 801601c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8016090 <__kernel_cos+0xa8>
 8016020:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016024:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8016098 <__kernel_cos+0xb0>
 8016028:	eea7 4b06 	vfma.f64	d4, d7, d6
 801602c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 80160a0 <__kernel_cos+0xb8>
 8016030:	4b1f      	ldr	r3, [pc, #124]	@ (80160b0 <__kernel_cos+0xc8>)
 8016032:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016036:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 80160a8 <__kernel_cos+0xc0>
 801603a:	4299      	cmp	r1, r3
 801603c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8016040:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8016044:	ee24 4b06 	vmul.f64	d4, d4, d6
 8016048:	ee26 7b07 	vmul.f64	d7, d6, d7
 801604c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8016050:	d804      	bhi.n	801605c <__kernel_cos+0x74>
 8016052:	ee37 7b41 	vsub.f64	d7, d7, d1
 8016056:	ee30 0b47 	vsub.f64	d0, d0, d7
 801605a:	4770      	bx	lr
 801605c:	4b15      	ldr	r3, [pc, #84]	@ (80160b4 <__kernel_cos+0xcc>)
 801605e:	4299      	cmp	r1, r3
 8016060:	d809      	bhi.n	8016076 <__kernel_cos+0x8e>
 8016062:	2200      	movs	r2, #0
 8016064:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8016068:	ec43 2b16 	vmov	d6, r2, r3
 801606c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8016070:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016074:	e7ed      	b.n	8016052 <__kernel_cos+0x6a>
 8016076:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 801607a:	e7f7      	b.n	801606c <__kernel_cos+0x84>
 801607c:	f3af 8000 	nop.w
 8016080:	be8838d4 	.word	0xbe8838d4
 8016084:	bda8fae9 	.word	0xbda8fae9
 8016088:	bdb4b1c4 	.word	0xbdb4b1c4
 801608c:	3e21ee9e 	.word	0x3e21ee9e
 8016090:	809c52ad 	.word	0x809c52ad
 8016094:	be927e4f 	.word	0xbe927e4f
 8016098:	19cb1590 	.word	0x19cb1590
 801609c:	3efa01a0 	.word	0x3efa01a0
 80160a0:	16c15177 	.word	0x16c15177
 80160a4:	bf56c16c 	.word	0xbf56c16c
 80160a8:	5555554c 	.word	0x5555554c
 80160ac:	3fa55555 	.word	0x3fa55555
 80160b0:	3fd33332 	.word	0x3fd33332
 80160b4:	3fe90000 	.word	0x3fe90000

080160b8 <__kernel_sin>:
 80160b8:	ee10 3a90 	vmov	r3, s1
 80160bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80160c0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80160c4:	d204      	bcs.n	80160d0 <__kernel_sin+0x18>
 80160c6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80160ca:	ee17 3a90 	vmov	r3, s15
 80160ce:	b35b      	cbz	r3, 8016128 <__kernel_sin+0x70>
 80160d0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80160d4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80160d8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8016130 <__kernel_sin+0x78>
 80160dc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8016138 <__kernel_sin+0x80>
 80160e0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80160e4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8016140 <__kernel_sin+0x88>
 80160e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80160ec:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8016148 <__kernel_sin+0x90>
 80160f0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80160f4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8016150 <__kernel_sin+0x98>
 80160f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80160fc:	b930      	cbnz	r0, 801610c <__kernel_sin+0x54>
 80160fe:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8016158 <__kernel_sin+0xa0>
 8016102:	eea6 4b07 	vfma.f64	d4, d6, d7
 8016106:	eea4 0b05 	vfma.f64	d0, d4, d5
 801610a:	4770      	bx	lr
 801610c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8016110:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8016114:	eea1 7b04 	vfma.f64	d7, d1, d4
 8016118:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801611c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8016160 <__kernel_sin+0xa8>
 8016120:	eea5 1b07 	vfma.f64	d1, d5, d7
 8016124:	ee30 0b41 	vsub.f64	d0, d0, d1
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	f3af 8000 	nop.w
 8016130:	5acfd57c 	.word	0x5acfd57c
 8016134:	3de5d93a 	.word	0x3de5d93a
 8016138:	8a2b9ceb 	.word	0x8a2b9ceb
 801613c:	be5ae5e6 	.word	0xbe5ae5e6
 8016140:	57b1fe7d 	.word	0x57b1fe7d
 8016144:	3ec71de3 	.word	0x3ec71de3
 8016148:	19c161d5 	.word	0x19c161d5
 801614c:	bf2a01a0 	.word	0xbf2a01a0
 8016150:	1110f8a6 	.word	0x1110f8a6
 8016154:	3f811111 	.word	0x3f811111
 8016158:	55555549 	.word	0x55555549
 801615c:	bfc55555 	.word	0xbfc55555
 8016160:	55555549 	.word	0x55555549
 8016164:	3fc55555 	.word	0x3fc55555

08016168 <__ieee754_rem_pio2>:
 8016168:	b570      	push	{r4, r5, r6, lr}
 801616a:	eeb0 7b40 	vmov.f64	d7, d0
 801616e:	ee17 5a90 	vmov	r5, s15
 8016172:	4b99      	ldr	r3, [pc, #612]	@ (80163d8 <__ieee754_rem_pio2+0x270>)
 8016174:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8016178:	429e      	cmp	r6, r3
 801617a:	b088      	sub	sp, #32
 801617c:	4604      	mov	r4, r0
 801617e:	d807      	bhi.n	8016190 <__ieee754_rem_pio2+0x28>
 8016180:	2200      	movs	r2, #0
 8016182:	2300      	movs	r3, #0
 8016184:	ed84 0b00 	vstr	d0, [r4]
 8016188:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801618c:	2000      	movs	r0, #0
 801618e:	e01b      	b.n	80161c8 <__ieee754_rem_pio2+0x60>
 8016190:	4b92      	ldr	r3, [pc, #584]	@ (80163dc <__ieee754_rem_pio2+0x274>)
 8016192:	429e      	cmp	r6, r3
 8016194:	d83b      	bhi.n	801620e <__ieee754_rem_pio2+0xa6>
 8016196:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 801619a:	2d00      	cmp	r5, #0
 801619c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8016398 <__ieee754_rem_pio2+0x230>
 80161a0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 80161a4:	dd19      	ble.n	80161da <__ieee754_rem_pio2+0x72>
 80161a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80161aa:	429e      	cmp	r6, r3
 80161ac:	d00e      	beq.n	80161cc <__ieee754_rem_pio2+0x64>
 80161ae:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 80163a0 <__ieee754_rem_pio2+0x238>
 80161b2:	ee37 6b45 	vsub.f64	d6, d7, d5
 80161b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80161ba:	ed84 6b00 	vstr	d6, [r4]
 80161be:	ee37 7b45 	vsub.f64	d7, d7, d5
 80161c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80161c6:	2001      	movs	r0, #1
 80161c8:	b008      	add	sp, #32
 80161ca:	bd70      	pop	{r4, r5, r6, pc}
 80161cc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 80163a8 <__ieee754_rem_pio2+0x240>
 80161d0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 80163b0 <__ieee754_rem_pio2+0x248>
 80161d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80161d8:	e7eb      	b.n	80161b2 <__ieee754_rem_pio2+0x4a>
 80161da:	429e      	cmp	r6, r3
 80161dc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80161e0:	d00e      	beq.n	8016200 <__ieee754_rem_pio2+0x98>
 80161e2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 80163a0 <__ieee754_rem_pio2+0x238>
 80161e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80161ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80161ee:	ed84 6b00 	vstr	d6, [r4]
 80161f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80161f6:	f04f 30ff 	mov.w	r0, #4294967295
 80161fa:	ed84 7b02 	vstr	d7, [r4, #8]
 80161fe:	e7e3      	b.n	80161c8 <__ieee754_rem_pio2+0x60>
 8016200:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 80163a8 <__ieee754_rem_pio2+0x240>
 8016204:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 80163b0 <__ieee754_rem_pio2+0x248>
 8016208:	ee37 7b06 	vadd.f64	d7, d7, d6
 801620c:	e7eb      	b.n	80161e6 <__ieee754_rem_pio2+0x7e>
 801620e:	4b74      	ldr	r3, [pc, #464]	@ (80163e0 <__ieee754_rem_pio2+0x278>)
 8016210:	429e      	cmp	r6, r3
 8016212:	d870      	bhi.n	80162f6 <__ieee754_rem_pio2+0x18e>
 8016214:	f000 f8ec 	bl	80163f0 <fabs>
 8016218:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801621c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80163b8 <__ieee754_rem_pio2+0x250>
 8016220:	eea0 7b06 	vfma.f64	d7, d0, d6
 8016224:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016228:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801622c:	ee17 0a90 	vmov	r0, s15
 8016230:	eeb1 4b45 	vneg.f64	d4, d5
 8016234:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8016398 <__ieee754_rem_pio2+0x230>
 8016238:	eea5 0b47 	vfms.f64	d0, d5, d7
 801623c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 80163a0 <__ieee754_rem_pio2+0x238>
 8016240:	281f      	cmp	r0, #31
 8016242:	ee25 7b07 	vmul.f64	d7, d5, d7
 8016246:	ee30 6b47 	vsub.f64	d6, d0, d7
 801624a:	dc05      	bgt.n	8016258 <__ieee754_rem_pio2+0xf0>
 801624c:	4b65      	ldr	r3, [pc, #404]	@ (80163e4 <__ieee754_rem_pio2+0x27c>)
 801624e:	1e42      	subs	r2, r0, #1
 8016250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016254:	42b3      	cmp	r3, r6
 8016256:	d109      	bne.n	801626c <__ieee754_rem_pio2+0x104>
 8016258:	ee16 3a90 	vmov	r3, s13
 801625c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8016260:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8016264:	2b10      	cmp	r3, #16
 8016266:	ea4f 5226 	mov.w	r2, r6, asr #20
 801626a:	dc02      	bgt.n	8016272 <__ieee754_rem_pio2+0x10a>
 801626c:	ed84 6b00 	vstr	d6, [r4]
 8016270:	e01a      	b.n	80162a8 <__ieee754_rem_pio2+0x140>
 8016272:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 80163a8 <__ieee754_rem_pio2+0x240>
 8016276:	eeb0 6b40 	vmov.f64	d6, d0
 801627a:	eea4 6b03 	vfma.f64	d6, d4, d3
 801627e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8016282:	eea4 7b03 	vfma.f64	d7, d4, d3
 8016286:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 80163b0 <__ieee754_rem_pio2+0x248>
 801628a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801628e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8016292:	ee13 3a90 	vmov	r3, s7
 8016296:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801629a:	1ad3      	subs	r3, r2, r3
 801629c:	2b31      	cmp	r3, #49	@ 0x31
 801629e:	dc17      	bgt.n	80162d0 <__ieee754_rem_pio2+0x168>
 80162a0:	eeb0 0b46 	vmov.f64	d0, d6
 80162a4:	ed84 3b00 	vstr	d3, [r4]
 80162a8:	ed94 6b00 	vldr	d6, [r4]
 80162ac:	2d00      	cmp	r5, #0
 80162ae:	ee30 0b46 	vsub.f64	d0, d0, d6
 80162b2:	ee30 0b47 	vsub.f64	d0, d0, d7
 80162b6:	ed84 0b02 	vstr	d0, [r4, #8]
 80162ba:	da85      	bge.n	80161c8 <__ieee754_rem_pio2+0x60>
 80162bc:	eeb1 6b46 	vneg.f64	d6, d6
 80162c0:	eeb1 0b40 	vneg.f64	d0, d0
 80162c4:	ed84 6b00 	vstr	d6, [r4]
 80162c8:	ed84 0b02 	vstr	d0, [r4, #8]
 80162cc:	4240      	negs	r0, r0
 80162ce:	e77b      	b.n	80161c8 <__ieee754_rem_pio2+0x60>
 80162d0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 80163c0 <__ieee754_rem_pio2+0x258>
 80162d4:	eeb0 0b46 	vmov.f64	d0, d6
 80162d8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80162dc:	ee36 6b40 	vsub.f64	d6, d6, d0
 80162e0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80162e4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 80163c8 <__ieee754_rem_pio2+0x260>
 80162e8:	eeb0 7b46 	vmov.f64	d7, d6
 80162ec:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80162f0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80162f4:	e7ba      	b.n	801626c <__ieee754_rem_pio2+0x104>
 80162f6:	4b3c      	ldr	r3, [pc, #240]	@ (80163e8 <__ieee754_rem_pio2+0x280>)
 80162f8:	429e      	cmp	r6, r3
 80162fa:	d906      	bls.n	801630a <__ieee754_rem_pio2+0x1a2>
 80162fc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8016300:	ed80 7b02 	vstr	d7, [r0, #8]
 8016304:	ed80 7b00 	vstr	d7, [r0]
 8016308:	e740      	b.n	801618c <__ieee754_rem_pio2+0x24>
 801630a:	ee10 3a10 	vmov	r3, s0
 801630e:	1532      	asrs	r2, r6, #20
 8016310:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8016314:	4618      	mov	r0, r3
 8016316:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801631a:	ec41 0b17 	vmov	d7, r0, r1
 801631e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8016322:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 80163d0 <__ieee754_rem_pio2+0x268>
 8016326:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801632a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801632e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016332:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016336:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801633a:	a808      	add	r0, sp, #32
 801633c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8016340:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016344:	ed8d 6b04 	vstr	d6, [sp, #16]
 8016348:	ee27 7b05 	vmul.f64	d7, d7, d5
 801634c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016350:	2103      	movs	r1, #3
 8016352:	ed30 7b02 	vldmdb	r0!, {d7}
 8016356:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801635e:	460b      	mov	r3, r1
 8016360:	f101 31ff 	add.w	r1, r1, #4294967295
 8016364:	d0f5      	beq.n	8016352 <__ieee754_rem_pio2+0x1ea>
 8016366:	4921      	ldr	r1, [pc, #132]	@ (80163ec <__ieee754_rem_pio2+0x284>)
 8016368:	9101      	str	r1, [sp, #4]
 801636a:	2102      	movs	r1, #2
 801636c:	9100      	str	r1, [sp, #0]
 801636e:	a802      	add	r0, sp, #8
 8016370:	4621      	mov	r1, r4
 8016372:	f000 f845 	bl	8016400 <__kernel_rem_pio2>
 8016376:	2d00      	cmp	r5, #0
 8016378:	f6bf af26 	bge.w	80161c8 <__ieee754_rem_pio2+0x60>
 801637c:	ed94 7b00 	vldr	d7, [r4]
 8016380:	eeb1 7b47 	vneg.f64	d7, d7
 8016384:	ed84 7b00 	vstr	d7, [r4]
 8016388:	ed94 7b02 	vldr	d7, [r4, #8]
 801638c:	eeb1 7b47 	vneg.f64	d7, d7
 8016390:	ed84 7b02 	vstr	d7, [r4, #8]
 8016394:	e79a      	b.n	80162cc <__ieee754_rem_pio2+0x164>
 8016396:	bf00      	nop
 8016398:	54400000 	.word	0x54400000
 801639c:	3ff921fb 	.word	0x3ff921fb
 80163a0:	1a626331 	.word	0x1a626331
 80163a4:	3dd0b461 	.word	0x3dd0b461
 80163a8:	1a600000 	.word	0x1a600000
 80163ac:	3dd0b461 	.word	0x3dd0b461
 80163b0:	2e037073 	.word	0x2e037073
 80163b4:	3ba3198a 	.word	0x3ba3198a
 80163b8:	6dc9c883 	.word	0x6dc9c883
 80163bc:	3fe45f30 	.word	0x3fe45f30
 80163c0:	2e000000 	.word	0x2e000000
 80163c4:	3ba3198a 	.word	0x3ba3198a
 80163c8:	252049c1 	.word	0x252049c1
 80163cc:	397b839a 	.word	0x397b839a
 80163d0:	00000000 	.word	0x00000000
 80163d4:	41700000 	.word	0x41700000
 80163d8:	3fe921fb 	.word	0x3fe921fb
 80163dc:	4002d97b 	.word	0x4002d97b
 80163e0:	413921fb 	.word	0x413921fb
 80163e4:	08018070 	.word	0x08018070
 80163e8:	7fefffff 	.word	0x7fefffff
 80163ec:	080180f0 	.word	0x080180f0

080163f0 <fabs>:
 80163f0:	ec51 0b10 	vmov	r0, r1, d0
 80163f4:	4602      	mov	r2, r0
 80163f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80163fa:	ec43 2b10 	vmov	d0, r2, r3
 80163fe:	4770      	bx	lr

08016400 <__kernel_rem_pio2>:
 8016400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016404:	ed2d 8b06 	vpush	{d8-d10}
 8016408:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 801640c:	469b      	mov	fp, r3
 801640e:	9001      	str	r0, [sp, #4]
 8016410:	4bbb      	ldr	r3, [pc, #748]	@ (8016700 <__kernel_rem_pio2+0x300>)
 8016412:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8016414:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8016418:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 801641c:	f112 0f14 	cmn.w	r2, #20
 8016420:	bfa8      	it	ge
 8016422:	1ed3      	subge	r3, r2, #3
 8016424:	f10b 3aff 	add.w	sl, fp, #4294967295
 8016428:	bfb8      	it	lt
 801642a:	2300      	movlt	r3, #0
 801642c:	f06f 0517 	mvn.w	r5, #23
 8016430:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80166e8 <__kernel_rem_pio2+0x2e8>
 8016434:	bfa4      	itt	ge
 8016436:	2018      	movge	r0, #24
 8016438:	fb93 f3f0 	sdivge	r3, r3, r0
 801643c:	fb03 5505 	mla	r5, r3, r5, r5
 8016440:	eba3 040a 	sub.w	r4, r3, sl
 8016444:	4415      	add	r5, r2
 8016446:	460f      	mov	r7, r1
 8016448:	eb09 060a 	add.w	r6, r9, sl
 801644c:	a81a      	add	r0, sp, #104	@ 0x68
 801644e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8016452:	2200      	movs	r2, #0
 8016454:	42b2      	cmp	r2, r6
 8016456:	dd0e      	ble.n	8016476 <__kernel_rem_pio2+0x76>
 8016458:	aa1a      	add	r2, sp, #104	@ 0x68
 801645a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801645e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8016462:	2600      	movs	r6, #0
 8016464:	454e      	cmp	r6, r9
 8016466:	dc25      	bgt.n	80164b4 <__kernel_rem_pio2+0xb4>
 8016468:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80166e8 <__kernel_rem_pio2+0x2e8>
 801646c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016470:	4614      	mov	r4, r2
 8016472:	2000      	movs	r0, #0
 8016474:	e015      	b.n	80164a2 <__kernel_rem_pio2+0xa2>
 8016476:	42d4      	cmn	r4, r2
 8016478:	d409      	bmi.n	801648e <__kernel_rem_pio2+0x8e>
 801647a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801647e:	ee07 1a90 	vmov	s15, r1
 8016482:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016486:	eca0 7b02 	vstmia	r0!, {d7}
 801648a:	3201      	adds	r2, #1
 801648c:	e7e2      	b.n	8016454 <__kernel_rem_pio2+0x54>
 801648e:	eeb0 7b46 	vmov.f64	d7, d6
 8016492:	e7f8      	b.n	8016486 <__kernel_rem_pio2+0x86>
 8016494:	ecbc 5b02 	vldmia	ip!, {d5}
 8016498:	ed94 6b00 	vldr	d6, [r4]
 801649c:	3001      	adds	r0, #1
 801649e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80164a2:	4550      	cmp	r0, sl
 80164a4:	f1a4 0408 	sub.w	r4, r4, #8
 80164a8:	ddf4      	ble.n	8016494 <__kernel_rem_pio2+0x94>
 80164aa:	ecae 7b02 	vstmia	lr!, {d7}
 80164ae:	3601      	adds	r6, #1
 80164b0:	3208      	adds	r2, #8
 80164b2:	e7d7      	b.n	8016464 <__kernel_rem_pio2+0x64>
 80164b4:	aa06      	add	r2, sp, #24
 80164b6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80166f0 <__kernel_rem_pio2+0x2f0>
 80164ba:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80166f8 <__kernel_rem_pio2+0x2f8>
 80164be:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80164c2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80164c6:	9203      	str	r2, [sp, #12]
 80164c8:	9302      	str	r3, [sp, #8]
 80164ca:	464c      	mov	r4, r9
 80164cc:	00e3      	lsls	r3, r4, #3
 80164ce:	9304      	str	r3, [sp, #16]
 80164d0:	ab92      	add	r3, sp, #584	@ 0x248
 80164d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80164d6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 80164da:	aa6a      	add	r2, sp, #424	@ 0x1a8
 80164dc:	ab06      	add	r3, sp, #24
 80164de:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80164e2:	461e      	mov	r6, r3
 80164e4:	4620      	mov	r0, r4
 80164e6:	2800      	cmp	r0, #0
 80164e8:	f1a2 0208 	sub.w	r2, r2, #8
 80164ec:	dc4a      	bgt.n	8016584 <__kernel_rem_pio2+0x184>
 80164ee:	4628      	mov	r0, r5
 80164f0:	9305      	str	r3, [sp, #20]
 80164f2:	f000 fa01 	bl	80168f8 <scalbn>
 80164f6:	eeb0 8b40 	vmov.f64	d8, d0
 80164fa:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80164fe:	ee28 0b00 	vmul.f64	d0, d8, d0
 8016502:	f7ff fcf9 	bl	8015ef8 <floor>
 8016506:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 801650a:	eea0 8b47 	vfms.f64	d8, d0, d7
 801650e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8016512:	2d00      	cmp	r5, #0
 8016514:	ee17 8a90 	vmov	r8, s15
 8016518:	9b05      	ldr	r3, [sp, #20]
 801651a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801651e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016522:	dd41      	ble.n	80165a8 <__kernel_rem_pio2+0x1a8>
 8016524:	1e60      	subs	r0, r4, #1
 8016526:	aa06      	add	r2, sp, #24
 8016528:	f1c5 0c18 	rsb	ip, r5, #24
 801652c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8016530:	fa46 f20c 	asr.w	r2, r6, ip
 8016534:	4490      	add	r8, r2
 8016536:	fa02 f20c 	lsl.w	r2, r2, ip
 801653a:	1ab6      	subs	r6, r6, r2
 801653c:	aa06      	add	r2, sp, #24
 801653e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8016542:	f1c5 0217 	rsb	r2, r5, #23
 8016546:	4116      	asrs	r6, r2
 8016548:	2e00      	cmp	r6, #0
 801654a:	dd3c      	ble.n	80165c6 <__kernel_rem_pio2+0x1c6>
 801654c:	f04f 0c00 	mov.w	ip, #0
 8016550:	f108 0801 	add.w	r8, r8, #1
 8016554:	4660      	mov	r0, ip
 8016556:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801655a:	4564      	cmp	r4, ip
 801655c:	dc66      	bgt.n	801662c <__kernel_rem_pio2+0x22c>
 801655e:	2d00      	cmp	r5, #0
 8016560:	dd03      	ble.n	801656a <__kernel_rem_pio2+0x16a>
 8016562:	2d01      	cmp	r5, #1
 8016564:	d072      	beq.n	801664c <__kernel_rem_pio2+0x24c>
 8016566:	2d02      	cmp	r5, #2
 8016568:	d07a      	beq.n	8016660 <__kernel_rem_pio2+0x260>
 801656a:	2e02      	cmp	r6, #2
 801656c:	d12b      	bne.n	80165c6 <__kernel_rem_pio2+0x1c6>
 801656e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016572:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016576:	b330      	cbz	r0, 80165c6 <__kernel_rem_pio2+0x1c6>
 8016578:	4628      	mov	r0, r5
 801657a:	f000 f9bd 	bl	80168f8 <scalbn>
 801657e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016582:	e020      	b.n	80165c6 <__kernel_rem_pio2+0x1c6>
 8016584:	ee20 7b09 	vmul.f64	d7, d0, d9
 8016588:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801658c:	3801      	subs	r0, #1
 801658e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016592:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016596:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801659a:	eca6 0a01 	vstmia	r6!, {s0}
 801659e:	ed92 0b00 	vldr	d0, [r2]
 80165a2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80165a6:	e79e      	b.n	80164e6 <__kernel_rem_pio2+0xe6>
 80165a8:	d105      	bne.n	80165b6 <__kernel_rem_pio2+0x1b6>
 80165aa:	1e62      	subs	r2, r4, #1
 80165ac:	a906      	add	r1, sp, #24
 80165ae:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80165b2:	15f6      	asrs	r6, r6, #23
 80165b4:	e7c8      	b.n	8016548 <__kernel_rem_pio2+0x148>
 80165b6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80165ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80165be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165c2:	da31      	bge.n	8016628 <__kernel_rem_pio2+0x228>
 80165c4:	2600      	movs	r6, #0
 80165c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80165ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ce:	f040 809b 	bne.w	8016708 <__kernel_rem_pio2+0x308>
 80165d2:	1e62      	subs	r2, r4, #1
 80165d4:	2000      	movs	r0, #0
 80165d6:	454a      	cmp	r2, r9
 80165d8:	da49      	bge.n	801666e <__kernel_rem_pio2+0x26e>
 80165da:	2800      	cmp	r0, #0
 80165dc:	d062      	beq.n	80166a4 <__kernel_rem_pio2+0x2a4>
 80165de:	3c01      	subs	r4, #1
 80165e0:	ab06      	add	r3, sp, #24
 80165e2:	3d18      	subs	r5, #24
 80165e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d0f8      	beq.n	80165de <__kernel_rem_pio2+0x1de>
 80165ec:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80165f0:	4628      	mov	r0, r5
 80165f2:	f000 f981 	bl	80168f8 <scalbn>
 80165f6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80166f0 <__kernel_rem_pio2+0x2f0>
 80165fa:	1c62      	adds	r2, r4, #1
 80165fc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80165fe:	00d3      	lsls	r3, r2, #3
 8016600:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016604:	4622      	mov	r2, r4
 8016606:	2a00      	cmp	r2, #0
 8016608:	f280 80a8 	bge.w	801675c <__kernel_rem_pio2+0x35c>
 801660c:	4622      	mov	r2, r4
 801660e:	2a00      	cmp	r2, #0
 8016610:	f2c0 80c6 	blt.w	80167a0 <__kernel_rem_pio2+0x3a0>
 8016614:	a96a      	add	r1, sp, #424	@ 0x1a8
 8016616:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801661a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80166e8 <__kernel_rem_pio2+0x2e8>
 801661e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8016704 <__kernel_rem_pio2+0x304>
 8016622:	2000      	movs	r0, #0
 8016624:	1aa1      	subs	r1, r4, r2
 8016626:	e0b0      	b.n	801678a <__kernel_rem_pio2+0x38a>
 8016628:	2602      	movs	r6, #2
 801662a:	e78f      	b.n	801654c <__kernel_rem_pio2+0x14c>
 801662c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016630:	b948      	cbnz	r0, 8016646 <__kernel_rem_pio2+0x246>
 8016632:	b122      	cbz	r2, 801663e <__kernel_rem_pio2+0x23e>
 8016634:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8016638:	f843 2c04 	str.w	r2, [r3, #-4]
 801663c:	2201      	movs	r2, #1
 801663e:	f10c 0c01 	add.w	ip, ip, #1
 8016642:	4610      	mov	r0, r2
 8016644:	e789      	b.n	801655a <__kernel_rem_pio2+0x15a>
 8016646:	ebae 0202 	sub.w	r2, lr, r2
 801664a:	e7f5      	b.n	8016638 <__kernel_rem_pio2+0x238>
 801664c:	1e62      	subs	r2, r4, #1
 801664e:	ab06      	add	r3, sp, #24
 8016650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016654:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016658:	a906      	add	r1, sp, #24
 801665a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801665e:	e784      	b.n	801656a <__kernel_rem_pio2+0x16a>
 8016660:	1e62      	subs	r2, r4, #1
 8016662:	ab06      	add	r3, sp, #24
 8016664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016668:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801666c:	e7f4      	b.n	8016658 <__kernel_rem_pio2+0x258>
 801666e:	ab06      	add	r3, sp, #24
 8016670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016674:	3a01      	subs	r2, #1
 8016676:	4318      	orrs	r0, r3
 8016678:	e7ad      	b.n	80165d6 <__kernel_rem_pio2+0x1d6>
 801667a:	3301      	adds	r3, #1
 801667c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8016680:	2800      	cmp	r0, #0
 8016682:	d0fa      	beq.n	801667a <__kernel_rem_pio2+0x27a>
 8016684:	9a04      	ldr	r2, [sp, #16]
 8016686:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801668a:	446a      	add	r2, sp
 801668c:	eb04 000b 	add.w	r0, r4, fp
 8016690:	a91a      	add	r1, sp, #104	@ 0x68
 8016692:	1c66      	adds	r6, r4, #1
 8016694:	3a98      	subs	r2, #152	@ 0x98
 8016696:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801669a:	4423      	add	r3, r4
 801669c:	42b3      	cmp	r3, r6
 801669e:	da04      	bge.n	80166aa <__kernel_rem_pio2+0x2aa>
 80166a0:	461c      	mov	r4, r3
 80166a2:	e713      	b.n	80164cc <__kernel_rem_pio2+0xcc>
 80166a4:	9a03      	ldr	r2, [sp, #12]
 80166a6:	2301      	movs	r3, #1
 80166a8:	e7e8      	b.n	801667c <__kernel_rem_pio2+0x27c>
 80166aa:	9902      	ldr	r1, [sp, #8]
 80166ac:	f8dd c004 	ldr.w	ip, [sp, #4]
 80166b0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 80166b4:	9104      	str	r1, [sp, #16]
 80166b6:	ee07 1a90 	vmov	s15, r1
 80166ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80166be:	2400      	movs	r4, #0
 80166c0:	eca0 7b02 	vstmia	r0!, {d7}
 80166c4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80166e8 <__kernel_rem_pio2+0x2e8>
 80166c8:	4686      	mov	lr, r0
 80166ca:	4554      	cmp	r4, sl
 80166cc:	dd03      	ble.n	80166d6 <__kernel_rem_pio2+0x2d6>
 80166ce:	eca2 7b02 	vstmia	r2!, {d7}
 80166d2:	3601      	adds	r6, #1
 80166d4:	e7e2      	b.n	801669c <__kernel_rem_pio2+0x29c>
 80166d6:	ecbc 5b02 	vldmia	ip!, {d5}
 80166da:	ed3e 6b02 	vldmdb	lr!, {d6}
 80166de:	3401      	adds	r4, #1
 80166e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80166e4:	e7f1      	b.n	80166ca <__kernel_rem_pio2+0x2ca>
 80166e6:	bf00      	nop
	...
 80166f4:	3e700000 	.word	0x3e700000
 80166f8:	00000000 	.word	0x00000000
 80166fc:	41700000 	.word	0x41700000
 8016700:	08018238 	.word	0x08018238
 8016704:	080181f8 	.word	0x080181f8
 8016708:	4268      	negs	r0, r5
 801670a:	eeb0 0b48 	vmov.f64	d0, d8
 801670e:	f000 f8f3 	bl	80168f8 <scalbn>
 8016712:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80168e0 <__kernel_rem_pio2+0x4e0>
 8016716:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801671a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801671e:	db17      	blt.n	8016750 <__kernel_rem_pio2+0x350>
 8016720:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80168e8 <__kernel_rem_pio2+0x4e8>
 8016724:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016728:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801672c:	aa06      	add	r2, sp, #24
 801672e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8016732:	eea5 0b46 	vfms.f64	d0, d5, d6
 8016736:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801673a:	3518      	adds	r5, #24
 801673c:	ee10 3a10 	vmov	r3, s0
 8016740:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016744:	ee17 3a10 	vmov	r3, s14
 8016748:	3401      	adds	r4, #1
 801674a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801674e:	e74d      	b.n	80165ec <__kernel_rem_pio2+0x1ec>
 8016750:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016754:	aa06      	add	r2, sp, #24
 8016756:	ee10 3a10 	vmov	r3, s0
 801675a:	e7f6      	b.n	801674a <__kernel_rem_pio2+0x34a>
 801675c:	a806      	add	r0, sp, #24
 801675e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016762:	9001      	str	r0, [sp, #4]
 8016764:	ee07 0a90 	vmov	s15, r0
 8016768:	3a01      	subs	r2, #1
 801676a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801676e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016772:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016776:	ed21 7b02 	vstmdb	r1!, {d7}
 801677a:	e744      	b.n	8016606 <__kernel_rem_pio2+0x206>
 801677c:	ecbc 5b02 	vldmia	ip!, {d5}
 8016780:	ecb5 6b02 	vldmia	r5!, {d6}
 8016784:	3001      	adds	r0, #1
 8016786:	eea5 7b06 	vfma.f64	d7, d5, d6
 801678a:	4548      	cmp	r0, r9
 801678c:	dc01      	bgt.n	8016792 <__kernel_rem_pio2+0x392>
 801678e:	4281      	cmp	r1, r0
 8016790:	daf4      	bge.n	801677c <__kernel_rem_pio2+0x37c>
 8016792:	a842      	add	r0, sp, #264	@ 0x108
 8016794:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8016798:	ed81 7b00 	vstr	d7, [r1]
 801679c:	3a01      	subs	r2, #1
 801679e:	e736      	b.n	801660e <__kernel_rem_pio2+0x20e>
 80167a0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80167a2:	2a02      	cmp	r2, #2
 80167a4:	dc0a      	bgt.n	80167bc <__kernel_rem_pio2+0x3bc>
 80167a6:	2a00      	cmp	r2, #0
 80167a8:	dc2d      	bgt.n	8016806 <__kernel_rem_pio2+0x406>
 80167aa:	d046      	beq.n	801683a <__kernel_rem_pio2+0x43a>
 80167ac:	f008 0007 	and.w	r0, r8, #7
 80167b0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 80167b4:	ecbd 8b06 	vpop	{d8-d10}
 80167b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167bc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 80167be:	2a03      	cmp	r2, #3
 80167c0:	d1f4      	bne.n	80167ac <__kernel_rem_pio2+0x3ac>
 80167c2:	a942      	add	r1, sp, #264	@ 0x108
 80167c4:	f1a3 0208 	sub.w	r2, r3, #8
 80167c8:	440a      	add	r2, r1
 80167ca:	4611      	mov	r1, r2
 80167cc:	4620      	mov	r0, r4
 80167ce:	2800      	cmp	r0, #0
 80167d0:	f1a1 0108 	sub.w	r1, r1, #8
 80167d4:	dc52      	bgt.n	801687c <__kernel_rem_pio2+0x47c>
 80167d6:	4621      	mov	r1, r4
 80167d8:	2901      	cmp	r1, #1
 80167da:	f1a2 0208 	sub.w	r2, r2, #8
 80167de:	dc5d      	bgt.n	801689c <__kernel_rem_pio2+0x49c>
 80167e0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80168f0 <__kernel_rem_pio2+0x4f0>
 80167e4:	aa42      	add	r2, sp, #264	@ 0x108
 80167e6:	4413      	add	r3, r2
 80167e8:	2c01      	cmp	r4, #1
 80167ea:	dc67      	bgt.n	80168bc <__kernel_rem_pio2+0x4bc>
 80167ec:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80167f0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80167f4:	2e00      	cmp	r6, #0
 80167f6:	d167      	bne.n	80168c8 <__kernel_rem_pio2+0x4c8>
 80167f8:	ed87 5b00 	vstr	d5, [r7]
 80167fc:	ed87 6b02 	vstr	d6, [r7, #8]
 8016800:	ed87 7b04 	vstr	d7, [r7, #16]
 8016804:	e7d2      	b.n	80167ac <__kernel_rem_pio2+0x3ac>
 8016806:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80168f0 <__kernel_rem_pio2+0x4f0>
 801680a:	aa42      	add	r2, sp, #264	@ 0x108
 801680c:	4413      	add	r3, r2
 801680e:	4622      	mov	r2, r4
 8016810:	2a00      	cmp	r2, #0
 8016812:	da24      	bge.n	801685e <__kernel_rem_pio2+0x45e>
 8016814:	b34e      	cbz	r6, 801686a <__kernel_rem_pio2+0x46a>
 8016816:	eeb1 7b46 	vneg.f64	d7, d6
 801681a:	ed87 7b00 	vstr	d7, [r7]
 801681e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8016822:	aa44      	add	r2, sp, #272	@ 0x110
 8016824:	2301      	movs	r3, #1
 8016826:	ee37 7b46 	vsub.f64	d7, d7, d6
 801682a:	429c      	cmp	r4, r3
 801682c:	da20      	bge.n	8016870 <__kernel_rem_pio2+0x470>
 801682e:	b10e      	cbz	r6, 8016834 <__kernel_rem_pio2+0x434>
 8016830:	eeb1 7b47 	vneg.f64	d7, d7
 8016834:	ed87 7b02 	vstr	d7, [r7, #8]
 8016838:	e7b8      	b.n	80167ac <__kernel_rem_pio2+0x3ac>
 801683a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80168f0 <__kernel_rem_pio2+0x4f0>
 801683e:	aa42      	add	r2, sp, #264	@ 0x108
 8016840:	4413      	add	r3, r2
 8016842:	2c00      	cmp	r4, #0
 8016844:	da05      	bge.n	8016852 <__kernel_rem_pio2+0x452>
 8016846:	b10e      	cbz	r6, 801684c <__kernel_rem_pio2+0x44c>
 8016848:	eeb1 7b47 	vneg.f64	d7, d7
 801684c:	ed87 7b00 	vstr	d7, [r7]
 8016850:	e7ac      	b.n	80167ac <__kernel_rem_pio2+0x3ac>
 8016852:	ed33 6b02 	vldmdb	r3!, {d6}
 8016856:	3c01      	subs	r4, #1
 8016858:	ee37 7b06 	vadd.f64	d7, d7, d6
 801685c:	e7f1      	b.n	8016842 <__kernel_rem_pio2+0x442>
 801685e:	ed33 7b02 	vldmdb	r3!, {d7}
 8016862:	3a01      	subs	r2, #1
 8016864:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016868:	e7d2      	b.n	8016810 <__kernel_rem_pio2+0x410>
 801686a:	eeb0 7b46 	vmov.f64	d7, d6
 801686e:	e7d4      	b.n	801681a <__kernel_rem_pio2+0x41a>
 8016870:	ecb2 6b02 	vldmia	r2!, {d6}
 8016874:	3301      	adds	r3, #1
 8016876:	ee37 7b06 	vadd.f64	d7, d7, d6
 801687a:	e7d6      	b.n	801682a <__kernel_rem_pio2+0x42a>
 801687c:	ed91 7b00 	vldr	d7, [r1]
 8016880:	ed91 5b02 	vldr	d5, [r1, #8]
 8016884:	3801      	subs	r0, #1
 8016886:	ee37 6b05 	vadd.f64	d6, d7, d5
 801688a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801688e:	ed81 6b00 	vstr	d6, [r1]
 8016892:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016896:	ed81 7b02 	vstr	d7, [r1, #8]
 801689a:	e798      	b.n	80167ce <__kernel_rem_pio2+0x3ce>
 801689c:	ed92 7b00 	vldr	d7, [r2]
 80168a0:	ed92 5b02 	vldr	d5, [r2, #8]
 80168a4:	3901      	subs	r1, #1
 80168a6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80168aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80168ae:	ed82 6b00 	vstr	d6, [r2]
 80168b2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80168b6:	ed82 7b02 	vstr	d7, [r2, #8]
 80168ba:	e78d      	b.n	80167d8 <__kernel_rem_pio2+0x3d8>
 80168bc:	ed33 6b02 	vldmdb	r3!, {d6}
 80168c0:	3c01      	subs	r4, #1
 80168c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80168c6:	e78f      	b.n	80167e8 <__kernel_rem_pio2+0x3e8>
 80168c8:	eeb1 5b45 	vneg.f64	d5, d5
 80168cc:	eeb1 6b46 	vneg.f64	d6, d6
 80168d0:	ed87 5b00 	vstr	d5, [r7]
 80168d4:	eeb1 7b47 	vneg.f64	d7, d7
 80168d8:	ed87 6b02 	vstr	d6, [r7, #8]
 80168dc:	e790      	b.n	8016800 <__kernel_rem_pio2+0x400>
 80168de:	bf00      	nop
 80168e0:	00000000 	.word	0x00000000
 80168e4:	41700000 	.word	0x41700000
 80168e8:	00000000 	.word	0x00000000
 80168ec:	3e700000 	.word	0x3e700000
	...

080168f8 <scalbn>:
 80168f8:	ee10 1a90 	vmov	r1, s1
 80168fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016900:	b98b      	cbnz	r3, 8016926 <scalbn+0x2e>
 8016902:	ee10 3a10 	vmov	r3, s0
 8016906:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801690a:	4319      	orrs	r1, r3
 801690c:	d00a      	beq.n	8016924 <scalbn+0x2c>
 801690e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80169c0 <scalbn+0xc8>
 8016912:	4b37      	ldr	r3, [pc, #220]	@ (80169f0 <scalbn+0xf8>)
 8016914:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016918:	4298      	cmp	r0, r3
 801691a:	da0b      	bge.n	8016934 <scalbn+0x3c>
 801691c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80169c8 <scalbn+0xd0>
 8016920:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016924:	4770      	bx	lr
 8016926:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801692a:	4293      	cmp	r3, r2
 801692c:	d107      	bne.n	801693e <scalbn+0x46>
 801692e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016932:	4770      	bx	lr
 8016934:	ee10 1a90 	vmov	r1, s1
 8016938:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801693c:	3b36      	subs	r3, #54	@ 0x36
 801693e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016942:	4290      	cmp	r0, r2
 8016944:	dd0d      	ble.n	8016962 <scalbn+0x6a>
 8016946:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80169d0 <scalbn+0xd8>
 801694a:	ee10 3a90 	vmov	r3, s1
 801694e:	eeb0 6b47 	vmov.f64	d6, d7
 8016952:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 80169d8 <scalbn+0xe0>
 8016956:	2b00      	cmp	r3, #0
 8016958:	fe27 7b05 	vselge.f64	d7, d7, d5
 801695c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016960:	4770      	bx	lr
 8016962:	4418      	add	r0, r3
 8016964:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8016968:	4298      	cmp	r0, r3
 801696a:	dcec      	bgt.n	8016946 <scalbn+0x4e>
 801696c:	2800      	cmp	r0, #0
 801696e:	dd0a      	ble.n	8016986 <scalbn+0x8e>
 8016970:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8016974:	ec53 2b10 	vmov	r2, r3, d0
 8016978:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801697c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8016980:	ec43 2b10 	vmov	d0, r2, r3
 8016984:	4770      	bx	lr
 8016986:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801698a:	da09      	bge.n	80169a0 <scalbn+0xa8>
 801698c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 80169c8 <scalbn+0xd0>
 8016990:	ee10 3a90 	vmov	r3, s1
 8016994:	eeb0 6b47 	vmov.f64	d6, d7
 8016998:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80169e0 <scalbn+0xe8>
 801699c:	2b00      	cmp	r3, #0
 801699e:	e7db      	b.n	8016958 <scalbn+0x60>
 80169a0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80169a4:	ec53 2b10 	vmov	r2, r3, d0
 80169a8:	3036      	adds	r0, #54	@ 0x36
 80169aa:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80169ae:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80169b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80169e8 <scalbn+0xf0>
 80169b6:	ec43 2b10 	vmov	d0, r2, r3
 80169ba:	e7b1      	b.n	8016920 <scalbn+0x28>
 80169bc:	f3af 8000 	nop.w
 80169c0:	00000000 	.word	0x00000000
 80169c4:	43500000 	.word	0x43500000
 80169c8:	c2f8f359 	.word	0xc2f8f359
 80169cc:	01a56e1f 	.word	0x01a56e1f
 80169d0:	8800759c 	.word	0x8800759c
 80169d4:	7e37e43c 	.word	0x7e37e43c
 80169d8:	8800759c 	.word	0x8800759c
 80169dc:	fe37e43c 	.word	0xfe37e43c
 80169e0:	c2f8f359 	.word	0xc2f8f359
 80169e4:	81a56e1f 	.word	0x81a56e1f
 80169e8:	00000000 	.word	0x00000000
 80169ec:	3c900000 	.word	0x3c900000
 80169f0:	ffff3cb0 	.word	0xffff3cb0

080169f4 <_init>:
 80169f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f6:	bf00      	nop
 80169f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169fa:	bc08      	pop	{r3}
 80169fc:	469e      	mov	lr, r3
 80169fe:	4770      	bx	lr

08016a00 <_fini>:
 8016a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a02:	bf00      	nop
 8016a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a06:	bc08      	pop	{r3}
 8016a08:	469e      	mov	lr, r3
 8016a0a:	4770      	bx	lr
