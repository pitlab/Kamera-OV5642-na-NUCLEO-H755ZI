
AutoPitLot_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001632c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001800  080165d0  080165d0  000175d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017dd0  08017dd0  00019208  2**0
                  CONTENTS
  4 .ARM          00000008  08017dd0  08017dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017dd8  08017dd8  00019208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017dd8  08017dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017ddc  08017ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  24000000  08017de0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000756bc  24000208  08017fe8  00019208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240758c4  08017fe8  000198c4  2**0
                  ALLOC
 11 .lwip_sec     00040200  30000000  30000000  0001a000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00019208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031dd2  00000000  00000000  00019236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f23  00000000  00000000  0004b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  00050f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b45  00000000  00000000  00053228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000415b6  00000000  00000000  00054d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031bbf  00000000  00000000  00096323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019e359  00000000  00000000  000c7ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0026623b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a41c  00000000  00000000  00266280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0027069c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000208 	.word	0x24000208
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080165b4 	.word	0x080165b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400020c 	.word	0x2400020c
 80002dc:	080165b4 	.word	0x080165b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <InitProtokol>:
// chIn - odbierany bajt
// chInterfejs - identyfikator interfejsu odbierająceg znak
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t InitProtokol(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	//odczytaj z konfiguracji i ustaw własny adres sieciowy
	chAdresLokalny = 2;
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <InitProtokol+0x18>)
 80007b2:	2202      	movs	r2, #2
 80007b4:	701a      	strb	r2, [r3, #0]
	return ERR_OK;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	24000233 	.word	0x24000233

080007c8 <USART3_IRQHandler>:
// Parametry:
// huart - wskaźnik na uchwyt portu
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void USART3_IRQHandler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	if (USART3->ISR & USART_ISR_RXNE_RXFNE )	//RX not empty
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <USART3_IRQHandler+0x70>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d017      	beq.n	8000808 <USART3_IRQHandler+0x40>
	{
		chBufKom[chWskNap] = USART3->RDR;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <USART3_IRQHandler+0x70>)
 80007da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <USART3_IRQHandler+0x74>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	b2c9      	uxtb	r1, r1
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <USART3_IRQHandler+0x78>)
 80007e8:	5499      	strb	r1, [r3, r2]
		chWskNap++;
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <USART3_IRQHandler+0x74>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	3301      	adds	r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <USART3_IRQHandler+0x74>)
 80007f6:	701a      	strb	r2, [r3, #0]
		chWskNap &= ROZM_BUF_KOL-1;
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <USART3_IRQHandler+0x74>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <USART3_IRQHandler+0x74>)
 8000806:	701a      	strb	r2, [r3, #0]
		//BSP_LED_Toggle(LED_RED);
	}

	if (USART3->ISR & USART_ISR_ORE )		//overrun
 8000808:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <USART3_IRQHandler+0x70>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <USART3_IRQHandler+0x52>
		USART3->ICR = USART_ICR_ORECF;		//overrun clear flag
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <USART3_IRQHandler+0x70>)
 8000816:	2208      	movs	r2, #8
 8000818:	621a      	str	r2, [r3, #32]

	if (USART3->ISR & USART_ISR_TC )		//transmission Complete
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <USART3_IRQHandler+0x70>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <USART3_IRQHandler+0x64>
		USART3->ICR = USART_ICR_TCCF;
 8000826:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <USART3_IRQHandler+0x70>)
 8000828:	2240      	movs	r2, #64	@ 0x40
 800082a:	621a      	str	r2, [r3, #32]

	//if (USART3->ISR & USART_ISR_TXE_TXFNF )		//
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40004800 	.word	0x40004800
 800083c:	24000360 	.word	0x24000360
 8000840:	24000340 	.word	0x24000340

08000844 <StartKomUart>:
// Opróżnia napełniany w przerwaniu bufor kołowy
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void StartKomUart(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	chWskNap = chWskOpr = 0;
 800084c:	2100      	movs	r1, #0
 800084e:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <StartKomUart+0x9c>)
 8000850:	460a      	mov	r2, r1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <StartKomUart+0xa0>)
 8000856:	460a      	mov	r2, r1
 8000858:	701a      	strb	r2, [r3, #0]
	uint8_t chTimeout;

	HAL_NVIC_EnableIRQ(USART3_IRQn);	//włącz obsługę przerwań
 800085a:	2027      	movs	r0, #39	@ 0x27
 800085c:	f004 ffe0 	bl	8005820 <HAL_NVIC_EnableIRQ>
	USART3->CR1 = USART_CR1_UE | USART_CR1_RE | USART_CR1_TE | USART_CR1_RXNEIE_RXFNEIE;	//włacz przerwanie odbiorcze
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <StartKomUart+0xa4>)
 8000862:	222d      	movs	r2, #45	@ 0x2d
 8000864:	601a      	str	r2, [r3, #0]

	//HAL_UART_Receive_DMA (&hcom_uart[0], chBufKom, 1);	//odbieraj do bufora
	HAL_UART_Receive_IT(&hcom_uart[0], chBufKom, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	4920      	ldr	r1, [pc, #128]	@ (80008ec <StartKomUart+0xa8>)
 800086a:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <StartKomUart+0xac>)
 800086c:	f00e fc7e 	bl	800f16c <HAL_UART_Receive_IT>
	while(1)
	{
		osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f011 f840 	bl	80118f6 <osDelay>

		while (chWskNap != chWskOpr)
 8000876:	e01d      	b.n	80008b4 <StartKomUart+0x70>
		{
			AnalizujDaneKom(chBufKom[chWskOpr], INTERF_UART);
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <StartKomUart+0x9c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	461a      	mov	r2, r3
 8000880:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <StartKomUart+0xa8>)
 8000882:	5c9b      	ldrb	r3, [r3, r2]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f836 	bl	80008f8 <AnalizujDaneKom>
			chWskOpr++;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <StartKomUart+0x9c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <StartKomUart+0x9c>)
 8000898:	701a      	strb	r2, [r3, #0]
			chWskOpr &= ROZM_BUF_KOL-1;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <StartKomUart+0x9c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 031f 	and.w	r3, r3, #31
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <StartKomUart+0x9c>)
 80008a8:	701a      	strb	r2, [r3, #0]
			BSP_LED_Toggle(LED_GREEN);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f004 fcba 	bl	8005224 <BSP_LED_Toggle>
			chTimeout = 50;
 80008b0:	2332      	movs	r3, #50	@ 0x32
 80008b2:	73fb      	strb	r3, [r7, #15]
		while (chWskNap != chWskOpr)
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <StartKomUart+0xa0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <StartKomUart+0x9c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d1d9      	bne.n	8000878 <StartKomUart+0x34>
		}


		//po upływie timeoutu resetuj stan protokołu aby następną ramkę zaczął dekodować od nagłówka
		if (chTimeout)
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <StartKomUart+0x8e>
			chTimeout--;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e002      	b.n	80008d8 <StartKomUart+0x94>
		else
			chStanProtokolu[INTERF_UART] = PR_ODBIOR_NAGL;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <StartKomUart+0xb0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	705a      	strb	r2, [r3, #1]

		BSP_LED_Off(LED_YELLOW);
 80008d8:	2001      	movs	r0, #1
 80008da:	f004 fc79 	bl	80051d0 <BSP_LED_Off>
		osDelay(1);
 80008de:	e7c7      	b.n	8000870 <StartKomUart+0x2c>
 80008e0:	24000361 	.word	0x24000361
 80008e4:	24000360 	.word	0x24000360
 80008e8:	40004800 	.word	0x40004800
 80008ec:	24000340 	.word	0x24000340
 80008f0:	24071988 	.word	0x24071988
 80008f4:	2400022c 	.word	0x2400022c

080008f8 <AnalizujDaneKom>:
// chIn - odbierany bajt
// chInterfejs - identyfikator interfejsu odbierająceg znak
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t AnalizujDaneKom(uint8_t chWe, uint8_t chInterfejs)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af04      	add	r7, sp, #16
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
    uint32_t nOffsetDanych;
    static uint8_t chPolecenie;
    static uint8_t chRozmDanych;
    static uint8_t chDane[ROZM_DANYCH_UART];

    chErr = DekodujRamke(chWe, &chAdresZdalny[chInterfejs], &chZnakCzasu[chInterfejs], &chPolecenie, &chRozmDanych, chDane, chInterfejs);
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	4a86      	ldr	r2, [pc, #536]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 800090c:	1899      	adds	r1, r3, r2
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4a85      	ldr	r2, [pc, #532]	@ (8000b28 <AnalizujDaneKom+0x230>)
 8000912:	441a      	add	r2, r3
 8000914:	79f8      	ldrb	r0, [r7, #7]
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	4b84      	ldr	r3, [pc, #528]	@ (8000b2c <AnalizujDaneKom+0x234>)
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	4b84      	ldr	r3, [pc, #528]	@ (8000b30 <AnalizujDaneKom+0x238>)
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	4b84      	ldr	r3, [pc, #528]	@ (8000b34 <AnalizujDaneKom+0x23c>)
 8000924:	f000 f918 	bl	8000b58 <DekodujRamke>
 8000928:	4603      	mov	r3, r0
 800092a:	73bb      	strb	r3, [r7, #14]
    if (chErr == ERR_RAMKA_GOTOWA)
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	2b0d      	cmp	r3, #13
 8000930:	f040 80f2 	bne.w	8000b18 <AnalizujDaneKom+0x220>
    {
		switch (chPolecenie)
 8000934:	4b7f      	ldr	r3, [pc, #508]	@ (8000b34 <AnalizujDaneKom+0x23c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b09      	cmp	r3, #9
 800093a:	f200 80ed 	bhi.w	8000b18 <AnalizujDaneKom+0x220>
 800093e:	a201      	add	r2, pc, #4	@ (adr r2, 8000944 <AnalizujDaneKom+0x4c>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	0800096d 	.word	0x0800096d
 8000948:	08000b19 	.word	0x08000b19
 800094c:	0800097b 	.word	0x0800097b
 8000950:	080009c1 	.word	0x080009c1
 8000954:	080009e3 	.word	0x080009e3
 8000958:	08000a27 	.word	0x08000a27
 800095c:	08000a31 	.word	0x08000a31
 8000960:	08000a53 	.word	0x08000a53
 8000964:	08000a69 	.word	0x08000a69
 8000968:	08000acb 	.word	0x08000acb
		{
		case PK_OK:	//odeslij polecenie OK
			chErr = Wyslij_OK(chInterfejs);
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 faf6 	bl	8000f60 <Wyslij_OK>
 8000974:	4603      	mov	r3, r0
 8000976:	73bb      	strb	r3, [r7, #14]
			break;
 8000978:	e0ce      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_ZROB_ZDJECIE:		//polecenie wykonania zdjęcia. We: [0..1] - sSzerokosc zdjecia, [2..3] - wysokość zdjecia
			sSzerZdjecia = (uint16_t)chDane[1] * 0x100 + chDane[0];
 800097a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b2c <AnalizujDaneKom+0x234>)
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	4a6a      	ldr	r2, [pc, #424]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	4413      	add	r3, r2
 8000988:	b29b      	uxth	r3, r3
 800098a:	b21a      	sxth	r2, r3
 800098c:	4b6a      	ldr	r3, [pc, #424]	@ (8000b38 <AnalizujDaneKom+0x240>)
 800098e:	801a      	strh	r2, [r3, #0]
			sWysZdjecia  = (uint16_t)chDane[3] * 0x100 + chDane[2];
 8000990:	4b66      	ldr	r3, [pc, #408]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000992:	78db      	ldrb	r3, [r3, #3]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b29b      	uxth	r3, r3
 8000998:	4a64      	ldr	r2, [pc, #400]	@ (8000b2c <AnalizujDaneKom+0x234>)
 800099a:	7892      	ldrb	r2, [r2, #2]
 800099c:	4413      	add	r3, r2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	4b66      	ldr	r3, [pc, #408]	@ (8000b3c <AnalizujDaneKom+0x244>)
 80009a4:	801a      	strh	r2, [r3, #0]
			chTrybPracy = TP_ZDJECIE;
 80009a6:	4b66      	ldr	r3, [pc, #408]	@ (8000b40 <AnalizujDaneKom+0x248>)
 80009a8:	2214      	movs	r2, #20
 80009aa:	701a      	strb	r2, [r3, #0]
			chStatusZdjecia = SGZ_CZEKA;	//oczekiwania na wykonanie zdjęcia
 80009ac:	4b65      	ldr	r3, [pc, #404]	@ (8000b44 <AnalizujDaneKom+0x24c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
			chErr = Wyslij_OK(chInterfejs);
 80009b2:	79bb      	ldrb	r3, [r7, #6]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fad3 	bl	8000f60 <Wyslij_OK>
 80009ba:	4603      	mov	r3, r0
 80009bc:	73bb      	strb	r3, [r7, #14]
			break;
 80009be:	e0ab      	b.n	8000b18 <AnalizujDaneKom+0x220>
				{
					sPix = (x*2) & 0xFFFF;
					nBuforKamery[x] = (sPix+1)*0x10000 + sPix;
				}
			}*/
			chDane[0] = chStatusZdjecia;
 80009c0:	4b60      	ldr	r3, [pc, #384]	@ (8000b44 <AnalizujDaneKom+0x24c>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	4b59      	ldr	r3, [pc, #356]	@ (8000b2c <AnalizujDaneKom+0x234>)
 80009c6:	701a      	strb	r2, [r3, #0]
			chErr = WyslijRamke(chAdresZdalny[chInterfejs], PK_POB_STAT_ZDJECIA, 1, chDane, chInterfejs);
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	4a56      	ldr	r2, [pc, #344]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 80009cc:	5cd0      	ldrb	r0, [r2, r3]
 80009ce:	79bb      	ldrb	r3, [r7, #6]
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	4b56      	ldr	r3, [pc, #344]	@ (8000b2c <AnalizujDaneKom+0x234>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	2103      	movs	r1, #3
 80009d8:	f000 fa58 	bl	8000e8c <WyslijRamke>
 80009dc:	4603      	mov	r3, r0
 80009de:	73bb      	strb	r3, [r7, #14]
			break;
 80009e0:	e09a      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_POBIERZ_ZDJECIE:		//polecenie przesłania fragmentu zdjecia. We: [0..3] - wskaźnik na pozycje bufora, [4] - rozmiar danych do przesłania
			for (n=0; n<4; n++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e008      	b.n	80009fa <AnalizujDaneKom+0x102>
				un8_32.dane8[n] = chDane[n];
 80009e8:	7bfa      	ldrb	r2, [r7, #15]
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	494f      	ldr	r1, [pc, #316]	@ (8000b2c <AnalizujDaneKom+0x234>)
 80009ee:	5c89      	ldrb	r1, [r1, r2]
 80009f0:	4a55      	ldr	r2, [pc, #340]	@ (8000b48 <AnalizujDaneKom+0x250>)
 80009f2:	54d1      	strb	r1, [r2, r3]
			for (n=0; n<4; n++)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	3301      	adds	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	d9f3      	bls.n	80009e8 <AnalizujDaneKom+0xf0>
			nOffsetDanych = un8_32.dane32;
 8000a00:	4b51      	ldr	r3, [pc, #324]	@ (8000b48 <AnalizujDaneKom+0x250>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60bb      	str	r3, [r7, #8]
			WyslijRamke(chAdresZdalny[chInterfejs], PK_POBIERZ_ZDJECIE, chDane[4], (uint8_t*)(nBuforKamery + nOffsetDanych),  chInterfejs);
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	4a46      	ldr	r2, [pc, #280]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 8000a0a:	5cd0      	ldrb	r0, [r2, r3]
 8000a0c:	4b47      	ldr	r3, [pc, #284]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a0e:	791a      	ldrb	r2, [r3, #4]
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	494d      	ldr	r1, [pc, #308]	@ (8000b4c <AnalizujDaneKom+0x254>)
 8000a16:	4419      	add	r1, r3
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	2104      	movs	r1, #4
 8000a20:	f000 fa34 	bl	8000e8c <WyslijRamke>
			break;
 8000a24:	e078      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_USTAW_ID:		//ustawia identyfikator/adres urządzenia
			chAdresLokalny = chDane[0];
 8000a26:	4b41      	ldr	r3, [pc, #260]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b49      	ldr	r3, [pc, #292]	@ (8000b50 <AnalizujDaneKom+0x258>)
 8000a2c:	701a      	strb	r2, [r3, #0]
			break;
 8000a2e:	e073      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_POBIERZ_ID:		//pobiera identyfikator/adres urządzenia
			chDane[0] = chAdresLokalny;
 8000a30:	4b47      	ldr	r3, [pc, #284]	@ (8000b50 <AnalizujDaneKom+0x258>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b3d      	ldr	r3, [pc, #244]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a36:	701a      	strb	r2, [r3, #0]
			chErr = WyslijRamke(chAdresZdalny[chInterfejs], PK_POBIERZ_ID, 1, chDane, chInterfejs);
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 8000a3c:	5cd0      	ldrb	r0, [r2, r3]
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4b3a      	ldr	r3, [pc, #232]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	2106      	movs	r1, #6
 8000a48:	f000 fa20 	bl	8000e8c <WyslijRamke>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73bb      	strb	r3, [r7, #14]
			break;
 8000a50:	e062      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_UST_TR_PRACY:	//ustaw tryb pracy
			chTrybPracy = chDane[0];
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <AnalizujDaneKom+0x248>)
 8000a58:	701a      	strb	r2, [r3, #0]
			chErr = Wyslij_OK(chInterfejs);
 8000a5a:	79bb      	ldrb	r3, [r7, #6]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fa7f 	bl	8000f60 <Wyslij_OK>
 8000a62:	4603      	mov	r3, r0
 8000a64:	73bb      	strb	r3, [r7, #14]
			break;
 8000a66:	e057      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_POB_PAR_KAMERY:	//pobierz parametry pracy kamery
			chDane[0] = (uint8_t)(KonfKam.sSzerWy / SKALA_ROZDZ_KAM);
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a74:	701a      	strb	r2, [r3, #0]
			chDane[1] = (uint8_t)(KonfKam.sWysWy / SKALA_ROZDZ_KAM);
 8000a76:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a78:	88db      	ldrh	r3, [r3, #6]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a82:	705a      	strb	r2, [r3, #1]
			chDane[2] = (uint8_t)(KonfKam.sSzerWe / SKALA_ROZDZ_KAM);
 8000a84:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a90:	709a      	strb	r2, [r3, #2]
			chDane[3] = (uint8_t)(KonfKam.sWysWe / SKALA_ROZDZ_KAM);
 8000a92:	4b30      	ldr	r3, [pc, #192]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000a94:	885b      	ldrh	r3, [r3, #2]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000a9e:	70da      	strb	r2, [r3, #3]
			chDane[4] = KonfKam.chTrybDiagn;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000aa2:	7a1a      	ldrb	r2, [r3, #8]
 8000aa4:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000aa6:	711a      	strb	r2, [r3, #4]
			chDane[5] = KonfKam.chFlagi;
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000aaa:	7a5a      	ldrb	r2, [r3, #9]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000aae:	715a      	strb	r2, [r3, #5]
			chErr = WyslijRamke(chAdresZdalny[chInterfejs], PK_POB_PAR_KAMERY, 6, chDane, chInterfejs);
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <AnalizujDaneKom+0x22c>)
 8000ab4:	5cd0      	ldrb	r0, [r2, r3]
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000abc:	2206      	movs	r2, #6
 8000abe:	2108      	movs	r1, #8
 8000ac0:	f000 f9e4 	bl	8000e8c <WyslijRamke>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73bb      	strb	r3, [r7, #14]
			break;
 8000ac8:	e026      	b.n	8000b18 <AnalizujDaneKom+0x220>

		case PK_UST_PAR_KAMERY:	//ustaw parametry pracy kamery
			KonfKam.sSzerWy = chDane[0] * SKALA_ROZDZ_KAM;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000ad4:	809a      	strh	r2, [r3, #4]
			KonfKam.sWysWy = chDane[1] * SKALA_ROZDZ_KAM;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000ae0:	80da      	strh	r2, [r3, #6]
			KonfKam.sSzerWe = chDane[2] * SKALA_ROZDZ_KAM;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000ae4:	789b      	ldrb	r3, [r3, #2]
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000aec:	801a      	strh	r2, [r3, #0]
			KonfKam.sWysWe = chDane[3] * SKALA_ROZDZ_KAM;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000af0:	78db      	ldrb	r3, [r3, #3]
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000af8:	805a      	strh	r2, [r3, #2]
			KonfKam.chTrybDiagn = chDane[4];
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000afc:	791a      	ldrb	r2, [r3, #4]
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000b00:	721a      	strb	r2, [r3, #8]
			KonfKam.chFlagi = chDane[5];
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <AnalizujDaneKom+0x234>)
 8000b04:	795a      	ldrb	r2, [r3, #5]
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <AnalizujDaneKom+0x25c>)
 8000b08:	725a      	strb	r2, [r3, #9]
			chErr = Wyslij_OK(chInterfejs);
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fa27 	bl	8000f60 <Wyslij_OK>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73bb      	strb	r3, [r7, #14]
			break;
 8000b16:	bf00      	nop
		}
    }
    return chErr;
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24000230 	.word	0x24000230
 8000b28:	24000238 	.word	0x24000238
 8000b2c:	2400036c 	.word	0x2400036c
 8000b30:	24000368 	.word	0x24000368
 8000b34:	24000367 	.word	0x24000367
 8000b38:	24000362 	.word	0x24000362
 8000b3c:	24000364 	.word	0x24000364
 8000b40:	24000008 	.word	0x24000008
 8000b44:	24000366 	.word	0x24000366
 8000b48:	24000228 	.word	0x24000228
 8000b4c:	24000cfc 	.word	0x24000cfc
 8000b50:	24000233 	.word	0x24000233
 8000b54:	2404bd00 	.word	0x2404bd00

08000b58 <DekodujRamke>:
// *chData - wskaźnik na dane do polecenia
// *chDataSize - ilość danych do polecenia
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t DekodujRamke(uint8_t chWe, uint8_t *chAdrZdalny, uint8_t *chZnakCzasu, uint8_t *chPolecenie, uint8_t *chRozmDanych, uint8_t *chDane, uint8_t chInterfejs)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	4603      	mov	r3, r0
 8000b66:	73fb      	strb	r3, [r7, #15]
	uint8_t n, chErr = ERR_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	75bb      	strb	r3, [r7, #22]
    //if (chProtoTimeout[chInterfejs] == 0)
   // {
     //   chProtoState[chInterfejs] = PR_ODB_NAGL;
    //}

    switch (chStanProtokolu[chInterfejs])
 8000b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000b70:	4a73      	ldr	r2, [pc, #460]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000b72:	5cd3      	ldrb	r3, [r2, r3]
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	f200 80d5 	bhi.w	8000d24 <DekodujRamke+0x1cc>
 8000b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <DekodujRamke+0x28>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000ba5 	.word	0x08000ba5
 8000b84:	08000bdf 	.word	0x08000bdf
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000bf1 	.word	0x08000bf1
 8000b90:	08000c03 	.word	0x08000c03
 8000b94:	08000c15 	.word	0x08000c15
 8000b98:	08000c45 	.word	0x08000c45
 8000b9c:	08000c83 	.word	0x08000c83
 8000ba0:	08000c9b 	.word	0x08000c9b
    {
    case PR_ODBIOR_NAGL:	//testuj czy odebrano nagłówek
	if (chWe == NAGLOWEK)
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2baa      	cmp	r3, #170	@ 0xaa
 8000ba8:	d105      	bne.n	8000bb6 <DekodujRamke+0x5e>
	{
		chStanProtokolu[chInterfejs] = PR_ADRES_ODB;
 8000baa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bae:	4a64      	ldr	r2, [pc, #400]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	54d1      	strb	r1, [r2, r3]
            //chProtoTimeout[chInterfejs] = 30; //30ms
            //NVIC_ISER0 =  (1 << ((unsigned int)(RIT_IRQn) & 0x1F));     //włącz przerwanie RIT
	}
	else
	    chErr = ERR_ZLY_NAGL;
	break;
 8000bb4:	e0bf      	b.n	8000d36 <DekodujRamke+0x1de>
	    chErr = ERR_ZLY_NAGL;
 8000bb6:	230e      	movs	r3, #14
 8000bb8:	75bb      	strb	r3, [r7, #22]
	break;
 8000bba:	e0bc      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ADRES_ODB:
    	if (chWe == chAdresLokalny)				//czy odebraliśmy własny adres sieciowy
 8000bbc:	4b61      	ldr	r3, [pc, #388]	@ (8000d44 <DekodujRamke+0x1ec>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	7bfa      	ldrb	r2, [r7, #15]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d105      	bne.n	8000bd2 <DekodujRamke+0x7a>
    		chStanProtokolu[chInterfejs] = PR_ADRES_NAD;
 8000bc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bca:	4a5d      	ldr	r2, [pc, #372]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bcc:	2101      	movs	r1, #1
 8000bce:	54d1      	strb	r1, [r2, r3]
    	else
    		chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
    	break;
 8000bd0:	e0b1      	b.n	8000d36 <DekodujRamke+0x1de>
    		chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
 8000bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	54d1      	strb	r1, [r2, r3]
    	break;
 8000bdc:	e0ab      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ADRES_NAD:			//adres sieciowy strony zdalnej
    	*chAdrZdalny = chWe;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	701a      	strb	r2, [r3, #0]
    	chStanProtokolu[chInterfejs] = PR_ZNAK_CZASU;
 8000be4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000be8:	4a55      	ldr	r2, [pc, #340]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bea:	2103      	movs	r1, #3
 8000bec:	54d1      	strb	r1, [r2, r3]
    	break;
 8000bee:	e0a2      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ZNAK_CZASU:   //odbierz znacznik czasu
        *chZnakCzasu = chWe;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7bfa      	ldrb	r2, [r7, #15]
 8000bf4:	701a      	strb	r2, [r3, #0]
        chStanProtokolu[chInterfejs] = PR_POLECENIE;
 8000bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000bfa:	4a51      	ldr	r2, [pc, #324]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	54d1      	strb	r1, [r2, r3]
        break;
 8000c00:	e099      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_POLECENIE:
    	*chPolecenie = chWe;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	701a      	strb	r2, [r3, #0]
    	chStanProtokolu[chInterfejs] = PR_ROZM_DANYCH;
 8000c08:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c0e:	2105      	movs	r1, #5
 8000c10:	54d1      	strb	r1, [r2, r3]
    	break;
 8000c12:	e090      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_ROZM_DANYCH:	//odebrano rozmiar danych
    	*chRozmDanych = chWe;
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	701a      	strb	r2, [r3, #0]
    	chLicznikDanych[chInterfejs] = 0;
 8000c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	54d1      	strb	r1, [r2, r3]
    	if (*chRozmDanych > 0)
 8000c24:	6a3b      	ldr	r3, [r7, #32]
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d005      	beq.n	8000c38 <DekodujRamke+0xe0>
    		chStanProtokolu[chInterfejs] = PR_DANE;
 8000c2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c30:	4a43      	ldr	r2, [pc, #268]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c32:	2106      	movs	r1, #6
 8000c34:	54d1      	strb	r1, [r2, r3]
    	else
    		chStanProtokolu[chInterfejs] = PR_CRC16_1;
    	break;
 8000c36:	e07e      	b.n	8000d36 <DekodujRamke+0x1de>
    		chStanProtokolu[chInterfejs] = PR_CRC16_1;
 8000c38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c3c:	4a40      	ldr	r2, [pc, #256]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c3e:	2107      	movs	r1, #7
 8000c40:	54d1      	strb	r1, [r2, r3]
    	break;
 8000c42:	e078      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_DANE:
    	*(chDane + chLicznikDanych[chInterfejs]) = chWe;
 8000c44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c48:	4a3f      	ldr	r2, [pc, #252]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	4413      	add	r3, r2
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	701a      	strb	r2, [r3, #0]
    	chLicznikDanych[chInterfejs]++;
 8000c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c5c:	5cd2      	ldrb	r2, [r2, r3]
 8000c5e:	3201      	adds	r2, #1
 8000c60:	b2d1      	uxtb	r1, r2
 8000c62:	4a39      	ldr	r2, [pc, #228]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c64:	54d1      	strb	r1, [r2, r3]
    	if (chLicznikDanych[chInterfejs] == *chRozmDanych)
 8000c66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c6a:	4a37      	ldr	r2, [pc, #220]	@ (8000d48 <DekodujRamke+0x1f0>)
 8000c6c:	5cd2      	ldrb	r2, [r2, r3]
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d15e      	bne.n	8000d34 <DekodujRamke+0x1dc>
    	{
    		chStanProtokolu[chInterfejs] = PR_CRC16_1;
 8000c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c7a:	4a31      	ldr	r2, [pc, #196]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	54d1      	strb	r1, [r2, r3]
    	}
    	break;
 8000c80:	e058      	b.n	8000d34 <DekodujRamke+0x1dc>

    case PR_CRC16_1:
    	sCrc16We = chWe * 0x100;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	021b      	lsls	r3, r3, #8
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000c8c:	801a      	strh	r2, [r3, #0]
    	chStanProtokolu[chInterfejs] = PR_CRC16_2;
 8000c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c92:	4a2b      	ldr	r2, [pc, #172]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000c94:	2108      	movs	r1, #8
 8000c96:	54d1      	strb	r1, [r2, r3]
    	break;
 8000c98:	e04d      	b.n	8000d36 <DekodujRamke+0x1de>

    case PR_CRC16_2:
    	sCrc16We += chWe;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000ca8:	801a      	strh	r2, [r3, #0]
		chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
 8000caa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cae:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	54d1      	strb	r1, [r2, r3]
		//dodać blokadę zasobu CRC
		InicjujCRC16(0, WIELOMIAN_CRC);
 8000cb4:	f241 0121 	movw	r1, #4129	@ 0x1021
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f84b 	bl	8000d54 <InicjujCRC16>
		*((volatile uint8_t *)&CRC->DR) = chAdresLokalny;
 8000cbe:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cc0:	4a20      	ldr	r2, [pc, #128]	@ (8000d44 <DekodujRamke+0x1ec>)
 8000cc2:	7812      	ldrb	r2, [r2, #0]
 8000cc4:	701a      	strb	r2, [r3, #0]
		*((volatile uint8_t *)&CRC->DR) = *chAdrZdalny;
 8000cc6:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	7013      	strb	r3, [r2, #0]
		*((volatile uint8_t *)&CRC->DR) = *chZnakCzasu;
 8000cce:	4a20      	ldr	r2, [pc, #128]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	7013      	strb	r3, [r2, #0]
		*((volatile uint8_t *)&CRC->DR) = *chPolecenie;
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	7013      	strb	r3, [r2, #0]
		*((volatile uint8_t *)&CRC->DR) = *chRozmDanych;
 8000cde:	4a1c      	ldr	r2, [pc, #112]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	7013      	strb	r3, [r2, #0]
		for (n=0; n<*chRozmDanych; n++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	75fb      	strb	r3, [r7, #23]
 8000cea:	e008      	b.n	8000cfe <DekodujRamke+0x1a6>
			*((volatile uint8_t *)&CRC->DR) = *(chDane + n);
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	7013      	strb	r3, [r2, #0]
		for (n=0; n<*chRozmDanych; n++)
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	75fb      	strb	r3, [r7, #23]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	7dfa      	ldrb	r2, [r7, #23]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3f1      	bcc.n	8000cec <DekodujRamke+0x194>
		sCrc16Obl = (uint16_t)CRC->DR;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <DekodujRamke+0x1f8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	82bb      	strh	r3, [r7, #20]
		//zdjąć blokadę zasobu CRC

		if (sCrc16We == sCrc16Obl)
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <DekodujRamke+0x1f4>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	8aba      	ldrh	r2, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d102      	bne.n	8000d1e <DekodujRamke+0x1c6>
			chErr = ERR_RAMKA_GOTOWA;
 8000d18:	230d      	movs	r3, #13
 8000d1a:	75bb      	strb	r3, [r7, #22]
		else
			chErr = ERR_CRC;
		break;
 8000d1c:	e00b      	b.n	8000d36 <DekodujRamke+0x1de>
			chErr = ERR_CRC;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	75bb      	strb	r3, [r7, #22]
		break;
 8000d22:	e008      	b.n	8000d36 <DekodujRamke+0x1de>

    default:
    	chStanProtokolu[chInterfejs] = PR_ODBIOR_NAGL;
 8000d24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000d28:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <DekodujRamke+0x1e8>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	54d1      	strb	r1, [r2, r3]
    	chErr = ERR_ZLY_STAN_PROT;
 8000d2e:	230f      	movs	r3, #15
 8000d30:	75bb      	strb	r3, [r7, #22]
    	break;
 8000d32:	e000      	b.n	8000d36 <DekodujRamke+0x1de>
    	break;
 8000d34:	bf00      	nop
    }

    return chErr;
 8000d36:	7dbb      	ldrb	r3, [r7, #22]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2400022c 	.word	0x2400022c
 8000d44:	24000233 	.word	0x24000233
 8000d48:	24000234 	.word	0x24000234
 8000d4c:	2400023c 	.word	0x2400023c
 8000d50:	58024c00 	.word	0x58024c00

08000d54 <InicjujCRC16>:
// sInit - wartość inicjująca lizzenie
// sWielomian - wielomian CRC
//Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void InicjujCRC16(uint16_t sInit, uint16_t sWielomian)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	80fb      	strh	r3, [r7, #6]
 8000d60:	4613      	mov	r3, r2
 8000d62:	80bb      	strh	r3, [r7, #4]
	CRC->INIT = sInit;
 8000d64:	4a07      	ldr	r2, [pc, #28]	@ (8000d84 <InicjujCRC16+0x30>)
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	6113      	str	r3, [r2, #16]
	CRC->POL = sWielomian;
 8000d6a:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <InicjujCRC16+0x30>)
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	6153      	str	r3, [r2, #20]
	CRC->CR = CRC_CR_RESET | CRC_CR_POLYSIZE_0;
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <InicjujCRC16+0x30>)
 8000d72:	2209      	movs	r2, #9
 8000d74:	609a      	str	r2, [r3, #8]
	//CRC->CR = CRC_CR_RESET | CRC_CR_POLYSIZE_0 | CRC_CR_REV_IN_0;
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	58024c00 	.word	0x58024c00

08000d88 <PrzygotujRamke>:
// chDlugosc - ilość danych do polecenia
// *chRamka - wskaźnik na ramkę do wysłania
//Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t PrzygotujRamke(uint8_t chAdrZdalny, uint8_t chAdrLokalny,  uint8_t chZnakCzasu, uint8_t chPolecenie, uint8_t chRozmDanych, uint8_t *chDane, uint8_t *chRamka)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4608      	mov	r0, r1
 8000d92:	4611      	mov	r1, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	4623      	mov	r3, r4
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71bb      	strb	r3, [r7, #6]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	717b      	strb	r3, [r7, #5]
 8000da2:	4613      	mov	r3, r2
 8000da4:	713b      	strb	r3, [r7, #4]
    if (chRozmDanych > ROZM_DANYCH_UART)
 8000da6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000daa:	2bf6      	cmp	r3, #246	@ 0xf6
 8000dac:	d901      	bls.n	8000db2 <PrzygotujRamke+0x2a>
    	return(ERR_ZLA_ILOSC_DANYCH);
 8000dae:	2304      	movs	r3, #4
 8000db0:	e063      	b.n	8000e7a <PrzygotujRamke+0xf2>

    if ((chPolecenie & ~0x80) > PK_ILOSC_POLECEN)
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000db8:	2b0a      	cmp	r3, #10
 8000dba:	dd01      	ble.n	8000dc0 <PrzygotujRamke+0x38>
    	return(ERR_ZLE_POLECENIE);
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	e05c      	b.n	8000e7a <PrzygotujRamke+0xf2>

    *(chRamka++) = NAGLOWEK;
 8000dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dc6:	22aa      	movs	r2, #170	@ 0xaa
 8000dc8:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chAdrZdalny;		//ADRES ODBIORCY
 8000dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chAdrLokalny;	//ADERS NADAWCY
 8000dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dda:	79ba      	ldrb	r2, [r7, #6]
 8000ddc:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chZnakCzasu;
 8000dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000de4:	797a      	ldrb	r2, [r7, #5]
 8000de6:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chPolecenie;
 8000de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000dee:	793a      	ldrb	r2, [r7, #4]
 8000df0:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = chRozmDanych;
 8000df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000df8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dfc:	701a      	strb	r2, [r3, #0]

    //dodać blokadę zasobu CRC
    InicjujCRC16(0, WIELOMIAN_CRC);
 8000dfe:	f241 0121 	movw	r1, #4129	@ 0x1021
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff ffa6 	bl	8000d54 <InicjujCRC16>
    CRC->DR = chAdrZdalny;
 8000e08:	4a1e      	ldr	r2, [pc, #120]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	6013      	str	r3, [r2, #0]
	CRC->DR = chAdrLokalny;
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	6013      	str	r3, [r2, #0]
	CRC->DR = chZnakCzasu;
 8000e14:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e16:	797b      	ldrb	r3, [r7, #5]
 8000e18:	6013      	str	r3, [r2, #0]
	CRC->DR = chPolecenie;
 8000e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e1c:	793b      	ldrb	r3, [r7, #4]
 8000e1e:	6013      	str	r3, [r2, #0]
	CRC->DR = chRozmDanych;
 8000e20:	4a18      	ldr	r2, [pc, #96]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e26:	6013      	str	r3, [r2, #0]

    for (uint8_t n=0; n<chRozmDanych; n++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e00e      	b.n	8000e4c <PrzygotujRamke+0xc4>
    	*(chRamka++) = CRC->DR =  *(chDane + n);
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e32:	4413      	add	r3, r2
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e38:	4611      	mov	r1, r2
 8000e3a:	6019      	str	r1, [r3, #0]
 8000e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e42:	b2ca      	uxtb	r2, r1
 8000e44:	701a      	strb	r2, [r3, #0]
    for (uint8_t n=0; n<chRozmDanych; n++)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3eb      	bcc.n	8000e2e <PrzygotujRamke+0xa6>

    un8_16.dane16 = (uint16_t)CRC->DR;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <PrzygotujRamke+0xfc>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e88 <PrzygotujRamke+0x100>)
 8000e5e:	801a      	strh	r2, [r3, #0]
    //zdjąć blokadę zasobu CRC

    *(chRamka++) = un8_16.dane8[1];	//starszy
 8000e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e66:	4a08      	ldr	r2, [pc, #32]	@ (8000e88 <PrzygotujRamke+0x100>)
 8000e68:	7852      	ldrb	r2, [r2, #1]
 8000e6a:	701a      	strb	r2, [r3, #0]
    *(chRamka++) = un8_16.dane8[0];	//młodszy
 8000e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <PrzygotujRamke+0x100>)
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	701a      	strb	r2, [r3, #0]
    return ERR_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}
 8000e82:	bf00      	nop
 8000e84:	58024c00 	.word	0x58024c00
 8000e88:	24000224 	.word	0x24000224

08000e8c <WyslijRamke>:
// *chFrame - wskaźnik na ramkę do wysłania
// chLen - ilość danych do polecenia
// Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t WyslijRamke(uint8_t chAdrZdalny, uint8_t chPolecenie, uint8_t chRozmDanych, uint8_t *chDane, uint8_t chInterfejs)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	@ 0x24
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	71bb      	strb	r3, [r7, #6]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	717b      	strb	r3, [r7, #5]
	uint8_t chErr;
	uint8_t chLokalnyZnakCzasu = (nCzasSystemowy / 10) & 0xFF;
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <WyslijRamke+0xbc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a29      	ldr	r2, [pc, #164]	@ (8000f4c <WyslijRamke+0xc0>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	73bb      	strb	r3, [r7, #14]

    if (chPolecenie & 0x80)
 8000eae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da10      	bge.n	8000ed8 <WyslijRamke+0x4c>
    	chErr = PrzygotujRamke(chAdrZdalny, chAdresLokalny,  chLokalnyZnakCzasu, chPolecenie, chRozmDanych, chDane, chRamkaWyj);	//ramka telemetryczna
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <WyslijRamke+0xc4>)
 8000eb8:	7819      	ldrb	r1, [r3, #0]
 8000eba:	79bc      	ldrb	r4, [r7, #6]
 8000ebc:	7bba      	ldrb	r2, [r7, #14]
 8000ebe:	79f8      	ldrb	r0, [r7, #7]
 8000ec0:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <WyslijRamke+0xc8>)
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	797b      	ldrb	r3, [r7, #5]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4623      	mov	r3, r4
 8000ece:	f7ff ff5b 	bl	8000d88 <PrzygotujRamke>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e012      	b.n	8000efe <WyslijRamke+0x72>
    else
    	chErr = PrzygotujRamke(chAdrZdalny, chAdresLokalny,  chZnakCzasu[chInterfejs], chPolecenie, chRozmDanych, chDane, chRamkaWyj);	//ramka odpowiedzi
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <WyslijRamke+0xc4>)
 8000eda:	7819      	ldrb	r1, [r3, #0]
 8000edc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f58 <WyslijRamke+0xcc>)
 8000ee2:	5cd2      	ldrb	r2, [r2, r3]
 8000ee4:	79bc      	ldrb	r4, [r7, #6]
 8000ee6:	79f8      	ldrb	r0, [r7, #7]
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <WyslijRamke+0xc8>)
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	9301      	str	r3, [sp, #4]
 8000ef0:	797b      	ldrb	r3, [r7, #5]
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	f7ff ff47 	bl	8000d88 <PrzygotujRamke>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]

    if (chErr == ERR_OK)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11b      	bne.n	8000f3c <WyslijRamke+0xb0>
    {
    	switch (chInterfejs)
 8000f04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d014      	beq.n	8000f36 <WyslijRamke+0xaa>
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	dc0f      	bgt.n	8000f30 <WyslijRamke+0xa4>
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d002      	beq.n	8000f1a <WyslijRamke+0x8e>
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d010      	beq.n	8000f3a <WyslijRamke+0xae>
 8000f18:	e00a      	b.n	8000f30 <WyslijRamke+0xa4>
    	{
    	case INTERF_UART:	HAL_UART_Transmit(&hcom_uart [0],  chRamkaWyj, chRozmDanych + ROZM_CIALA_RAMKI, COM_POLL_TIMEOUT);	break;
 8000f1a:	797b      	ldrb	r3, [r7, #5]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3308      	adds	r3, #8
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f26:	490b      	ldr	r1, [pc, #44]	@ (8000f54 <WyslijRamke+0xc8>)
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <WyslijRamke+0xd0>)
 8000f2a:	f00e f891 	bl	800f050 <HAL_UART_Transmit>
 8000f2e:	e005      	b.n	8000f3c <WyslijRamke+0xb0>
    	case INTERF_ETH:	break;
    	case INTERF_USB:	break;
    	default: chErr = ERR_ZLY_INTERFEJS;	break;
 8000f30:	2311      	movs	r3, #17
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e002      	b.n	8000f3c <WyslijRamke+0xb0>
    	case INTERF_USB:	break;
 8000f36:	bf00      	nop
 8000f38:	e000      	b.n	8000f3c <WyslijRamke+0xb0>
    	case INTERF_ETH:	break;
 8000f3a:	bf00      	nop
    	}
    }
    return chErr;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2404c120 	.word	0x2404c120
 8000f4c:	cccccccd 	.word	0xcccccccd
 8000f50:	24000233 	.word	0x24000233
 8000f54:	24000240 	.word	0x24000240
 8000f58:	24000238 	.word	0x24000238
 8000f5c:	24071988 	.word	0x24071988

08000f60 <Wyslij_OK>:
// Parametry:
// [i] chInterfejs - interfejs komunikacyjny przez który ma być przesłana ramka
// Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t Wyslij_OK(uint8_t chInterfejs)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
    return WyslijRamke(chAdresZdalny[chInterfejs], PK_OK, 0, 0, chInterfejs);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <Wyslij_OK+0x28>)
 8000f6e:	5cd0      	ldrb	r0, [r2, r3]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f7ff ff87 	bl	8000e8c <WyslijRamke>
 8000f7e:	4603      	mov	r3, r0
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	24000230 	.word	0x24000230

08000f8c <InitEth>:
// Inicjalizuje moduł ethernetowy
// Parametry: *pEth - wskaźnik na instancję modułu ethetrnetowego
// Zwraca: systemowy kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t  InitEth(ETH_HandleTypeDef* pEth)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]




	//stan = pEth->gState;
	HAL_ETH_Start(pEth);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f008 fc87 	bl	80098a8 <HAL_ETH_Start>
	//stan = pEth->gState;
	//ETH_DMADESCTTypeDef DMARxDescTabp
	//pEth->
	return ERR_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <AnalizujEth>:
// Odczytuje ramk ethernetową
// Parametry: *pEth - wskaźnik na instancję modułu ethetrnetowego
// Zwraca: systemowy kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t  AnalizujEth(ETH_HandleTypeDef* pEth)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	static uint8_t chPakiet[ETH_MAX_PACKET_SIZE];
	//uint32_t nRozmiar;
	HAL_ETH_ReadData(pEth, (void **)&chPakiet);
 8000fac:	4906      	ldr	r1, [pc, #24]	@ (8000fc8 <AnalizujEth+0x24>)
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f008 fcdc 	bl	800996c <HAL_ETH_ReadData>

	WyswietlAnalizeEth(&chPakiet[8], &chPakiet[14]);
 8000fb4:	4905      	ldr	r1, [pc, #20]	@ (8000fcc <AnalizujEth+0x28>)
 8000fb6:	4806      	ldr	r0, [pc, #24]	@ (8000fd0 <AnalizujEth+0x2c>)
 8000fb8:	f003 fff4 	bl	8004fa4 <WyswietlAnalizeEth>
	return ERR_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	24000464 	.word	0x24000464
 8000fcc:	24000472 	.word	0x24000472
 8000fd0:	2400046c 	.word	0x2400046c

08000fd4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <vApplicationGetIdleTaskMemory+0x30>)
 8000fea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2280      	movs	r2, #128	@ 0x80
 8000ff0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	24000a5c 	.word	0x24000a5c
 8001004:	24000afc 	.word	0x24000afc

08001008 <KameraInit>:
// Inicjalizacja pracy kamery
// Parametry: brak
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef KameraInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

	__HAL_RCC_DCMI_CLK_ENABLE();
 8001012:	4b46      	ldr	r3, [pc, #280]	@ (800112c <KameraInit+0x124>)
 8001014:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001018:	4a44      	ldr	r2, [pc, #272]	@ (800112c <KameraInit+0x124>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001022:	4b42      	ldr	r3, [pc, #264]	@ (800112c <KameraInit+0x124>)
 8001024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001030:	4b3e      	ldr	r3, [pc, #248]	@ (800112c <KameraInit+0x124>)
 8001032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001036:	4a3d      	ldr	r2, [pc, #244]	@ (800112c <KameraInit+0x124>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001040:	4b3a      	ldr	r3, [pc, #232]	@ (800112c <KameraInit+0x124>)
 8001042:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

	//zegar timera taktowany jest z APB1 = 120MHz, prescaler = 0
	//kamera wymaga zegara 24MHz (6-27MHz), więc zegar trzeba podzielić na 5
	TIM14->CR1 |= TIM_CR1_CEN;		//włącz timer taktujacy kamerę
 800104e:	4b38      	ldr	r3, [pc, #224]	@ (8001130 <KameraInit+0x128>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a37      	ldr	r2, [pc, #220]	@ (8001130 <KameraInit+0x128>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6013      	str	r3, [r2, #0]
	TIM14->ARR = KAMERA_DZIELNIK_ZEGARA - 1;		//częstotliwość PWM
 800105a:	4b35      	ldr	r3, [pc, #212]	@ (8001130 <KameraInit+0x128>)
 800105c:	2205      	movs	r2, #5
 800105e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM14->CCR1 = KAMERA_WYPELN_PWM;			//wypełnienie PWM
 8001060:	4b33      	ldr	r3, [pc, #204]	@ (8001130 <KameraInit+0x128>)
 8001062:	2203      	movs	r2, #3
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM14->CCER |= TIM_CCER_CC1E;	//włącz wyjście timera
 8001066:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <KameraInit+0x128>)
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	4a31      	ldr	r2, [pc, #196]	@ (8001130 <KameraInit+0x128>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6213      	str	r3, [r2, #32]

	KameraPWDN(GPIO_PIN_SET);		//włącz PWND
 8001072:	2001      	movs	r0, #1
 8001074:	f001 f916 	bl	80022a4 <KameraPWDN>
	HAL_Delay(10);	//power on period
 8001078:	200a      	movs	r0, #10
 800107a:	f004 fabb 	bl	80055f4 <HAL_Delay>
	KameraPWDN(GPIO_PIN_RESET);		//wyłącz PWND
 800107e:	2000      	movs	r0, #0
 8001080:	f001 f910 	bl	80022a4 <KameraPWDN>
	HAL_Delay(30);
 8001084:	201e      	movs	r0, #30
 8001086:	f004 fab5 	bl	80055f4 <HAL_Delay>

	err = SprawdzKamere();		//sprawdź czy mamy kontakt z kamerą
 800108a:	f000 fc33 	bl	80018f4 <SprawdzKamere>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
	if (err)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <KameraInit+0x94>
		return err;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	e043      	b.n	8001124 <KameraInit+0x11c>

	Wyslij_I2C_Kamera(0x3103, 0x93);	//PLL clock select: [1] PLL input clock: 1=from pre-divider
 800109c:	2193      	movs	r1, #147	@ 0x93
 800109e:	f243 1003 	movw	r0, #12547	@ 0x3103
 80010a2:	f000 fb7b 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3008, 0x82);	//system control 00: [7] software reset mode, [6] software power down mode {def=0x02}
 80010a6:	2182      	movs	r1, #130	@ 0x82
 80010a8:	f243 0008 	movw	r0, #12296	@ 0x3008
 80010ac:	f000 fb76 	bl	800179c <Wyslij_I2C_Kamera>
	HAL_Delay(30);
 80010b0:	201e      	movs	r0, #30
 80010b2:	f004 fa9f 	bl	80055f4 <HAL_Delay>
	/*err = Wyslij_Blok_Kamera(ov5642_dvp_fmt_global_init);		//174ms @ 20MHz
	if (err)
		return err;*/
	err = Wyslij_Blok_Kamera(OV5642_RGB_QVGA);					//150ms @ 20MHz
 80010b6:	481f      	ldr	r0, [pc, #124]	@ (8001134 <KameraInit+0x12c>)
 80010b8:	f000 fbc0 	bl	800183c <Wyslij_Blok_Kamera>
 80010bc:	4603      	mov	r3, r0
 80010be:	73fb      	strb	r3, [r7, #15]
	if (err)
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <KameraInit+0xc2>
		return err;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	e02c      	b.n	8001124 <KameraInit+0x11c>

	//ustaw domyślne parametry pracy kamery
	KonfKam.sSzerWe = 1280;
 80010ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <KameraInit+0x130>)
 80010cc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80010d0:	801a      	strh	r2, [r3, #0]
	KonfKam.sWysWe = 960;
 80010d2:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <KameraInit+0x130>)
 80010d4:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80010d8:	805a      	strh	r2, [r3, #2]
	KonfKam.sSzerWy = 320;
 80010da:	4b17      	ldr	r3, [pc, #92]	@ (8001138 <KameraInit+0x130>)
 80010dc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010e0:	809a      	strh	r2, [r3, #4]
	KonfKam.sWysWy = 240;
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <KameraInit+0x130>)
 80010e4:	22f0      	movs	r2, #240	@ 0xf0
 80010e6:	80da      	strh	r2, [r3, #6]
	KonfKam.chTrybDiagn = 0;	//brak trybu diagnostycznego
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <KameraInit+0x130>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	721a      	strb	r2, [r3, #8]
	KonfKam.chFlagi = 0;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <KameraInit+0x130>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	725a      	strb	r2, [r3, #9]

	err = UstawKamere(&KonfKam);
 80010f4:	4810      	ldr	r0, [pc, #64]	@ (8001138 <KameraInit+0x130>)
 80010f6:	f000 f821 	bl	800113c <UstawKamere>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
	if (err)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <KameraInit+0x100>
		return err;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	e00d      	b.n	8001124 <KameraInit+0x11c>

	Wyslij_I2C_Kamera(0x4300, 0x6F);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 8001108:	216f      	movs	r1, #111	@ 0x6f
 800110a:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800110e:	f000 fb45 	bl	800179c <Wyslij_I2C_Kamera>

	return RozpocznijPraceDCMI(KonfKam.chFlagi & FUK1_ZDJ_FILM);	//1 = zdjecie, 0 = film (tylko ten jeden bit)
 8001112:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <KameraInit+0x130>)
 8001114:	7a5b      	ldrb	r3, [r3, #9]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f881 	bl	8001224 <RozpocznijPraceDCMI>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	58024400 	.word	0x58024400
 8001130:	40002000 	.word	0x40002000
 8001134:	080168ec 	.word	0x080168ec
 8001138:	2404bd00 	.word	0x2404bd00

0800113c <UstawKamere>:
// konfiguruje wybrane parametry kamery
// Parametry: konf - struktura konfiguracji kamery
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef UstawKamere(typKonfKam *konf)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	uint8_t chReg;

	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 8001144:	217f      	movs	r1, #127	@ 0x7f
 8001146:	f245 0001 	movw	r0, #20481	@ 0x5001
 800114a:	f000 fb27 	bl	800179c <Wyslij_I2C_Kamera>

	//ustaw rozdzielczość wejściową
	Wyslij_I2C_Kamera(0x3804, (uint8_t)(konf->sSzerWe>>8));		//Timing HW: [3:0] Horizontal width high byte 0x500=1280,  0x280=640, 0x140=320 (scale input}
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4619      	mov	r1, r3
 800115a:	f643 0004 	movw	r0, #14340	@ 0x3804
 800115e:	f000 fb1d 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, (uint8_t)(konf->sSzerWe & 0xFF));	//Timing HW: [7:0] Horizontal width low byte
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	f643 0005 	movw	r0, #14341	@ 0x3805
 800116e:	f000 fb15 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, (uint8_t)(konf->sWysWe>>8));			//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480, 0x0F0=240
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	885b      	ldrh	r3, [r3, #2]
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	b29b      	uxth	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	f643 0006 	movw	r0, #14342	@ 0x3806
 8001182:	f000 fb0b 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, (uint8_t)(konf->sWysWe & 0xFF));		//Timing VH: [7:0] HREF vertical height low byte
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	885b      	ldrh	r3, [r3, #2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	f643 0007 	movw	r0, #14343	@ 0x3807
 8001192:	f000 fb03 	bl	800179c <Wyslij_I2C_Kamera>

	//ustaw rozdzielczość wyjściową
	Wyslij_I2C_Kamera(0x3808, (uint8_t)(konf->sSzerWy>>8));		//Timing DVPHO: [3:0] output horizontal width high byte [11:8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	889b      	ldrh	r3, [r3, #4]
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	b29b      	uxth	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4619      	mov	r1, r3
 80011a2:	f643 0008 	movw	r0, #14344	@ 0x3808
 80011a6:	f000 faf9 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3809, (uint8_t)(konf->sSzerWy & 0xFF));	//Timing DVPHO: [7:0] output horizontal width low byte [7:0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	889b      	ldrh	r3, [r3, #4]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4619      	mov	r1, r3
 80011b2:	f643 0009 	movw	r0, #14345	@ 0x3809
 80011b6:	f000 faf1 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380a, (uint8_t)(konf->sWysWy>>8));			//Timing DVPVO: [3:0] output vertical height high byte [11:8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	88db      	ldrh	r3, [r3, #6]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4619      	mov	r1, r3
 80011c6:	f643 000a 	movw	r0, #14346	@ 0x380a
 80011ca:	f000 fae7 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380b, (uint8_t)(konf->sWysWy & 0xFF));		//Timing DVPVO: [7:0] output vertical height low byte [7:0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	88db      	ldrh	r3, [r3, #6]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4619      	mov	r1, r3
 80011d6:	f643 000b 	movw	r0, #14347	@ 0x380b
 80011da:	f000 fadf 	bl	800179c <Wyslij_I2C_Kamera>

	//wzór testowy
	switch(konf->chTrybDiagn)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a1b      	ldrb	r3, [r3, #8]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d002      	beq.n	80011ec <UstawKamere+0xb0>
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d00b      	beq.n	8001202 <UstawKamere+0xc6>
 80011ea:	e015      	b.n	8001218 <UstawKamere+0xdc>
	{
	case TDK_KRATA_CB:	//czarnobiała karata
		Wyslij_I2C_Kamera(0x503d , 0x85);	//test pattern: B/W square
 80011ec:	2185      	movs	r1, #133	@ 0x85
 80011ee:	f245 003d 	movw	r0, #20541	@ 0x503d
 80011f2:	f000 fad3 	bl	800179c <Wyslij_I2C_Kamera>
		Wyslij_I2C_Kamera(0x503e, 0x1a);	//PRE ISP TEST SETTING2 [7] reserved, [6:4] 1=random data pattern seed enable, [3] 1=test pattern square b/w mode, [2] 1=add test pattern on image data, [1:0] 0=color bar, 1=random data, 2=square data, 3=black image
 80011f6:	211a      	movs	r1, #26
 80011f8:	f245 003e 	movw	r0, #20542	@ 0x503e
 80011fc:	f000 face 	bl	800179c <Wyslij_I2C_Kamera>
		break;
 8001200:	e00a      	b.n	8001218 <UstawKamere+0xdc>

	case TDK_PASKI:		//7 pionowych pasków
		Wyslij_I2C_Kamera(0x503d , 0x80);	//test pattern: color bar
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	f245 003d 	movw	r0, #20541	@ 0x503d
 8001208:	f000 fac8 	bl	800179c <Wyslij_I2C_Kamera>
		Wyslij_I2C_Kamera(0x503e, 0x00);	//PRE ISP TEST SETTING2 [7] reserved, [6:4] 1=random data pattern seed enable, [3] 1=test pattern square b/w mode, [2] 1=add test pattern on image data, [1:0] 0=color bar, 1=random data, 2=square data, 3=black image
 800120c:	2100      	movs	r1, #0
 800120e:	f245 003e 	movw	r0, #20542	@ 0x503e
 8001212:	f000 fac3 	bl	800179c <Wyslij_I2C_Kamera>
		break;
 8001216:	bf00      	nop

	case TDK_PRACA:		//normalna praca
	default:
	}

	return 0;
 8001218:	2300      	movs	r3, #0
	//ustaw rotację w poziomie i pionie
	//chReg = 0x80 + ((konf->chFlagi && FUK1_OBR_PION) << 6) +  ((konf->chFlagi && FUK1_OBR_POZ) << 5);
	//return Wyslij_I2C_Kamera(0x3818, chReg);	//TIMING TC REG18: [6] mirror, [5] Vertial flip, [4] 1=thumbnail mode,  [3] 1=compression, [1] vertical subsample 1/4, [0] vertical subsample 1/2  <def:0x80>
	//for the mirror function it is necessary to set registers 0x3621 [5:4] and 0x3801
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <RozpocznijPraceDCMI>:
// uruchamia DCMI w trybie pojedyńczego zdjęcia jako aparat lub ciagłej pracy jako kamera
// Parametry: chAparat - 1 = tryb pojedyńczego zdjęcia, 0 = tryb filmu
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef RozpocznijPraceDCMI(uint8_t chAparat)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef err;

	hdcmi.Instance = DCMI;
 800122e:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001230:	4a3f      	ldr	r2, [pc, #252]	@ (8001330 <RozpocznijPraceDCMI+0x10c>)
 8001232:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001234:	4b3d      	ldr	r3, [pc, #244]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001240:	4b3a      	ldr	r3, [pc, #232]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001248:	2240      	movs	r2, #64	@ 0x40
 800124a:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800124c:	4b37      	ldr	r3, [pc, #220]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001252:	4b36      	ldr	r3, [pc, #216]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001258:	4b34      	ldr	r3, [pc, #208]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800125e:	4b33      	ldr	r3, [pc, #204]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001264:	4b31      	ldr	r3, [pc, #196]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001266:	2200      	movs	r2, #0
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800126a:	4b30      	ldr	r3, [pc, #192]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 800126c:	2200      	movs	r2, #0
 800126e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001270:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001272:	2200      	movs	r2, #0
 8001274:	631a      	str	r2, [r3, #48]	@ 0x30
	hdcmi.Instance->IER = DCMI_IT_FRAME | DCMI_IT_OVR | DCMI_IT_ERR | DCMI_IT_VSYNC | DCMI_IT_LINE;
 8001276:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	221f      	movs	r2, #31
 800127c:	60da      	str	r2, [r3, #12]
	err = HAL_DCMI_Init(&hdcmi);
 800127e:	482b      	ldr	r0, [pc, #172]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 8001280:	f004 fc5a 	bl	8005b38 <HAL_DCMI_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]
	if (err)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <RozpocznijPraceDCMI+0x6e>
		return err;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	e047      	b.n	8001322 <RozpocznijPraceDCMI+0xfe>

	//konfiguracja DMA do DCMI
	hdma_dcmi.Instance = DMA1_Stream0;
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 8001294:	4a28      	ldr	r2, [pc, #160]	@ (8001338 <RozpocznijPraceDCMI+0x114>)
 8001296:	601a      	str	r2, [r3, #0]
	hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001298:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 800129a:	224b      	movs	r2, #75	@ 0x4b
 800129c:	605a      	str	r2, [r3, #4]
	hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129e:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
	hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a4:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
	hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80012aa:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b0:	611a      	str	r2, [r3, #16]
	hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012b8:	615a      	str	r2, [r3, #20]
	hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c0:	619a      	str	r2, [r3, #24]
	if (chAparat)		//1 = zdjecie, 0 = film
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <RozpocznijPraceDCMI+0xac>
		hdma_dcmi.Init.Mode = DMA_NORMAL;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
 80012ce:	e003      	b.n	80012d8 <RozpocznijPraceDCMI+0xb4>
	else
		hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d6:	61da      	str	r2, [r3, #28]
	hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012de:	621a      	str	r2, [r3, #32]
	hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
	err = HAL_DMA_Init(&hdma_dcmi);
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <RozpocznijPraceDCMI+0x110>)
 80012e8:	f004 fef4 	bl	80060d4 <HAL_DMA_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
	if (err)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <RozpocznijPraceDCMI+0xd6>
		return err;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	e013      	b.n	8001322 <RozpocznijPraceDCMI+0xfe>

	//Konfiguracja transferu DMA z DCMI do pamięci
	if (chAparat)		//1 = zdjecie, 0 = film
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <RozpocznijPraceDCMI+0xee>
		return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 8001300:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <RozpocznijPraceDCMI+0x118>)
 8001302:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001306:	2102      	movs	r1, #2
 8001308:	4808      	ldr	r0, [pc, #32]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 800130a:	f004 fc8f 	bl	8005c2c <HAL_DCMI_Start_DMA>
 800130e:	4603      	mov	r3, r0
 8001310:	e007      	b.n	8001322 <RozpocznijPraceDCMI+0xfe>
	else
		return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <RozpocznijPraceDCMI+0x118>)
 8001314:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001318:	2100      	movs	r1, #0
 800131a:	4804      	ldr	r0, [pc, #16]	@ (800132c <RozpocznijPraceDCMI+0x108>)
 800131c:	f004 fc86 	bl	8005c2c <HAL_DCMI_Start_DMA>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2404bd7c 	.word	0x2404bd7c
 8001330:	48020000 	.word	0x48020000
 8001334:	2404bdcc 	.word	0x2404bdcc
 8001338:	40020010 	.word	0x40020010
 800133c:	24000cfc 	.word	0x24000cfc

08001340 <InitKamera3>:
}



HAL_StatusTypeDef InitKamera3(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err;

	TIM14->CR1 |= TIM_CR1_CEN;		//włącz timer taktujacy kamerę
 8001346:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <InitKamera3+0x90>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <InitKamera3+0x90>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6013      	str	r3, [r2, #0]
	TIM14->ARR = KAMERA_DZIELNIK_ZEGARA - 1;	//częstotliwość PWM
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <InitKamera3+0x90>)
 8001354:	2205      	movs	r2, #5
 8001356:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM14->CCR1 = KAMERA_WYPELN_PWM;			//wypełnienie PWM
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <InitKamera3+0x90>)
 800135a:	2203      	movs	r2, #3
 800135c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM14->CCER |= TIM_CCER_CC1E;	//włącz wyjście timera
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <InitKamera3+0x90>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <InitKamera3+0x90>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]

	Wyslij_I2C_Kamera(0x3103, 0x93);	//PLL clock select: [1] PLL input clock: 1=from pre-divider
 800136a:	2193      	movs	r1, #147	@ 0x93
 800136c:	f243 1003 	movw	r0, #12547	@ 0x3103
 8001370:	f000 fa14 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3008, 0x82);	//system control 00: [7] software reset mode, [6] software power down mode {def=0x02}
 8001374:	2182      	movs	r1, #130	@ 0x82
 8001376:	f243 0008 	movw	r0, #12296	@ 0x3008
 800137a:	f000 fa0f 	bl	800179c <Wyslij_I2C_Kamera>
	HAL_Delay(100);
 800137e:	2064      	movs	r0, #100	@ 0x64
 8001380:	f004 f938 	bl	80055f4 <HAL_Delay>
	//err = Wyslij_Blok_Kamera(ov5642_dvp_fmt_global_init);
	//if (err)
		//return err;
	err = Wyslij_Blok_Kamera(OV5642_RGB_QVGA);					//150ms
 8001384:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <InitKamera3+0x94>)
 8001386:	f000 fa59 	bl	800183c <Wyslij_Blok_Kamera>
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
	if (err)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <InitKamera3+0x58>
		return err;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	e016      	b.n	80013c6 <InitKamera3+0x86>
	//Wyslij_I2C_Kamera(0x4300, 0x62);
	//Wyslij_I2C_Kamera(0x4745, 0x01);	//data order [1:0]: 0=D[9:0], 1=D[7:0],D[9:8], 2=D[1:0],D[9:2]
	//Wyslij_I2C_Kamera(0x4741, 0x07);	//test pattern [2] test pattern enable, [1] pattern 0/1, [0] 0=pattern 10-bit, 1=8-bit
	Wyslij_I2C_Kamera(0x503d , 0x80);	//test pattern: color bar
 8001398:	2180      	movs	r1, #128	@ 0x80
 800139a:	f245 003d 	movw	r0, #20541	@ 0x503d
 800139e:	f000 f9fd 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x503e, 0x00);
 80013a2:	2100      	movs	r1, #0
 80013a4:	f245 003e 	movw	r0, #20542	@ 0x503e
 80013a8:	f000 f9f8 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x4300, 0x62);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 80013ac:	2162      	movs	r1, #98	@ 0x62
 80013ae:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 80013b2:	f000 f9f3 	bl	800179c <Wyslij_I2C_Kamera>

	//HAL_DCMI_ConfigCrop(&hdcmi, (2592-640)/2, (1944-480)/2, 640-1, 480-1);
	//HAL_DCMI_EnableCrop(&hdcmi);

	//Konfiguracja transferu DMA z DCMI do pamięci
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <InitKamera3+0x98>)
 80013b8:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80013bc:	2100      	movs	r1, #0
 80013be:	4807      	ldr	r0, [pc, #28]	@ (80013dc <InitKamera3+0x9c>)
 80013c0:	f004 fc34 	bl	8005c2c <HAL_DCMI_Start_DMA>
 80013c4:	4603      	mov	r3, r0
	/*err = HAL_DCMI_Stop(&hdcmi);
	if (err)
		return err;
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);*/
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40002000 	.word	0x40002000
 80013d4:	080168ec 	.word	0x080168ec
 80013d8:	24000cfc 	.word	0x24000cfc
 80013dc:	2404bd7c 	.word	0x2404bd7c

080013e0 <InitKamera4>:



HAL_StatusTypeDef InitKamera4(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err;

	TIM14->CR1 = (0 >> TIM_CR1_CKD_Pos) |	//CKD[1:0] bits (clock division) - zegar wejsciowy bez dzielnika
 80013e6:	4b57      	ldr	r3, [pc, #348]	@ (8001544 <InitKamera4+0x164>)
 80013e8:	2203      	movs	r2, #3
 80013ea:	601a      	str	r2, [r3, #0]
					TIM_CR1_UDIS |			//<Update disable = 1, nie generuj przerwania ani eventu, zawartość rejestrów ARR, PSC i CCR1 bez zmian
					TIM_CR1_CEN;			//Counter enable = 1, włącz timer taktujacy kamerę
	TIM14->ARR = KAMERA_DZIELNIK_ZEGARA - 1;		//częstotliwość PWM
 80013ec:	4b55      	ldr	r3, [pc, #340]	@ (8001544 <InitKamera4+0x164>)
 80013ee:	2205      	movs	r2, #5
 80013f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM14->CCR1 = KAMERA_WYPELN_PWM;			//wypełnienie PWM
 80013f2:	4b54      	ldr	r3, [pc, #336]	@ (8001544 <InitKamera4+0x164>)
 80013f4:	2203      	movs	r2, #3
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM14->CCER |= TIM_CCER_CC1E;	//włącz wyjście timera
 80013f8:	4b52      	ldr	r3, [pc, #328]	@ (8001544 <InitKamera4+0x164>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a51      	ldr	r2, [pc, #324]	@ (8001544 <InitKamera4+0x164>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6213      	str	r3, [r2, #32]

	Wyslij_I2C_Kamera(0x3103, 0x93);	//PLL clock select: [1] PLL input clock: 1=from pre-divider
 8001404:	2193      	movs	r1, #147	@ 0x93
 8001406:	f243 1003 	movw	r0, #12547	@ 0x3103
 800140a:	f000 f9c7 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3008, 0x82);	//system control 00: [7] software reset mode, [6] software power down mode {def=0x02}
 800140e:	2182      	movs	r1, #130	@ 0x82
 8001410:	f243 0008 	movw	r0, #12296	@ 0x3008
 8001414:	f000 f9c2 	bl	800179c <Wyslij_I2C_Kamera>
	HAL_Delay(100);
 8001418:	2064      	movs	r0, #100	@ 0x64
 800141a:	f004 f8eb 	bl	80055f4 <HAL_Delay>
	//Wyslij_Blok_Kamera(ov5642_dvp_fmt_global_init);
	err = Wyslij_Blok_Kamera(OV5642_RGB_QVGA);					//150ms
 800141e:	484a      	ldr	r0, [pc, #296]	@ (8001548 <InitKamera4+0x168>)
 8001420:	f000 fa0c 	bl	800183c <Wyslij_Blok_Kamera>
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
	if (err)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <InitKamera4+0x52>
		return err;
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	e083      	b.n	800153a <InitKamera4+0x15a>
	//Wyslij_I2C_Kamera(0x4300, 0x61);
	//Wyslij_I2C_Kamera(0x4745, 0x02);	//data order [1:0]: 0=D[9:0], 1=D[7:0],D[9:8], 2=D[1:0],D[9:2]
	//Wyslij_I2C_Kamera(0x4741, 0x07);	//test pattern [2] test pattern enable, [1] pattern 0/1, [0] 0=pattern 10-bit, 1=8-bit
	//Wyslij_I2C_Kamera(0x4741 , 0x4);	//test pattern: DLI

	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 8001432:	217f      	movs	r1, #127	@ 0x7f
 8001434:	f245 0001 	movw	r0, #20481	@ 0x5001
 8001438:	f000 f9b0 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3804, 0x02);	//Timing HW: [3:0] Horizontal width high byte 0x500=1280 (scale input} 0x280=640
 800143c:	2102      	movs	r1, #2
 800143e:	f643 0004 	movw	r0, #14340	@ 0x3804
 8001442:	f000 f9ab 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, 0x80);	//Timing HW: [7:0] Horizontal width low byte
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	f643 0005 	movw	r0, #14341	@ 0x3805
 800144c:	f000 f9a6 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, 0x01);	//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480
 8001450:	2101      	movs	r1, #1
 8001452:	f643 0006 	movw	r0, #14342	@ 0x3806
 8001456:	f000 f9a1 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, 0xE0);	//Timing VH: [7:0] HREF vertical height low byte
 800145a:	21e0      	movs	r1, #224	@ 0xe0
 800145c:	f643 0007 	movw	r0, #14343	@ 0x3807
 8001460:	f000 f99c 	bl	800179c <Wyslij_I2C_Kamera>
	//Wyslij_I2C_Kamera(0x3818, 0x80);	//TIMING TC REG18: [6] mirror, [5] Vertial flip, [4] 1=thumbnail mode enabled, [3] 1=compression enabled, [1] vertical subsample 1/4, [0] vertical subsample 1/2  <def:0x80>
	//Wyslij_I2C_Kamera(0x503d , 0x85);	//test pattern: B/W square
	//Wyslij_I2C_Kamera(0x503e, 0x1a);
	//Wyslij_I2C_Kamera(0x5001, 0x4F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB

	Wyslij_I2C_Kamera(0x4300, 0x6F);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 8001464:	216f      	movs	r1, #111	@ 0x6f
 8001466:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800146a:	f000 f997 	bl	800179c <Wyslij_I2C_Kamera>


	//konfiguracja DCMI
	hdcmi.Instance = DCMI;
 800146e:	4b37      	ldr	r3, [pc, #220]	@ (800154c <InitKamera4+0x16c>)
 8001470:	4a37      	ldr	r2, [pc, #220]	@ (8001550 <InitKamera4+0x170>)
 8001472:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001474:	4b35      	ldr	r3, [pc, #212]	@ (800154c <InitKamera4+0x16c>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <InitKamera4+0x16c>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001480:	4b32      	ldr	r3, [pc, #200]	@ (800154c <InitKamera4+0x16c>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001486:	4b31      	ldr	r3, [pc, #196]	@ (800154c <InitKamera4+0x16c>)
 8001488:	2240      	movs	r2, #64	@ 0x40
 800148a:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800148c:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <InitKamera4+0x16c>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001492:	4b2e      	ldr	r3, [pc, #184]	@ (800154c <InitKamera4+0x16c>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001498:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <InitKamera4+0x16c>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800149e:	4b2b      	ldr	r3, [pc, #172]	@ (800154c <InitKamera4+0x16c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80014a4:	4b29      	ldr	r3, [pc, #164]	@ (800154c <InitKamera4+0x16c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <InitKamera4+0x16c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80014b0:	4b26      	ldr	r3, [pc, #152]	@ (800154c <InitKamera4+0x16c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
	hdcmi.Instance->IER = DCMI_IT_FRAME | DCMI_IT_OVR | DCMI_IT_ERR | DCMI_IT_VSYNC | DCMI_IT_LINE;
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <InitKamera4+0x16c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	221f      	movs	r2, #31
 80014bc:	60da      	str	r2, [r3, #12]
	err = HAL_DCMI_Init(&hdcmi);
 80014be:	4823      	ldr	r0, [pc, #140]	@ (800154c <InitKamera4+0x16c>)
 80014c0:	f004 fb3a 	bl	8005b38 <HAL_DCMI_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
	if (err)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <InitKamera4+0xf2>
		return err;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	e033      	b.n	800153a <InitKamera4+0x15a>

    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80014d2:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <InitKamera4+0x174>)
 80014d4:	4a20      	ldr	r2, [pc, #128]	@ (8001558 <InitKamera4+0x178>)
 80014d6:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <InitKamera4+0x174>)
 80014da:	224b      	movs	r2, #75	@ 0x4b
 80014dc:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014de:	4b1d      	ldr	r3, [pc, #116]	@ (8001554 <InitKamera4+0x174>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001554 <InitKamera4+0x174>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <InitKamera4+0x174>)
 80014ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f0:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <InitKamera4+0x174>)
 80014f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014f8:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <InitKamera4+0x174>)
 80014fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001500:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001502:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <InitKamera4+0x174>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <InitKamera4+0x174>)
 800150a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800150e:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001510:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <InitKamera4+0x174>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	@ 0x24
    err = HAL_DMA_Init(&hdma_dcmi);
 8001516:	480f      	ldr	r0, [pc, #60]	@ (8001554 <InitKamera4+0x174>)
 8001518:	f004 fddc 	bl	80060d4 <HAL_DMA_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
	if (err)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <InitKamera4+0x14a>
		return err;
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	e007      	b.n	800153a <InitKamera4+0x15a>

	//Konfiguracja transferu DMA z DCMI do pamięci
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 800152a:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <InitKamera4+0x17c>)
 800152c:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001530:	2100      	movs	r1, #0
 8001532:	4806      	ldr	r0, [pc, #24]	@ (800154c <InitKamera4+0x16c>)
 8001534:	f004 fb7a 	bl	8005c2c <HAL_DCMI_Start_DMA>
 8001538:	4603      	mov	r3, r0
	//return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM); */
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40002000 	.word	0x40002000
 8001548:	080168ec 	.word	0x080168ec
 800154c:	2404bd7c 	.word	0x2404bd7c
 8001550:	48020000 	.word	0x48020000
 8001554:	2404bdcc 	.word	0x2404bdcc
 8001558:	40020010 	.word	0x40020010
 800155c:	24000cfc 	.word	0x24000cfc

08001560 <InitKamera5>:



HAL_StatusTypeDef InitKamera5(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err;

	TIM14->CR1 |= TIM_CR1_CEN;		//włącz timer taktujacy kamerę
 8001566:	4b58      	ldr	r3, [pc, #352]	@ (80016c8 <InitKamera5+0x168>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a57      	ldr	r2, [pc, #348]	@ (80016c8 <InitKamera5+0x168>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]
	TIM14->ARR = KAMERA_DZIELNIK_ZEGARA - 1;	//częstotliwość PWM
 8001572:	4b55      	ldr	r3, [pc, #340]	@ (80016c8 <InitKamera5+0x168>)
 8001574:	2205      	movs	r2, #5
 8001576:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM14->CCR1 = KAMERA_WYPELN_PWM;			//wypełnienie PWM
 8001578:	4b53      	ldr	r3, [pc, #332]	@ (80016c8 <InitKamera5+0x168>)
 800157a:	2203      	movs	r2, #3
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM14->CCER |= TIM_CCER_CC1E;	//włącz wyjście timera
 800157e:	4b52      	ldr	r3, [pc, #328]	@ (80016c8 <InitKamera5+0x168>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a51      	ldr	r2, [pc, #324]	@ (80016c8 <InitKamera5+0x168>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]

	Wyslij_I2C_Kamera(0x3103, 0x93);	//PLL clock select: [1] PLL input clock: 1=from pre-divider
 800158a:	2193      	movs	r1, #147	@ 0x93
 800158c:	f243 1003 	movw	r0, #12547	@ 0x3103
 8001590:	f000 f904 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3008, 0x82);	//system control 00: [7] software reset mode, [6] software power down mode {def=0x02}
 8001594:	2182      	movs	r1, #130	@ 0x82
 8001596:	f243 0008 	movw	r0, #12296	@ 0x3008
 800159a:	f000 f8ff 	bl	800179c <Wyslij_I2C_Kamera>
	HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	@ 0x64
 80015a0:	f004 f828 	bl	80055f4 <HAL_Delay>
	//Wyslij_Blok_Kamera(ov5642_dvp_fmt_global_init);
	err = Wyslij_Blok_Kamera(OV5642_RGB_QVGA);					//150ms
 80015a4:	4849      	ldr	r0, [pc, #292]	@ (80016cc <InitKamera5+0x16c>)
 80015a6:	f000 f949 	bl	800183c <Wyslij_Blok_Kamera>
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
	if (err)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <InitKamera5+0x58>
		return err;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	e083      	b.n	80016c0 <InitKamera5+0x160>
	//Wyslij_I2C_Kamera(0x4300, 0x61);
	//Wyslij_I2C_Kamera(0x4745, 0x02);	//data order [1:0]: 0=D[9:0], 1=D[7:0],D[9:8], 2=D[1:0],D[9:2]
	//Wyslij_I2C_Kamera(0x4741, 0x07);	//test pattern [2] test pattern enable, [1] pattern 0/1, [0] 0=pattern 10-bit, 1=8-bit
	//Wyslij_I2C_Kamera(0x4741 , 0x4);	//test pattern: DLI

	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 80015b8:	217f      	movs	r1, #127	@ 0x7f
 80015ba:	f245 0001 	movw	r0, #20481	@ 0x5001
 80015be:	f000 f8ed 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3804, 0x05);	//Timing HW: [3:0] Horizontal width high byte 0x500=1280,  0x280=640, 0x140=320 (scale input}
 80015c2:	2105      	movs	r1, #5
 80015c4:	f643 0004 	movw	r0, #14340	@ 0x3804
 80015c8:	f000 f8e8 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, 0x00);	//Timing HW: [7:0] Horizontal width low byte
 80015cc:	2100      	movs	r1, #0
 80015ce:	f643 0005 	movw	r0, #14341	@ 0x3805
 80015d2:	f000 f8e3 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, 0x03);	//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480, 0x0F0=240
 80015d6:	2103      	movs	r1, #3
 80015d8:	f643 0006 	movw	r0, #14342	@ 0x3806
 80015dc:	f000 f8de 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, 0xC0);	//Timing VH: [7:0] HREF vertical height low byte
 80015e0:	21c0      	movs	r1, #192	@ 0xc0
 80015e2:	f643 0007 	movw	r0, #14343	@ 0x3807
 80015e6:	f000 f8d9 	bl	800179c <Wyslij_I2C_Kamera>

	Wyslij_I2C_Kamera(0x4300, 0x6F);	//format control [7..4] 6=RGB656, [3..0] 1={R[4:0], G[5:3]},{G[2:0}, B[4:0]}
 80015ea:	216f      	movs	r1, #111	@ 0x6f
 80015ec:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 80015f0:	f000 f8d4 	bl	800179c <Wyslij_I2C_Kamera>

	//konfiguracja DCMI
	hdcmi.Instance = DCMI;
 80015f4:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <InitKamera5+0x170>)
 80015f6:	4a37      	ldr	r2, [pc, #220]	@ (80016d4 <InitKamera5+0x174>)
 80015f8:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80015fa:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <InitKamera5+0x170>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001600:	4b33      	ldr	r3, [pc, #204]	@ (80016d0 <InitKamera5+0x170>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001606:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <InitKamera5+0x170>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800160c:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <InitKamera5+0x170>)
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <InitKamera5+0x170>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <InitKamera5+0x170>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800161e:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <InitKamera5+0x170>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001624:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <InitKamera5+0x170>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800162a:	4b29      	ldr	r3, [pc, #164]	@ (80016d0 <InitKamera5+0x170>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001630:	4b27      	ldr	r3, [pc, #156]	@ (80016d0 <InitKamera5+0x170>)
 8001632:	2200      	movs	r2, #0
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <InitKamera5+0x170>)
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	@ 0x30
	hdcmi.Instance->IER = DCMI_IT_FRAME | DCMI_IT_OVR | DCMI_IT_ERR | DCMI_IT_VSYNC | DCMI_IT_LINE;
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <InitKamera5+0x170>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	221f      	movs	r2, #31
 8001642:	60da      	str	r2, [r3, #12]
	err = HAL_DCMI_Init(&hdcmi);
 8001644:	4822      	ldr	r0, [pc, #136]	@ (80016d0 <InitKamera5+0x170>)
 8001646:	f004 fa77 	bl	8005b38 <HAL_DCMI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
	if (err)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <InitKamera5+0xf8>
		return err;
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	e033      	b.n	80016c0 <InitKamera5+0x160>

    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8001658:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <InitKamera5+0x178>)
 800165a:	4a20      	ldr	r2, [pc, #128]	@ (80016dc <InitKamera5+0x17c>)
 800165c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <InitKamera5+0x178>)
 8001660:	224b      	movs	r2, #75	@ 0x4b
 8001662:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001664:	4b1c      	ldr	r3, [pc, #112]	@ (80016d8 <InitKamera5+0x178>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <InitKamera5+0x178>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <InitKamera5+0x178>)
 8001672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001676:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <InitKamera5+0x178>)
 800167a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800167e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <InitKamera5+0x178>)
 8001682:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001686:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <InitKamera5+0x178>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <InitKamera5+0x178>)
 8001690:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001694:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <InitKamera5+0x178>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
    err = HAL_DMA_Init(&hdma_dcmi);
 800169c:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <InitKamera5+0x178>)
 800169e:	f004 fd19 	bl	80060d4 <HAL_DMA_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	if (err)
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <InitKamera5+0x150>
		return err;
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	e007      	b.n	80016c0 <InitKamera5+0x160>

	//Konfiguracja transferu DMA z DCMI do pamięci
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 80016b0:	4a0b      	ldr	r2, [pc, #44]	@ (80016e0 <InitKamera5+0x180>)
 80016b2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80016b6:	2100      	movs	r1, #0
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <InitKamera5+0x170>)
 80016ba:	f004 fab7 	bl	8005c2c <HAL_DCMI_Start_DMA>
 80016be:	4603      	mov	r3, r0
	//return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM); */
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40002000 	.word	0x40002000
 80016cc:	080168ec 	.word	0x080168ec
 80016d0:	2404bd7c 	.word	0x2404bd7c
 80016d4:	48020000 	.word	0x48020000
 80016d8:	2404bdcc 	.word	0x2404bdcc
 80016dc:	40020010 	.word	0x40020010
 80016e0:	24000cfc 	.word	0x24000cfc

080016e4 <ZrobZdjecie>:
// [i] - sSzerokosc - szerokość zdjecia w pikselach
// [i] - sWysokosc - wysokość zdjęcia w pikselach
// Zwraca: kod błędu
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef ZrobZdjecie(int16_t sSzerokosc, uint16_t sWysokosc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef err;

	err = HAL_DCMI_Stop(&hdcmi);
 80016f4:	4827      	ldr	r0, [pc, #156]	@ (8001794 <ZrobZdjecie+0xb0>)
 80016f6:	f004 fb5b 	bl	8005db0 <HAL_DCMI_Stop>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
	if (err)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <ZrobZdjecie+0x24>
		return err;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	e040      	b.n	800178a <ZrobZdjecie+0xa6>
	err = Wyslij_Blok_Kamera(OV5642_RGB_QVGA);					//150ms
	if (err)
		return err; */

	//skalowanie obrazu
	Wyslij_I2C_Kamera(0x5001, 0x7F);	//ISP control 01: [7] Special digital effects, [6] UV adjust enable, [5]1=Vertical scaling enable, [4]1=Horizontal scaling enable, [3] Line stretch enable, [2] UV average enable, [1] color matrix enable, [0] auto white balance AWB
 8001708:	217f      	movs	r1, #127	@ 0x7f
 800170a:	f245 0001 	movw	r0, #20481	@ 0x5001
 800170e:	f000 f845 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3804, 0x05);	//Timing HW: [3:0] Horizontal width high byte 0x500=1280,  0x280=640, 0x140=320 (scale input}
 8001712:	2105      	movs	r1, #5
 8001714:	f643 0004 	movw	r0, #14340	@ 0x3804
 8001718:	f000 f840 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3805, 0x00);	//Timing HW: [7:0] Horizontal width low byte
 800171c:	2100      	movs	r1, #0
 800171e:	f643 0005 	movw	r0, #14341	@ 0x3805
 8001722:	f000 f83b 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3806, 0x03);	//Timing VH: [3:0] HREF vertical height high byte 0x3C0=960, 0x1E0=480, 0x0F0=240
 8001726:	2103      	movs	r1, #3
 8001728:	f643 0006 	movw	r0, #14342	@ 0x3806
 800172c:	f000 f836 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3807, 0xC0);	//Timing VH: [7:0] HREF vertical height low byte
 8001730:	21c0      	movs	r1, #192	@ 0xc0
 8001732:	f643 0007 	movw	r0, #14343	@ 0x3807
 8001736:	f000 f831 	bl	800179c <Wyslij_I2C_Kamera>

	//ustaw rozmiar obrazu
	Wyslij_I2C_Kamera(0x3808, (sSzerokosc & 0xFF00)>>8);	//Timing DVPHO: [3:0] output horizontal width high byte [11:8]
 800173a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173e:	121b      	asrs	r3, r3, #8
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4619      	mov	r1, r3
 8001744:	f643 0008 	movw	r0, #14344	@ 0x3808
 8001748:	f000 f828 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x3809, (sSzerokosc & 0x00FF));		//Timing DVPHO: [7:0] output horizontal width low byte [7:0]
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	f643 0009 	movw	r0, #14345	@ 0x3809
 8001756:	f000 f821 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380a, (sWysokosc & 0xFF00)>>8);		//Timing DVPVO: [3:0] output vertical height high byte [11:8]
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b29b      	uxth	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4619      	mov	r1, r3
 8001764:	f643 000a 	movw	r0, #14346	@ 0x380a
 8001768:	f000 f818 	bl	800179c <Wyslij_I2C_Kamera>
	Wyslij_I2C_Kamera(0x380b, (sWysokosc & 0x00FF));		//Timing DVPVO: [7:0] output vertical height low byte [7:0]
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4619      	mov	r1, r3
 8001772:	f643 000b 	movw	r0, #14347	@ 0x380b
 8001776:	f000 f811 	bl	800179c <Wyslij_I2C_Kamera>
    err = HAL_DMA_Init(&hdma_dcmi);
	if (err)
		return err; */

	//Konfiguracja transferu DMA z DCMI do pamięci
	return HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
 800177a:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <ZrobZdjecie+0xb4>)
 800177c:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001780:	2102      	movs	r1, #2
 8001782:	4804      	ldr	r0, [pc, #16]	@ (8001794 <ZrobZdjecie+0xb0>)
 8001784:	f004 fa52 	bl	8005c2c <HAL_DCMI_Start_DMA>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2404bd7c 	.word	0x2404bd7c
 8001798:	24000cfc 	.word	0x24000cfc

0800179c <Wyslij_I2C_Kamera>:
//  rejestr - 16 bitowy adres rejestru kamery
//  dane - dane zapisywane do rejestru
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef Wyslij_I2C_Kamera(uint16_t rejestr, uint8_t dane)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	4603      	mov	r3, r0
 80017a4:	460a      	mov	r2, r1
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	4613      	mov	r3, r2
 80017aa:	717b      	strb	r3, [r7, #5]
	uint8_t dane_wy[3];

	dane_wy[0] = (rejestr & 0xFF00) >> 8;
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	733b      	strb	r3, [r7, #12]
	dane_wy[1] = (rejestr & 0x00FF);
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	737b      	strb	r3, [r7, #13]
	dane_wy[2] = dane;
 80017bc:	797b      	ldrb	r3, [r7, #5]
 80017be:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(&hi2c4, OV5642_I2C_ADR, dane_wy, 3, KAMERA_TIMEOUT);
 80017c0:	f107 020c 	add.w	r2, r7, #12
 80017c4:	2301      	movs	r3, #1
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2303      	movs	r3, #3
 80017ca:	2178      	movs	r1, #120	@ 0x78
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <Wyslij_I2C_Kamera+0x40>)
 80017ce:	f009 f86d 	bl	800a8ac <HAL_I2C_Master_Transmit>
 80017d2:	4603      	mov	r3, r0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2404bef4 	.word	0x2404bef4

080017e0 <Czytaj_I2C_Kamera>:
//  rejestr - 16 bitowy adres rejestru kamery
//  dane - dane zapisywane do rejestru
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef Czytaj_I2C_Kamera(uint16_t rejestr, uint8_t *dane)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	80fb      	strh	r3, [r7, #6]
	uint8_t dane_wy[2];
	HAL_StatusTypeDef err;

	dane_wy[0] = (rejestr & 0xFF00) >> 8;
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	733b      	strb	r3, [r7, #12]
	dane_wy[1] = (rejestr & 0x00FF);
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	737b      	strb	r3, [r7, #13]
	err = HAL_I2C_Master_Transmit(&hi2c4, OV5642_I2C_ADR, dane_wy, 2, KAMERA_TIMEOUT);
 80017fc:	f107 020c 	add.w	r2, r7, #12
 8001800:	2301      	movs	r3, #1
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2302      	movs	r3, #2
 8001806:	2178      	movs	r1, #120	@ 0x78
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <Czytaj_I2C_Kamera+0x58>)
 800180a:	f009 f84f 	bl	800a8ac <HAL_I2C_Master_Transmit>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
	if (err == 0)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <Czytaj_I2C_Kamera+0x4c>
		err = HAL_I2C_Master_Receive(&hi2c4, OV5642_I2C_ADR, dane, 1, KAMERA_TIMEOUT);
 8001818:	2301      	movs	r3, #1
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	2178      	movs	r1, #120	@ 0x78
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <Czytaj_I2C_Kamera+0x58>)
 8001824:	f009 f95a 	bl	800aadc <HAL_I2C_Master_Receive>
 8001828:	4603      	mov	r3, r0
 800182a:	73fb      	strb	r3, [r7, #15]
	return err;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2404bef4 	.word	0x2404bef4

0800183c <Wyslij_Blok_Kamera>:
//  rejestr - 16 bitowy adres rejestru kamery
//  dane - dane zapisywane do rejestru
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
HAL_StatusTypeDef Wyslij_Blok_Kamera(const struct sensor_reg reglist[])
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	const struct sensor_reg *next = reglist;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef err;

	while ((next->reg != 0xFFFF) && (err == 0))
 8001848:	e00c      	b.n	8001864 <Wyslij_Blok_Kamera+0x28>
	{
		err = Wyslij_I2C_Kamera(next->reg, next->val);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f7ff ffa1 	bl	800179c <Wyslij_I2C_Kamera>
 800185a:	4603      	mov	r3, r0
 800185c:	72fb      	strb	r3, [r7, #11]
		next++;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3304      	adds	r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
	while ((next->reg != 0xFFFF) && (err == 0))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800186c:	4293      	cmp	r3, r2
 800186e:	d002      	beq.n	8001876 <Wyslij_Blok_Kamera+0x3a>
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0e9      	beq.n	800184a <Wyslij_Blok_Kamera+0xe>
	}
	return err;
 8001876:	7afb      	ldrb	r3, [r7, #11]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_DCMI_LineEventCallback>:
// Parametry:
//  hdcmi - wskaźnik na interfejs DCMI
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	sLicznikLiniiKamery++;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_DCMI_LineEventCallback+0x20>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	3301      	adds	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_DCMI_LineEventCallback+0x20>)
 8001892:	801a      	strh	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	2404bcfc 	.word	0x2404bcfc

080018a4 <HAL_DCMI_VsyncEventCallback>:
// Parametry:
//  hdcmi - wskaźnik na interfejs DCMI
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_DCMI_FrameEventCallback>:
// Parametry:
//  hdcmi - wskaźnik na interfejs DCMI
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	chNowyObrazKamery = 1;
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_DCMI_FrameEventCallback+0x20>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
	sLicznikLiniiKamery= 0;
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_DCMI_FrameEventCallback+0x24>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	801a      	strh	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	2404c11c 	.word	0x2404c11c
 80018dc:	2404bcfc 	.word	0x2404bcfc

080018e0 <HAL_DCMI_ErrorCallback>:


void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <SprawdzKamere>:
// Sprawdź czy mamy kontakt z kamerą
// Parametry: brak
// Zwraca: systemowy kod błędu
////////////////////////////////////////////////////////////////////////////////
uint8_t	SprawdzKamere(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
	uint16_t DaneH;
	uint8_t daneL, powtorz = 10;
 80018fa:	230a      	movs	r3, #10
 80018fc:	71fb      	strb	r3, [r7, #7]

	do
	{
		Czytaj_I2C_Kamera(0x300A, (uint8_t*)&DaneH);	//Chip ID High Byte = 0x56
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	f243 000a 	movw	r0, #12298	@ 0x300a
 8001906:	f7ff ff6b 	bl	80017e0 <Czytaj_I2C_Kamera>
		Czytaj_I2C_Kamera(0x300B, &daneL);	//Chip ID Low Byte = 0x42
 800190a:	1cfb      	adds	r3, r7, #3
 800190c:	4619      	mov	r1, r3
 800190e:	f243 000b 	movw	r0, #12299	@ 0x300b
 8001912:	f7ff ff65 	bl	80017e0 <Czytaj_I2C_Kamera>
		powtorz--;
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3b01      	subs	r3, #1
 800191a:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1);
 800191c:	2001      	movs	r0, #1
 800191e:	f003 fe69 	bl	80055f4 <HAL_Delay>
		DaneH <<= 8;
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b29b      	uxth	r3, r3
 8001928:	80bb      	strh	r3, [r7, #4]
		DaneH |= daneL;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	461a      	mov	r2, r3
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	b29b      	uxth	r3, r3
 8001934:	80bb      	strh	r3, [r7, #4]
	}
	while ((DaneH != OV5642_ID) && powtorz);
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	f245 6242 	movw	r2, #22082	@ 0x5642
 800193c:	4293      	cmp	r3, r2
 800193e:	d002      	beq.n	8001946 <SprawdzKamere+0x52>
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1db      	bne.n	80018fe <SprawdzKamere+0xa>
	if (powtorz == 0)
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <SprawdzKamere+0x5c>
		return ERR_BRAK_KAMERY;
 800194c:	231f      	movs	r3, #31
 800194e:	e000      	b.n	8001952 <SprawdzKamere+0x5e>
	else
		return ERR_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b094      	sub	sp, #80	@ 0x50
 8001960:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001962:	f000 fe07 	bl	8002574 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001966:	4b97      	ldr	r3, [pc, #604]	@ (8001bc4 <main+0x268>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11b      	bne.n	80019aa <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001972:	f3bf 8f4f 	dsb	sy
}
 8001976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001978:	f3bf 8f6f 	isb	sy
}
 800197c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800197e:	4b91      	ldr	r3, [pc, #580]	@ (8001bc4 <main+0x268>)
 8001980:	2200      	movs	r2, #0
 8001982:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001986:	f3bf 8f4f 	dsb	sy
}
 800198a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800198c:	f3bf 8f6f 	isb	sy
}
 8001990:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001992:	4b8c      	ldr	r3, [pc, #560]	@ (8001bc4 <main+0x268>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4a8b      	ldr	r2, [pc, #556]	@ (8001bc4 <main+0x268>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800199e:	f3bf 8f4f 	dsb	sy
}
 80019a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a4:	f3bf 8f6f 	isb	sy
}
 80019a8:	e000      	b.n	80019ac <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019aa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80019ac:	4b85      	ldr	r3, [pc, #532]	@ (8001bc4 <main+0x268>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d138      	bne.n	8001a2a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80019b8:	4b82      	ldr	r3, [pc, #520]	@ (8001bc4 <main+0x268>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80019c0:	f3bf 8f4f 	dsb	sy
}
 80019c4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80019c6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc4 <main+0x268>)
 80019c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019cc:	64bb      	str	r3, [r7, #72]	@ 0x48

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80019ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019d0:	0b5b      	lsrs	r3, r3, #13
 80019d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80019d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e0:	643b      	str	r3, [r7, #64]	@ 0x40
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80019ea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80019ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019ee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019f0:	4974      	ldr	r1, [pc, #464]	@ (8001bc4 <main+0x268>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80019f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <main+0x86>
    } while(sets-- != 0U);
 8001a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a04:	1e5a      	subs	r2, r3, #1
 8001a06:	647a      	str	r2, [r7, #68]	@ 0x44
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e5      	bne.n	80019d8 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001a0c:	f3bf 8f4f 	dsb	sy
}
 8001a10:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001a12:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc4 <main+0x268>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a6b      	ldr	r2, [pc, #428]	@ (8001bc4 <main+0x268>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a1e:	f3bf 8f4f 	dsb	sy
}
 8001a22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a24:	f3bf 8f6f 	isb	sy
}
 8001a28:	e000      	b.n	8001a2c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001a2a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001a2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001a32:	bf00      	nop
 8001a34:	4b64      	ldr	r3, [pc, #400]	@ (8001bc8 <main+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <main+0xee>
 8001a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	dcf4      	bgt.n	8001a34 <main+0xd8>
  if ( timeout < 0 )
 8001a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da01      	bge.n	8001a54 <main+0xf8>
  {
  Error_Handler();
 8001a50:	f000 fe08 	bl	8002664 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a54:	f003 fd72 	bl	800553c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a58:	f000 f8cc 	bl	8001bf4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc8 <main+0x26c>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a62:	4a59      	ldr	r2, [pc, #356]	@ (8001bc8 <main+0x26c>)
 8001a64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6c:	4b56      	ldr	r3, [pc, #344]	@ (8001bc8 <main+0x26c>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f008 fe4c 	bl	800a718 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f008 fe62 	bl	800a74c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001a88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001a8e:	bf00      	nop
 8001a90:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc8 <main+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <main+0x14a>
 8001a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dcf4      	bgt.n	8001a90 <main+0x134>
if ( timeout < 0 )
 8001aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da01      	bge.n	8001ab0 <main+0x154>
{
Error_Handler();
 8001aac:	f000 fdda 	bl	8002664 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f000 fad0 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab4:	f000 faae 	bl	8002014 <MX_DMA_Init>
  MX_TIM14_Init();
 8001ab8:	f000 f9c8 	bl	8001e4c <MX_TIM14_Init>
  //MX_DCMI_Init();		//jest inicjowany w funkcji KameraInit()
  MX_I2C4_Init();
 8001abc:	f000 f988 	bl	8001dd0 <MX_I2C4_Init>
  MX_ETH_Init();
 8001ac0:	f000 f93a 	bl	8001d38 <MX_ETH_Init>
  MX_CRC_Init();
 8001ac4:	f000 f916 	bl	8001cf4 <MX_CRC_Init>
  MX_UART7_Init();
 8001ac8:	f000 fa0c 	bl	8001ee4 <MX_UART7_Init>
  MX_USART2_UART_Init();
 8001acc:	f000 fa56 	bl	8001f7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  chErr  = KameraInit();
 8001ad0:	f7ff fa9a 	bl	8001008 <KameraInit>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bcc <main+0x270>)
 8001ada:	701a      	strb	r2, [r3, #0]
  chErr += InitEth(&heth);
 8001adc:	483c      	ldr	r0, [pc, #240]	@ (8001bd0 <main+0x274>)
 8001ade:	f7ff fa55 	bl	8000f8c <InitEth>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <main+0x270>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <main+0x270>)
 8001af0:	701a      	strb	r2, [r3, #0]
  InitDisplay();
 8001af2:	f002 fc61 	bl	80043b8 <InitDisplay>
  InitProtokol();
 8001af6:	f7fe fe59 	bl	80007ac <InitProtokol>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001afa:	4b36      	ldr	r3, [pc, #216]	@ (8001bd4 <main+0x278>)
 8001afc:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001b00:	461d      	mov	r5, r3
 8001b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00f fea2 	bl	801185e <osThreadCreate>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd8 <main+0x27c>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of wftKomUart */
  osThreadDef(wftKomUart, StartKomUart, osPriorityBelowNormal, 0, 128);
 8001b20:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <main+0x280>)
 8001b22:	f107 0408 	add.w	r4, r7, #8
 8001b26:	461d      	mov	r5, r3
 8001b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  wftKomUartHandle = osThreadCreate(osThread(wftKomUart), NULL);
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00f fe8f 	bl	801185e <osThreadCreate>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <main+0x284>)
 8001b44:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f003 faa2 	bl	8005090 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f003 fa9f 	bl	8005090 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001b52:	2002      	movs	r0, #2
 8001b54:	f003 fa9c 	bl	8005090 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f003 fb8c 	bl	8005278 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001b60:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <main+0x288>)
 8001b62:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b66:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <main+0x288>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <main+0x288>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <main+0x288>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <main+0x288>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001b80:	4918      	ldr	r1, [pc, #96]	@ (8001be4 <main+0x288>)
 8001b82:	2000      	movs	r0, #0
 8001b84:	f003 fbfc 	bl	8005380 <BSP_COM_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <main+0x236>
  {
    Error_Handler();
 8001b8e:	f000 fd69 	bl	8002664 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("\n\rAutoPitLot melduje gotowosc do pracy\n\r");
 8001b92:	4815      	ldr	r0, [pc, #84]	@ (8001be8 <main+0x28c>)
 8001b94:	f011 fdce 	bl	8013734 <iprintf>
  printf("SysCLK = %lu MHz\n\r", (uint32_t)HAL_RCC_GetSysClockFreq()/1000000);
 8001b98:	f00a fab8 	bl	800c10c <HAL_RCC_GetSysClockFreq>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <main+0x290>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4811      	ldr	r0, [pc, #68]	@ (8001bf0 <main+0x294>)
 8001baa:	f011 fdc3 	bl	8013734 <iprintf>



  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f003 fae4 	bl	800517c <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f003 fae1 	bl	800517c <BSP_LED_On>
  //BSP_LED_On(LED_RED);
  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 8001bba:	f00f fe49 	bl	8011850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bbe:	bf00      	nop
 8001bc0:	e7fd      	b.n	8001bbe <main+0x262>
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	2404c0c5 	.word	0x2404c0c5
 8001bd0:	2404be44 	.word	0x2404be44
 8001bd4:	0801661c 	.word	0x0801661c
 8001bd8:	2404c0bc 	.word	0x2404c0bc
 8001bdc:	08016644 	.word	0x08016644
 8001be0:	2404c0c0 	.word	0x2404c0c0
 8001be4:	2404bd44 	.word	0x2404bd44
 8001be8:	080165d0 	.word	0x080165d0
 8001bec:	431bde83 	.word	0x431bde83
 8001bf0:	080165fc 	.word	0x080165fc

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	@ 0x70
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfe:	224c      	movs	r2, #76	@ 0x4c
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f011 fe0b 	bl	801381e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f011 fe05 	bl	801381e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c14:	2004      	movs	r0, #4
 8001c16:	f009 fc0f 	bl	800b438 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <SystemClock_Config+0xf8>)
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	4a32      	ldr	r2, [pc, #200]	@ (8001cec <SystemClock_Config+0xf8>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c2a:	4b30      	ldr	r3, [pc, #192]	@ (8001cec <SystemClock_Config+0xf8>)
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <SystemClock_Config+0xfc>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <SystemClock_Config+0xfc>)
 8001c3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <SystemClock_Config+0xfc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c4c:	bf00      	nop
 8001c4e:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <SystemClock_Config+0xfc>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c5a:	d1f8      	bne.n	8001c4e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI|RCC_OSCILLATORTYPE_HSI;
 8001c5c:	2312      	movs	r3, #18
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c64:	2340      	movs	r3, #64	@ 0x40
 8001c66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c70:	2302      	movs	r3, #2
 8001c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c74:	2300      	movs	r3, #0
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001c7c:	2332      	movs	r3, #50	@ 0x32
 8001c7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f009 fc25 	bl	800b4ec <HAL_RCC_OscConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001ca8:	f000 fcdc 	bl	8002664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	233f      	movs	r3, #63	@ 0x3f
 8001cae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001cbc:	2340      	movs	r3, #64	@ 0x40
 8001cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cc0:	2340      	movs	r3, #64	@ 0x40
 8001cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cc8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001cca:	2340      	movs	r3, #64	@ 0x40
 8001ccc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f00a f864 	bl	800bda0 <HAL_RCC_ClockConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001cde:	f000 fcc1 	bl	8002664 <Error_Handler>
  }
}
 8001ce2:	bf00      	nop
 8001ce4:	3770      	adds	r7, #112	@ 0x70
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	58000400 	.word	0x58000400
 8001cf0:	58024800 	.word	0x58024800

08001cf4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d30 <MX_CRC_Init+0x3c>)
 8001cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8001d34 <MX_CRC_Init+0x40>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <MX_CRC_Init+0x3c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <MX_CRC_Init+0x3c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <MX_CRC_Init+0x3c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <MX_CRC_Init+0x3c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <MX_CRC_Init+0x3c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <MX_CRC_Init+0x3c>)
 8001d1e:	f003 fe19 	bl	8005954 <HAL_CRC_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001d28:	f000 fc9c 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	2404bd58 	.word	0x2404bd58
 8001d34:	58024c00 	.word	0x58024c00

08001d38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_ETH_Init+0x80>)
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dbc <MX_ETH_Init+0x84>)
 8001d40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <MX_ETH_Init+0x88>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <MX_ETH_Init+0x88>)
 8001d4a:	2280      	movs	r2, #128	@ 0x80
 8001d4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <MX_ETH_Init+0x88>)
 8001d50:	22e1      	movs	r2, #225	@ 0xe1
 8001d52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <MX_ETH_Init+0x88>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <MX_ETH_Init+0x88>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <MX_ETH_Init+0x88>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001d66:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_ETH_Init+0x80>)
 8001d68:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <MX_ETH_Init+0x88>)
 8001d6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <MX_ETH_Init+0x80>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_ETH_Init+0x80>)
 8001d74:	4a13      	ldr	r2, [pc, #76]	@ (8001dc4 <MX_ETH_Init+0x8c>)
 8001d76:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_ETH_Init+0x80>)
 8001d7a:	4a13      	ldr	r2, [pc, #76]	@ (8001dc8 <MX_ETH_Init+0x90>)
 8001d7c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_ETH_Init+0x80>)
 8001d80:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001d84:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d86:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <MX_ETH_Init+0x80>)
 8001d88:	f007 fc90 	bl	80096ac <HAL_ETH_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001d92:	f000 fc67 	bl	8002664 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d96:	2238      	movs	r2, #56	@ 0x38
 8001d98:	2100      	movs	r1, #0
 8001d9a:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <MX_ETH_Init+0x94>)
 8001d9c:	f011 fd3f 	bl	801381e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <MX_ETH_Init+0x94>)
 8001da2:	2221      	movs	r2, #33	@ 0x21
 8001da4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <MX_ETH_Init+0x94>)
 8001da8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <MX_ETH_Init+0x94>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2404be44 	.word	0x2404be44
 8001dbc:	40028000 	.word	0x40028000
 8001dc0:	2404c0c8 	.word	0x2404c0c8
 8001dc4:	30040060 	.word	0x30040060
 8001dc8:	30040000 	.word	0x30040000
 8001dcc:	2404bd0c 	.word	0x2404bd0c

08001dd0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e48 <MX_I2C4_Init+0x78>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00000E14;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001ddc:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001de0:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001de2:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e00:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001e0c:	480d      	ldr	r0, [pc, #52]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001e0e:	f008 fcb1 	bl	800a774 <HAL_I2C_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_I2C4_Init+0x4c>
  {
    Error_Handler();
 8001e18:	f000 fc24 	bl	8002664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001e20:	f009 f9f8 	bl	800b214 <HAL_I2CEx_ConfigAnalogFilter>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 8001e2a:	f000 fc1b 	bl	8002664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4804      	ldr	r0, [pc, #16]	@ (8001e44 <MX_I2C4_Init+0x74>)
 8001e32:	f009 fa3a 	bl	800b2aa <HAL_I2CEx_ConfigDigitalFilter>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8001e3c:	f000 fc12 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	2404bef4 	.word	0x2404bef4
 8001e48:	58001c00 	.word	0x58001c00

08001e4c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <MX_TIM14_Init+0x94>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5;
 8001e76:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e78:	2205      	movs	r2, #5
 8001e7a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e84:	2280      	movs	r2, #128	@ 0x80
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e88:	4814      	ldr	r0, [pc, #80]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e8a:	f00c f983 	bl	800e194 <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8001e94:	f000 fbe6 	bl	8002664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001e98:	4810      	ldr	r0, [pc, #64]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001e9a:	f00c fa4b 	bl	800e334 <HAL_TIM_PWM_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8001ea4:	f000 fbde 	bl	8002664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea8:	2360      	movs	r3, #96	@ 0x60
 8001eaa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4807      	ldr	r0, [pc, #28]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001ec0:	f00c fba0 	bl	800e604 <HAL_TIM_PWM_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM14_Init+0x82>
  {
    Error_Handler();
 8001eca:	f000 fbcb 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001ece:	4803      	ldr	r0, [pc, #12]	@ (8001edc <MX_TIM14_Init+0x90>)
 8001ed0:	f000 fea6 	bl	8002c20 <HAL_TIM_MspPostInit>

}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	2404bf48 	.word	0x2404bf48
 8001ee0:	40002000 	.word	0x40002000

08001ee4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001ee8:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001eea:	4a23      	ldr	r2, [pc, #140]	@ (8001f78 <MX_UART7_Init+0x94>)
 8001eec:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001eee:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001ef0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ef4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001f2c:	4811      	ldr	r0, [pc, #68]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f2e:	f00d f83f 	bl	800efb0 <HAL_UART_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001f38:	f000 fb94 	bl	8002664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	480d      	ldr	r0, [pc, #52]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f40:	f00f fba3 	bl	801168a <HAL_UARTEx_SetTxFifoThreshold>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001f4a:	f000 fb8b 	bl	8002664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4808      	ldr	r0, [pc, #32]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f52:	f00f fbd8 	bl	8011706 <HAL_UARTEx_SetRxFifoThreshold>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001f5c:	f000 fb82 	bl	8002664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_UART7_Init+0x90>)
 8001f62:	f00f fb59 	bl	8011618 <HAL_UARTEx_DisableFifoMode>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001f6c:	f000 fb7a 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2404bf94 	.word	0x2404bf94
 8001f78:	40007800 	.word	0x40007800

08001f7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f80:	4b22      	ldr	r3, [pc, #136]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001f82:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <MX_USART2_UART_Init+0x94>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001f88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbe:	4b13      	ldr	r3, [pc, #76]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc4:	4811      	ldr	r0, [pc, #68]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fc6:	f00c fff3 	bl	800efb0 <HAL_UART_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fd0:	f000 fb48 	bl	8002664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	480d      	ldr	r0, [pc, #52]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fd8:	f00f fb57 	bl	801168a <HAL_UARTEx_SetTxFifoThreshold>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fe2:	f000 fb3f 	bl	8002664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4808      	ldr	r0, [pc, #32]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001fea:	f00f fb8c 	bl	8011706 <HAL_UARTEx_SetRxFifoThreshold>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ff4:	f000 fb36 	bl	8002664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	@ (800200c <MX_USART2_UART_Init+0x90>)
 8001ffa:	f00f fb0d 	bl	8011618 <HAL_UARTEx_DisableFifoMode>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002004:	f000 fb2e 	bl	8002664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2404c028 	.word	0x2404c028
 8002010:	40004400 	.word	0x40004400

08002014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <MX_DMA_Init+0x3c>)
 800201c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002020:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <MX_DMA_Init+0x3c>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_DMA_Init+0x3c>)
 800202c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2105      	movs	r1, #5
 800203c:	200b      	movs	r0, #11
 800203e:	f003 fbd5 	bl	80057ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002042:	200b      	movs	r0, #11
 8002044:	f003 fbec 	bl	8005820 <HAL_NVIC_EnableIRQ>

}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	58024400 	.word	0x58024400

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	@ 0x30
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800206a:	4b86      	ldr	r3, [pc, #536]	@ (8002284 <MX_GPIO_Init+0x230>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002070:	4a84      	ldr	r2, [pc, #528]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207a:	4b82      	ldr	r3, [pc, #520]	@ (8002284 <MX_GPIO_Init+0x230>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002088:	4b7e      	ldr	r3, [pc, #504]	@ (8002284 <MX_GPIO_Init+0x230>)
 800208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800208e:	4a7d      	ldr	r2, [pc, #500]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002090:	f043 0320 	orr.w	r3, r3, #32
 8002094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002098:	4b7a      	ldr	r3, [pc, #488]	@ (8002284 <MX_GPIO_Init+0x230>)
 800209a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b77      	ldr	r3, [pc, #476]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ac:	4a75      	ldr	r2, [pc, #468]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020b6:	4b73      	ldr	r3, [pc, #460]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e8:	4a66      	ldr	r2, [pc, #408]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020f2:	4b64      	ldr	r3, [pc, #400]	@ (8002284 <MX_GPIO_Init+0x230>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	4b60      	ldr	r3, [pc, #384]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002106:	4a5f      	ldr	r2, [pc, #380]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002108:	f043 0308 	orr.w	r3, r3, #8
 800210c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002110:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800211e:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002124:	4a57      	ldr	r2, [pc, #348]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800212a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800212e:	4b55      	ldr	r3, [pc, #340]	@ (8002284 <MX_GPIO_Init+0x230>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_WR_Pin|LCD_RST_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	210d      	movs	r1, #13
 8002140:	4851      	ldr	r0, [pc, #324]	@ (8002288 <MX_GPIO_Init+0x234>)
 8002142:	f008 fab5 	bl	800a6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800214c:	484f      	ldr	r0, [pc, #316]	@ (800228c <MX_GPIO_Init+0x238>)
 800214e:	f008 faaf 	bl	800a6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	2102      	movs	r1, #2
 8002156:	484e      	ldr	r0, [pc, #312]	@ (8002290 <MX_GPIO_Init+0x23c>)
 8002158:	f008 faaa 	bl	800a6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_PWDN_GPIO_Port, CAM_PWDN_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002162:	484c      	ldr	r0, [pc, #304]	@ (8002294 <MX_GPIO_Init+0x240>)
 8002164:	f008 faa4 	bl	800a6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D5_Pin|LCD_D3_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 800216e:	484a      	ldr	r0, [pc, #296]	@ (8002298 <MX_GPIO_Init+0x244>)
 8002170:	f008 fa9e 	bl	800a6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800217a:	4848      	ldr	r0, [pc, #288]	@ (800229c <MX_GPIO_Init+0x248>)
 800217c:	f008 fa98 	bl	800a6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D0_Pin|LCD_D7_Pin|LCD_D2_Pin, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 41a4 	mov.w	r1, #20992	@ 0x5200
 8002186:	4846      	ldr	r0, [pc, #280]	@ (80022a0 <MX_GPIO_Init+0x24c>)
 8002188:	f008 fa92 	bl	800a6b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_WR_Pin LCD_RST_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RST_Pin|LCD_RS_Pin;
 800218c:	230d      	movs	r3, #13
 800218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	4839      	ldr	r0, [pc, #228]	@ (8002288 <MX_GPIO_Init+0x234>)
 80021a4:	f008 f8d4 	bl	800a350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_D6_Pin;
 80021a8:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80021ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	4832      	ldr	r0, [pc, #200]	@ (800228c <MX_GPIO_Init+0x238>)
 80021c2:	f008 f8c5 	bl	800a350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	482c      	ldr	r0, [pc, #176]	@ (8002290 <MX_GPIO_Init+0x23c>)
 80021de:	f008 f8b7 	bl	800a350 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_PWDN_Pin */
  GPIO_InitStruct.Pin = CAM_PWDN_Pin;
 80021e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e8:	2301      	movs	r3, #1
 80021ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAM_PWDN_GPIO_Port, &GPIO_InitStruct);
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	4619      	mov	r1, r3
 80021fa:	4826      	ldr	r0, [pc, #152]	@ (8002294 <MX_GPIO_Init+0x240>)
 80021fc:	f008 f8a8 	bl	800a350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D5_Pin LCD_D3_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_D3_Pin|LCD_D4_Pin;
 8002200:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	481f      	ldr	r0, [pc, #124]	@ (8002298 <MX_GPIO_Init+0x244>)
 800221a:	f008 f899 	bl	800a350 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin;
 800221e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_D1_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4819      	ldr	r0, [pc, #100]	@ (800229c <MX_GPIO_Init+0x248>)
 8002238:	f008 f88a 	bl	800a350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800223c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800224e:	230a      	movs	r3, #10
 8002250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	480c      	ldr	r0, [pc, #48]	@ (800228c <MX_GPIO_Init+0x238>)
 800225a:	f008 f879 	bl	800a350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D0_Pin LCD_D7_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D7_Pin|LCD_D2_Pin;
 800225e:	f44f 43a4 	mov.w	r3, #20992	@ 0x5200
 8002262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002264:	2301      	movs	r3, #1
 8002266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	480a      	ldr	r0, [pc, #40]	@ (80022a0 <MX_GPIO_Init+0x24c>)
 8002278:	f008 f86a 	bl	800a350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227c:	bf00      	nop
 800227e:	3730      	adds	r7, #48	@ 0x30
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	58024400 	.word	0x58024400
 8002288:	58020800 	.word	0x58020800
 800228c:	58020000 	.word	0x58020000
 8002290:	58020400 	.word	0x58020400
 8002294:	58021400 	.word	0x58021400
 8002298:	58021000 	.word	0x58021000
 800229c:	58020c00 	.word	0x58020c00
 80022a0:	58021800 	.word	0x58021800

080022a4 <KameraPWDN>:
// Sterowanie pinem Powwer Down kamery
// Parametry: akcja do wykonania na pinie: GPIO_PIN_SET lub GPIO_PIN_RESET
// Zwraca: kod błędu HAL
////////////////////////////////////////////////////////////////////////////////
void KameraPWDN(uint32_t SetReset)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(CAM_PWDN_GPIO_Port, CAM_PWDN_Pin, SetReset);		//włącz PWDN
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022b6:	4803      	ldr	r0, [pc, #12]	@ (80022c4 <KameraPWDN+0x20>)
 80022b8:	f008 f9fa 	bl	800a6b0 <HAL_GPIO_WritePin>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	58021400 	.word	0x58021400

080022c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	Menu(chPozycjaMenu);
 80022d0:	4b96      	ldr	r3, [pc, #600]	@ (800252c <StartDefaultTask+0x264>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 f87b 	bl	80043d0 <Menu>
	for(;;)
	{
	  	//obsługa przycisku
	  	if (BspButtonState == BUTTON_PRESSED)
 80022da:	4b95      	ldr	r3, [pc, #596]	@ (8002530 <StartDefaultTask+0x268>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d119      	bne.n	8002316 <StartDefaultTask+0x4e>
	  	{
	  		BspButtonState = BUTTON_RELEASED;
 80022e2:	4b93      	ldr	r3, [pc, #588]	@ (8002530 <StartDefaultTask+0x268>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
	  		if (chTrybPracy != TP_MENU)
 80022e8:	4b92      	ldr	r3, [pc, #584]	@ (8002534 <StartDefaultTask+0x26c>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b0a      	cmp	r3, #10
 80022ee:	d002      	beq.n	80022f6 <StartDefaultTask+0x2e>
	  		  chRysujRaz = 1;
 80022f0:	4b91      	ldr	r3, [pc, #580]	@ (8002538 <StartDefaultTask+0x270>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
	  		chPozycjaMenu = Menu(chPozycjaMenu);
 80022f6:	4b8d      	ldr	r3, [pc, #564]	@ (800252c <StartDefaultTask+0x264>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f002 f868 	bl	80043d0 <Menu>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4b89      	ldr	r3, [pc, #548]	@ (800252c <StartDefaultTask+0x264>)
 8002306:	701a      	strb	r2, [r3, #0]
	  		chTrybPracy = TP_MENU;
 8002308:	4b8a      	ldr	r3, [pc, #552]	@ (8002534 <StartDefaultTask+0x26c>)
 800230a:	220a      	movs	r2, #10
 800230c:	701a      	strb	r2, [r3, #0]
	  		sMenuTimer = 3000;	//czas w [ms]
 800230e:	4b8b      	ldr	r3, [pc, #556]	@ (800253c <StartDefaultTask+0x274>)
 8002310:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002314:	801a      	strh	r2, [r3, #0]
	  	}

	  	//obsługa trybów pracy
	      switch(chTrybPracy)
 8002316:	4b87      	ldr	r3, [pc, #540]	@ (8002534 <StartDefaultTask+0x26c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b14      	cmp	r3, #20
 800231c:	f200 80f3 	bhi.w	8002506 <StartDefaultTask+0x23e>
 8002320:	a201      	add	r2, pc, #4	@ (adr r2, 8002328 <StartDefaultTask+0x60>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	080023af 	.word	0x080023af
 800232c:	080023e1 	.word	0x080023e1
 8002330:	0800240d 	.word	0x0800240d
 8002334:	08002423 	.word	0x08002423
 8002338:	08002445 	.word	0x08002445
 800233c:	08002467 	.word	0x08002467
 8002340:	08002489 	.word	0x08002489
 8002344:	080024ab 	.word	0x080024ab
 8002348:	080024b1 	.word	0x080024b1
 800234c:	08002507 	.word	0x08002507
 8002350:	0800237d 	.word	0x0800237d
 8002354:	08002507 	.word	0x08002507
 8002358:	08002507 	.word	0x08002507
 800235c:	08002507 	.word	0x08002507
 8002360:	08002507 	.word	0x08002507
 8002364:	08002507 	.word	0x08002507
 8002368:	08002507 	.word	0x08002507
 800236c:	08002507 	.word	0x08002507
 8002370:	08002507 	.word	0x08002507
 8002374:	08002507 	.word	0x08002507
 8002378:	080024b7 	.word	0x080024b7
	      {
	      	case TP_MENU:
	      		if (sMenuTimer)
 800237c:	4b6f      	ldr	r3, [pc, #444]	@ (800253c <StartDefaultTask+0x274>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <StartDefaultTask+0xd2>
	  				RysujMenuTimer(sMenuTimer/10);
 8002384:	4b6d      	ldr	r3, [pc, #436]	@ (800253c <StartDefaultTask+0x274>)
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	4a6d      	ldr	r2, [pc, #436]	@ (8002540 <StartDefaultTask+0x278>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	08db      	lsrs	r3, r3, #3
 8002390:	b29b      	uxth	r3, r3
 8002392:	4618      	mov	r0, r3
 8002394:	f002 f920 	bl	80045d8 <RysujMenuTimer>
	  			{
	  				chTrybPracy = chPozycjaMenu;
	  				LCD_clear();
	  				chRysujRaz = 1;
	  			}
	  			break;
 8002398:	e0c0      	b.n	800251c <StartDefaultTask+0x254>
	  				chTrybPracy = chPozycjaMenu;
 800239a:	4b64      	ldr	r3, [pc, #400]	@ (800252c <StartDefaultTask+0x264>)
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	4b65      	ldr	r3, [pc, #404]	@ (8002534 <StartDefaultTask+0x26c>)
 80023a0:	701a      	strb	r2, [r3, #0]
	  				LCD_clear();
 80023a2:	f001 f9a7 	bl	80036f4 <LCD_clear>
	  				chRysujRaz = 1;
 80023a6:	4b64      	ldr	r3, [pc, #400]	@ (8002538 <StartDefaultTask+0x270>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
	  			break;
 80023ac:	e0b6      	b.n	800251c <StartDefaultTask+0x254>

	      	case TP_KAMERA_RGB:
	      		if (chNowyObrazKamery)
 80023ae:	4b65      	ldr	r3, [pc, #404]	@ (8002544 <StartDefaultTask+0x27c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80a9 	beq.w	800250a <StartDefaultTask+0x242>
	  			{
	  				drawBitmap(0, 0, 320, 240, (const unsigned short*)nBuforKamery);	//214ms
 80023b8:	4b63      	ldr	r3, [pc, #396]	@ (8002548 <StartDefaultTask+0x280>)
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	23f0      	movs	r3, #240	@ 0xf0
 80023be:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80023c2:	2100      	movs	r1, #0
 80023c4:	2000      	movs	r0, #0
 80023c6:	f001 ff59 	bl	800427c <drawBitmap>
	  				chNowyObrazKamery = 0;
 80023ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002544 <StartDefaultTask+0x27c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]

	  					hdcmi.Instance->CR |= DCMI_CR_CAPTURE;
	  					err = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)nBuforKamery, ROZM_BUF32_KAM);
	  				}*/
	  				//WyswietlDane("Format control", CzytajKamInit(), 220);	//wyświetla zawartość rejestru kamery
	  				WyswietlKodBledu(chErr, 10, 220);
 80023d0:	4b5e      	ldr	r3, [pc, #376]	@ (800254c <StartDefaultTask+0x284>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	22dc      	movs	r2, #220	@ 0xdc
 80023d6:	210a      	movs	r1, #10
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 f961 	bl	80046a0 <WyswietlKodBledu>
	  			}
	  			break;
 80023de:	e094      	b.n	800250a <StartDefaultTask+0x242>

	      	case TP_CAN_MAGN:
				WyswietlDaneFloat("mag X", 0, 100);
 80023e0:	2164      	movs	r1, #100	@ 0x64
 80023e2:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8002550 <StartDefaultTask+0x288>
 80023e6:	485b      	ldr	r0, [pc, #364]	@ (8002554 <StartDefaultTask+0x28c>)
 80023e8:	f002 f934 	bl	8004654 <WyswietlDaneFloat>
				WyswietlDaneFloat("mag Y", 1, 140);
 80023ec:	218c      	movs	r1, #140	@ 0x8c
 80023ee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80023f2:	4859      	ldr	r0, [pc, #356]	@ (8002558 <StartDefaultTask+0x290>)
 80023f4:	f002 f92e 	bl	8004654 <WyswietlDaneFloat>
				WyswietlDaneFloat("mag Z", 2, 180);
 80023f8:	21b4      	movs	r1, #180	@ 0xb4
 80023fa:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80023fe:	4857      	ldr	r0, [pc, #348]	@ (800255c <StartDefaultTask+0x294>)
 8002400:	f002 f928 	bl	8004654 <WyswietlDaneFloat>
				HAL_Delay(100);
 8002404:	2064      	movs	r0, #100	@ 0x64
 8002406:	f003 f8f5 	bl	80055f4 <HAL_Delay>
	  			break;
 800240a:	e087      	b.n	800251c <StartDefaultTask+0x254>

	      	case TP_ANALIZA_ETH:
      			chErr = AnalizujEth(&heth);
 800240c:	4854      	ldr	r0, [pc, #336]	@ (8002560 <StartDefaultTask+0x298>)
 800240e:	f7fe fdc9 	bl	8000fa4 <AnalizujEth>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	4b4d      	ldr	r3, [pc, #308]	@ (800254c <StartDefaultTask+0x284>)
 8002418:	701a      	strb	r2, [r3, #0]
	      		HAL_Delay(100);
 800241a:	2064      	movs	r0, #100	@ 0x64
 800241c:	f003 f8ea 	bl	80055f4 <HAL_Delay>
	  			break;
 8002420:	e07c      	b.n	800251c <StartDefaultTask+0x254>

	      	case TP_KAM_SET2:
	      		if (chRysujRaz)
 8002422:	4b45      	ldr	r3, [pc, #276]	@ (8002538 <StartDefaultTask+0x270>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d071      	beq.n	800250e <StartDefaultTask+0x246>
	  			{
	      			//chErr = InitKamera2();
	      			chErr = KameraInit();
 800242a:	f7fe fded 	bl	8001008 <KameraInit>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	4b46      	ldr	r3, [pc, #280]	@ (800254c <StartDefaultTask+0x284>)
 8002434:	701a      	strb	r2, [r3, #0]
	  				chRysujRaz = 0;
 8002436:	4b40      	ldr	r3, [pc, #256]	@ (8002538 <StartDefaultTask+0x270>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
	  				chTrybPracy = TP_KAMERA_RGB;
 800243c:	4b3d      	ldr	r3, [pc, #244]	@ (8002534 <StartDefaultTask+0x26c>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 8002442:	e064      	b.n	800250e <StartDefaultTask+0x246>

	      	case TP_KAM_SET3:
	      		if (chRysujRaz)
 8002444:	4b3c      	ldr	r3, [pc, #240]	@ (8002538 <StartDefaultTask+0x270>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d062      	beq.n	8002512 <StartDefaultTask+0x24a>
	  			{
	      			chErr = InitKamera3();
 800244c:	f7fe ff78 	bl	8001340 <InitKamera3>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <StartDefaultTask+0x284>)
 8002456:	701a      	strb	r2, [r3, #0]
	  				chRysujRaz = 0;
 8002458:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <StartDefaultTask+0x270>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
	  				chTrybPracy = TP_KAMERA_RGB;
 800245e:	4b35      	ldr	r3, [pc, #212]	@ (8002534 <StartDefaultTask+0x26c>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 8002464:	e055      	b.n	8002512 <StartDefaultTask+0x24a>

	      	case TP_KAM_SET4:
	      		if (chRysujRaz)
 8002466:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <StartDefaultTask+0x270>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d053      	beq.n	8002516 <StartDefaultTask+0x24e>
	  			{
	      			chErr = InitKamera4();
 800246e:	f7fe ffb7 	bl	80013e0 <InitKamera4>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b35      	ldr	r3, [pc, #212]	@ (800254c <StartDefaultTask+0x284>)
 8002478:	701a      	strb	r2, [r3, #0]
	  				chRysujRaz = 0;
 800247a:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <StartDefaultTask+0x270>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	  				chTrybPracy = TP_KAMERA_RGB;
 8002480:	4b2c      	ldr	r3, [pc, #176]	@ (8002534 <StartDefaultTask+0x26c>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 8002486:	e046      	b.n	8002516 <StartDefaultTask+0x24e>

	      	case TP_KAM_SET5:
	      		if (chRysujRaz)
 8002488:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <StartDefaultTask+0x270>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d044      	beq.n	800251a <StartDefaultTask+0x252>
	  			{
	      			chErr = InitKamera5();
 8002490:	f7ff f866 	bl	8001560 <InitKamera5>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b2c      	ldr	r3, [pc, #176]	@ (800254c <StartDefaultTask+0x284>)
 800249a:	701a      	strb	r2, [r3, #0]
	  				chRysujRaz = 0;
 800249c:	4b26      	ldr	r3, [pc, #152]	@ (8002538 <StartDefaultTask+0x270>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
	  				chTrybPracy = TP_KAMERA_RGB;
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <StartDefaultTask+0x26c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 80024a8:	e037      	b.n	800251a <StartDefaultTask+0x252>

	      	case TP_FRAKTAL:	FraktalDemo();		break;
 80024aa:	f002 faa1 	bl	80049f0 <FraktalDemo>
 80024ae:	e035      	b.n	800251c <StartDefaultTask+0x254>
	      	case TP_POMOC:		WyswietlPomoc();	break;
 80024b0:	f002 fcfe 	bl	8004eb0 <WyswietlPomoc>
 80024b4:	e032      	b.n	800251c <StartDefaultTask+0x254>

	      	case TP_ZDJECIE:		//wykonaj zdjęcie o podanych rozmiarach
	      		chErr = ZrobZdjecie(sSzerZdjecia, sWysZdjecia);
 80024b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002564 <StartDefaultTask+0x29c>)
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002568 <StartDefaultTask+0x2a0>)
 80024be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80024c2:	b292      	uxth	r2, r2
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f90c 	bl	80016e4 <ZrobZdjecie>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <StartDefaultTask+0x284>)
 80024d2:	701a      	strb	r2, [r3, #0]
	      		if (chErr)
 80024d4:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <StartDefaultTask+0x284>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <StartDefaultTask+0x21c>
	      			chStatusZdjecia = SGZ_BLAD;		//wystapił błąd wykonania zdjecia
 80024dc:	4b23      	ldr	r3, [pc, #140]	@ (800256c <StartDefaultTask+0x2a4>)
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e002      	b.n	80024ea <StartDefaultTask+0x222>
	      		else
	      			chStatusZdjecia = SGZ_GOTOWE;	//Zdjecie gotowe, można je pobrać
 80024e4:	4b21      	ldr	r3, [pc, #132]	@ (800256c <StartDefaultTask+0x2a4>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]
	      		WyswietlDane("Wykonano zdjecie: ", chErr, 220);
 80024ea:	4b18      	ldr	r3, [pc, #96]	@ (800254c <StartDefaultTask+0x284>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	22dc      	movs	r2, #220	@ 0xdc
 80024f0:	4619      	mov	r1, r3
 80024f2:	481f      	ldr	r0, [pc, #124]	@ (8002570 <StartDefaultTask+0x2a8>)
 80024f4:	f002 f88e 	bl	8004614 <WyswietlDane>
	      		chTrybPracy = TP_KAMERA_RGB;		//wróć do wyświetlania obrazu
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <StartDefaultTask+0x26c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
	      		chNowyObrazKamery = 1;
 80024fe:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <StartDefaultTask+0x27c>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
	      		break;
 8002504:	e00a      	b.n	800251c <StartDefaultTask+0x254>


	      	default:			break;
 8002506:	bf00      	nop
 8002508:	e008      	b.n	800251c <StartDefaultTask+0x254>
	  			break;
 800250a:	bf00      	nop
 800250c:	e006      	b.n	800251c <StartDefaultTask+0x254>
	  			break;
 800250e:	bf00      	nop
 8002510:	e004      	b.n	800251c <StartDefaultTask+0x254>
	  			break;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <StartDefaultTask+0x254>
	  			break;
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <StartDefaultTask+0x254>
	  			break;
 800251a:	bf00      	nop
	      }

	      /* USER CODE BEGIN 3 */
	      //BSP_LED_Toggle(LED_YELLOW);
	      BSP_LED_On(LED_YELLOW);
 800251c:	2001      	movs	r0, #1
 800251e:	f002 fe2d 	bl	800517c <BSP_LED_On>

	      osDelay(1);
 8002522:	2001      	movs	r0, #1
 8002524:	f00f f9e7 	bl	80118f6 <osDelay>
	  	if (BspButtonState == BUTTON_PRESSED)
 8002528:	e6d7      	b.n	80022da <StartDefaultTask+0x12>
 800252a:	bf00      	nop
 800252c:	2404c0c4 	.word	0x2404c0c4
 8002530:	2404bd54 	.word	0x2404bd54
 8002534:	24000008 	.word	0x24000008
 8002538:	24000014 	.word	0x24000014
 800253c:	2400000a 	.word	0x2400000a
 8002540:	cccccccd 	.word	0xcccccccd
 8002544:	2404c11c 	.word	0x2404c11c
 8002548:	24000cfc 	.word	0x24000cfc
 800254c:	2404c0c5 	.word	0x2404c0c5
 8002550:	00000000 	.word	0x00000000
 8002554:	08016660 	.word	0x08016660
 8002558:	08016668 	.word	0x08016668
 800255c:	08016670 	.word	0x08016670
 8002560:	2404be44 	.word	0x2404be44
 8002564:	24000362 	.word	0x24000362
 8002568:	24000364 	.word	0x24000364
 800256c:	24000366 	.word	0x24000366
 8002570:	08016678 	.word	0x08016678

08002574 <MPU_Config>:


 /* MPU Configuration */

void MPU_Config(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800257a:	463b      	mov	r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002586:	f003 f959 	bl	800583c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800258a:	2301      	movs	r3, #1
 800258c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800258e:	2300      	movs	r3, #0
 8002590:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002596:	231f      	movs	r3, #31
 8002598:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800259a:	2387      	movs	r3, #135	@ 0x87
 800259c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800259e:	2300      	movs	r3, #0
 80025a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80025a2:	2300      	movs	r3, #0
 80025a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80025aa:	2301      	movs	r3, #1
 80025ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025b6:	463b      	mov	r3, r7
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 f977 	bl	80058ac <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80025be:	2301      	movs	r3, #1
 80025c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <MPU_Config+0x9c>)
 80025c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80025c6:	2310      	movs	r3, #16
 80025c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80025d2:	2303      	movs	r3, #3
 80025d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025da:	463b      	mov	r3, r7
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 f965 	bl	80058ac <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80025e2:	2302      	movs	r3, #2
 80025e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <MPU_Config+0xa0>)
 80025e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80025ea:	2307      	movs	r3, #7
 80025ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025fa:	463b      	mov	r3, r7
 80025fc:	4618      	mov	r0, r3
 80025fe:	f003 f955 	bl	80058ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002602:	2004      	movs	r0, #4
 8002604:	f003 f932 	bl	800586c <HAL_MPU_Enable>

}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	30020000 	.word	0x30020000
 8002614:	30040000 	.word	0x30040000

08002618 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800262a:	f002 ffc3 	bl	80055b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40001000 	.word	0x40001000

0800263c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <BSP_PB_Callback+0x24>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	2404bd54 	.word	0x2404bd54

08002664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <Error_Handler+0x8>

08002670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002680:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_MspInit+0x58>)
 8002682:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002686:	4a10      	ldr	r2, [pc, #64]	@ (80026c8 <HAL_MspInit+0x58>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002690:	4b0d      	ldr	r3, [pc, #52]	@ (80026c8 <HAL_MspInit+0x58>)
 8002692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	210f      	movs	r1, #15
 80026a2:	f06f 0001 	mvn.w	r0, #1
 80026a6:	f003 f8a1 	bl	80057ec <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	4618      	mov	r0, r3
 80026b8:	f008 fe68 	bl	800b38c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80026bc:	f008 feac 	bl	800b418 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	58024400 	.word	0x58024400

080026cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <HAL_CRC_MspInit+0x3c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80026de:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_CRC_MspInit+0x40>)
 80026e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e4:	4a09      	ldr	r2, [pc, #36]	@ (800270c <HAL_CRC_MspInit+0x40>)
 80026e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80026ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <HAL_CRC_MspInit+0x40>)
 80026f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	58024c00 	.word	0x58024c00
 800270c:	58024400 	.word	0x58024400

08002710 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08e      	sub	sp, #56	@ 0x38
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a7e      	ldr	r2, [pc, #504]	@ (8002928 <HAL_DCMI_MspInit+0x218>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f040 80f6 	bne.w	8002920 <HAL_DCMI_MspInit+0x210>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002734:	4b7d      	ldr	r3, [pc, #500]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002736:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800273a:	4a7c      	ldr	r2, [pc, #496]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8002744:	4b79      	ldr	r3, [pc, #484]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002746:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002752:	4b76      	ldr	r3, [pc, #472]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002758:	4a74      	ldr	r2, [pc, #464]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 800275a:	f043 0310 	orr.w	r3, r3, #16
 800275e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002762:	4b72      	ldr	r3, [pc, #456]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	4b6e      	ldr	r3, [pc, #440]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002776:	4a6d      	ldr	r2, [pc, #436]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002780:	4b6a      	ldr	r3, [pc, #424]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278e:	4b67      	ldr	r3, [pc, #412]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002794:	4a65      	ldr	r2, [pc, #404]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800279e:	4b63      	ldr	r3, [pc, #396]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 80027a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ac:	4b5f      	ldr	r3, [pc, #380]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b2:	4a5e      	ldr	r2, [pc, #376]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027bc:	4b5b      	ldr	r3, [pc, #364]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ca:	4b58      	ldr	r3, [pc, #352]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 80027cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d0:	4a56      	ldr	r2, [pc, #344]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027da:	4b54      	ldr	r3, [pc, #336]	@ (800292c <HAL_DCMI_MspInit+0x21c>)
 80027dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80027e8:	2370      	movs	r3, #112	@ 0x70
 80027ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027f0:	2302      	movs	r3, #2
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f4:	2302      	movs	r3, #2
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027f8:	230d      	movs	r3, #13
 80027fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002800:	4619      	mov	r1, r3
 8002802:	484b      	ldr	r0, [pc, #300]	@ (8002930 <HAL_DCMI_MspInit+0x220>)
 8002804:	f007 fda4 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002808:	2310      	movs	r3, #16
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002810:	2302      	movs	r3, #2
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002814:	2302      	movs	r3, #2
 8002816:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002818:	230d      	movs	r3, #13
 800281a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	4844      	ldr	r0, [pc, #272]	@ (8002934 <HAL_DCMI_MspInit+0x224>)
 8002824:	f007 fd94 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002828:	2340      	movs	r3, #64	@ 0x40
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002830:	2301      	movs	r3, #1
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002834:	2302      	movs	r3, #2
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002838:	230d      	movs	r3, #13
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	483c      	ldr	r0, [pc, #240]	@ (8002934 <HAL_DCMI_MspInit+0x224>)
 8002844:	f007 fd84 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002848:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002852:	2302      	movs	r3, #2
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002856:	2302      	movs	r3, #2
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800285a:	230d      	movs	r3, #13
 800285c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002862:	4619      	mov	r1, r3
 8002864:	4834      	ldr	r0, [pc, #208]	@ (8002938 <HAL_DCMI_MspInit+0x228>)
 8002866:	f007 fd73 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800286a:	2308      	movs	r3, #8
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002872:	2302      	movs	r3, #2
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002876:	2302      	movs	r3, #2
 8002878:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800287a:	230d      	movs	r3, #13
 800287c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800287e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002882:	4619      	mov	r1, r3
 8002884:	482d      	ldr	r0, [pc, #180]	@ (800293c <HAL_DCMI_MspInit+0x22c>)
 8002886:	f007 fd63 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002892:	2301      	movs	r3, #1
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002896:	2302      	movs	r3, #2
 8002898:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800289a:	230d      	movs	r3, #13
 800289c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	4826      	ldr	r0, [pc, #152]	@ (8002940 <HAL_DCMI_MspInit+0x230>)
 80028a6:	f007 fd53 	bl	800a350 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB7_FMP);
 80028aa:	2020      	movs	r0, #32
 80028ac:	f008 fd4a 	bl	800b344 <HAL_I2CEx_EnableFastModePlus>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80028b0:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028b2:	4a25      	ldr	r2, [pc, #148]	@ (8002948 <HAL_DCMI_MspInit+0x238>)
 80028b4:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80028b6:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028b8:	224b      	movs	r2, #75	@ 0x4b
 80028ba:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028bc:	4b21      	ldr	r3, [pc, #132]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c2:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ce:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028d6:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028de:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80028e0:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80028e6:	4b17      	ldr	r3, [pc, #92]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80028f4:	4813      	ldr	r0, [pc, #76]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 80028f6:	f003 fbed 	bl	80060d4 <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_DCMI_MspInit+0x1f4>
    {
      Error_Handler();
 8002900:	f7ff feb0 	bl	8002664 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0f      	ldr	r2, [pc, #60]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 8002908:	649a      	str	r2, [r3, #72]	@ 0x48
 800290a:	4a0e      	ldr	r2, [pc, #56]	@ (8002944 <HAL_DCMI_MspInit+0x234>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	2105      	movs	r1, #5
 8002914:	204e      	movs	r0, #78	@ 0x4e
 8002916:	f002 ff69 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800291a:	204e      	movs	r0, #78	@ 0x4e
 800291c:	f002 ff80 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002920:	bf00      	nop
 8002922:	3738      	adds	r7, #56	@ 0x38
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	48020000 	.word	0x48020000
 800292c:	58024400 	.word	0x58024400
 8002930:	58021000 	.word	0x58021000
 8002934:	58020000 	.word	0x58020000
 8002938:	58020800 	.word	0x58020800
 800293c:	58020c00 	.word	0x58020c00
 8002940:	58020400 	.word	0x58020400
 8002944:	2404bdcc 	.word	0x2404bdcc
 8002948:	40020010 	.word	0x40020010

0800294c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	@ 0x38
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a61      	ldr	r2, [pc, #388]	@ (8002af0 <HAL_ETH_MspInit+0x1a4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	f040 80bb 	bne.w	8002ae6 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002970:	4b60      	ldr	r3, [pc, #384]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002976:	4a5f      	ldr	r2, [pc, #380]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800297c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002980:	4b5c      	ldr	r3, [pc, #368]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800298e:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002994:	4a57      	ldr	r2, [pc, #348]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800299e:	4b55      	ldr	r3, [pc, #340]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80029ac:	4b51      	ldr	r3, [pc, #324]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029b2:	4a50      	ldr	r2, [pc, #320]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80029bc:	4b4d      	ldr	r3, [pc, #308]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	4b4a      	ldr	r3, [pc, #296]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d0:	4a48      	ldr	r2, [pc, #288]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029d2:	f043 0304 	orr.w	r3, r3, #4
 80029d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029da:	4b46      	ldr	r3, [pc, #280]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b42      	ldr	r3, [pc, #264]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ee:	4a41      	ldr	r2, [pc, #260]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029f8:	4b3e      	ldr	r3, [pc, #248]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b3b      	ldr	r3, [pc, #236]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0c:	4a39      	ldr	r2, [pc, #228]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a16:	4b37      	ldr	r3, [pc, #220]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a24:	4b33      	ldr	r3, [pc, #204]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a2a:	4a32      	ldr	r2, [pc, #200]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002a2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a34:	4b2f      	ldr	r3, [pc, #188]	@ (8002af4 <HAL_ETH_MspInit+0x1a8>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3e:	60bb      	str	r3, [r7, #8]
 8002a40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a42:	2302      	movs	r3, #2
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a52:	230b      	movs	r3, #11
 8002a54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4826      	ldr	r0, [pc, #152]	@ (8002af8 <HAL_ETH_MspInit+0x1ac>)
 8002a5e:	f007 fc77 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002a62:	2386      	movs	r3, #134	@ 0x86
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a72:	230b      	movs	r3, #11
 8002a74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	481f      	ldr	r0, [pc, #124]	@ (8002afc <HAL_ETH_MspInit+0x1b0>)
 8002a7e:	f007 fc67 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a82:	2330      	movs	r3, #48	@ 0x30
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a92:	230b      	movs	r3, #11
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4816      	ldr	r0, [pc, #88]	@ (8002af8 <HAL_ETH_MspInit+0x1ac>)
 8002a9e:	f007 fc57 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ab4:	230b      	movs	r3, #11
 8002ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002abc:	4619      	mov	r1, r3
 8002abe:	4810      	ldr	r0, [pc, #64]	@ (8002b00 <HAL_ETH_MspInit+0x1b4>)
 8002ac0:	f007 fc46 	bl	800a350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002ac4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ad6:	230b      	movs	r3, #11
 8002ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4808      	ldr	r0, [pc, #32]	@ (8002b04 <HAL_ETH_MspInit+0x1b8>)
 8002ae2:	f007 fc35 	bl	800a350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002ae6:	bf00      	nop
 8002ae8:	3738      	adds	r7, #56	@ 0x38
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40028000 	.word	0x40028000
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58020800 	.word	0x58020800
 8002afc:	58020000 	.word	0x58020000
 8002b00:	58020400 	.word	0x58020400
 8002b04:	58021800 	.word	0x58021800

08002b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0ba      	sub	sp, #232	@ 0xe8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	22c0      	movs	r2, #192	@ 0xc0
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f010 fe78 	bl	801381e <memset>
  if(hi2c->Instance==I2C4)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a27      	ldr	r2, [pc, #156]	@ (8002bd0 <HAL_I2C_MspInit+0xc8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d147      	bne.n	8002bc8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002b38:	f04f 0210 	mov.w	r2, #16
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_CSI;
 8002b44:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	4618      	mov	r0, r3
 8002b52:	f009 fcf3 	bl	800c53c <HAL_RCCEx_PeriphCLKConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b5c:	f7ff fd82 	bl	8002664 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b60:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd4 <HAL_I2C_MspInit+0xcc>)
 8002b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b66:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd4 <HAL_I2C_MspInit+0xcc>)
 8002b68:	f043 0320 	orr.w	r3, r3, #32
 8002b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b70:	4b18      	ldr	r3, [pc, #96]	@ (8002bd4 <HAL_I2C_MspInit+0xcc>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002b7e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b86:	2312      	movs	r3, #18
 8002b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002b98:	2304      	movs	r3, #4
 8002b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	480c      	ldr	r0, [pc, #48]	@ (8002bd8 <HAL_I2C_MspInit+0xd0>)
 8002ba6:	f007 fbd3 	bl	800a350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_I2C_MspInit+0xcc>)
 8002bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bb0:	4a08      	ldr	r2, [pc, #32]	@ (8002bd4 <HAL_I2C_MspInit+0xcc>)
 8002bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bba:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_I2C_MspInit+0xcc>)
 8002bbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002bc8:	bf00      	nop
 8002bca:	37e8      	adds	r7, #232	@ 0xe8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	58001c00 	.word	0x58001c00
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	58021400 	.word	0x58021400

08002bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <HAL_TIM_Base_MspInit+0x3c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10e      	bne.n	8002c0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_TIM_Base_MspInit+0x40>)
 8002bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bf4:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_TIM_Base_MspInit+0x40>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002bfe:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <HAL_TIM_Base_MspInit+0x40>)
 8002c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40002000 	.word	0x40002000
 8002c1c:	58024400 	.word	0x58024400

08002c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM14)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a13      	ldr	r2, [pc, #76]	@ (8002c8c <HAL_TIM_MspPostInit+0x6c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d11f      	bne.n	8002c82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c42:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <HAL_TIM_MspPostInit+0x70>)
 8002c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c48:	4a11      	ldr	r2, [pc, #68]	@ (8002c90 <HAL_TIM_MspPostInit+0x70>)
 8002c4a:	f043 0320 	orr.w	r3, r3, #32
 8002c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c52:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <HAL_TIM_MspPostInit+0x70>)
 8002c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PF9     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c66:	2302      	movs	r3, #2
 8002c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002c72:	2309      	movs	r3, #9
 8002c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <HAL_TIM_MspPostInit+0x74>)
 8002c7e:	f007 fb67 	bl	800a350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002c82:	bf00      	nop
 8002c84:	3720      	adds	r7, #32
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40002000 	.word	0x40002000
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58021400 	.word	0x58021400

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0bc      	sub	sp, #240	@ 0xf0
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb0:	f107 0318 	add.w	r3, r7, #24
 8002cb4:	22c0      	movs	r2, #192	@ 0xc0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f010 fdb0 	bl	801381e <memset>
  if(huart->Instance==UART7)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a54      	ldr	r2, [pc, #336]	@ (8002e14 <HAL_UART_MspInit+0x17c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d14e      	bne.n	8002d66 <HAL_UART_MspInit+0xce>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002cc8:	f04f 0202 	mov.w	r2, #2
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cda:	f107 0318 	add.w	r3, r7, #24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f009 fc2c 	bl	800c53c <HAL_RCCEx_PeriphCLKConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002cea:	f7ff fcbb 	bl	8002664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8002cee:	4b4a      	ldr	r3, [pc, #296]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cf4:	4a48      	ldr	r2, [pc, #288]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002cf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002cfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cfe:	4b46      	ldr	r3, [pc, #280]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0c:	4b42      	ldr	r3, [pc, #264]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d12:	4a41      	ldr	r2, [pc, #260]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002d14:	f043 0320 	orr.w	r3, r3, #32
 8002d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d2a:	23c0      	movs	r3, #192	@ 0xc0
 8002d2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d30:	2302      	movs	r3, #2
 8002d32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002d42:	2307      	movs	r3, #7
 8002d44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d48:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4833      	ldr	r0, [pc, #204]	@ (8002e1c <HAL_UART_MspInit+0x184>)
 8002d50:	f007 fafe 	bl	800a350 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2105      	movs	r1, #5
 8002d58:	2052      	movs	r0, #82	@ 0x52
 8002d5a:	f002 fd47 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002d5e:	2052      	movs	r0, #82	@ 0x52
 8002d60:	f002 fd5e 	bl	8005820 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d64:	e052      	b.n	8002e0c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8002e20 <HAL_UART_MspInit+0x188>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d14d      	bne.n	8002e0c <HAL_UART_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d70:	f04f 0202 	mov.w	r2, #2
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d82:	f107 0318 	add.w	r3, r7, #24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f009 fbd8 	bl	800c53c <HAL_RCCEx_PeriphCLKConfig>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_UART_MspInit+0xfe>
      Error_Handler();
 8002d92:	f7ff fc67 	bl	8002664 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002da6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db4:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dba:	4a17      	ldr	r2, [pc, #92]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002dbc:	f043 0308 	orr.w	r3, r3, #8
 8002dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dc4:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <HAL_UART_MspInit+0x180>)
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002dd2:	2360      	movs	r3, #96	@ 0x60
 8002dd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dea:	2307      	movs	r3, #7
 8002dec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002df4:	4619      	mov	r1, r3
 8002df6:	480b      	ldr	r0, [pc, #44]	@ (8002e24 <HAL_UART_MspInit+0x18c>)
 8002df8:	f007 faaa 	bl	800a350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2105      	movs	r1, #5
 8002e00:	2026      	movs	r0, #38	@ 0x26
 8002e02:	f002 fcf3 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e06:	2026      	movs	r0, #38	@ 0x26
 8002e08:	f002 fd0a 	bl	8005820 <HAL_NVIC_EnableIRQ>
}
 8002e0c:	bf00      	nop
 8002e0e:	37f0      	adds	r7, #240	@ 0xf0
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40007800 	.word	0x40007800
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	58021400 	.word	0x58021400
 8002e20:	40004400 	.word	0x40004400
 8002e24:	58020c00 	.word	0x58020c00

08002e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b090      	sub	sp, #64	@ 0x40
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	d827      	bhi.n	8002e86 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002e36:	2200      	movs	r2, #0
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	2036      	movs	r0, #54	@ 0x36
 8002e3c:	f002 fcd6 	bl	80057ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e40:	2036      	movs	r0, #54	@ 0x36
 8002e42:	f002 fced 	bl	8005820 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002e46:	4a29      	ldr	r2, [pc, #164]	@ (8002eec <HAL_InitTick+0xc4>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_InitTick+0xc8>)
 8002e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e52:	4a27      	ldr	r2, [pc, #156]	@ (8002ef0 <HAL_InitTick+0xc8>)
 8002e54:	f043 0310 	orr.w	r3, r3, #16
 8002e58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_InitTick+0xc8>)
 8002e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e6a:	f107 0210 	add.w	r2, r7, #16
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f009 fb1f 	bl	800c4b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <HAL_InitTick+0x6a>
 8002e84:	e001      	b.n	8002e8a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e02b      	b.n	8002ee2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e8a:	f009 fae9 	bl	800c460 <HAL_RCC_GetPCLK1Freq>
 8002e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002e90:	e004      	b.n	8002e9c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e92:	f009 fae5 	bl	800c460 <HAL_RCC_GetPCLK1Freq>
 8002e96:	4603      	mov	r3, r0
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e9e:	4a15      	ldr	r2, [pc, #84]	@ (8002ef4 <HAL_InitTick+0xcc>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	0c9b      	lsrs	r3, r3, #18
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002eaa:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <HAL_InitTick+0xd0>)
 8002eac:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_InitTick+0xd4>)
 8002eae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_InitTick+0xd0>)
 8002eb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002eb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002ef8 <HAL_InitTick+0xd0>)
 8002eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_InitTick+0xd0>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <HAL_InitTick+0xd0>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002eca:	480b      	ldr	r0, [pc, #44]	@ (8002ef8 <HAL_InitTick+0xd0>)
 8002ecc:	f00b f962 	bl	800e194 <HAL_TIM_Base_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ed6:	4808      	ldr	r0, [pc, #32]	@ (8002ef8 <HAL_InitTick+0xd0>)
 8002ed8:	f00b f9b4 	bl	800e244 <HAL_TIM_Base_Start_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	e000      	b.n	8002ee2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3740      	adds	r7, #64	@ 0x40
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	24000034 	.word	0x24000034
 8002ef0:	58024400 	.word	0x58024400
 8002ef4:	431bde83 	.word	0x431bde83
 8002ef8:	2404c0d0 	.word	0x2404c0d0
 8002efc:	40001000 	.word	0x40001000

08002f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <NMI_Handler+0x4>

08002f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <HardFault_Handler+0x4>

08002f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <MemManage_Handler+0x4>

08002f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <BusFault_Handler+0x4>

08002f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <UsageFault_Handler+0x4>

08002f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002f3c:	4802      	ldr	r0, [pc, #8]	@ (8002f48 <DMA1_Stream0_IRQHandler+0x10>)
 8002f3e:	f004 fbf3 	bl	8007728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2404bdcc 	.word	0x2404bdcc

08002f4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f50:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <USART2_IRQHandler+0x10>)
 8002f52:	f00c f957 	bl	800f204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2404c028 	.word	0x2404c028

08002f60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f002 f9f9 	bl	800535c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f74:	4809      	ldr	r0, [pc, #36]	@ (8002f9c <TIM6_DAC_IRQHandler+0x2c>)
 8002f76:	f00b fa3e 	bl	800e3f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  if (sMenuTimer)
 8002f7a:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <TIM6_DAC_IRQHandler+0x30>)
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <TIM6_DAC_IRQHandler+0x1e>
	  sMenuTimer--;
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <TIM6_DAC_IRQHandler+0x30>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <TIM6_DAC_IRQHandler+0x30>)
 8002f8c:	801a      	strh	r2, [r3, #0]
  nCzasSystemowy++;		//odmierza znacznik czasu ramek komunikacyjnych
 8002f8e:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <TIM6_DAC_IRQHandler+0x34>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	4a03      	ldr	r2, [pc, #12]	@ (8002fa4 <TIM6_DAC_IRQHandler+0x34>)
 8002f96:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	2404c0d0 	.word	0x2404c0d0
 8002fa0:	2400000a 	.word	0x2400000a
 8002fa4:	2404c120 	.word	0x2404c120

08002fa8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */
	//BSP_LED_Toggle(LED_RED);
  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <DCMI_IRQHandler+0x10>)
 8002fae:	f002 ff5f 	bl	8005e70 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  //NowyObrazKamery = 1;
  /* USER CODE END DCMI_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2404bd7c 	.word	0x2404bd7c

08002fbc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002fc0:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <UART7_IRQHandler+0x10>)
 8002fc2:	f00c f91f 	bl	800f204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2404bf94 	.word	0x2404bf94

08002fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return 1;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <_kill>:

int _kill(int pid, int sig)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fea:	f010 fcc1 	bl	8013970 <__errno>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2216      	movs	r2, #22
 8002ff2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_exit>:

void _exit (int status)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003008:	f04f 31ff 	mov.w	r1, #4294967295
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ffe7 	bl	8002fe0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003012:	bf00      	nop
 8003014:	e7fd      	b.n	8003012 <_exit+0x12>

08003016 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e00a      	b.n	800303e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003028:	f3af 8000 	nop.w
 800302c:	4601      	mov	r1, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	60ba      	str	r2, [r7, #8]
 8003034:	b2ca      	uxtb	r2, r1
 8003036:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3301      	adds	r3, #1
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	dbf0      	blt.n	8003028 <_read+0x12>
  }

  return len;
 8003046:	687b      	ldr	r3, [r7, #4]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e009      	b.n	8003076 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	60ba      	str	r2, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f002 f9ea 	bl	8005444 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3301      	adds	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	dbf1      	blt.n	8003062 <_write+0x12>
  }
  return len;
 800307e:	687b      	ldr	r3, [r7, #4]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_close>:

int _close(int file)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030b0:	605a      	str	r2, [r3, #4]
  return 0;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <_isatty>:

int _isatty(int file)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030c8:	2301      	movs	r3, #1
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f8:	4a14      	ldr	r2, [pc, #80]	@ (800314c <_sbrk+0x5c>)
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <_sbrk+0x60>)
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003104:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <_sbrk+0x64>)
 800310e:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <_sbrk+0x68>)
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <_sbrk+0x64>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	429a      	cmp	r2, r3
 800311e:	d207      	bcs.n	8003130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003120:	f010 fc26 	bl	8013970 <__errno>
 8003124:	4603      	mov	r3, r0
 8003126:	220c      	movs	r2, #12
 8003128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	e009      	b.n	8003144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003130:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	4a05      	ldr	r2, [pc, #20]	@ (8003154 <_sbrk+0x64>)
 8003140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003142:	68fb      	ldr	r3, [r7, #12]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	24080000 	.word	0x24080000
 8003150:	00000400 	.word	0x00000400
 8003154:	2404c124 	.word	0x2404c124
 8003158:	240758c8 	.word	0x240758c8

0800315c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800315c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003160:	f7fd fa8e 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003164:	480c      	ldr	r0, [pc, #48]	@ (8003198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003166:	490d      	ldr	r1, [pc, #52]	@ (800319c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003168:	4a0d      	ldr	r2, [pc, #52]	@ (80031a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800316c:	e002      	b.n	8003174 <LoopCopyDataInit>

0800316e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003172:	3304      	adds	r3, #4

08003174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003178:	d3f9      	bcc.n	800316e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800317a:	4a0a      	ldr	r2, [pc, #40]	@ (80031a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800317c:	4c0a      	ldr	r4, [pc, #40]	@ (80031a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800317e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003180:	e001      	b.n	8003186 <LoopFillZerobss>

08003182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003184:	3204      	adds	r2, #4

08003186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003188:	d3fb      	bcc.n	8003182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800318a:	f010 fbf7 	bl	801397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800318e:	f7fe fbe5 	bl	800195c <main>
  bx  lr
 8003192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003194:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003198:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800319c:	24000208 	.word	0x24000208
  ldr r2, =_sidata
 80031a0:	08017de0 	.word	0x08017de0
  ldr r2, =_sbss
 80031a4:	24000208 	.word	0x24000208
  ldr r4, =_ebss
 80031a8:	240758c4 	.word	0x240758c4

080031ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC3_IRQHandler>
	...

080031b0 <LCD_write_com>:
// Wysy�a polecenie do wy�wietlacza LCD
// Parametry: chDane
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void LCD_write_com(unsigned char chData)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));							//PB1=CS=0
 80031ba:	4b37      	ldr	r3, [pc, #220]	@ (8003298 <LCD_write_com+0xe8>)
 80031bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031c0:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<(LCD_RS+CLEAR)) + (1<<(LCD_WR+CLEAR));	//PC3=RS=0
 80031c2:	4b36      	ldr	r3, [pc, #216]	@ (800329c <LCD_write_com+0xec>)
 80031c4:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80031c8:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = (1<<LCD_RD);									//PA3=RD=1
 80031ca:	4b35      	ldr	r3, [pc, #212]	@ (80032a0 <LCD_write_com+0xf0>)
 80031cc:	2208      	movs	r2, #8
 80031ce:	619a      	str	r2, [r3, #24]

	//dane są rozsiane po różnych portach, więc poskładaj je
	GPIOA->BSRR = (1<<(8+ ((chData & 0x40) != 0x40)*CLEAR)); 	//D6 @ PA.8
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <LCD_write_com+0x30>
 80031da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031de:	e001      	b.n	80031e4 <LCD_write_com+0x34>
 80031e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031e4:	4a2e      	ldr	r2, [pc, #184]	@ (80032a0 <LCD_write_com+0xf0>)
 80031e6:	6193      	str	r3, [r2, #24]
	GPIOD->BSRR = (1<<(15+((chData & 0x02) != 0x02)*CLEAR)); 	//D1 @ PD.15
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <LCD_write_com+0x48>
 80031f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80031f6:	e001      	b.n	80031fc <LCD_write_com+0x4c>
 80031f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fc:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <LCD_write_com+0xf4>)
 80031fe:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <LCD_write_com+0x60>
 800320a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800320e:	e001      	b.n	8003214 <LCD_write_com+0x64>
 8003210:	f44f 6200 	mov.w	r2, #2048	@ 0x800
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <LCD_write_com+0x74>
 800321e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003222:	e001      	b.n	8003228 <LCD_write_com+0x78>
 8003224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003228:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x10) != 0x10)*CLEAR));	//D4 @ PE.14
 800322a:	79fa      	ldrb	r2, [r7, #7]
 800322c:	f002 0210 	and.w	r2, r2, #16
 8003230:	2a00      	cmp	r2, #0
 8003232:	d102      	bne.n	800323a <LCD_write_com+0x8a>
 8003234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003238:	e001      	b.n	800323e <LCD_write_com+0x8e>
 800323a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 800323e:	431a      	orrs	r2, r3
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <LCD_write_com+0xf8>)
 8003242:	619a      	str	r2, [r3, #24]
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <LCD_write_com+0xa4>
 800324e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003252:	e001      	b.n	8003258 <LCD_write_com+0xa8>
 8003254:	f44f 7200 	mov.w	r2, #512	@ 0x200
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db02      	blt.n	8003266 <LCD_write_com+0xb6>
 8003260:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003264:	e001      	b.n	800326a <LCD_write_com+0xba>
 8003266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 800326a:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x04) != 0x04)*CLEAR));	//D2 @ PG.14
 800326c:	79fa      	ldrb	r2, [r7, #7]
 800326e:	f002 0204 	and.w	r2, r2, #4
 8003272:	2a00      	cmp	r2, #0
 8003274:	d102      	bne.n	800327c <LCD_write_com+0xcc>
 8003276:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800327a:	e001      	b.n	8003280 <LCD_write_com+0xd0>
 800327c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 8003280:	431a      	orrs	r2, r3
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <LCD_write_com+0xfc>)
 8003284:	619a      	str	r2, [r3, #24]

	GPIOC->BSRR = (1<<LCD_WR);				//PC0=WR=1
 8003286:	4b05      	ldr	r3, [pc, #20]	@ (800329c <LCD_write_com+0xec>)
 8003288:	2201      	movs	r2, #1
 800328a:	619a      	str	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	58020400 	.word	0x58020400
 800329c:	58020800 	.word	0x58020800
 80032a0:	58020000 	.word	0x58020000
 80032a4:	58020c00 	.word	0x58020c00
 80032a8:	58021000 	.word	0x58021000
 80032ac:	58021800 	.word	0x58021800

080032b0 <LCD_write_dat>:
// Wysyła dane do wyświetlacza LCD
// Parametry: chDane
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void LCD_write_dat(unsigned char chData)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));					//PB1=CS=0
 80032ba:	4b37      	ldr	r3, [pc, #220]	@ (8003398 <LCD_write_dat+0xe8>)
 80032bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032c0:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<LCD_RS) + (1<<(LCD_WR+CLEAR));	//PC3=RS=1 + PC0=WR=0
 80032c2:	4b36      	ldr	r3, [pc, #216]	@ (800339c <LCD_write_dat+0xec>)
 80032c4:	4a36      	ldr	r2, [pc, #216]	@ (80033a0 <LCD_write_dat+0xf0>)
 80032c6:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = (1<<LCD_RD);							//PA3=RD=1
 80032c8:	4b36      	ldr	r3, [pc, #216]	@ (80033a4 <LCD_write_dat+0xf4>)
 80032ca:	2208      	movs	r2, #8
 80032cc:	619a      	str	r2, [r3, #24]

	//dane są rozsiane po różnych portach, więc poskładaj je
	GPIOA->BSRR = (1<<(8+ ((chData & 0x40) != 0x40)*CLEAR)); 	//D6 @ PA.8
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <LCD_write_dat+0x2e>
 80032d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032dc:	e001      	b.n	80032e2 <LCD_write_dat+0x32>
 80032de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032e2:	4a30      	ldr	r2, [pc, #192]	@ (80033a4 <LCD_write_dat+0xf4>)
 80032e4:	6193      	str	r3, [r2, #24]
	GPIOD->BSRR = (1<<(15+((chData & 0x02) != 0x02)*CLEAR)); 	//D1 @ PD.15
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <LCD_write_dat+0x46>
 80032f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80032f4:	e001      	b.n	80032fa <LCD_write_dat+0x4a>
 80032f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032fa:	4a2b      	ldr	r2, [pc, #172]	@ (80033a8 <LCD_write_dat+0xf8>)
 80032fc:	6193      	str	r3, [r2, #24]
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <LCD_write_dat+0x5e>
 8003308:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800330c:	e001      	b.n	8003312 <LCD_write_dat+0x62>
 800330e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <LCD_write_dat+0x72>
 800331c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003320:	e001      	b.n	8003326 <LCD_write_dat+0x76>
 8003322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 8003326:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x10) != 0x10)*CLEAR));	//D4 @ PE.14
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	f002 0210 	and.w	r2, r2, #16
 800332e:	2a00      	cmp	r2, #0
 8003330:	d102      	bne.n	8003338 <LCD_write_dat+0x88>
 8003332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003336:	e001      	b.n	800333c <LCD_write_dat+0x8c>
 8003338:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(13+((chData & 0x08) != 0x08)*CLEAR))|	//D3 @ PE.13
 800333c:	431a      	orrs	r2, r3
	GPIOE->BSRR = (1<<(11+((chData & 0x20) != 0x20)*CLEAR))|	//D5 @ PE.11
 800333e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <LCD_write_dat+0xfc>)
 8003340:	619a      	str	r2, [r3, #24]
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d102      	bne.n	8003352 <LCD_write_dat+0xa2>
 800334c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003350:	e001      	b.n	8003356 <LCD_write_dat+0xa6>
 8003352:	f44f 7200 	mov.w	r2, #512	@ 0x200
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db02      	blt.n	8003364 <LCD_write_dat+0xb4>
 800335e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003362:	e001      	b.n	8003368 <LCD_write_dat+0xb8>
 8003364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003368:	4313      	orrs	r3, r2
				  (1<<(14+((chData & 0x04) != 0x04)*CLEAR));	//D2 @ PG.14
 800336a:	79fa      	ldrb	r2, [r7, #7]
 800336c:	f002 0204 	and.w	r2, r2, #4
 8003370:	2a00      	cmp	r2, #0
 8003372:	d102      	bne.n	800337a <LCD_write_dat+0xca>
 8003374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003378:	e001      	b.n	800337e <LCD_write_dat+0xce>
 800337a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
				  (1<<(12+((chData & 0x80) != 0x80)*CLEAR))|	//D7 @ PG.12
 800337e:	431a      	orrs	r2, r3
	GPIOG->BSRR = (1<<(9+ ((chData & 0x01) != 0x01)*CLEAR))|	//D0 @ PG.9
 8003380:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <LCD_write_dat+0x100>)
 8003382:	619a      	str	r2, [r3, #24]

	GPIOC->BSRR = (1<<LCD_WR);				//PC0=WR=1
 8003384:	4b05      	ldr	r3, [pc, #20]	@ (800339c <LCD_write_dat+0xec>)
 8003386:	2201      	movs	r2, #1
 8003388:	619a      	str	r2, [r3, #24]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	58020400 	.word	0x58020400
 800339c:	58020800 	.word	0x58020800
 80033a0:	00010008 	.word	0x00010008
 80033a4:	58020000 	.word	0x58020000
 80033a8:	58020c00 	.word	0x58020c00
 80033ac:	58021000 	.word	0x58021000
 80033b0:	58021800 	.word	0x58021800

080033b4 <LCD_init>:
// Konfiguracja wy�wietlacza LCD
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void LCD_init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 80033b8:	2014      	movs	r0, #20
 80033ba:	f002 f91b 	bl	80055f4 <HAL_Delay>
	// LCD_RESET 1 - 0 - 1
	GPIOC->BSRR = (1<<LCD_RST);			//PC2=RES=1
 80033be:	4bc9      	ldr	r3, [pc, #804]	@ (80036e4 <LCD_init+0x330>)
 80033c0:	2204      	movs	r2, #4
 80033c2:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 80033c4:	200a      	movs	r0, #10
 80033c6:	f002 f915 	bl	80055f4 <HAL_Delay>
	GPIOC->BSRR = (1<<(LCD_RST+CLEAR));	//PC2=RES=0
 80033ca:	4bc6      	ldr	r3, [pc, #792]	@ (80036e4 <LCD_init+0x330>)
 80033cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80033d0:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 80033d2:	2014      	movs	r0, #20
 80033d4:	f002 f90e 	bl	80055f4 <HAL_Delay>
	GPIOC->BSRR = (1<<LCD_RST);			//PC2=RES=1
 80033d8:	4bc2      	ldr	r3, [pc, #776]	@ (80036e4 <LCD_init+0x330>)
 80033da:	2204      	movs	r2, #4
 80033dc:	619a      	str	r2, [r3, #24]
	HAL_Delay(20);
 80033de:	2014      	movs	r0, #20
 80033e0:	f002 f908 	bl	80055f4 <HAL_Delay>
	// CS HIGH, WR HIGH, RD HIGH, CS LOW
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80033e4:	4bc0      	ldr	r3, [pc, #768]	@ (80036e8 <LCD_init+0x334>)
 80033e6:	2202      	movs	r2, #2
 80033e8:	619a      	str	r2, [r3, #24]
	GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 80033ea:	4bbe      	ldr	r3, [pc, #760]	@ (80036e4 <LCD_init+0x330>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	619a      	str	r2, [r3, #24]
	GPIOA->BSRR = (1<<LCD_RD);			//PA3=RD=1
 80033f0:	4bbe      	ldr	r3, [pc, #760]	@ (80036ec <LCD_init+0x338>)
 80033f2:	2208      	movs	r2, #8
 80033f4:	619a      	str	r2, [r3, #24]

	//dodane
	LCD_write_com(0xEF);
 80033f6:	20ef      	movs	r0, #239	@ 0xef
 80033f8:	f7ff feda 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x03);
 80033fc:	2003      	movs	r0, #3
 80033fe:	f7ff ff57 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x80);
 8003402:	2080      	movs	r0, #128	@ 0x80
 8003404:	f7ff ff54 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x02);
 8003408:	2002      	movs	r0, #2
 800340a:	f7ff ff51 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800340e:	4bb6      	ldr	r3, [pc, #728]	@ (80036e8 <LCD_init+0x334>)
 8003410:	2202      	movs	r2, #2
 8003412:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xCF);
 8003414:	20cf      	movs	r0, #207	@ 0xcf
 8003416:	f7ff fecb 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7ff ff48 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0xC1);
 8003420:	20c1      	movs	r0, #193	@ 0xc1
 8003422:	f7ff ff45 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x30);
 8003426:	2030      	movs	r0, #48	@ 0x30
 8003428:	f7ff ff42 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800342c:	4bae      	ldr	r3, [pc, #696]	@ (80036e8 <LCD_init+0x334>)
 800342e:	2202      	movs	r2, #2
 8003430:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xED);
 8003432:	20ed      	movs	r0, #237	@ 0xed
 8003434:	f7ff febc 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x64);
 8003438:	2064      	movs	r0, #100	@ 0x64
 800343a:	f7ff ff39 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x03);
 800343e:	2003      	movs	r0, #3
 8003440:	f7ff ff36 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x12);
 8003444:	2012      	movs	r0, #18
 8003446:	f7ff ff33 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x81);
 800344a:	2081      	movs	r0, #129	@ 0x81
 800344c:	f7ff ff30 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003450:	4ba5      	ldr	r3, [pc, #660]	@ (80036e8 <LCD_init+0x334>)
 8003452:	2202      	movs	r2, #2
 8003454:	619a      	str	r2, [r3, #24]

	//dodane
	LCD_write_com(0xE8);
 8003456:	20e8      	movs	r0, #232	@ 0xe8
 8003458:	f7ff feaa 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x85);
 800345c:	2085      	movs	r0, #133	@ 0x85
 800345e:	f7ff ff27 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7ff ff24 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x79);
 8003468:	2079      	movs	r0, #121	@ 0x79
 800346a:	f7ff ff21 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800346e:	4b9e      	ldr	r3, [pc, #632]	@ (80036e8 <LCD_init+0x334>)
 8003470:	2202      	movs	r2, #2
 8003472:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xCB);
 8003474:	20cb      	movs	r0, #203	@ 0xcb
 8003476:	f7ff fe9b 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x39);
 800347a:	2039      	movs	r0, #57	@ 0x39
 800347c:	f7ff ff18 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x2C);
 8003480:	202c      	movs	r0, #44	@ 0x2c
 8003482:	f7ff ff15 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x00);
 8003486:	2000      	movs	r0, #0
 8003488:	f7ff ff12 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x34);
 800348c:	2034      	movs	r0, #52	@ 0x34
 800348e:	f7ff ff0f 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x02);
 8003492:	2002      	movs	r0, #2
 8003494:	f7ff ff0c 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003498:	4b93      	ldr	r3, [pc, #588]	@ (80036e8 <LCD_init+0x334>)
 800349a:	2202      	movs	r2, #2
 800349c:	619a      	str	r2, [r3, #24]

	//dodane
	LCD_write_com(0xF7);	//?
 800349e:	20f7      	movs	r0, #247	@ 0xf7
 80034a0:	f7ff fe86 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x20);
 80034a4:	2020      	movs	r0, #32
 80034a6:	f7ff ff03 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80034aa:	4b8f      	ldr	r3, [pc, #572]	@ (80036e8 <LCD_init+0x334>)
 80034ac:	2202      	movs	r2, #2
 80034ae:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xEA);	//?
 80034b0:	20ea      	movs	r0, #234	@ 0xea
 80034b2:	f7ff fe7d 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x00);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7ff fefa 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x00);
 80034bc:	2000      	movs	r0, #0
 80034be:	f7ff fef7 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80034c2:	4b89      	ldr	r3, [pc, #548]	@ (80036e8 <LCD_init+0x334>)
 80034c4:	2202      	movs	r2, #2
 80034c6:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC0); //Power control
 80034c8:	20c0      	movs	r0, #192	@ 0xc0
 80034ca:	f7ff fe71 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x23); //VRH[5:0]
 80034ce:	2023      	movs	r0, #35	@ 0x23
 80034d0:	f7ff feee 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80034d4:	4b84      	ldr	r3, [pc, #528]	@ (80036e8 <LCD_init+0x334>)
 80034d6:	2202      	movs	r2, #2
 80034d8:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC1); //Power control
 80034da:	20c1      	movs	r0, #193	@ 0xc1
 80034dc:	f7ff fe68 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x11); //SAP[2:0];BT[3:0]
 80034e0:	2011      	movs	r0, #17
 80034e2:	f7ff fee5 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80034e6:	4b80      	ldr	r3, [pc, #512]	@ (80036e8 <LCD_init+0x334>)
 80034e8:	2202      	movs	r2, #2
 80034ea:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC2);	//?
 80034ec:	20c2      	movs	r0, #194	@ 0xc2
 80034ee:	f7ff fe5f 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x11);
 80034f2:	2011      	movs	r0, #17
 80034f4:	f7ff fedc 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80034f8:	4b7b      	ldr	r3, [pc, #492]	@ (80036e8 <LCD_init+0x334>)
 80034fa:	2202      	movs	r2, #2
 80034fc:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC5); 	//VCM control 1
 80034fe:	20c5      	movs	r0, #197	@ 0xc5
 8003500:	f7ff fe56 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x3E);
 8003504:	203e      	movs	r0, #62	@ 0x3e
 8003506:	f7ff fed3 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x28);
 800350a:	2028      	movs	r0, #40	@ 0x28
 800350c:	f7ff fed0 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003510:	4b75      	ldr	r3, [pc, #468]	@ (80036e8 <LCD_init+0x334>)
 8003512:	2202      	movs	r2, #2
 8003514:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xC7);	//VCM control 2
 8003516:	20c7      	movs	r0, #199	@ 0xc7
 8003518:	f7ff fe4a 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x86);
 800351c:	2086      	movs	r0, #134	@ 0x86
 800351e:	f7ff fec7 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003522:	4b71      	ldr	r3, [pc, #452]	@ (80036e8 <LCD_init+0x334>)
 8003524:	2202      	movs	r2, #2
 8003526:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x3A); //COLMOD: Pixel Format Set
 8003528:	203a      	movs	r0, #58	@ 0x3a
 800352a:	f7ff fe41 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x55);
 800352e:	2055      	movs	r0, #85	@ 0x55
 8003530:	f7ff febe 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003534:	4b6c      	ldr	r3, [pc, #432]	@ (80036e8 <LCD_init+0x334>)
 8003536:	2202      	movs	r2, #2
 8003538:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x36); // Memory Access Control
 800353a:	2036      	movs	r0, #54	@ 0x36
 800353c:	f7ff fe38 	bl	80031b0 <LCD_write_com>
	LCD_write_dat( (0<<7)|	//MY Row Address Order	- poziomo
 8003540:	2038      	movs	r0, #56	@ 0x38
 8003542:	f7ff feb5 	bl	80032b0 <LCD_write_dat>
				   (1<<5)|	//MV Row / Column Exchange
				   (1<<4)|	//ML Vertical Refresh Order
				   (1<<3)|	//BGR RGB-BGR Order
				   (1<<2));	//MH Horizontal Refresh ORDER*/

	LCD_write_com(0xB1); // Frame Rate Control
 8003546:	20b1      	movs	r0, #177	@ 0xb1
 8003548:	f7ff fe32 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x00);
 800354c:	2000      	movs	r0, #0
 800354e:	f7ff feaf 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x1B);		//70Hz
 8003552:	201b      	movs	r0, #27
 8003554:	f7ff feac 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003558:	4b63      	ldr	r3, [pc, #396]	@ (80036e8 <LCD_init+0x334>)
 800355a:	2202      	movs	r2, #2
 800355c:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xB6); // Display Function Control
 800355e:	20b6      	movs	r0, #182	@ 0xb6
 8003560:	f7ff fe26 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x0A);
 8003564:	200a      	movs	r0, #10
 8003566:	f7ff fea3 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x82);
 800356a:	2082      	movs	r0, #130	@ 0x82
 800356c:	f7ff fea0 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x27);
 8003570:	2027      	movs	r0, #39	@ 0x27
 8003572:	f7ff fe9d 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0F);	//sprawdzi� wziete na pa��
 8003576:	200f      	movs	r0, #15
 8003578:	f7ff fe9a 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PF3=CS=1
 800357c:	4b5a      	ldr	r3, [pc, #360]	@ (80036e8 <LCD_init+0x334>)
 800357e:	2202      	movs	r2, #2
 8003580:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xF2); // 3Gamma Function Disable
 8003582:	20f2      	movs	r0, #242	@ 0xf2
 8003584:	f7ff fe14 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7ff fe91 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800358e:	4b56      	ldr	r3, [pc, #344]	@ (80036e8 <LCD_init+0x334>)
 8003590:	2202      	movs	r2, #2
 8003592:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xF7); // Pump ratio control
 8003594:	20f7      	movs	r0, #247	@ 0xf7
 8003596:	f7ff fe0b 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x20);
 800359a:	2020      	movs	r0, #32
 800359c:	f7ff fe88 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80035a0:	4b51      	ldr	r3, [pc, #324]	@ (80036e8 <LCD_init+0x334>)
 80035a2:	2202      	movs	r2, #2
 80035a4:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xF1);
 80035a6:	20f1      	movs	r0, #241	@ 0xf1
 80035a8:	f7ff fe02 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x01);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7ff fe7f 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x30);
 80035b2:	2030      	movs	r0, #48	@ 0x30
 80035b4:	f7ff fe7c 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80035b8:	4b4b      	ldr	r3, [pc, #300]	@ (80036e8 <LCD_init+0x334>)
 80035ba:	2202      	movs	r2, #2
 80035bc:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x26); //Gamma curve selected
 80035be:	2026      	movs	r0, #38	@ 0x26
 80035c0:	f7ff fdf6 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x01);
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7ff fe73 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80035ca:	4b47      	ldr	r3, [pc, #284]	@ (80036e8 <LCD_init+0x334>)
 80035cc:	2202      	movs	r2, #2
 80035ce:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xE0); //Set Gamma
 80035d0:	20e0      	movs	r0, #224	@ 0xe0
 80035d2:	f7ff fded 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x0F);
 80035d6:	200f      	movs	r0, #15
 80035d8:	f7ff fe6a 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x3F);
 80035dc:	203f      	movs	r0, #63	@ 0x3f
 80035de:	f7ff fe67 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x2F);
 80035e2:	202f      	movs	r0, #47	@ 0x2f
 80035e4:	f7ff fe64 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0C);
 80035e8:	200c      	movs	r0, #12
 80035ea:	f7ff fe61 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x10);
 80035ee:	2010      	movs	r0, #16
 80035f0:	f7ff fe5e 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0A);
 80035f4:	200a      	movs	r0, #10
 80035f6:	f7ff fe5b 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x53);
 80035fa:	2053      	movs	r0, #83	@ 0x53
 80035fc:	f7ff fe58 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0xD5);
 8003600:	20d5      	movs	r0, #213	@ 0xd5
 8003602:	f7ff fe55 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x40);
 8003606:	2040      	movs	r0, #64	@ 0x40
 8003608:	f7ff fe52 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0A);
 800360c:	200a      	movs	r0, #10
 800360e:	f7ff fe4f 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x13);
 8003612:	2013      	movs	r0, #19
 8003614:	f7ff fe4c 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x03);
 8003618:	2003      	movs	r0, #3
 800361a:	f7ff fe49 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x08);
 800361e:	2008      	movs	r0, #8
 8003620:	f7ff fe46 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x03);
 8003624:	2003      	movs	r0, #3
 8003626:	f7ff fe43 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x00);
 800362a:	2000      	movs	r0, #0
 800362c:	f7ff fe40 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003630:	4b2d      	ldr	r3, [pc, #180]	@ (80036e8 <LCD_init+0x334>)
 8003632:	2202      	movs	r2, #2
 8003634:	619a      	str	r2, [r3, #24]

	LCD_write_com(0xE1); //Set Gamma
 8003636:	20e1      	movs	r0, #225	@ 0xe1
 8003638:	f7ff fdba 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0x00);
 800363c:	2000      	movs	r0, #0
 800363e:	f7ff fe37 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x00);
 8003642:	2000      	movs	r0, #0
 8003644:	f7ff fe34 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x10);
 8003648:	2010      	movs	r0, #16
 800364a:	f7ff fe31 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x03);
 800364e:	2003      	movs	r0, #3
 8003650:	f7ff fe2e 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0F);
 8003654:	200f      	movs	r0, #15
 8003656:	f7ff fe2b 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x05);
 800365a:	2005      	movs	r0, #5
 800365c:	f7ff fe28 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x2C);
 8003660:	202c      	movs	r0, #44	@ 0x2c
 8003662:	f7ff fe25 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0xA2);
 8003666:	20a2      	movs	r0, #162	@ 0xa2
 8003668:	f7ff fe22 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x3F);
 800366c:	203f      	movs	r0, #63	@ 0x3f
 800366e:	f7ff fe1f 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x05);
 8003672:	2005      	movs	r0, #5
 8003674:	f7ff fe1c 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0E);
 8003678:	200e      	movs	r0, #14
 800367a:	f7ff fe19 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0C);
 800367e:	200c      	movs	r0, #12
 8003680:	f7ff fe16 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x37);
 8003684:	2037      	movs	r0, #55	@ 0x37
 8003686:	f7ff fe13 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x3C);
 800368a:	203c      	movs	r0, #60	@ 0x3c
 800368c:	f7ff fe10 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x0F);
 8003690:	200f      	movs	r0, #15
 8003692:	f7ff fe0d 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003696:	4b14      	ldr	r3, [pc, #80]	@ (80036e8 <LCD_init+0x334>)
 8003698:	2202      	movs	r2, #2
 800369a:	619a      	str	r2, [r3, #24]
	HAL_Delay(50);
 800369c:	2032      	movs	r0, #50	@ 0x32
 800369e:	f001 ffa9 	bl	80055f4 <HAL_Delay>
	LCD_write_com(0x11); //Exit Sleep
 80036a2:	2011      	movs	r0, #17
 80036a4:	f7ff fd84 	bl	80031b0 <LCD_write_com>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80036a8:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <LCD_init+0x334>)
 80036aa:	2202      	movs	r2, #2
 80036ac:	619a      	str	r2, [r3, #24]
	HAL_Delay(120);
 80036ae:	2078      	movs	r0, #120	@ 0x78
 80036b0:	f001 ffa0 	bl	80055f4 <HAL_Delay>
	LCD_write_com(0x29); //display on
 80036b4:	2029      	movs	r0, #41	@ 0x29
 80036b6:	f7ff fd7b 	bl	80031b0 <LCD_write_com>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <LCD_init+0x334>)
 80036bc:	2202      	movs	r2, #2
 80036be:	619a      	str	r2, [r3, #24]
	HAL_Delay(50);
 80036c0:	2032      	movs	r0, #50	@ 0x32
 80036c2:	f001 ff97 	bl	80055f4 <HAL_Delay>

	setColor(GREEN);
 80036c6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80036ca:	f000 f9a1 	bl	8003a10 <setColor>
	setBackColor(BLACK);
 80036ce:	2000      	movs	r0, #0
 80036d0:	f000 f9b8 	bl	8003a44 <setBackColor>
	chOrient = POZIOMO;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <LCD_init+0x33c>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
	LCD_clear();
 80036da:	f000 f80b 	bl	80036f4 <LCD_clear>
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	58020800 	.word	0x58020800
 80036e8:	58020400 	.word	0x58020400
 80036ec:	58020000 	.word	0x58020000
 80036f0:	2404c130 	.word	0x2404c130

080036f4 <LCD_clear>:
// Parametry: nCzas - op�nienie w ms
// Zwraca: nic
// Czas czyszczenia ekranu: 548,8ms
////////////////////////////////////////////////////////////////////////////////
void LCD_clear(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
	unsigned short y;

	setColor(BLACK);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f000 f988 	bl	8003a10 <setColor>
	setBackColor(BLACK);
 8003700:	2000      	movs	r0, #0
 8003702:	f000 f99f 	bl	8003a44 <setBackColor>

	LCD_write_com(0x2a); // Column Address Set
 8003706:	202a      	movs	r0, #42	@ 0x2a
 8003708:	f7ff fd52 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0);
 800370c:	2000      	movs	r0, #0
 800370e:	f7ff fdcf 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0);
 8003712:	2000      	movs	r0, #0
 8003714:	f7ff fdcc 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(1);
 8003718:	2001      	movs	r0, #1
 800371a:	f7ff fdc9 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0x3F);
 800371e:	203f      	movs	r0, #63	@ 0x3f
 8003720:	f7ff fdc6 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003724:	4b27      	ldr	r3, [pc, #156]	@ (80037c4 <LCD_clear+0xd0>)
 8003726:	2202      	movs	r2, #2
 8003728:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2b); // Page Address Set
 800372a:	202b      	movs	r0, #43	@ 0x2b
 800372c:	f7ff fd40 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(0);
 8003730:	2000      	movs	r0, #0
 8003732:	f7ff fdbd 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0);
 8003736:	2000      	movs	r0, #0
 8003738:	f7ff fdba 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0);
 800373c:	2000      	movs	r0, #0
 800373e:	f7ff fdb7 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(0xEF);
 8003742:	20ef      	movs	r0, #239	@ 0xef
 8003744:	f7ff fdb4 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003748:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <LCD_clear+0xd0>)
 800374a:	2202      	movs	r2, #2
 800374c:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2c);	// Memory Write
 800374e:	202c      	movs	r0, #44	@ 0x2c
 8003750:	f7ff fd2e 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(bch);
 8003754:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <LCD_clear+0xd4>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fda9 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(bcl);
 800375e:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <LCD_clear+0xd8>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fda4 	bl	80032b0 <LCD_write_dat>

	for(y=0; y<38400; y++)		// 240*320/2
 8003768:	2300      	movs	r3, #0
 800376a:	80fb      	strh	r3, [r7, #6]
 800376c:	e01e      	b.n	80037ac <LCD_clear+0xb8>
	{
		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 800376e:	4b18      	ldr	r3, [pc, #96]	@ (80037d0 <LCD_clear+0xdc>)
 8003770:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003774:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 8003776:	4b16      	ldr	r3, [pc, #88]	@ (80037d0 <LCD_clear+0xdc>)
 8003778:	2201      	movs	r2, #1
 800377a:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 800377c:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <LCD_clear+0xdc>)
 800377e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003782:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 8003784:	4b12      	ldr	r3, [pc, #72]	@ (80037d0 <LCD_clear+0xdc>)
 8003786:	2201      	movs	r2, #1
 8003788:	619a      	str	r2, [r3, #24]

		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 800378a:	4b11      	ldr	r3, [pc, #68]	@ (80037d0 <LCD_clear+0xdc>)
 800378c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003790:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 8003792:	4b0f      	ldr	r3, [pc, #60]	@ (80037d0 <LCD_clear+0xdc>)
 8003794:	2201      	movs	r2, #1
 8003796:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<(LCD_WR+CLEAR));	//PCO=WR=0
 8003798:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <LCD_clear+0xdc>)
 800379a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800379e:	619a      	str	r2, [r3, #24]
		GPIOC->BSRR = (1<<LCD_WR);			//PC0=WR=1
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <LCD_clear+0xdc>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	619a      	str	r2, [r3, #24]
	for(y=0; y<38400; y++)		// 240*320/2
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	3301      	adds	r3, #1
 80037aa:	80fb      	strh	r3, [r7, #6]
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80037b2:	d3dc      	bcc.n	800376e <LCD_clear+0x7a>
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80037b4:	4b03      	ldr	r3, [pc, #12]	@ (80037c4 <LCD_clear+0xd0>)
 80037b6:	2202      	movs	r2, #2
 80037b8:	619a      	str	r2, [r3, #24]
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	58020400 	.word	0x58020400
 80037c8:	2404c133 	.word	0x2404c133
 80037cc:	2404c134 	.word	0x2404c134
 80037d0:	58020800 	.word	0x58020800

080037d4 <drawHLine>:
// Parametry: x, y wsp�rz�dne pocz�tku
// len - d�ugo�c linii
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void drawHLine(int x, int y, int len)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
	int i;

	if (len < 0)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	da06      	bge.n	80037f4 <drawHLine+0x20>
	{
		len = -len;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	425b      	negs	r3, r3
 80037ea:	607b      	str	r3, [r7, #4]
		x -= len;
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	60fb      	str	r3, [r7, #12]
	}

	//GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 80037f4:	4b17      	ldr	r3, [pc, #92]	@ (8003854 <drawHLine+0x80>)
 80037f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037fa:	619a      	str	r2, [r3, #24]
	setXY(x, y, x+len, y);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	b298      	uxth	r0, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	b299      	uxth	r1, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	b29a      	uxth	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4413      	add	r3, r2
 800380e:	b29a      	uxth	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f000 f86a 	bl	80038ec <setXY>

	for (i=0; i<len+1; i++)
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e00c      	b.n	8003838 <drawHLine+0x64>
	{
		LCD_write_dat(fch);
 800381e:	4b0e      	ldr	r3, [pc, #56]	@ (8003858 <drawHLine+0x84>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fd44 	bl	80032b0 <LCD_write_dat>
		LCD_write_dat(fcl);
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <drawHLine+0x88>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fd3f 	bl	80032b0 <LCD_write_dat>
	for (i=0; i<len+1; i++)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3301      	adds	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	daee      	bge.n	800381e <drawHLine+0x4a>
	}

	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <drawHLine+0x80>)
 8003842:	2202      	movs	r2, #2
 8003844:	619a      	str	r2, [r3, #24]
	clrXY();
 8003846:	f000 f8c9 	bl	80039dc <clrXY>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	58020400 	.word	0x58020400
 8003858:	2404c131 	.word	0x2404c131
 800385c:	2404c132 	.word	0x2404c132

08003860 <drawVLine>:
// Parametry: x, y wsp�rz�dne pocz�tku
// len - d�ugo�c linii
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void drawVLine(int x, int y, int len)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
	int i;

	if (len < 0)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	da06      	bge.n	8003880 <drawVLine+0x20>
	{
		len = -len;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	425b      	negs	r3, r3
 8003876:	607b      	str	r3, [r7, #4]
		y -= len;
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	60bb      	str	r3, [r7, #8]
	}
	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8003880:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <drawVLine+0x80>)
 8003882:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003886:	619a      	str	r2, [r3, #24]
	setXY(x, y, x, y+len);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	b298      	uxth	r0, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	b299      	uxth	r1, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	b29c      	uxth	r4, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	b29b      	uxth	r3, r3
 800389c:	4413      	add	r3, r2
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4622      	mov	r2, r4
 80038a2:	f000 f823 	bl	80038ec <setXY>

	for (i=0; i<len+1; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e00c      	b.n	80038c6 <drawVLine+0x66>
	{
		LCD_write_dat(fch);
 80038ac:	4b0d      	ldr	r3, [pc, #52]	@ (80038e4 <drawVLine+0x84>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fcfd 	bl	80032b0 <LCD_write_dat>
		LCD_write_dat(fcl);
 80038b6:	4b0c      	ldr	r3, [pc, #48]	@ (80038e8 <drawVLine+0x88>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fcf8 	bl	80032b0 <LCD_write_dat>
	for (i=0; i<len+1; i++)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	3301      	adds	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	daee      	bge.n	80038ac <drawVLine+0x4c>
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <drawVLine+0x80>)
 80038d0:	2202      	movs	r2, #2
 80038d2:	619a      	str	r2, [r3, #24]
	clrXY();
 80038d4:	f000 f882 	bl	80039dc <clrXY>
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}
 80038e0:	58020400 	.word	0x58020400
 80038e4:	2404c131 	.word	0x2404c131
 80038e8:	2404c132 	.word	0x2404c132

080038ec <setXY>:
// Parametry: x, y wsp�rz�dne pocz�tku
// len - d�ugo�c linii
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setXY(unsigned short x1, unsigned short y1, unsigned short x2, unsigned short y2)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4623      	mov	r3, r4
 80038fc:	80fb      	strh	r3, [r7, #6]
 80038fe:	4603      	mov	r3, r0
 8003900:	80bb      	strh	r3, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	807b      	strh	r3, [r7, #2]
 8003906:	4613      	mov	r3, r2
 8003908:	803b      	strh	r3, [r7, #0]
	unsigned short sTemp;

	if (chOrient == PIONOWO)
 800390a:	4b32      	ldr	r3, [pc, #200]	@ (80039d4 <setXY+0xe8>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <setXY+0x5a>
	{
		sTemp = x1;
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	81fb      	strh	r3, [r7, #14]
		x1 = y1;
 8003916:	88bb      	ldrh	r3, [r7, #4]
 8003918:	80fb      	strh	r3, [r7, #6]
		y1 = sTemp;
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	80bb      	strh	r3, [r7, #4]
		sTemp = x2;
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	81fb      	strh	r3, [r7, #14]
		x2 = y2;
 8003922:	883b      	ldrh	r3, [r7, #0]
 8003924:	807b      	strh	r3, [r7, #2]
		y2 = sTemp;
 8003926:	89fb      	ldrh	r3, [r7, #14]
 8003928:	803b      	strh	r3, [r7, #0]
		y1=DISP_Y_SIZE - y1;
 800392a:	88bb      	ldrh	r3, [r7, #4]
 800392c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003930:	80bb      	strh	r3, [r7, #4]
		y2=DISP_Y_SIZE - y2;
 8003932:	883b      	ldrh	r3, [r7, #0]
 8003934:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8003938:	803b      	strh	r3, [r7, #0]
		sTemp = y1;
 800393a:	88bb      	ldrh	r3, [r7, #4]
 800393c:	81fb      	strh	r3, [r7, #14]
		y1 = y2;
 800393e:	883b      	ldrh	r3, [r7, #0]
 8003940:	80bb      	strh	r3, [r7, #4]
		y2 = sTemp;
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	803b      	strh	r3, [r7, #0]
	}

	LCD_write_com(0x2A); //column
 8003946:	202a      	movs	r0, #42	@ 0x2a
 8003948:	f7ff fc32 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(x1>>8);
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	0a1b      	lsrs	r3, r3, #8
 8003950:	b29b      	uxth	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fcab 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(x1);
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fca6 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(x2>>8);
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	b29b      	uxth	r3, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fc9f 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(x2);
 8003972:	887b      	ldrh	r3, [r7, #2]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fc9a 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <setXY+0xec>)
 800397e:	2202      	movs	r2, #2
 8003980:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2B); //page
 8003982:	202b      	movs	r0, #43	@ 0x2b
 8003984:	f7ff fc14 	bl	80031b0 <LCD_write_com>
	LCD_write_dat(y1>>8);
 8003988:	88bb      	ldrh	r3, [r7, #4]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	b29b      	uxth	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc8d 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(y1);
 8003996:	88bb      	ldrh	r3, [r7, #4]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fc88 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(y2>>8);
 80039a0:	883b      	ldrh	r3, [r7, #0]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fc81 	bl	80032b0 <LCD_write_dat>
	LCD_write_dat(y2);
 80039ae:	883b      	ldrh	r3, [r7, #0]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fc7c 	bl	80032b0 <LCD_write_dat>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80039b8:	4b07      	ldr	r3, [pc, #28]	@ (80039d8 <setXY+0xec>)
 80039ba:	2202      	movs	r2, #2
 80039bc:	619a      	str	r2, [r3, #24]

	LCD_write_com(0x2C); //write
 80039be:	202c      	movs	r0, #44	@ 0x2c
 80039c0:	f7ff fbf6 	bl	80031b0 <LCD_write_com>
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80039c4:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <setXY+0xec>)
 80039c6:	2202      	movs	r2, #2
 80039c8:	619a      	str	r2, [r3, #24]
}
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2404c130 	.word	0x2404c130
 80039d8:	58020400 	.word	0x58020400

080039dc <clrXY>:
// zeruje parametry pami�ci do rysowania linii
// Parametry:nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void clrXY(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
	if (chOrient == PIONOWO)
 80039e0:	4b0a      	ldr	r3, [pc, #40]	@ (8003a0c <clrXY+0x30>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <clrXY+0x1c>
		setXY(0, 0, DISP_X_SIZE, DISP_Y_SIZE);
 80039e8:	23f0      	movs	r3, #240	@ 0xf0
 80039ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80039ee:	2100      	movs	r1, #0
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7ff ff7b 	bl	80038ec <setXY>
	else
		setXY(0, 0, DISP_Y_SIZE, DISP_X_SIZE);
}
 80039f6:	e006      	b.n	8003a06 <clrXY+0x2a>
		setXY(0, 0, DISP_Y_SIZE, DISP_X_SIZE);
 80039f8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80039fc:	22f0      	movs	r2, #240	@ 0xf0
 80039fe:	2100      	movs	r1, #0
 8003a00:	2000      	movs	r0, #0
 8003a02:	f7ff ff73 	bl	80038ec <setXY>
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2404c130 	.word	0x2404c130

08003a10 <setColor>:
// Ustawia kolor rysowania jako natywny dla wy�wietlacza 5R+6G+5B
// Parametry: color - kolor
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setColor(unsigned short color)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
	fch = (unsigned char)(color>>8);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <setColor+0x2c>)
 8003a24:	701a      	strb	r2, [r3, #0]
	fcl = (unsigned char)(color & 0xFF);
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <setColor+0x30>)
 8003a2c:	701a      	strb	r2, [r3, #0]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	2404c131 	.word	0x2404c131
 8003a40:	2404c132 	.word	0x2404c132

08003a44 <setBackColor>:
// Ustawia kolor t�a jako natywny dla wy�wietlacza 5R+6G+5B
// Parametry: color - kolor
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setBackColor(unsigned short color)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80fb      	strh	r3, [r7, #6]
	if (color == TRANSPARENT)
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <setBackColor+0x1c>
		_transparent = 1;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <setBackColor+0x44>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
	{
		bch = (unsigned char)(color>>8);
		bcl = (unsigned char)(color & 0xFF);
		_transparent = 0;
	}
}
 8003a5e:	e00c      	b.n	8003a7a <setBackColor+0x36>
		bch = (unsigned char)(color>>8);
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <setBackColor+0x48>)
 8003a6a:	701a      	strb	r2, [r3, #0]
		bcl = (unsigned char)(color & 0xFF);
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <setBackColor+0x4c>)
 8003a72:	701a      	strb	r2, [r3, #0]
		_transparent = 0;
 8003a74:	4b04      	ldr	r3, [pc, #16]	@ (8003a88 <setBackColor+0x44>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	2404c135 	.word	0x2404c135
 8003a8c:	2404c133 	.word	0x2404c133
 8003a90:	2404c134 	.word	0x2404c134

08003a94 <fillRect>:
// wype�nij kolorem prostok�t o wsp�prz�dnych x1, y1, x2, y2
// Parametry: x, y - wsp�rz�dne
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void fillRect(int x1, int y1, int x2, int y2)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
	int i, nTemp;

	if (x1>x2)
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	dd05      	ble.n	8003ab6 <fillRect+0x22>
	{
		nTemp = x1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	613b      	str	r3, [r7, #16]
		x1 = x2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
		x2 = nTemp;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	607b      	str	r3, [r7, #4]
	}
	if (y1>y2)
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dd05      	ble.n	8003aca <fillRect+0x36>
	{
		nTemp = y1;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
		y1 = y2;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	60bb      	str	r3, [r7, #8]
		y2 = nTemp;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	603b      	str	r3, [r7, #0]
	}

	if (chOrient == PIONOWO)
 8003aca:	4b29      	ldr	r3, [pc, #164]	@ (8003b70 <fillRect+0xdc>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d125      	bne.n	8003b1e <fillRect+0x8a>
	{
		for (i=0; i<((y2-y1)/2)+1; i++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	e016      	b.n	8003b06 <fillRect+0x72>
		{
			drawHLine(x1, y1+i, x2-x1);
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	18d1      	adds	r1, r2, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f7ff fe74 	bl	80037d4 <drawHLine>
			drawHLine(x1, y2-i, x2-x1);
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	1ad1      	subs	r1, r2, r3
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff fe6a 	bl	80037d4 <drawHLine>
		for (i=0; i<((y2-y1)/2)+1; i++)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	3301      	adds	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da00      	bge.n	8003b12 <fillRect+0x7e>
 8003b10:	3301      	adds	r3, #1
 8003b12:	105b      	asrs	r3, r3, #1
 8003b14:	461a      	mov	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	dddd      	ble.n	8003ad8 <fillRect+0x44>
			drawVLine(x1+i, y1, y2-y1);
			drawVLine(x2-i, y1, y2-y1);
		}
	}

}
 8003b1c:	e024      	b.n	8003b68 <fillRect+0xd4>
		for (i=0; i<((x2-x1)/2)+1; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e016      	b.n	8003b52 <fillRect+0xbe>
			drawVLine(x1+i, y1, y2-y1);
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	18d0      	adds	r0, r2, r3
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	f7ff fe94 	bl	8003860 <drawVLine>
			drawVLine(x2-i, y1, y2-y1);
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	1ad0      	subs	r0, r2, r3
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	f7ff fe8a 	bl	8003860 <drawVLine>
		for (i=0; i<((x2-x1)/2)+1; i++)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da00      	bge.n	8003b5e <fillRect+0xca>
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	105b      	asrs	r3, r3, #1
 8003b60:	461a      	mov	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	dddd      	ble.n	8003b24 <fillRect+0x90>
}
 8003b68:	bf00      	nop
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	2404c130 	.word	0x2404c130

08003b74 <printChar>:
// pisze znak na miejscu o podanych wsp�rzednych
// Parametry: c - znak; x, y - wsp�rz�dne
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void printChar(unsigned char c, int x, int y)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b089      	sub	sp, #36	@ 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	73fb      	strb	r3, [r7, #15]
	unsigned char i,ch;
	unsigned short j;
	unsigned short temp;
	int zz;

	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8003b82:	4b9e      	ldr	r3, [pc, #632]	@ (8003dfc <printChar+0x288>)
 8003b84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b88:	619a      	str	r2, [r3, #24]

	if (!_transparent)
 8003b8a:	4b9d      	ldr	r3, [pc, #628]	@ (8003e00 <printChar+0x28c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 810f 	bne.w	8003db2 <printChar+0x23e>
	{
		if (chOrient == POZIOMO)
 8003b94:	4b9b      	ldr	r3, [pc, #620]	@ (8003e04 <printChar+0x290>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d172      	bne.n	8003c82 <printChar+0x10e>
		{
			setXY(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	b298      	uxth	r0, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	b299      	uxth	r1, r3
 8003ba4:	4b98      	ldr	r3, [pc, #608]	@ (8003e08 <printChar+0x294>)
 8003ba6:	791b      	ldrb	r3, [r3, #4]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	4b94      	ldr	r3, [pc, #592]	@ (8003e08 <printChar+0x294>)
 8003bb8:	795b      	ldrb	r3, [r3, #5]
 8003bba:	461c      	mov	r4, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4423      	add	r3, r4
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f7ff fe90 	bl	80038ec <setXY>

			temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	4a8e      	ldr	r2, [pc, #568]	@ (8003e08 <printChar+0x294>)
 8003bd0:	7992      	ldrb	r2, [r2, #6]
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	4b8c      	ldr	r3, [pc, #560]	@ (8003e08 <printChar+0x294>)
 8003bd8:	791b      	ldrb	r3, [r3, #4]
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	4619      	mov	r1, r3
 8003be0:	4b89      	ldr	r3, [pc, #548]	@ (8003e08 <printChar+0x294>)
 8003be2:	795b      	ldrb	r3, [r3, #5]
 8003be4:	fb11 f303 	smulbb	r3, r1, r3
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	fb12 f303 	smulbb	r3, r2, r3
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	837b      	strh	r3, [r7, #26]
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	83bb      	strh	r3, [r7, #28]
 8003bf8:	e033      	b.n	8003c62 <printChar+0xee>
			{
				ch = cfont.font[temp];
 8003bfa:	4b83      	ldr	r3, [pc, #524]	@ (8003e08 <printChar+0x294>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	8b7b      	ldrh	r3, [r7, #26]
 8003c00:	4413      	add	r3, r2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e021      	b.n	8003c50 <printChar+0xdc>
				{
					if((ch&(1<<(7-i)))!=0)
 8003c0c:	7cfa      	ldrb	r2, [r7, #19]
 8003c0e:	7ffb      	ldrb	r3, [r7, #31]
 8003c10:	f1c3 0307 	rsb	r3, r3, #7
 8003c14:	fa42 f303 	asr.w	r3, r2, r3
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <printChar+0xc2>
					{
						LCD_write_dat(fch);
 8003c20:	4b7a      	ldr	r3, [pc, #488]	@ (8003e0c <printChar+0x298>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fb43 	bl	80032b0 <LCD_write_dat>
						LCD_write_dat(fcl);
 8003c2a:	4b79      	ldr	r3, [pc, #484]	@ (8003e10 <printChar+0x29c>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fb3e 	bl	80032b0 <LCD_write_dat>
 8003c34:	e009      	b.n	8003c4a <printChar+0xd6>
					}
					else
					{
						LCD_write_dat(bch);
 8003c36:	4b77      	ldr	r3, [pc, #476]	@ (8003e14 <printChar+0x2a0>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fb38 	bl	80032b0 <LCD_write_dat>
						LCD_write_dat(bcl);
 8003c40:	4b75      	ldr	r3, [pc, #468]	@ (8003e18 <printChar+0x2a4>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fb33 	bl	80032b0 <LCD_write_dat>
				for(i=0;i<8;i++)
 8003c4a:	7ffb      	ldrb	r3, [r7, #31]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	7ffb      	ldrb	r3, [r7, #31]
 8003c52:	2b07      	cmp	r3, #7
 8003c54:	d9da      	bls.n	8003c0c <printChar+0x98>
					}
				}
				temp++;
 8003c56:	8b7b      	ldrh	r3, [r7, #26]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	837b      	strh	r3, [r7, #26]
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j++)
 8003c5c:	8bbb      	ldrh	r3, [r7, #28]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	83bb      	strh	r3, [r7, #28]
 8003c62:	8bba      	ldrh	r2, [r7, #28]
 8003c64:	4b68      	ldr	r3, [pc, #416]	@ (8003e08 <printChar+0x294>)
 8003c66:	791b      	ldrb	r3, [r3, #4]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4b66      	ldr	r3, [pc, #408]	@ (8003e08 <printChar+0x294>)
 8003c70:	795b      	ldrb	r3, [r3, #5]
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	429a      	cmp	r2, r3
 8003c78:	dbbf      	blt.n	8003bfa <printChar+0x86>
			}
			GPIOB->BSRR = (1<<LCD_CS);		//LCD_CS=1
 8003c7a:	4b60      	ldr	r3, [pc, #384]	@ (8003dfc <printChar+0x288>)
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	619a      	str	r2, [r3, #24]
 8003c80:	e12b      	b.n	8003eda <printChar+0x366>
		}
		else
		{
			temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	4a60      	ldr	r2, [pc, #384]	@ (8003e08 <printChar+0x294>)
 8003c86:	7992      	ldrb	r2, [r2, #6]
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8003e08 <printChar+0x294>)
 8003c8e:	791b      	ldrb	r3, [r3, #4]
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	4b5c      	ldr	r3, [pc, #368]	@ (8003e08 <printChar+0x294>)
 8003c98:	795b      	ldrb	r3, [r3, #5]
 8003c9a:	fb11 f303 	smulbb	r3, r1, r3
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	fb12 f303 	smulbb	r3, r2, r3
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	837b      	strh	r3, [r7, #26]

			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j+=(cfont.x_size/8))
 8003caa:	2300      	movs	r3, #0
 8003cac:	83bb      	strh	r3, [r7, #28]
 8003cae:	e070      	b.n	8003d92 <printChar+0x21e>
			{
				setXY(x,y+(j/(cfont.x_size/8)),x+cfont.x_size-1,y+(j/(cfont.x_size/8)));
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	b298      	uxth	r0, r3
 8003cb4:	8bbb      	ldrh	r3, [r7, #28]
 8003cb6:	4a54      	ldr	r2, [pc, #336]	@ (8003e08 <printChar+0x294>)
 8003cb8:	7912      	ldrb	r2, [r2, #4]
 8003cba:	08d2      	lsrs	r2, r2, #3
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	b299      	uxth	r1, r3
 8003ccc:	4b4e      	ldr	r3, [pc, #312]	@ (8003e08 <printChar+0x294>)
 8003cce:	791b      	ldrb	r3, [r3, #4]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29c      	uxth	r4, r3
 8003cde:	8bbb      	ldrh	r3, [r7, #28]
 8003ce0:	4a49      	ldr	r2, [pc, #292]	@ (8003e08 <printChar+0x294>)
 8003ce2:	7912      	ldrb	r2, [r2, #4]
 8003ce4:	08d2      	lsrs	r2, r2, #3
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4622      	mov	r2, r4
 8003cf8:	f7ff fdf8 	bl	80038ec <setXY>
				for (zz=(cfont.x_size/8)-1; zz>=0; zz--)
 8003cfc:	4b42      	ldr	r3, [pc, #264]	@ (8003e08 <printChar+0x294>)
 8003cfe:	791b      	ldrb	r3, [r3, #4]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e030      	b.n	8003d6c <printChar+0x1f8>
				{
					ch=cfont.font[temp+zz];
 8003d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e08 <printChar+0x294>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	8b79      	ldrh	r1, [r7, #26]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	440a      	add	r2, r1
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	74fb      	strb	r3, [r7, #19]
					for(i=0;i<8;i++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	77fb      	strb	r3, [r7, #31]
 8003d1e:	e01f      	b.n	8003d60 <printChar+0x1ec>
					{
						if((ch&(1<<i))!=0)
 8003d20:	7cfa      	ldrb	r2, [r7, #19]
 8003d22:	7ffb      	ldrb	r3, [r7, #31]
 8003d24:	fa42 f303 	asr.w	r3, r2, r3
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <printChar+0x1d2>
						{
							LCD_write_dat(fch);
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <printChar+0x298>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fabb 	bl	80032b0 <LCD_write_dat>
							LCD_write_dat(fcl);
 8003d3a:	4b35      	ldr	r3, [pc, #212]	@ (8003e10 <printChar+0x29c>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fab6 	bl	80032b0 <LCD_write_dat>
 8003d44:	e009      	b.n	8003d5a <printChar+0x1e6>
						}
						else
						{
							LCD_write_dat(bch);
 8003d46:	4b33      	ldr	r3, [pc, #204]	@ (8003e14 <printChar+0x2a0>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fab0 	bl	80032b0 <LCD_write_dat>
							LCD_write_dat(bcl);
 8003d50:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <printChar+0x2a4>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff faab 	bl	80032b0 <LCD_write_dat>
					for(i=0;i<8;i++)
 8003d5a:	7ffb      	ldrb	r3, [r7, #31]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	7ffb      	ldrb	r3, [r7, #31]
 8003d62:	2b07      	cmp	r3, #7
 8003d64:	d9dc      	bls.n	8003d20 <printChar+0x1ac>
				for (zz=(cfont.x_size/8)-1; zz>=0; zz--)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	dacb      	bge.n	8003d0a <printChar+0x196>
						}
					}
				}
				temp+=(cfont.x_size/8);
 8003d72:	4b25      	ldr	r3, [pc, #148]	@ (8003e08 <printChar+0x294>)
 8003d74:	791b      	ldrb	r3, [r3, #4]
 8003d76:	08db      	lsrs	r3, r3, #3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	8b7b      	ldrh	r3, [r7, #26]
 8003d7e:	4413      	add	r3, r2
 8003d80:	837b      	strh	r3, [r7, #26]
			for(j=0;j<((cfont.x_size/8)*cfont.y_size);j+=(cfont.x_size/8))
 8003d82:	4b21      	ldr	r3, [pc, #132]	@ (8003e08 <printChar+0x294>)
 8003d84:	791b      	ldrb	r3, [r3, #4]
 8003d86:	08db      	lsrs	r3, r3, #3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	8bbb      	ldrh	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	83bb      	strh	r3, [r7, #28]
 8003d92:	8bba      	ldrh	r2, [r7, #28]
 8003d94:	4b1c      	ldr	r3, [pc, #112]	@ (8003e08 <printChar+0x294>)
 8003d96:	791b      	ldrb	r3, [r3, #4]
 8003d98:	08db      	lsrs	r3, r3, #3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e08 <printChar+0x294>)
 8003da0:	795b      	ldrb	r3, [r3, #5]
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	429a      	cmp	r2, r3
 8003da8:	db82      	blt.n	8003cb0 <printChar+0x13c>
			}
			GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003daa:	4b14      	ldr	r3, [pc, #80]	@ (8003dfc <printChar+0x288>)
 8003dac:	2202      	movs	r2, #2
 8003dae:	619a      	str	r2, [r3, #24]
 8003db0:	e093      	b.n	8003eda <printChar+0x366>
		}
	}
	else
	{
		temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	4a14      	ldr	r2, [pc, #80]	@ (8003e08 <printChar+0x294>)
 8003db6:	7992      	ldrb	r2, [r2, #6]
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <printChar+0x294>)
 8003dbe:	791b      	ldrb	r3, [r3, #4]
 8003dc0:	08db      	lsrs	r3, r3, #3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <printChar+0x294>)
 8003dc8:	795b      	ldrb	r3, [r3, #5]
 8003dca:	fb11 f303 	smulbb	r3, r1, r3
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	fb12 f303 	smulbb	r3, r2, r3
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8003dda:	2300      	movs	r3, #0
 8003ddc:	83bb      	strh	r3, [r7, #28]
 8003dde:	e076      	b.n	8003ece <printChar+0x35a>
		{
			for (zz=0; zz<(cfont.x_size/8); zz++)
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	e060      	b.n	8003ea8 <printChar+0x334>
			{
				ch = cfont.font[temp+zz];
 8003de6:	4b08      	ldr	r3, [pc, #32]	@ (8003e08 <printChar+0x294>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	8b79      	ldrh	r1, [r7, #26]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	440a      	add	r2, r1
 8003df0:	4413      	add	r3, r2
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e04f      	b.n	8003e9c <printChar+0x328>
 8003dfc:	58020400 	.word	0x58020400
 8003e00:	2404c135 	.word	0x2404c135
 8003e04:	2404c130 	.word	0x2404c130
 8003e08:	2404c128 	.word	0x2404c128
 8003e0c:	2404c131 	.word	0x2404c131
 8003e10:	2404c132 	.word	0x2404c132
 8003e14:	2404c133 	.word	0x2404c133
 8003e18:	2404c134 	.word	0x2404c134
				{
					if((ch&(1<<(7-i)))!=0)
 8003e1c:	7cfa      	ldrb	r2, [r7, #19]
 8003e1e:	7ffb      	ldrb	r3, [r7, #31]
 8003e20:	f1c3 0307 	rsb	r3, r3, #7
 8003e24:	fa42 f303 	asr.w	r3, r2, r3
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d032      	beq.n	8003e96 <printChar+0x322>
					{
						setXY(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8003e30:	7ffb      	ldrb	r3, [r7, #31]
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	b298      	uxth	r0, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	8bbb      	ldrh	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	b299      	uxth	r1, r3
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b29c      	uxth	r4, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	8bbb      	ldrh	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	f7ff fd35 	bl	80038ec <setXY>
						LCD_write_dat(fch);
 8003e82:	4b1a      	ldr	r3, [pc, #104]	@ (8003eec <printChar+0x378>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fa12 	bl	80032b0 <LCD_write_dat>
						LCD_write_dat(fcl);
 8003e8c:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <printChar+0x37c>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fa0d 	bl	80032b0 <LCD_write_dat>
				for(i=0;i<8;i++)
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
 8003e9e:	2b07      	cmp	r3, #7
 8003ea0:	d9bc      	bls.n	8003e1c <printChar+0x2a8>
			for (zz=0; zz<(cfont.x_size/8); zz++)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <printChar+0x380>)
 8003eaa:	791b      	ldrb	r3, [r3, #4]
 8003eac:	08db      	lsrs	r3, r3, #3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	db96      	blt.n	8003de6 <printChar+0x272>
					}
				}
			}
			temp+=(cfont.x_size/8);
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <printChar+0x380>)
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	8b7b      	ldrh	r3, [r7, #26]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8003ec8:	8bbb      	ldrh	r3, [r7, #28]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	83bb      	strh	r3, [r7, #28]
 8003ece:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <printChar+0x380>)
 8003ed0:	795b      	ldrb	r3, [r3, #5]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	8bbb      	ldrh	r3, [r7, #28]
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d382      	bcc.n	8003de0 <printChar+0x26c>
		}
	}

	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8003eda:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <printChar+0x384>)
 8003edc:	2202      	movs	r2, #2
 8003ede:	619a      	str	r2, [r3, #24]
	clrXY();
 8003ee0:	f7ff fd7c 	bl	80039dc <clrXY>
}
 8003ee4:	bf00      	nop
 8003ee6:	3724      	adds	r7, #36	@ 0x24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}
 8003eec:	2404c131 	.word	0x2404c131
 8003ef0:	2404c132 	.word	0x2404c132
 8003ef4:	2404c128 	.word	0x2404c128
 8003ef8:	58020400 	.word	0x58020400
 8003efc:	00000000 	.word	0x00000000

08003f00 <rotateChar>:
//  x, y - wsp�rz�dne
//  deg - k�t obrotu napisu
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void rotateChar(unsigned char c, int x, int y, int pos, int deg)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b090      	sub	sp, #64	@ 0x40
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
	unsigned short temp;
	int zz, newx, newy;
	double radian, sinrad, cosrad;

	//czasoch�onne operacje wykonaj przed p�tl�
	radian=deg*0.0175;
 8003f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003f1a:	ed9f 6b7d 	vldr	d6, [pc, #500]	@ 8004110 <rotateChar+0x210>
 8003f1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003f22:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	sinrad = sin(radian);
 8003f26:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8003f2a:	f011 fd79 	bl	8015a20 <sin>
 8003f2e:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
	cosrad = cos(radian);
 8003f32:	ed97 0b0c 	vldr	d0, [r7, #48]	@ 0x30
 8003f36:	f011 fd27 	bl	8015988 <cos>
 8003f3a:	ed87 0b08 	vstr	d0, [r7, #32]

	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 8003f3e:	4b76      	ldr	r3, [pc, #472]	@ (8004118 <rotateChar+0x218>)
 8003f40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f44:	619a      	str	r2, [r3, #24]

	temp=((c-cfont.offset)*((cfont.x_size/8)*cfont.y_size))+4;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	4a74      	ldr	r2, [pc, #464]	@ (800411c <rotateChar+0x21c>)
 8003f4a:	7992      	ldrb	r2, [r2, #6]
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	4b72      	ldr	r3, [pc, #456]	@ (800411c <rotateChar+0x21c>)
 8003f52:	791b      	ldrb	r3, [r3, #4]
 8003f54:	08db      	lsrs	r3, r3, #3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4b70      	ldr	r3, [pc, #448]	@ (800411c <rotateChar+0x21c>)
 8003f5c:	795b      	ldrb	r3, [r3, #5]
 8003f5e:	fb11 f303 	smulbb	r3, r1, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	fb12 f303 	smulbb	r3, r2, r3
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	for(j=0;j<cfont.y_size;j++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003f74:	e0ba      	b.n	80040ec <rotateChar+0x1ec>
	{
		for (zz=0; zz<(cfont.x_size/8); zz++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f7a:	e0a1      	b.n	80040c0 <rotateChar+0x1c0>
		{
			ch = cfont.font[temp+zz];
 8003f7c:	4b67      	ldr	r3, [pc, #412]	@ (800411c <rotateChar+0x21c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8003f82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f84:	440a      	add	r2, r1
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	77fb      	strb	r3, [r7, #31]
			for(i=0;i<8;i++)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003f92:	e08d      	b.n	80040b0 <rotateChar+0x1b0>
			{
				newx = x+(((i+(zz*8)+(pos*cfont.x_size))*cosrad)-((j)*sinrad));
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f9e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	441a      	add	r2, r3
 8003fa8:	4b5c      	ldr	r3, [pc, #368]	@ (800411c <rotateChar+0x21c>)
 8003faa:	791b      	ldrb	r3, [r3, #4]
 8003fac:	4619      	mov	r1, r3
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003fbe:	ed97 7b08 	vldr	d7, [r7, #32]
 8003fc2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003fc6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8003fd2:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8003fd6:	ee24 7b07 	vmul.f64	d7, d4, d7
 8003fda:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003fde:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fe2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003fe6:	ee17 3a90 	vmov	r3, s15
 8003fea:	61bb      	str	r3, [r7, #24]
				newy = y+(((j)*cosrad)+((i+(zz*8)+(pos*cfont.x_size))*sinrad));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ff6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004002:	ed97 7b08 	vldr	d7, [r7, #32]
 8004006:	ee25 5b07 	vmul.f64	d5, d5, d7
 800400a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	441a      	add	r2, r3
 8004014:	4b41      	ldr	r3, [pc, #260]	@ (800411c <rotateChar+0x21c>)
 8004016:	791b      	ldrb	r3, [r3, #4]
 8004018:	4619      	mov	r1, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800402a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800402e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004032:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004036:	ee36 7b07 	vadd.f64	d7, d6, d7
 800403a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800403e:	ee17 3a90 	vmov	r3, s15
 8004042:	617b      	str	r3, [r7, #20]

				setXY(newx,newy,newx+1,newy+1);
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	b298      	uxth	r0, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	b299      	uxth	r1, r3
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	b29b      	uxth	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	b29b      	uxth	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	b29b      	uxth	r3, r3
 800405c:	f7ff fc46 	bl	80038ec <setXY>

				if((ch&(1<<(7-i)))!=0)
 8004060:	7ffa      	ldrb	r2, [r7, #31]
 8004062:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004066:	f1c3 0307 	rsb	r3, r3, #7
 800406a:	fa42 f303 	asr.w	r3, r2, r3
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <rotateChar+0x18c>
				{
					//setPixel((fch<<8)|fcl);
					LCD_write_dat(fch);
 8004076:	4b2a      	ldr	r3, [pc, #168]	@ (8004120 <rotateChar+0x220>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f918 	bl	80032b0 <LCD_write_dat>
					LCD_write_dat(fcl);
 8004080:	4b28      	ldr	r3, [pc, #160]	@ (8004124 <rotateChar+0x224>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff f913 	bl	80032b0 <LCD_write_dat>
 800408a:	e009      	b.n	80040a0 <rotateChar+0x1a0>
				}
				else
				{
					//if (!_transparent)
						//setPixel((bch<<8)|bcl);
						LCD_write_dat(bch);
 800408c:	4b26      	ldr	r3, [pc, #152]	@ (8004128 <rotateChar+0x228>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff f90d 	bl	80032b0 <LCD_write_dat>
						LCD_write_dat(bcl);
 8004096:	4b25      	ldr	r3, [pc, #148]	@ (800412c <rotateChar+0x22c>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff f908 	bl	80032b0 <LCD_write_dat>
				}
				GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80040a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004118 <rotateChar+0x218>)
 80040a2:	2202      	movs	r2, #2
 80040a4:	619a      	str	r2, [r3, #24]
			for(i=0;i<8;i++)
 80040a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040aa:	3301      	adds	r3, #1
 80040ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80040b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80040b4:	2b07      	cmp	r3, #7
 80040b6:	f67f af6d 	bls.w	8003f94 <rotateChar+0x94>
		for (zz=0; zz<(cfont.x_size/8); zz++)
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	3301      	adds	r3, #1
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040c0:	4b16      	ldr	r3, [pc, #88]	@ (800411c <rotateChar+0x21c>)
 80040c2:	791b      	ldrb	r3, [r3, #4]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040cc:	4293      	cmp	r3, r2
 80040ce:	f6ff af55 	blt.w	8003f7c <rotateChar+0x7c>
			}
		}
		temp+=(cfont.x_size/8);
 80040d2:	4b12      	ldr	r3, [pc, #72]	@ (800411c <rotateChar+0x21c>)
 80040d4:	791b      	ldrb	r3, [r3, #4]
 80040d6:	08db      	lsrs	r3, r3, #3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80040de:	4413      	add	r3, r2
 80040e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	for(j=0;j<cfont.y_size;j++)
 80040e2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80040e6:	3301      	adds	r3, #1
 80040e8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <rotateChar+0x21c>)
 80040ee:	795b      	ldrb	r3, [r3, #5]
 80040f0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80040f4:	429a      	cmp	r2, r3
 80040f6:	f4ff af3e 	bcc.w	8003f76 <rotateChar+0x76>
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <rotateChar+0x218>)
 80040fc:	2202      	movs	r2, #2
 80040fe:	619a      	str	r2, [r3, #24]
	clrXY();
 8004100:	f7ff fc6c 	bl	80039dc <clrXY>
}
 8004104:	bf00      	nop
 8004106:	3740      	adds	r7, #64	@ 0x40
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	f3af 8000 	nop.w
 8004110:	1eb851ec 	.word	0x1eb851ec
 8004114:	3f91eb85 	.word	0x3f91eb85
 8004118:	58020400 	.word	0x58020400
 800411c:	2404c128 	.word	0x2404c128
 8004120:	2404c131 	.word	0x2404c131
 8004124:	2404c132 	.word	0x2404c132
 8004128:	2404c133 	.word	0x2404c133
 800412c:	2404c134 	.word	0x2404c134

08004130 <setFont>:
// ustawia aktualn� czcionk�
// Parametry: c - znak; x, y - wsp�rz�dne
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void setFont(unsigned char* font)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	cfont.font = font;
 8004138:	4a0c      	ldr	r2, [pc, #48]	@ (800416c <setFont+0x3c>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6013      	str	r3, [r2, #0]
	cfont.x_size = *(font+0);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <setFont+0x3c>)
 8004144:	711a      	strb	r2, [r3, #4]
	cfont.y_size = *(font+1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	785a      	ldrb	r2, [r3, #1]
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <setFont+0x3c>)
 800414c:	715a      	strb	r2, [r3, #5]
	cfont.offset = *(font+2);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	789a      	ldrb	r2, [r3, #2]
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <setFont+0x3c>)
 8004154:	719a      	strb	r2, [r3, #6]
	cfont.numchars = *(font+3);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	78da      	ldrb	r2, [r3, #3]
 800415a:	4b04      	ldr	r3, [pc, #16]	@ (800416c <setFont+0x3c>)
 800415c:	71da      	strb	r2, [r3, #7]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	2404c128 	.word	0x2404c128

08004170 <print>:
//  x, y - wsp�rz�dne
//  deg - k�t obrotu napisu
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void print(char *st, int x, int y, int deg)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
	int stl, i;

	stl = strlen(st);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7fc f8fe 	bl	8000380 <strlen>
 8004184:	4603      	mov	r3, r0
 8004186:	613b      	str	r3, [r7, #16]

	if (chOrient == PIONOWO)
 8004188:	4b3a      	ldr	r3, [pc, #232]	@ (8004274 <print+0x104>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d122      	bne.n	80041d6 <print+0x66>
	{
	if (x == RIGHT)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004196:	4293      	cmp	r3, r2
 8004198:	d109      	bne.n	80041ae <print+0x3e>
		x = (DISP_X_SIZE+1)-(stl*cfont.x_size);
 800419a:	4b37      	ldr	r3, [pc, #220]	@ (8004278 <print+0x108>)
 800419c:	791b      	ldrb	r3, [r3, #4]
 800419e:	461a      	mov	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	fb03 f202 	mul.w	r2, r3, r2
 80041a6:	f240 1341 	movw	r3, #321	@ 0x141
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	60bb      	str	r3, [r7, #8]
	if (x == CENTER)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f242 720e 	movw	r2, #9998	@ 0x270e
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d12e      	bne.n	8004216 <print+0xa6>
		x = ((DISP_X_SIZE+1)-(stl*cfont.x_size))/2;
 80041b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004278 <print+0x108>)
 80041ba:	791b      	ldrb	r3, [r3, #4]
 80041bc:	461a      	mov	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	fb03 f202 	mul.w	r2, r3, r2
 80041c4:	f240 1341 	movw	r3, #321	@ 0x141
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da00      	bge.n	80041d0 <print+0x60>
 80041ce:	3301      	adds	r3, #1
 80041d0:	105b      	asrs	r3, r3, #1
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	e01f      	b.n	8004216 <print+0xa6>
	}
	else
	{
	if (x == RIGHT)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <print+0x82>
		x = (DISP_Y_SIZE+1)-(stl*cfont.x_size);
 80041e0:	4b25      	ldr	r3, [pc, #148]	@ (8004278 <print+0x108>)
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	461a      	mov	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	f1c3 03f1 	rsb	r3, r3, #241	@ 0xf1
 80041f0:	60bb      	str	r3, [r7, #8]
	if (x == CENTER)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f242 720e 	movw	r2, #9998	@ 0x270e
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d10c      	bne.n	8004216 <print+0xa6>
		x = ((DISP_Y_SIZE+1)-(stl*cfont.x_size))/2;
 80041fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004278 <print+0x108>)
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	461a      	mov	r2, r3
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	f1c3 03f1 	rsb	r3, r3, #241	@ 0xf1
 800420c:	2b00      	cmp	r3, #0
 800420e:	da00      	bge.n	8004212 <print+0xa2>
 8004210:	3301      	adds	r3, #1
 8004212:	105b      	asrs	r3, r3, #1
 8004214:	60bb      	str	r3, [r7, #8]
	}

	for (i=0; i<stl; i++)
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	e021      	b.n	8004260 <print+0xf0>
		if (deg == 0)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d110      	bne.n	8004244 <print+0xd4>
			printChar(*st++, x + (i*(cfont.x_size)), y);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	60fa      	str	r2, [r7, #12]
 8004228:	7818      	ldrb	r0, [r3, #0]
 800422a:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <print+0x108>)
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	fb03 f202 	mul.w	r2, r3, r2
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4413      	add	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4619      	mov	r1, r3
 800423e:	f7ff fc99 	bl	8003b74 <printChar>
 8004242:	e00a      	b.n	800425a <print+0xea>
		else
			rotateChar(*st++, x, y, i, deg);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	60fa      	str	r2, [r7, #12]
 800424a:	7818      	ldrb	r0, [r3, #0]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	f7ff fe53 	bl	8003f00 <rotateChar>
	for (i=0; i<stl; i++)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3301      	adds	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	429a      	cmp	r2, r3
 8004266:	dbd9      	blt.n	800421c <print+0xac>
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	2404c130 	.word	0x2404c130
 8004278:	2404c128 	.word	0x2404c128

0800427c <drawBitmap>:
//  x, y - wsp�rz�dne ekranu
//  sx, sy - rozmiar bitmapy
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void drawBitmap(int x, int y, int sx, int sy, const unsigned short* data)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b089      	sub	sp, #36	@ 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	unsigned short col;
	int tx, ty, tc;

	GPIOB->BSRR = (1<<(LCD_CS+CLEAR));	// CS 0
 800428a:	4b49      	ldr	r3, [pc, #292]	@ (80043b0 <drawBitmap+0x134>)
 800428c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004290:	619a      	str	r2, [r3, #24]
	if (chOrient == PIONOWO)
 8004292:	4b48      	ldr	r3, [pc, #288]	@ (80043b4 <drawBitmap+0x138>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d139      	bne.n	800430e <drawBitmap+0x92>
	{
		setXY(x, y, x+sx-1, y+sy-1);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	b298      	uxth	r0, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	b299      	uxth	r1, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	4413      	add	r3, r2
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29c      	uxth	r4, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	4622      	mov	r2, r4
 80042c4:	f7ff fb12 	bl	80038ec <setXY>
		for (tc=0; tc<(sx*sy); tc++)
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e014      	b.n	80042f8 <drawBitmap+0x7c>
		{
			col = data[tc];
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	827b      	strh	r3, [r7, #18]
			LCD_write_dat(col>>8);
 80042da:	8a7b      	ldrh	r3, [r7, #18]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	b29b      	uxth	r3, r3
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe ffe4 	bl	80032b0 <LCD_write_dat>
			LCD_write_dat(col & 0xff);
 80042e8:	8a7b      	ldrh	r3, [r7, #18]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe ffdf 	bl	80032b0 <LCD_write_dat>
		for (tc=0; tc<(sx*sy); tc++)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	3301      	adds	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	fb02 f303 	mul.w	r3, r2, r3
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	429a      	cmp	r2, r3
 8004304:	dbe3      	blt.n	80042ce <drawBitmap+0x52>
		}
		GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8004306:	4b2a      	ldr	r3, [pc, #168]	@ (80043b0 <drawBitmap+0x134>)
 8004308:	2202      	movs	r2, #2
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	e046      	b.n	800439c <drawBitmap+0x120>
	}
	else
	{
		for (ty=0; ty<sy; ty++)
 800430e:	2300      	movs	r3, #0
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e03f      	b.n	8004394 <drawBitmap+0x118>
		{
			setXY(x, y+ty, x+sx-1, y+ty);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	b298      	uxth	r0, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	b29a      	uxth	r2, r3
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	b29b      	uxth	r3, r3
 8004320:	4413      	add	r3, r2
 8004322:	b299      	uxth	r1, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	b29b      	uxth	r3, r3
 800432c:	4413      	add	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29c      	uxth	r4, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	b29a      	uxth	r2, r3
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	b29b      	uxth	r3, r3
 800433c:	4413      	add	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	4622      	mov	r2, r4
 8004342:	f7ff fad3 	bl	80038ec <setXY>
			for (tx=sx-1; tx>=0; tx--)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3b01      	subs	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	e019      	b.n	8004382 <drawBitmap+0x106>
			{
				col = data[(ty*sx)+tx];
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	fb03 f202 	mul.w	r2, r3, r2
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	827b      	strh	r3, [r7, #18]
				LCD_write_dat(col>>8);
 8004364:	8a7b      	ldrh	r3, [r7, #18]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe ff9f 	bl	80032b0 <LCD_write_dat>
				LCD_write_dat(col & 0xff);
 8004372:	8a7b      	ldrh	r3, [r7, #18]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe ff9a 	bl	80032b0 <LCD_write_dat>
			for (tx=sx-1; tx>=0; tx--)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3b01      	subs	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2b00      	cmp	r3, #0
 8004386:	dae2      	bge.n	800434e <drawBitmap+0xd2>
			}
			GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <drawBitmap+0x134>)
 800438a:	2202      	movs	r2, #2
 800438c:	619a      	str	r2, [r3, #24]
		for (ty=0; ty<sy; ty++)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3301      	adds	r3, #1
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	dbbb      	blt.n	8004314 <drawBitmap+0x98>
		}
	}
	GPIOB->BSRR = (1<<LCD_CS);			//PB1=CS=1
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <drawBitmap+0x134>)
 800439e:	2202      	movs	r2, #2
 80043a0:	619a      	str	r2, [r3, #24]
	clrXY();
 80043a2:	f7ff fb1b 	bl	80039dc <clrXY>
}
 80043a6:	bf00      	nop
 80043a8:	3724      	adds	r7, #36	@ 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd90      	pop	{r4, r7, pc}
 80043ae:	bf00      	nop
 80043b0:	58020400 	.word	0x58020400
 80043b4:	2404c130 	.word	0x2404c130

080043b8 <InitDisplay>:
// Inicjalizuje wyświetlacz
// Parametry:nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void InitDisplay(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	chRysujRaz = 1;
 80043bc:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <InitDisplay+0x14>)
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
	LCD_init();
 80043c2:	f7fe fff7 	bl	80033b4 <LCD_init>
}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	24000014 	.word	0x24000014

080043d0 <Menu>:
// Wyświetl menu wyboru trybów pracy
// Parametry: chPozycja - bieżąca pozyja menu
// Zwraca: nowy tryb pracy
////////////////////////////////////////////////////////////////////////////////
unsigned char Menu(unsigned char chPozycja)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af04      	add	r7, sp, #16
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
	if (chRysujRaz)
 80043da:	4b6c      	ldr	r3, [pc, #432]	@ (800458c <Menu+0x1bc>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8093 	beq.w	800450a <Menu+0x13a>
	{
		LCD_clear();
 80043e4:	f7ff f986 	bl	80036f4 <LCD_clear>
		setFont(MidFont);
 80043e8:	4869      	ldr	r0, [pc, #420]	@ (8004590 <Menu+0x1c0>)
 80043ea:	f7ff fea1 	bl	8004130 <setFont>
		setColor(GREEN);
 80043ee:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80043f2:	f7ff fb0d 	bl	8003a10 <setColor>
		sprintf(chNapis, "AutoPitLot  SysCLK = %lu MHz", HAL_RCC_GetSysClockFreq()/1000000);
 80043f6:	f007 fe89 	bl	800c10c <HAL_RCC_GetSysClockFreq>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4a65      	ldr	r2, [pc, #404]	@ (8004594 <Menu+0x1c4>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	0c9b      	lsrs	r3, r3, #18
 8004404:	461a      	mov	r2, r3
 8004406:	4964      	ldr	r1, [pc, #400]	@ (8004598 <Menu+0x1c8>)
 8004408:	4864      	ldr	r0, [pc, #400]	@ (800459c <Menu+0x1cc>)
 800440a:	f00f f9a5 	bl	8013758 <siprintf>
		print(chNapis, 10, 0, 0);
 800440e:	2300      	movs	r3, #0
 8004410:	2200      	movs	r2, #0
 8004412:	210a      	movs	r1, #10
 8004414:	4861      	ldr	r0, [pc, #388]	@ (800459c <Menu+0x1cc>)
 8004416:	f7ff feab 	bl	8004170 <print>
		sprintf(chNapis, "v%d.%d.%d @ %s %s", WER_GLOWNA, WER_PODRZ, WER_REPO, build_date, build_time);	//numer wersji w repozytorium i czas kompilacji
 800441a:	4b61      	ldr	r3, [pc, #388]	@ (80045a0 <Menu+0x1d0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a61      	ldr	r2, [pc, #388]	@ (80045a4 <Menu+0x1d4>)
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	9202      	str	r2, [sp, #8]
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	2306      	movs	r3, #6
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2301      	movs	r3, #1
 800442c:	2200      	movs	r2, #0
 800442e:	495e      	ldr	r1, [pc, #376]	@ (80045a8 <Menu+0x1d8>)
 8004430:	485a      	ldr	r0, [pc, #360]	@ (800459c <Menu+0x1cc>)
 8004432:	f00f f991 	bl	8013758 <siprintf>
		print(chNapis, 10, 20, 0);
 8004436:	2300      	movs	r3, #0
 8004438:	2214      	movs	r2, #20
 800443a:	210a      	movs	r1, #10
 800443c:	4857      	ldr	r0, [pc, #348]	@ (800459c <Menu+0x1cc>)
 800443e:	f7ff fe97 	bl	8004170 <print>

		setColor(YELLOW);
 8004442:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8004446:	f7ff fae3 	bl	8003a10 <setColor>
		sprintf(chNapis, "Podglad kamery RGB");
 800444a:	4958      	ldr	r1, [pc, #352]	@ (80045ac <Menu+0x1dc>)
 800444c:	4853      	ldr	r0, [pc, #332]	@ (800459c <Menu+0x1cc>)
 800444e:	f00f f983 	bl	8013758 <siprintf>
		print(chNapis, 20, 40, 0);
 8004452:	2300      	movs	r3, #0
 8004454:	2228      	movs	r2, #40	@ 0x28
 8004456:	2114      	movs	r1, #20
 8004458:	4850      	ldr	r0, [pc, #320]	@ (800459c <Menu+0x1cc>)
 800445a:	f7ff fe89 	bl	8004170 <print>
		sprintf(chNapis, "Podglad kamery RAW");
 800445e:	4954      	ldr	r1, [pc, #336]	@ (80045b0 <Menu+0x1e0>)
 8004460:	484e      	ldr	r0, [pc, #312]	@ (800459c <Menu+0x1cc>)
 8004462:	f00f f979 	bl	8013758 <siprintf>
		print(chNapis, 20, 60, 0);
 8004466:	2300      	movs	r3, #0
 8004468:	223c      	movs	r2, #60	@ 0x3c
 800446a:	2114      	movs	r1, #20
 800446c:	484b      	ldr	r0, [pc, #300]	@ (800459c <Menu+0x1cc>)
 800446e:	f7ff fe7f 	bl	8004170 <print>
		//sprintf(chNapis, "Setup 1");
		sprintf(chNapis, "Analiza ramki Eth");
 8004472:	4950      	ldr	r1, [pc, #320]	@ (80045b4 <Menu+0x1e4>)
 8004474:	4849      	ldr	r0, [pc, #292]	@ (800459c <Menu+0x1cc>)
 8004476:	f00f f96f 	bl	8013758 <siprintf>
		print(chNapis, 20, 80, 0);
 800447a:	2300      	movs	r3, #0
 800447c:	2250      	movs	r2, #80	@ 0x50
 800447e:	2114      	movs	r1, #20
 8004480:	4846      	ldr	r0, [pc, #280]	@ (800459c <Menu+0x1cc>)
 8004482:	f7ff fe75 	bl	8004170 <print>
		sprintf(chNapis, "Setup 2");
 8004486:	494c      	ldr	r1, [pc, #304]	@ (80045b8 <Menu+0x1e8>)
 8004488:	4844      	ldr	r0, [pc, #272]	@ (800459c <Menu+0x1cc>)
 800448a:	f00f f965 	bl	8013758 <siprintf>
		print(chNapis, 20, 100, 0);
 800448e:	2300      	movs	r3, #0
 8004490:	2264      	movs	r2, #100	@ 0x64
 8004492:	2114      	movs	r1, #20
 8004494:	4841      	ldr	r0, [pc, #260]	@ (800459c <Menu+0x1cc>)
 8004496:	f7ff fe6b 	bl	8004170 <print>
		sprintf(chNapis, "Setup 3");
 800449a:	4948      	ldr	r1, [pc, #288]	@ (80045bc <Menu+0x1ec>)
 800449c:	483f      	ldr	r0, [pc, #252]	@ (800459c <Menu+0x1cc>)
 800449e:	f00f f95b 	bl	8013758 <siprintf>
		print(chNapis, 20, 120, 0);
 80044a2:	2300      	movs	r3, #0
 80044a4:	2278      	movs	r2, #120	@ 0x78
 80044a6:	2114      	movs	r1, #20
 80044a8:	483c      	ldr	r0, [pc, #240]	@ (800459c <Menu+0x1cc>)
 80044aa:	f7ff fe61 	bl	8004170 <print>
		sprintf(chNapis, "Setup 4");
 80044ae:	4944      	ldr	r1, [pc, #272]	@ (80045c0 <Menu+0x1f0>)
 80044b0:	483a      	ldr	r0, [pc, #232]	@ (800459c <Menu+0x1cc>)
 80044b2:	f00f f951 	bl	8013758 <siprintf>
		print(chNapis, 20, 140, 0);
 80044b6:	2300      	movs	r3, #0
 80044b8:	228c      	movs	r2, #140	@ 0x8c
 80044ba:	2114      	movs	r1, #20
 80044bc:	4837      	ldr	r0, [pc, #220]	@ (800459c <Menu+0x1cc>)
 80044be:	f7ff fe57 	bl	8004170 <print>
		sprintf(chNapis, "Setup 5");
 80044c2:	4940      	ldr	r1, [pc, #256]	@ (80045c4 <Menu+0x1f4>)
 80044c4:	4835      	ldr	r0, [pc, #212]	@ (800459c <Menu+0x1cc>)
 80044c6:	f00f f947 	bl	8013758 <siprintf>
		print(chNapis, 20, 160, 0);
 80044ca:	2300      	movs	r3, #0
 80044cc:	22a0      	movs	r2, #160	@ 0xa0
 80044ce:	2114      	movs	r1, #20
 80044d0:	4832      	ldr	r0, [pc, #200]	@ (800459c <Menu+0x1cc>)
 80044d2:	f7ff fe4d 	bl	8004170 <print>
		sprintf(chNapis, "Fraktale");
 80044d6:	493c      	ldr	r1, [pc, #240]	@ (80045c8 <Menu+0x1f8>)
 80044d8:	4830      	ldr	r0, [pc, #192]	@ (800459c <Menu+0x1cc>)
 80044da:	f00f f93d 	bl	8013758 <siprintf>
		print(chNapis, 20, 180, 0);
 80044de:	2300      	movs	r3, #0
 80044e0:	22b4      	movs	r2, #180	@ 0xb4
 80044e2:	2114      	movs	r1, #20
 80044e4:	482d      	ldr	r0, [pc, #180]	@ (800459c <Menu+0x1cc>)
 80044e6:	f7ff fe43 	bl	8004170 <print>
		sprintf(chNapis, "Pomocy, kabelki!");
 80044ea:	4938      	ldr	r1, [pc, #224]	@ (80045cc <Menu+0x1fc>)
 80044ec:	482b      	ldr	r0, [pc, #172]	@ (800459c <Menu+0x1cc>)
 80044ee:	f00f f933 	bl	8013758 <siprintf>
		print(chNapis, 20, 200, 0);
 80044f2:	2300      	movs	r3, #0
 80044f4:	22c8      	movs	r2, #200	@ 0xc8
 80044f6:	2114      	movs	r1, #20
 80044f8:	4828      	ldr	r0, [pc, #160]	@ (800459c <Menu+0x1cc>)
 80044fa:	f7ff fe39 	bl	8004170 <print>
		print(chNapis, 180, 40, 0);
		sprintf(chNapis, "Nic 1");
		print(chNapis, 180, 60, 0);
		sprintf(chNapis, "Nic 2");
		print(chNapis, 180, 80, 0);*/
		chRysujRaz = 0;
 80044fe:	4b23      	ldr	r3, [pc, #140]	@ (800458c <Menu+0x1bc>)
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
		InitFraktal(0);
 8004504:	2000      	movs	r0, #0
 8004506:	f000 f8fb 	bl	8004700 <InitFraktal>
	}

	//kasuj stary znacznik
	setColor(BLACK);
 800450a:	2000      	movs	r0, #0
 800450c:	f7ff fa80 	bl	8003a10 <setColor>
	if (chPozycja < SRODKOWA_POZYCJA_MENU)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b08      	cmp	r3, #8
 8004514:	d80a      	bhi.n	800452c <Menu+0x15c>
	{
		x = 0;
 8004516:	4b2e      	ldr	r3, [pc, #184]	@ (80045d0 <Menu+0x200>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
		y = chPozycja * 20 + 40;
 800451c:	79fa      	ldrb	r2, [r7, #7]
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	3328      	adds	r3, #40	@ 0x28
 8004528:	4a2a      	ldr	r2, [pc, #168]	@ (80045d4 <Menu+0x204>)
 800452a:	6013      	str	r3, [r2, #0]
	/*else		//obsługa prawej połowy ekranu
	{
		x = 160;
		y = (chPozycja - SRODKOWA_POZYCJA_MENU) * 20 + 40;
	}*/
	printChar('>', x, y);
 800452c:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <Menu+0x200>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a28      	ldr	r2, [pc, #160]	@ (80045d4 <Menu+0x204>)
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	203e      	movs	r0, #62	@ 0x3e
 8004538:	f7ff fb1c 	bl	8003b74 <printChar>

	//rysuj znacznik pozycji menu
	setColor(CYAN);
 800453c:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8004540:	f7ff fa66 	bl	8003a10 <setColor>
	chPozycja++;
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	3301      	adds	r3, #1
 8004548:	71fb      	strb	r3, [r7, #7]
	//if (chPozycja >= OSTATNIA_POZYCJA_MENU)	//menu na prawej i lewej części ekranu
	if (chPozycja >= SRODKOWA_POZYCJA_MENU)		//menu po lewej części ekranu
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d901      	bls.n	8004554 <Menu+0x184>
		chPozycja = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	71fb      	strb	r3, [r7, #7]

	//oblicz współrzędne znacznika
	if (chPozycja < SRODKOWA_POZYCJA_MENU)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	2b08      	cmp	r3, #8
 8004558:	d80a      	bhi.n	8004570 <Menu+0x1a0>
	{
		x = 0;
 800455a:	4b1d      	ldr	r3, [pc, #116]	@ (80045d0 <Menu+0x200>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
		y = chPozycja * 20 + 40;
 8004560:	79fa      	ldrb	r2, [r7, #7]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	3328      	adds	r3, #40	@ 0x28
 800456c:	4a19      	ldr	r2, [pc, #100]	@ (80045d4 <Menu+0x204>)
 800456e:	6013      	str	r3, [r2, #0]
	/*else		//obsługa prawej połowy ekranu
	{
		x = 160;
		y = (chPozycja - SRODKOWA_POZYCJA_MENU) * 20 + 40;
	}*/
	printChar('>', x, y);
 8004570:	4b17      	ldr	r3, [pc, #92]	@ (80045d0 <Menu+0x200>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a17      	ldr	r2, [pc, #92]	@ (80045d4 <Menu+0x204>)
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	203e      	movs	r0, #62	@ 0x3e
 800457c:	f7ff fafa 	bl	8003b74 <printChar>

	return chPozycja;
 8004580:	79fb      	ldrb	r3, [r7, #7]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	24000014 	.word	0x24000014
 8004590:	080171f8 	.word	0x080171f8
 8004594:	431bde83 	.word	0x431bde83
 8004598:	080166a4 	.word	0x080166a4
 800459c:	2404c138 	.word	0x2404c138
 80045a0:	2400000c 	.word	0x2400000c
 80045a4:	24000010 	.word	0x24000010
 80045a8:	080166c4 	.word	0x080166c4
 80045ac:	080166d8 	.word	0x080166d8
 80045b0:	080166ec 	.word	0x080166ec
 80045b4:	08016700 	.word	0x08016700
 80045b8:	08016714 	.word	0x08016714
 80045bc:	0801671c 	.word	0x0801671c
 80045c0:	08016724 	.word	0x08016724
 80045c4:	0801672c 	.word	0x0801672c
 80045c8:	08016734 	.word	0x08016734
 80045cc:	08016740 	.word	0x08016740
 80045d0:	2404c160 	.word	0x2404c160
 80045d4:	2404c164 	.word	0x2404c164

080045d8 <RysujMenuTimer>:
// Rysuj timer włączenia pozycji menu
// Parametry: chTryb - bieżący tryb pracy
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void RysujMenuTimer(unsigned short sCzas)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	80fb      	strh	r3, [r7, #6]
	setColor(BLUE);
 80045e2:	201f      	movs	r0, #31
 80045e4:	f7ff fa14 	bl	8003a10 <setColor>
	fillRect(0, DISP_Y_SIZE-4, (int)sCzas, DISP_Y_SIZE);
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	23f0      	movs	r3, #240	@ 0xf0
 80045ec:	21ec      	movs	r1, #236	@ 0xec
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7ff fa50 	bl	8003a94 <fillRect>
	setColor(BLACK);
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7ff fa0b 	bl	8003a10 <setColor>
	fillRect((int)sCzas+1, DISP_Y_SIZE-4, DISP_X_SIZE, DISP_Y_SIZE);
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	1c58      	adds	r0, r3, #1
 80045fe:	23f0      	movs	r3, #240	@ 0xf0
 8004600:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004604:	21ec      	movs	r1, #236	@ 0xec
 8004606:	f7ff fa45 	bl	8003a94 <fillRect>
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <WyswietlDane>:
// dane - zawartość rejestru do wyświetleania jako hex
// pozY - współrzędne Y wiersza
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlDane(char *str, uint8_t dane, uint8_t pozY)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
 8004620:	4613      	mov	r3, r2
 8004622:	70bb      	strb	r3, [r7, #2]
	setColor(GREEN);
 8004624:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004628:	f7ff f9f2 	bl	8003a10 <setColor>
	sprintf(chNapis, "%s: 0x%X", str, dane);
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4906      	ldr	r1, [pc, #24]	@ (800464c <WyswietlDane+0x38>)
 8004632:	4807      	ldr	r0, [pc, #28]	@ (8004650 <WyswietlDane+0x3c>)
 8004634:	f00f f890 	bl	8013758 <siprintf>
	print(chNapis, 10, pozY, 0);
 8004638:	78ba      	ldrb	r2, [r7, #2]
 800463a:	2300      	movs	r3, #0
 800463c:	210a      	movs	r1, #10
 800463e:	4804      	ldr	r0, [pc, #16]	@ (8004650 <WyswietlDane+0x3c>)
 8004640:	f7ff fd96 	bl	8004170 <print>
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	08016754 	.word	0x08016754
 8004650:	2404c138 	.word	0x2404c138

08004654 <WyswietlDaneFloat>:

void WyswietlDaneFloat(char *str, float dane, uint8_t pozY)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004660:	460b      	mov	r3, r1
 8004662:	71fb      	strb	r3, [r7, #7]
	setColor(YELLOW);
 8004664:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8004668:	f7ff f9d2 	bl	8003a10 <setColor>
	sprintf(chNapis, "%s: %.2f", str, dane);
 800466c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004670:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004674:	ed8d 7b00 	vstr	d7, [sp]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4907      	ldr	r1, [pc, #28]	@ (8004698 <WyswietlDaneFloat+0x44>)
 800467c:	4807      	ldr	r0, [pc, #28]	@ (800469c <WyswietlDaneFloat+0x48>)
 800467e:	f00f f86b 	bl	8013758 <siprintf>
	print(chNapis, 10, pozY, 0);
 8004682:	79fa      	ldrb	r2, [r7, #7]
 8004684:	2300      	movs	r3, #0
 8004686:	210a      	movs	r1, #10
 8004688:	4804      	ldr	r0, [pc, #16]	@ (800469c <WyswietlDaneFloat+0x48>)
 800468a:	f7ff fd71 	bl	8004170 <print>
}
 800468e:	bf00      	nop
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	08016760 	.word	0x08016760
 800469c:	2404c138 	.word	0x2404c138

080046a0 <WyswietlKodBledu>:
// dane - zawartość rejestru do wyświetleania jako hex
// pozY - współrzędne Y wiersza
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlKodBledu(uint8_t blad, uint8_t pozX, uint8_t pozY)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	71fb      	strb	r3, [r7, #7]
 80046aa:	460b      	mov	r3, r1
 80046ac:	71bb      	strb	r3, [r7, #6]
 80046ae:	4613      	mov	r3, r2
 80046b0:	717b      	strb	r3, [r7, #5]
	if (blad)
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <WyswietlKodBledu+0x2e>
	{
		setColor(RED);
 80046b8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80046bc:	f7ff f9a8 	bl	8003a10 <setColor>
		sprintf(chNapis, "Err: %d ", blad);
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	461a      	mov	r2, r3
 80046c4:	490b      	ldr	r1, [pc, #44]	@ (80046f4 <WyswietlKodBledu+0x54>)
 80046c6:	480c      	ldr	r0, [pc, #48]	@ (80046f8 <WyswietlKodBledu+0x58>)
 80046c8:	f00f f846 	bl	8013758 <siprintf>
 80046cc:	e007      	b.n	80046de <WyswietlKodBledu+0x3e>
	}
	else
	{
		setColor(GREEN);
 80046ce:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80046d2:	f7ff f99d 	bl	8003a10 <setColor>
		sprintf(chNapis, "OK    ");
 80046d6:	4909      	ldr	r1, [pc, #36]	@ (80046fc <WyswietlKodBledu+0x5c>)
 80046d8:	4807      	ldr	r0, [pc, #28]	@ (80046f8 <WyswietlKodBledu+0x58>)
 80046da:	f00f f83d 	bl	8013758 <siprintf>
	}
	print(chNapis, pozX, pozY, 0);
 80046de:	79b9      	ldrb	r1, [r7, #6]
 80046e0:	797a      	ldrb	r2, [r7, #5]
 80046e2:	2300      	movs	r3, #0
 80046e4:	4804      	ldr	r0, [pc, #16]	@ (80046f8 <WyswietlKodBledu+0x58>)
 80046e6:	f7ff fd43 	bl	8004170 <print>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	0801676c 	.word	0x0801676c
 80046f8:	2404c138 	.word	0x2404c138
 80046fc:	08016778 	.word	0x08016778

08004700 <InitFraktal>:
// zmierz czas liczenia fraktala Julii
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void InitFraktal(unsigned char chTyp)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	71fb      	strb	r3, [r7, #7]
//#define IMG_CONSTANT	-0.73
//#define REAL_CONSTANT	0.19
#define IMG_CONSTANT	-0.1
#define REAL_CONSTANT	0.65

	switch (chTyp)
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d839      	bhi.n	8004784 <InitFraktal+0x84>
 8004710:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <InitFraktal+0x18>)
 8004712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004716:	bf00      	nop
 8004718:	08004729 	.word	0x08004729
 800471c:	08004737 	.word	0x08004737
 8004720:	08004751 	.word	0x08004751
 8004724:	0800476b 	.word	0x0800476b
	{
	case 0:	fReal = 0.38; 	fImag = -0.1;	break;	//Julia
 8004728:	4b19      	ldr	r3, [pc, #100]	@ (8004790 <InitFraktal+0x90>)
 800472a:	4a1a      	ldr	r2, [pc, #104]	@ (8004794 <InitFraktal+0x94>)
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	4b1a      	ldr	r3, [pc, #104]	@ (8004798 <InitFraktal+0x98>)
 8004730:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <InitFraktal+0x9c>)
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e026      	b.n	8004784 <InitFraktal+0x84>
	case 1:	fX=-0.70; 	fY=0.60;	fZoom = -0.6;	chMnozPalety = 2;	break;		//ca�y fraktal - rotacja palety -0.7, 0.6, -0.6,
 8004736:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <InitFraktal+0xa0>)
 8004738:	4a1a      	ldr	r2, [pc, #104]	@ (80047a4 <InitFraktal+0xa4>)
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	4b1a      	ldr	r3, [pc, #104]	@ (80047a8 <InitFraktal+0xa8>)
 800473e:	4a1b      	ldr	r2, [pc, #108]	@ (80047ac <InitFraktal+0xac>)
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <InitFraktal+0xb0>)
 8004744:	4a1b      	ldr	r2, [pc, #108]	@ (80047b4 <InitFraktal+0xb4>)
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <InitFraktal+0xb8>)
 800474a:	2202      	movs	r2, #2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e019      	b.n	8004784 <InitFraktal+0x84>
	case 2:	fX=-0.75; 	fY=0.18;	fZoom = -0.6;	chMnozPalety = 15;	break;		//dolina konika x=-0,75, y=0,1
 8004750:	4b13      	ldr	r3, [pc, #76]	@ (80047a0 <InitFraktal+0xa0>)
 8004752:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <InitFraktal+0xbc>)
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	4b14      	ldr	r3, [pc, #80]	@ (80047a8 <InitFraktal+0xa8>)
 8004758:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <InitFraktal+0xc0>)
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <InitFraktal+0xb0>)
 800475e:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <InitFraktal+0xb4>)
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <InitFraktal+0xb8>)
 8004764:	220f      	movs	r2, #15
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	e00c      	b.n	8004784 <InitFraktal+0x84>
	case 3:	fX= 0.30; 	fY=0.05;	fZoom = -0.6;	chMnozPalety = 43;	break;		//dolina s�onia x=0,25-0,35, y=0,05, zoom=-0,6..-40
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <InitFraktal+0xa0>)
 800476c:	4a15      	ldr	r2, [pc, #84]	@ (80047c4 <InitFraktal+0xc4>)
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <InitFraktal+0xa8>)
 8004772:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <InitFraktal+0xc8>)
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <InitFraktal+0xb0>)
 8004778:	4a0e      	ldr	r2, [pc, #56]	@ (80047b4 <InitFraktal+0xb4>)
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <InitFraktal+0xb8>)
 800477e:	222b      	movs	r2, #43	@ 0x2b
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	bf00      	nop
	}


	//chMnozPalety = 43;		//8, 13, 21, 30, 34, 43, 48, 56, 61
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	24071968 	.word	0x24071968
 8004794:	3ec28f5c 	.word	0x3ec28f5c
 8004798:	2407196c 	.word	0x2407196c
 800479c:	bdcccccd 	.word	0xbdcccccd
 80047a0:	24071974 	.word	0x24071974
 80047a4:	bf333333 	.word	0xbf333333
 80047a8:	24071978 	.word	0x24071978
 80047ac:	3f19999a 	.word	0x3f19999a
 80047b0:	24071970 	.word	0x24071970
 80047b4:	bf19999a 	.word	0xbf19999a
 80047b8:	2407197c 	.word	0x2407197c
 80047bc:	bf400000 	.word	0xbf400000
 80047c0:	3e3851ec 	.word	0x3e3851ec
 80047c4:	3e99999a 	.word	0x3e99999a
 80047c8:	3d4ccccd 	.word	0x3d4ccccd
 80047cc:	00000000 	.word	0x00000000

080047d0 <FraktalTest>:
// zmierz czas liczenia fraktala Julii
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void FraktalTest(unsigned char chTyp)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af04      	add	r7, sp, #16
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
	unsigned int nCzas;

	nCzas = HAL_GetTick();
 80047da:	f000 feff 	bl	80055dc <HAL_GetTick>
 80047de:	60f8      	str	r0, [r7, #12]
	switch (chTyp)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	f200 80cd 	bhi.w	8004982 <FraktalTest+0x1b2>
 80047e8:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <FraktalTest+0x20>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004855 	.word	0x08004855
 80047f8:	080048af 	.word	0x080048af
 80047fc:	08004919 	.word	0x08004919
	{
	case 0:	GenerateJulia(DISP_X_SIZE, DISP_Y_SIZE, DISP_X_SIZE/2, DISP_Y_SIZE/2, 135, sFractalBuf);
 8004800:	4b71      	ldr	r3, [pc, #452]	@ (80049c8 <FraktalTest+0x1f8>)
 8004802:	9301      	str	r3, [sp, #4]
 8004804:	2387      	movs	r3, #135	@ 0x87
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	2378      	movs	r3, #120	@ 0x78
 800480a:	22a0      	movs	r2, #160	@ 0xa0
 800480c:	21f0      	movs	r1, #240	@ 0xf0
 800480e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8004812:	f000 f975 	bl	8004b00 <GenerateJulia>
			nCzas = MinalCzas(nCzas);
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fb30 	bl	8004e7c <MinalCzas>
 800481c:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Julia: t=%dms, c=%.3f ", nCzas, fImag);
 800481e:	4b6b      	ldr	r3, [pc, #428]	@ (80049cc <FraktalTest+0x1fc>)
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004828:	ed8d 7b00 	vstr	d7, [sp]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4968      	ldr	r1, [pc, #416]	@ (80049d0 <FraktalTest+0x200>)
 8004830:	4868      	ldr	r0, [pc, #416]	@ (80049d4 <FraktalTest+0x204>)
 8004832:	f00e ff91 	bl	8013758 <siprintf>
			fImag -= 0.002;
 8004836:	4b65      	ldr	r3, [pc, #404]	@ (80049cc <FraktalTest+0x1fc>)
 8004838:	edd3 7a00 	vldr	s15, [r3]
 800483c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004840:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 80049b8 <FraktalTest+0x1e8>
 8004844:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800484c:	4b5f      	ldr	r3, [pc, #380]	@ (80049cc <FraktalTest+0x1fc>)
 800484e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004852:	e096      	b.n	8004982 <FraktalTest+0x1b2>

			//ca�y fraktal - rotacja palety
	case 1: GenerateMandelbrot(fX, fY, fZoom, 30, sFractalBuf);
 8004854:	4b60      	ldr	r3, [pc, #384]	@ (80049d8 <FraktalTest+0x208>)
 8004856:	edd3 7a00 	vldr	s15, [r3]
 800485a:	4b60      	ldr	r3, [pc, #384]	@ (80049dc <FraktalTest+0x20c>)
 800485c:	ed93 7a00 	vldr	s14, [r3]
 8004860:	4b5f      	ldr	r3, [pc, #380]	@ (80049e0 <FraktalTest+0x210>)
 8004862:	edd3 6a00 	vldr	s13, [r3]
 8004866:	4958      	ldr	r1, [pc, #352]	@ (80049c8 <FraktalTest+0x1f8>)
 8004868:	201e      	movs	r0, #30
 800486a:	eeb0 1a66 	vmov.f32	s2, s13
 800486e:	eef0 0a47 	vmov.f32	s1, s14
 8004872:	eeb0 0a67 	vmov.f32	s0, s15
 8004876:	f000 f9ef 	bl	8004c58 <GenerateMandelbrot>
			nCzas = MinalCzas(nCzas);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fafe 	bl	8004e7c <MinalCzas>
 8004880:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Mandelbrot: t=%dms z=%.1f, p=%d", nCzas, fZoom, chMnozPalety);
 8004882:	4b57      	ldr	r3, [pc, #348]	@ (80049e0 <FraktalTest+0x210>)
 8004884:	edd3 7a00 	vldr	s15, [r3]
 8004888:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800488c:	4b55      	ldr	r3, [pc, #340]	@ (80049e4 <FraktalTest+0x214>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	9302      	str	r3, [sp, #8]
 8004892:	ed8d 7b00 	vstr	d7, [sp]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4953      	ldr	r1, [pc, #332]	@ (80049e8 <FraktalTest+0x218>)
 800489a:	484e      	ldr	r0, [pc, #312]	@ (80049d4 <FraktalTest+0x204>)
 800489c:	f00e ff5c 	bl	8013758 <siprintf>
			chMnozPalety += 1;
 80048a0:	4b50      	ldr	r3, [pc, #320]	@ (80049e4 <FraktalTest+0x214>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	4b4e      	ldr	r3, [pc, #312]	@ (80049e4 <FraktalTest+0x214>)
 80048aa:	701a      	strb	r2, [r3, #0]
			break;
 80048ac:	e069      	b.n	8004982 <FraktalTest+0x1b2>

			//dolina konika x=-0,75, y=0,1
	case 2: GenerateMandelbrot(fX, fY, fZoom, 30, sFractalBuf);
 80048ae:	4b4a      	ldr	r3, [pc, #296]	@ (80049d8 <FraktalTest+0x208>)
 80048b0:	edd3 7a00 	vldr	s15, [r3]
 80048b4:	4b49      	ldr	r3, [pc, #292]	@ (80049dc <FraktalTest+0x20c>)
 80048b6:	ed93 7a00 	vldr	s14, [r3]
 80048ba:	4b49      	ldr	r3, [pc, #292]	@ (80049e0 <FraktalTest+0x210>)
 80048bc:	edd3 6a00 	vldr	s13, [r3]
 80048c0:	4941      	ldr	r1, [pc, #260]	@ (80049c8 <FraktalTest+0x1f8>)
 80048c2:	201e      	movs	r0, #30
 80048c4:	eeb0 1a66 	vmov.f32	s2, s13
 80048c8:	eef0 0a47 	vmov.f32	s1, s14
 80048cc:	eeb0 0a67 	vmov.f32	s0, s15
 80048d0:	f000 f9c2 	bl	8004c58 <GenerateMandelbrot>
			nCzas = MinalCzas(nCzas);
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 fad1 	bl	8004e7c <MinalCzas>
 80048da:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Mandelbrot: t=%dms z=%.1f, p=%d", nCzas, fZoom, chMnozPalety);
 80048dc:	4b40      	ldr	r3, [pc, #256]	@ (80049e0 <FraktalTest+0x210>)
 80048de:	edd3 7a00 	vldr	s15, [r3]
 80048e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80048e6:	4b3f      	ldr	r3, [pc, #252]	@ (80049e4 <FraktalTest+0x214>)
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	ed8d 7b00 	vstr	d7, [sp]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	493d      	ldr	r1, [pc, #244]	@ (80049e8 <FraktalTest+0x218>)
 80048f4:	4837      	ldr	r0, [pc, #220]	@ (80049d4 <FraktalTest+0x204>)
 80048f6:	f00e ff2f 	bl	8013758 <siprintf>
			fZoom /= 0.9;
 80048fa:	4b39      	ldr	r3, [pc, #228]	@ (80049e0 <FraktalTest+0x210>)
 80048fc:	edd3 7a00 	vldr	s15, [r3]
 8004900:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004904:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 80049c0 <FraktalTest+0x1f0>
 8004908:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800490c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004910:	4b33      	ldr	r3, [pc, #204]	@ (80049e0 <FraktalTest+0x210>)
 8004912:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004916:	e034      	b.n	8004982 <FraktalTest+0x1b2>

			//dolina s�onia x=0,25-0,35, y=0,05, zoom=-0,6..-40
	case 3: GenerateMandelbrot(fX, fY, fZoom, 30, sFractalBuf);
 8004918:	4b2f      	ldr	r3, [pc, #188]	@ (80049d8 <FraktalTest+0x208>)
 800491a:	edd3 7a00 	vldr	s15, [r3]
 800491e:	4b2f      	ldr	r3, [pc, #188]	@ (80049dc <FraktalTest+0x20c>)
 8004920:	ed93 7a00 	vldr	s14, [r3]
 8004924:	4b2e      	ldr	r3, [pc, #184]	@ (80049e0 <FraktalTest+0x210>)
 8004926:	edd3 6a00 	vldr	s13, [r3]
 800492a:	4927      	ldr	r1, [pc, #156]	@ (80049c8 <FraktalTest+0x1f8>)
 800492c:	201e      	movs	r0, #30
 800492e:	eeb0 1a66 	vmov.f32	s2, s13
 8004932:	eef0 0a47 	vmov.f32	s1, s14
 8004936:	eeb0 0a67 	vmov.f32	s0, s15
 800493a:	f000 f98d 	bl	8004c58 <GenerateMandelbrot>
			nCzas = MinalCzas(nCzas);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 fa9c 	bl	8004e7c <MinalCzas>
 8004944:	60f8      	str	r0, [r7, #12]
			sprintf(chNapis, "Mandelbrot: t=%dms z=%.1f, p=%d", nCzas, fZoom, chMnozPalety);
 8004946:	4b26      	ldr	r3, [pc, #152]	@ (80049e0 <FraktalTest+0x210>)
 8004948:	edd3 7a00 	vldr	s15, [r3]
 800494c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004950:	4b24      	ldr	r3, [pc, #144]	@ (80049e4 <FraktalTest+0x214>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	ed8d 7b00 	vstr	d7, [sp]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4922      	ldr	r1, [pc, #136]	@ (80049e8 <FraktalTest+0x218>)
 800495e:	481d      	ldr	r0, [pc, #116]	@ (80049d4 <FraktalTest+0x204>)
 8004960:	f00e fefa 	bl	8013758 <siprintf>
			fZoom /= 0.9;
 8004964:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <FraktalTest+0x210>)
 8004966:	edd3 7a00 	vldr	s15, [r3]
 800496a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800496e:	ed9f 5b14 	vldr	d5, [pc, #80]	@ 80049c0 <FraktalTest+0x1f0>
 8004972:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004976:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800497a:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <FraktalTest+0x210>)
 800497c:	edc3 7a00 	vstr	s15, [r3]
			break;
 8004980:	bf00      	nop
	}

	drawBitmap(0, 0, 320, 240, sFractalBuf);
 8004982:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <FraktalTest+0x1f8>)
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	23f0      	movs	r3, #240	@ 0xf0
 8004988:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800498c:	2100      	movs	r1, #0
 800498e:	2000      	movs	r0, #0
 8004990:	f7ff fc74 	bl	800427c <drawBitmap>
	setFont(MidFont);
 8004994:	4815      	ldr	r0, [pc, #84]	@ (80049ec <FraktalTest+0x21c>)
 8004996:	f7ff fbcb 	bl	8004130 <setFont>
	setColor(GREEN);
 800499a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 800499e:	f7ff f837 	bl	8003a10 <setColor>
	print(chNapis, 0, 224, 0);
 80049a2:	2300      	movs	r3, #0
 80049a4:	22e0      	movs	r2, #224	@ 0xe0
 80049a6:	2100      	movs	r1, #0
 80049a8:	480a      	ldr	r0, [pc, #40]	@ (80049d4 <FraktalTest+0x204>)
 80049aa:	f7ff fbe1 	bl	8004170 <print>
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80049bc:	3f60624d 	.word	0x3f60624d
 80049c0:	cccccccd 	.word	0xcccccccd
 80049c4:	3feccccc 	.word	0x3feccccc
 80049c8:	2404c168 	.word	0x2404c168
 80049cc:	2407196c 	.word	0x2407196c
 80049d0:	08016780 	.word	0x08016780
 80049d4:	2404c138 	.word	0x2404c138
 80049d8:	24071974 	.word	0x24071974
 80049dc:	24071978 	.word	0x24071978
 80049e0:	24071970 	.word	0x24071970
 80049e4:	2407197c 	.word	0x2407197c
 80049e8:	08016798 	.word	0x08016798
 80049ec:	080171f8 	.word	0x080171f8

080049f0 <FraktalDemo>:
// wyświetl demo z fraktalami
// Parametry: nic
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void FraktalDemo(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	switch (chDemoMode)
 80049f4:	4b40      	ldr	r3, [pc, #256]	@ (8004af8 <FraktalDemo+0x108>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d874      	bhi.n	8004ae6 <FraktalDemo+0xf6>
 80049fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004a04 <FraktalDemo+0x14>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a1d 	.word	0x08004a1d
 8004a08:	08004a45 	.word	0x08004a45
 8004a0c:	08004a6d 	.word	0x08004a6d
 8004a10:	08004a95 	.word	0x08004a95
 8004a14:	08004abd 	.word	0x08004abd
 8004a18:	08004acb 	.word	0x08004acb
	{
	case 0:	FraktalTest(0);		//rysuj fraktala Julii
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7ff fed7 	bl	80047d0 <FraktalTest>
		if (chLiczIter > 40)
 8004a22:	4b36      	ldr	r3, [pc, #216]	@ (8004afc <FraktalDemo+0x10c>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b28      	cmp	r3, #40	@ 0x28
 8004a28:	d956      	bls.n	8004ad8 <FraktalDemo+0xe8>
		{
			chLiczIter = 0;
 8004a2a:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <FraktalDemo+0x10c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004a30:	4b31      	ldr	r3, [pc, #196]	@ (8004af8 <FraktalDemo+0x108>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	4b2f      	ldr	r3, [pc, #188]	@ (8004af8 <FraktalDemo+0x108>)
 8004a3a:	701a      	strb	r2, [r3, #0]
			InitFraktal(1);
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	f7ff fe5f 	bl	8004700 <InitFraktal>
		}
		break;
 8004a42:	e049      	b.n	8004ad8 <FraktalDemo+0xe8>

	case 1:	FraktalTest(1);		//rysuj fraktala Mandelbrota - cały fraktal rotacja kolorów
 8004a44:	2001      	movs	r0, #1
 8004a46:	f7ff fec3 	bl	80047d0 <FraktalTest>
		if (chLiczIter > 60)
 8004a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004afc <FraktalDemo+0x10c>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b3c      	cmp	r3, #60	@ 0x3c
 8004a50:	d944      	bls.n	8004adc <FraktalDemo+0xec>
		{
			chLiczIter = 0;
 8004a52:	4b2a      	ldr	r3, [pc, #168]	@ (8004afc <FraktalDemo+0x10c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004a58:	4b27      	ldr	r3, [pc, #156]	@ (8004af8 <FraktalDemo+0x108>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	4b25      	ldr	r3, [pc, #148]	@ (8004af8 <FraktalDemo+0x108>)
 8004a62:	701a      	strb	r2, [r3, #0]
			InitFraktal(2);
 8004a64:	2002      	movs	r0, #2
 8004a66:	f7ff fe4b 	bl	8004700 <InitFraktal>
		}
		break;
 8004a6a:	e037      	b.n	8004adc <FraktalDemo+0xec>

	case 2:	FraktalTest(2);		//rysuj fraktala Mandelbrota - dolina konika
 8004a6c:	2002      	movs	r0, #2
 8004a6e:	f7ff feaf 	bl	80047d0 <FraktalTest>
		if (chLiczIter > 20)
 8004a72:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <FraktalDemo+0x10c>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b14      	cmp	r3, #20
 8004a78:	d932      	bls.n	8004ae0 <FraktalDemo+0xf0>
		{
			chLiczIter = 0;
 8004a7a:	4b20      	ldr	r3, [pc, #128]	@ (8004afc <FraktalDemo+0x10c>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004a80:	4b1d      	ldr	r3, [pc, #116]	@ (8004af8 <FraktalDemo+0x108>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <FraktalDemo+0x108>)
 8004a8a:	701a      	strb	r2, [r3, #0]
			InitFraktal(3);
 8004a8c:	2003      	movs	r0, #3
 8004a8e:	f7ff fe37 	bl	8004700 <InitFraktal>
		}
		break;
 8004a92:	e025      	b.n	8004ae0 <FraktalDemo+0xf0>

	case 3:	FraktalTest(3);		//rysuj fraktala Mandelbrota - dolina słonia
 8004a94:	2003      	movs	r0, #3
 8004a96:	f7ff fe9b 	bl	80047d0 <FraktalTest>
		if (chLiczIter > 20)
 8004a9a:	4b18      	ldr	r3, [pc, #96]	@ (8004afc <FraktalDemo+0x10c>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b14      	cmp	r3, #20
 8004aa0:	d920      	bls.n	8004ae4 <FraktalDemo+0xf4>
		{
			chLiczIter = 0;
 8004aa2:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <FraktalDemo+0x10c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
			chDemoMode++;
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <FraktalDemo+0x108>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <FraktalDemo+0x108>)
 8004ab2:	701a      	strb	r2, [r3, #0]
			InitFraktal(2);
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f7ff fe23 	bl	8004700 <InitFraktal>
		}
		break;
 8004aba:	e013      	b.n	8004ae4 <FraktalDemo+0xf4>

	case 4:	chDemoMode++;	break;
 8004abc:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <FraktalDemo+0x108>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <FraktalDemo+0x108>)
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	e00d      	b.n	8004ae6 <FraktalDemo+0xf6>

	case 5:	//LCD_Test();		chMode++;
		InitFraktal(0);
 8004aca:	2000      	movs	r0, #0
 8004acc:	f7ff fe18 	bl	8004700 <InitFraktal>
		chDemoMode = 0;	break;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <FraktalDemo+0x108>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	e006      	b.n	8004ae6 <FraktalDemo+0xf6>
		break;
 8004ad8:	bf00      	nop
 8004ada:	e004      	b.n	8004ae6 <FraktalDemo+0xf6>
		break;
 8004adc:	bf00      	nop
 8004ade:	e002      	b.n	8004ae6 <FraktalDemo+0xf6>
		break;
 8004ae0:	bf00      	nop
 8004ae2:	e000      	b.n	8004ae6 <FraktalDemo+0xf6>
		break;
 8004ae4:	bf00      	nop
	}
	chLiczIter++;
 8004ae6:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <FraktalDemo+0x10c>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <FraktalDemo+0x10c>)
 8004af0:	701a      	strb	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	2407197d 	.word	0x2407197d
 8004afc:	2407197e 	.word	0x2407197e

08004b00 <GenerateJulia>:
// Generuj fraktal Julii
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void GenerateJulia(unsigned short size_x, unsigned short size_y, unsigned short offset_x, unsigned short offset_y, unsigned short zoom, unsigned short * buffer)
{
 8004b00:	b490      	push	{r4, r7}
 8004b02:	b08a      	sub	sp, #40	@ 0x28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4604      	mov	r4, r0
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	80fb      	strh	r3, [r7, #6]
 8004b12:	4603      	mov	r3, r0
 8004b14:	80bb      	strh	r3, [r7, #4]
 8004b16:	460b      	mov	r3, r1
 8004b18:	807b      	strh	r3, [r7, #2]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	803b      	strh	r3, [r7, #0]
	float num_real, num_img;
	float radius;
	unsigned short i;
	unsigned short x,y;

	for (y=0; y<size_y; y++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	82fb      	strh	r3, [r7, #22]
 8004b22:	e08a      	b.n	8004c3a <GenerateJulia+0x13a>
	{
		for (x=0; x<size_x; x++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	833b      	strh	r3, [r7, #24]
 8004b28:	e07f      	b.n	8004c2a <GenerateJulia+0x12a>
		{
			num_real = y - offset_y;
 8004b2a:	8afa      	ldrh	r2, [r7, #22]
 8004b2c:	883b      	ldrh	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			num_real = num_real / zoom;
 8004b3c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b46:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			num_img = x - offset_x;
 8004b52:	8b3a      	ldrh	r2, [r7, #24]
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	edc7 7a08 	vstr	s15, [r7, #32]
			num_img = num_img / zoom;
 8004b64:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8004b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b76:	edc7 7a08 	vstr	s15, [r7, #32]
			i=0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	837b      	strh	r3, [r7, #26]
			radius = 0;
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
			while ((i<ITERATION-1) && (radius < 2))
 8004b84:	e032      	b.n	8004bec <GenerateJulia+0xec>
			{
				tmp1 = num_real * num_real;
 8004b86:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004b8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b8e:	edc7 7a04 	vstr	s15, [r7, #16]
				tmp2 = num_img * num_img;
 8004b92:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b9a:	edc7 7a03 	vstr	s15, [r7, #12]
				num_img = 2*num_real*num_img + fImag;
 8004b9e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004ba2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004ba6:	edd7 7a08 	vldr	s15, [r7, #32]
 8004baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bae:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <GenerateJulia+0x150>)
 8004bb0:	edd3 7a00 	vldr	s15, [r3]
 8004bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb8:	edc7 7a08 	vstr	s15, [r7, #32]
				num_real = tmp1 - tmp2 + fReal;
 8004bbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bc8:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <GenerateJulia+0x154>)
 8004bca:	edd3 7a00 	vldr	s15, [r3]
 8004bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				radius = tmp1 + tmp2;
 8004bd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be2:	edc7 7a07 	vstr	s15, [r7, #28]
				i++;
 8004be6:	8b7b      	ldrh	r3, [r7, #26]
 8004be8:	3301      	adds	r3, #1
 8004bea:	837b      	strh	r3, [r7, #26]
			while ((i<ITERATION-1) && (radius < 2))
 8004bec:	8b7b      	ldrh	r3, [r7, #26]
 8004bee:	2b4e      	cmp	r3, #78	@ 0x4e
 8004bf0:	d808      	bhi.n	8004c04 <GenerateJulia+0x104>
 8004bf2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bf6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c02:	d4c0      	bmi.n	8004b86 <GenerateJulia+0x86>
			}
			/* Store the value in the buffer */
			buffer[x+y*size_x] = i*20;
 8004c04:	8b3a      	ldrh	r2, [r7, #24]
 8004c06:	8afb      	ldrh	r3, [r7, #22]
 8004c08:	88f9      	ldrh	r1, [r7, #6]
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	4413      	add	r3, r2
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c14:	441a      	add	r2, r3
 8004c16:	8b7b      	ldrh	r3, [r7, #26]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	0089      	lsls	r1, r1, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	8013      	strh	r3, [r2, #0]
		for (x=0; x<size_x; x++)
 8004c24:	8b3b      	ldrh	r3, [r7, #24]
 8004c26:	3301      	adds	r3, #1
 8004c28:	833b      	strh	r3, [r7, #24]
 8004c2a:	8b3a      	ldrh	r2, [r7, #24]
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	f4ff af7b 	bcc.w	8004b2a <GenerateJulia+0x2a>
	for (y=0; y<size_y; y++)
 8004c34:	8afb      	ldrh	r3, [r7, #22]
 8004c36:	3301      	adds	r3, #1
 8004c38:	82fb      	strh	r3, [r7, #22]
 8004c3a:	8afa      	ldrh	r2, [r7, #22]
 8004c3c:	88bb      	ldrh	r3, [r7, #4]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	f4ff af70 	bcc.w	8004b24 <GenerateJulia+0x24>
		}
	}
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	3728      	adds	r7, #40	@ 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc90      	pop	{r4, r7}
 8004c4e:	4770      	bx	lr
 8004c50:	2407196c 	.word	0x2407196c
 8004c54:	24071968 	.word	0x24071968

08004c58 <GenerateMandelbrot>:
// Generuj fraktal Mandelbrota
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void GenerateMandelbrot(float centre_X, float centre_Y, float Zoom, unsigned short IterationMax, unsigned short * buffer)
{
 8004c58:	b490      	push	{r4, r7}
 8004c5a:	b0a2      	sub	sp, #136	@ 0x88
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004c62:	edc7 0a04 	vstr	s1, [r7, #16]
 8004c66:	ed87 1a03 	vstr	s2, [r7, #12]
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	6079      	str	r1, [r7, #4]
 8004c6e:	817b      	strh	r3, [r7, #10]
	double X_Min = centre_X - 1.0/Zoom;
 8004c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c74:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c7c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004c80:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 8004c84:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004c88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004c8c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
	double X_Max = centre_X + 1.0/Zoom;
 8004c90:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c94:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c9c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004ca0:	eeb7 4b00 	vmov.f64	d4, #112	@ 0x3f800000  1.0
 8004ca4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8004ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cac:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	double Y_Min = centre_Y - (DISP_Y_SIZE-CONTROL_SIZE_Y) / (DISP_X_SIZE * Zoom);
 8004cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb4:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8004e70 <GenerateMandelbrot+0x218>
 8004cb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cbc:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8004e74 <GenerateMandelbrot+0x21c>
 8004cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cd0:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
	double Y_Max = centre_Y + (DISP_Y_SIZE-CONTROL_SIZE_Y) / (DISP_X_SIZE * Zoom);
 8004cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cd8:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8004e70 <GenerateMandelbrot+0x218>
 8004cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ce0:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8004e74 <GenerateMandelbrot+0x21c>
 8004ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004cf4:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
	double dx = (X_Max - X_Min) / DISP_X_SIZE;
 8004cf8:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8004cfc:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8004d00:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d04:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8004e60 <GenerateMandelbrot+0x208>
 8004d08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d0c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
	double dy = (Y_Max - Y_Min) / (DISP_Y_SIZE-CONTROL_SIZE_Y) ;
 8004d10:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8004d14:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8004d18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004d1c:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 8004e68 <GenerateMandelbrot+0x210>
 8004d20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d24:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
	double y = Y_Min;
 8004d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d2c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	int n;
	//double c;
	double x, Zx, Zy, Zx2, Zy2, Zxy;

	//for (j = 0; j < (DISP_Y_SIZE-CONTROL_SIZE_Y); j++)
	for (j=0; j<DISP_Y_SIZE; j++)
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8004d36:	e086      	b.n	8004e46 <GenerateMandelbrot+0x1ee>
	{
		x = X_Min;
 8004d38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d3c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		for (i = 0; i < DISP_X_SIZE; i++)
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8004d46:	e06c      	b.n	8004e22 <GenerateMandelbrot+0x1ca>
		{
			Zx = x;
 8004d48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004d4c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
			Zy = y;
 8004d50:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004d54:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			n = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	67bb      	str	r3, [r7, #120]	@ 0x78
			while (n < IterationMax)
 8004d5c:	e039      	b.n	8004dd2 <GenerateMandelbrot+0x17a>
			{
				Zx2 = Zx * Zx;
 8004d5e:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8004d62:	ee27 7b07 	vmul.f64	d7, d7, d7
 8004d66:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
				Zy2 = Zy * Zy;
 8004d6a:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8004d6e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8004d72:	ed87 7b08 	vstr	d7, [r7, #32]
				Zxy = 2.0 * Zx * Zy;
 8004d76:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8004d7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d7e:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8004d82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004d86:	ed87 7b06 	vstr	d7, [r7, #24]
				Zx = Zx2 - Zy2 + x;
 8004d8a:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8004d8e:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004d96:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8004d9a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d9e:	ed87 7b1a 	vstr	d7, [r7, #104]	@ 0x68
				Zy = Zxy + y;
 8004da2:	ed97 6b06 	vldr	d6, [r7, #24]
 8004da6:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
 8004daa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dae:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
				if(Zx2 + Zy2 > 16.0)
 8004db2:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8004db6:	ed97 7b08 	vldr	d7, [r7, #32]
 8004dba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dbe:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 8004dc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dca:	dc07      	bgt.n	8004ddc <GenerateMandelbrot+0x184>
				{
					break;
				}
				n++;
 8004dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dce:	3301      	adds	r3, #1
 8004dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
			while (n < IterationMax)
 8004dd2:	897b      	ldrh	r3, [r7, #10]
 8004dd4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	dbc1      	blt.n	8004d5e <GenerateMandelbrot+0x106>
 8004dda:	e000      	b.n	8004dde <GenerateMandelbrot+0x186>
					break;
 8004ddc:	bf00      	nop
			}
			x += dx;
 8004dde:	ed97 6b1c 	vldr	d6, [r7, #112]	@ 0x70
 8004de2:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8004de6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dea:	ed87 7b1c 	vstr	d7, [r7, #112]	@ 0x70

			buffer[i+j*DISP_X_SIZE] = n*chMnozPalety;
 8004dee:	4b22      	ldr	r3, [pc, #136]	@ (8004e78 <GenerateMandelbrot+0x220>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	461c      	mov	r4, r3
 8004df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004df6:	b299      	uxth	r1, r3
 8004df8:	f8b7 007c 	ldrh.w	r0, [r7, #124]	@ 0x7c
 8004dfc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	019b      	lsls	r3, r3, #6
 8004e08:	4403      	add	r3, r0
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	fb14 f201 	smulbb	r2, r4, r1
 8004e14:	b292      	uxth	r2, r2
 8004e16:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < DISP_X_SIZE; i++)
 8004e18:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8004e22:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8004e26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e2a:	d38d      	bcc.n	8004d48 <GenerateMandelbrot+0xf0>
		}
		y += dy;
 8004e2c:	ed97 6b20 	vldr	d6, [r7, #128]	@ 0x80
 8004e30:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8004e34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e38:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
	for (j=0; j<DISP_Y_SIZE; j++)
 8004e3c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004e40:	3301      	adds	r3, #1
 8004e42:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8004e46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8004e4a:	2bef      	cmp	r3, #239	@ 0xef
 8004e4c:	f67f af74 	bls.w	8004d38 <GenerateMandelbrot+0xe0>
	}
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	3788      	adds	r7, #136	@ 0x88
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc90      	pop	{r4, r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	f3af 8000 	nop.w
 8004e60:	00000000 	.word	0x00000000
 8004e64:	40740000 	.word	0x40740000
 8004e68:	00000000 	.word	0x00000000
 8004e6c:	405c0000 	.word	0x405c0000
 8004e70:	43a00000 	.word	0x43a00000
 8004e74:	42e00000 	.word	0x42e00000
 8004e78:	2407197c 	.word	0x2407197c

08004e7c <MinalCzas>:
// Liczy upływ czasu
// Parametry: nStart - licznik czasu na na początku pomiaru
// Zwraca: ilość czasu w setkach us jaki upłynął do podanego czasu startu
////////////////////////////////////////////////////////////////////////////////
unsigned int MinalCzas(unsigned int nStart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	unsigned int nCzas, nCzasAkt;

	nCzasAkt = HAL_GetTick();
 8004e84:	f000 fbaa 	bl	80055dc <HAL_GetTick>
 8004e88:	60b8      	str	r0, [r7, #8]
	if (nCzasAkt >= nStart)
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d304      	bcc.n	8004e9c <MinalCzas+0x20>
		nCzas = nCzasAkt - nStart;
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	e004      	b.n	8004ea6 <MinalCzas+0x2a>
	else
		nCzas = 0xFFFFFFFF - nStart + nCzasAkt;
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]
	return nCzas;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <WyswietlPomoc>:
// wyświetla komunikat o sposobie podłączenia
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlPomoc(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
	if (chRysujRaz)
 8004eb4:	4b30      	ldr	r3, [pc, #192]	@ (8004f78 <WyswietlPomoc+0xc8>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05a      	beq.n	8004f72 <WyswietlPomoc+0xc2>
	{
		setFont(MidFont);
 8004ebc:	482f      	ldr	r0, [pc, #188]	@ (8004f7c <WyswietlPomoc+0xcc>)
 8004ebe:	f7ff f937 	bl	8004130 <setFont>
		setColor(YELLOW);
 8004ec2:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8004ec6:	f7fe fda3 	bl	8003a10 <setColor>
		sprintf(chNapis, "Kamera DCMI");
 8004eca:	492d      	ldr	r1, [pc, #180]	@ (8004f80 <WyswietlPomoc+0xd0>)
 8004ecc:	482d      	ldr	r0, [pc, #180]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004ece:	f00e fc43 	bl	8013758 <siprintf>
		print(chNapis, 0, 0*20, 0);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	482a      	ldr	r0, [pc, #168]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004eda:	f7ff f949 	bl	8004170 <print>
		setColor(GREEN);
 8004ede:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004ee2:	f7fe fd95 	bl	8003a10 <setColor>
		sprintf(chNapis, "XCLK (PF9): CN11.56");
 8004ee6:	4928      	ldr	r1, [pc, #160]	@ (8004f88 <WyswietlPomoc+0xd8>)
 8004ee8:	4826      	ldr	r0, [pc, #152]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004eea:	f00e fc35 	bl	8013758 <siprintf>
		print(chNapis, 0, 1*20, 0);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2214      	movs	r2, #20
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4823      	ldr	r0, [pc, #140]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004ef6:	f7ff f93b 	bl	8004170 <print>
		sprintf(chNapis, "PIXCLK (PA6): CN12.14");
 8004efa:	4924      	ldr	r1, [pc, #144]	@ (8004f8c <WyswietlPomoc+0xdc>)
 8004efc:	4821      	ldr	r0, [pc, #132]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004efe:	f00e fc2b 	bl	8013758 <siprintf>
		print(chNapis, 0, 2*20, 0);
 8004f02:	2300      	movs	r3, #0
 8004f04:	2228      	movs	r2, #40	@ 0x28
 8004f06:	2100      	movs	r1, #0
 8004f08:	481e      	ldr	r0, [pc, #120]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f0a:	f7ff f931 	bl	8004170 <print>
		sprintf(chNapis, "HSYNC (PA4): CN11.32");
 8004f0e:	4920      	ldr	r1, [pc, #128]	@ (8004f90 <WyswietlPomoc+0xe0>)
 8004f10:	481c      	ldr	r0, [pc, #112]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f12:	f00e fc21 	bl	8013758 <siprintf>
		print(chNapis, 0, 3*20, 0);
 8004f16:	2300      	movs	r3, #0
 8004f18:	223c      	movs	r2, #60	@ 0x3c
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4819      	ldr	r0, [pc, #100]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f1e:	f7ff f927 	bl	8004170 <print>
		sprintf(chNapis, "VSYNC (PB7): CN11.21");
 8004f22:	491c      	ldr	r1, [pc, #112]	@ (8004f94 <WyswietlPomoc+0xe4>)
 8004f24:	4817      	ldr	r0, [pc, #92]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f26:	f00e fc17 	bl	8013758 <siprintf>
		print(chNapis, 0, 4*20, 0);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2250      	movs	r2, #80	@ 0x50
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4814      	ldr	r0, [pc, #80]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f32:	f7ff f91d 	bl	8004170 <print>
		sprintf(chNapis, "SCK (PF14): CN12.50");
 8004f36:	4918      	ldr	r1, [pc, #96]	@ (8004f98 <WyswietlPomoc+0xe8>)
 8004f38:	4812      	ldr	r0, [pc, #72]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f3a:	f00e fc0d 	bl	8013758 <siprintf>
		print(chNapis, 0, 5*20, 0);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2264      	movs	r2, #100	@ 0x64
 8004f42:	2100      	movs	r1, #0
 8004f44:	480f      	ldr	r0, [pc, #60]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f46:	f7ff f913 	bl	8004170 <print>
		sprintf(chNapis, "SDA (PF15): CN12.60");
 8004f4a:	4914      	ldr	r1, [pc, #80]	@ (8004f9c <WyswietlPomoc+0xec>)
 8004f4c:	480d      	ldr	r0, [pc, #52]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f4e:	f00e fc03 	bl	8013758 <siprintf>
		print(chNapis, 0, 6*20, 0);
 8004f52:	2300      	movs	r3, #0
 8004f54:	2278      	movs	r2, #120	@ 0x78
 8004f56:	2100      	movs	r1, #0
 8004f58:	480a      	ldr	r0, [pc, #40]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f5a:	f7ff f909 	bl	8004170 <print>
		sprintf(chNapis, "PWDN (PF11): CN12.62");
 8004f5e:	4910      	ldr	r1, [pc, #64]	@ (8004fa0 <WyswietlPomoc+0xf0>)
 8004f60:	4808      	ldr	r0, [pc, #32]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f62:	f00e fbf9 	bl	8013758 <siprintf>
		print(chNapis, 0, 7*20, 0);
 8004f66:	2300      	movs	r3, #0
 8004f68:	228c      	movs	r2, #140	@ 0x8c
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4805      	ldr	r0, [pc, #20]	@ (8004f84 <WyswietlPomoc+0xd4>)
 8004f6e:	f7ff f8ff 	bl	8004170 <print>
	}
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	24000014 	.word	0x24000014
 8004f7c:	080171f8 	.word	0x080171f8
 8004f80:	080167c8 	.word	0x080167c8
 8004f84:	2404c138 	.word	0x2404c138
 8004f88:	080167d4 	.word	0x080167d4
 8004f8c:	080167e8 	.word	0x080167e8
 8004f90:	08016800 	.word	0x08016800
 8004f94:	08016818 	.word	0x08016818
 8004f98:	08016830 	.word	0x08016830
 8004f9c:	08016844 	.word	0x08016844
 8004fa0:	08016858 	.word	0x08016858

08004fa4 <WyswietlAnalizeEth>:
// wyświetla okno z wynikami analizy ramki eth
// Parametry:
// Zwraca: nic
////////////////////////////////////////////////////////////////////////////////
void WyswietlAnalizeEth(uint8_t* chAdrEthNad, uint8_t* chAdrIPNad)
{
 8004fa4:	b5b0      	push	{r4, r5, r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af04      	add	r7, sp, #16
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	if (chRysujRaz)
 8004fae:	4b32      	ldr	r3, [pc, #200]	@ (8005078 <WyswietlAnalizeEth+0xd4>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d015      	beq.n	8004fe2 <WyswietlAnalizeEth+0x3e>
		{
			LCD_clear();
 8004fb6:	f7fe fb9d 	bl	80036f4 <LCD_clear>
			setFont(MidFont);
 8004fba:	4830      	ldr	r0, [pc, #192]	@ (800507c <WyswietlAnalizeEth+0xd8>)
 8004fbc:	f7ff f8b8 	bl	8004130 <setFont>
			setColor(GREEN);
 8004fc0:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004fc4:	f7fe fd24 	bl	8003a10 <setColor>
			sprintf(chNapis, "Analiza ramki Ethernet");
 8004fc8:	492d      	ldr	r1, [pc, #180]	@ (8005080 <WyswietlAnalizeEth+0xdc>)
 8004fca:	482e      	ldr	r0, [pc, #184]	@ (8005084 <WyswietlAnalizeEth+0xe0>)
 8004fcc:	f00e fbc4 	bl	8013758 <siprintf>
			print(chNapis, 10, 0, 0);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	210a      	movs	r1, #10
 8004fd6:	482b      	ldr	r0, [pc, #172]	@ (8005084 <WyswietlAnalizeEth+0xe0>)
 8004fd8:	f7ff f8ca 	bl	8004170 <print>
			chRysujRaz = 0;
 8004fdc:	4b26      	ldr	r3, [pc, #152]	@ (8005078 <WyswietlAnalizeEth+0xd4>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
		}
		setColor(YELLOW);
 8004fe2:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8004fe6:	f7fe fd13 	bl	8003a10 <setColor>
		sprintf(chNapis, "Adr Eth Nad: %.2X:%.2X:%.2X:%.2X:%.2X:%.2X", *(chAdrEthNad+0), *(chAdrEthNad+1), *(chAdrEthNad+2), *(chAdrEthNad+3), *(chAdrEthNad+4), *(chAdrEthNad+6));	//adres ramki
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	461c      	mov	r4, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	461d      	mov	r5, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3303      	adds	r3, #3
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	4619      	mov	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3306      	adds	r3, #6
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	9303      	str	r3, [sp, #12]
 8005018:	9002      	str	r0, [sp, #8]
 800501a:	9101      	str	r1, [sp, #4]
 800501c:	9200      	str	r2, [sp, #0]
 800501e:	462b      	mov	r3, r5
 8005020:	4622      	mov	r2, r4
 8005022:	4919      	ldr	r1, [pc, #100]	@ (8005088 <WyswietlAnalizeEth+0xe4>)
 8005024:	4817      	ldr	r0, [pc, #92]	@ (8005084 <WyswietlAnalizeEth+0xe0>)
 8005026:	f00e fb97 	bl	8013758 <siprintf>
		print(chNapis, 20, 20, 0);
 800502a:	2300      	movs	r3, #0
 800502c:	2214      	movs	r2, #20
 800502e:	2114      	movs	r1, #20
 8005030:	4814      	ldr	r0, [pc, #80]	@ (8005084 <WyswietlAnalizeEth+0xe0>)
 8005032:	f7ff f89d 	bl	8004170 <print>
		sprintf(chNapis, "Adr IP Nad: %.3d.%.3d.%.3d,%.3d", *(chAdrIPNad+0), *(chAdrIPNad+1), *(chAdrIPNad+2), *(chAdrIPNad+3));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	3301      	adds	r3, #1
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	3302      	adds	r3, #2
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	3303      	adds	r3, #3
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	9200      	str	r2, [sp, #0]
 8005056:	4603      	mov	r3, r0
 8005058:	460a      	mov	r2, r1
 800505a:	490c      	ldr	r1, [pc, #48]	@ (800508c <WyswietlAnalizeEth+0xe8>)
 800505c:	4809      	ldr	r0, [pc, #36]	@ (8005084 <WyswietlAnalizeEth+0xe0>)
 800505e:	f00e fb7b 	bl	8013758 <siprintf>
		print(chNapis, 20, 40, 0);
 8005062:	2300      	movs	r3, #0
 8005064:	2228      	movs	r2, #40	@ 0x28
 8005066:	2114      	movs	r1, #20
 8005068:	4806      	ldr	r0, [pc, #24]	@ (8005084 <WyswietlAnalizeEth+0xe0>)
 800506a:	f7ff f881 	bl	8004170 <print>
		sprintf(chNapis, "Fraktale");
		print(chNapis, 20, 180, 0);
		sprintf(chNapis, "Pomocy, kabelki!");
		print(chNapis, 20, 200, 0);*/

}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bdb0      	pop	{r4, r5, r7, pc}
 8005076:	bf00      	nop
 8005078:	24000014 	.word	0x24000014
 800507c:	080171f8 	.word	0x080171f8
 8005080:	08016870 	.word	0x08016870
 8005084:	2404c138 	.word	0x2404c138
 8005088:	08016888 	.word	0x08016888
 800508c:	080168b4 	.word	0x080168b4

08005090 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	@ 0x30
 8005094:	af00      	add	r7, sp, #0
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800509a:	2300      	movs	r3, #0
 800509c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <BSP_LED_Init+0x28>
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d006      	beq.n	80050b8 <BSP_LED_Init+0x28>
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d003      	beq.n	80050b8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80050b0:	f06f 0301 	mvn.w	r3, #1
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b6:	e055      	b.n	8005164 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80050be:	4b2c      	ldr	r3, [pc, #176]	@ (8005170 <BSP_LED_Init+0xe0>)
 80050c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005170 <BSP_LED_Init+0xe0>)
 80050c6:	f043 0302 	orr.w	r3, r3, #2
 80050ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050ce:	4b28      	ldr	r3, [pc, #160]	@ (8005170 <BSP_LED_Init+0xe0>)
 80050d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	e021      	b.n	8005122 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d10f      	bne.n	8005104 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80050e4:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <BSP_LED_Init+0xe0>)
 80050e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ea:	4a21      	ldr	r2, [pc, #132]	@ (8005170 <BSP_LED_Init+0xe0>)
 80050ec:	f043 0310 	orr.w	r3, r3, #16
 80050f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005170 <BSP_LED_Init+0xe0>)
 80050f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	e00e      	b.n	8005122 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8005104:	4b1a      	ldr	r3, [pc, #104]	@ (8005170 <BSP_LED_Init+0xe0>)
 8005106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800510a:	4a19      	ldr	r2, [pc, #100]	@ (8005170 <BSP_LED_Init+0xe0>)
 800510c:	f043 0302 	orr.w	r3, r3, #2
 8005110:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005114:	4b16      	ldr	r3, [pc, #88]	@ (8005170 <BSP_LED_Init+0xe0>)
 8005116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <BSP_LED_Init+0xe4>)
 8005126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800512c:	2301      	movs	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005130:	2300      	movs	r3, #0
 8005132:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005134:	2303      	movs	r3, #3
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	4a0f      	ldr	r2, [pc, #60]	@ (8005178 <BSP_LED_Init+0xe8>)
 800513c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005140:	f107 0218 	add.w	r2, r7, #24
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f005 f902 	bl	800a350 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	4a0a      	ldr	r2, [pc, #40]	@ (8005178 <BSP_LED_Init+0xe8>)
 8005150:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	4a07      	ldr	r2, [pc, #28]	@ (8005174 <BSP_LED_Init+0xe4>)
 8005158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800515c:	2200      	movs	r2, #0
 800515e:	4619      	mov	r1, r3
 8005160:	f005 faa6 	bl	800a6b0 <HAL_GPIO_WritePin>
  }

  return ret;
 8005164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005166:	4618      	mov	r0, r3
 8005168:	3730      	adds	r7, #48	@ 0x30
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	58024400 	.word	0x58024400
 8005174:	0801784c 	.word	0x0801784c
 8005178:	2400001c 	.word	0x2400001c

0800517c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <BSP_LED_On+0x28>
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d006      	beq.n	80051a4 <BSP_LED_On+0x28>
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d003      	beq.n	80051a4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800519c:	f06f 0301 	mvn.w	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	e00b      	b.n	80051bc <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	4a08      	ldr	r2, [pc, #32]	@ (80051c8 <BSP_LED_On+0x4c>)
 80051a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	4a07      	ldr	r2, [pc, #28]	@ (80051cc <BSP_LED_On+0x50>)
 80051b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b4:	2201      	movs	r2, #1
 80051b6:	4619      	mov	r1, r3
 80051b8:	f005 fa7a 	bl	800a6b0 <HAL_GPIO_WritePin>
  }

  return ret;
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	2400001c 	.word	0x2400001c
 80051cc:	0801784c 	.word	0x0801784c

080051d0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d009      	beq.n	80051f8 <BSP_LED_Off+0x28>
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d006      	beq.n	80051f8 <BSP_LED_Off+0x28>
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d003      	beq.n	80051f8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80051f0:	f06f 0301 	mvn.w	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	e00b      	b.n	8005210 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	4a08      	ldr	r2, [pc, #32]	@ (800521c <BSP_LED_Off+0x4c>)
 80051fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4a07      	ldr	r2, [pc, #28]	@ (8005220 <BSP_LED_Off+0x50>)
 8005204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005208:	2200      	movs	r2, #0
 800520a:	4619      	mov	r1, r3
 800520c:	f005 fa50 	bl	800a6b0 <HAL_GPIO_WritePin>
  }

  return ret;
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	2400001c 	.word	0x2400001c
 8005220:	0801784c 	.word	0x0801784c

08005224 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <BSP_LED_Toggle+0x28>
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d006      	beq.n	800524c <BSP_LED_Toggle+0x28>
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d003      	beq.n	800524c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005244:	f06f 0301 	mvn.w	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e00b      	b.n	8005264 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	4a08      	ldr	r2, [pc, #32]	@ (8005270 <BSP_LED_Toggle+0x4c>)
 8005250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	4907      	ldr	r1, [pc, #28]	@ (8005274 <BSP_LED_Toggle+0x50>)
 8005258:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f005 fa3f 	bl	800a6e2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8005264:	68fb      	ldr	r3, [r7, #12]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	2400001c 	.word	0x2400001c
 8005274:	0801784c 	.word	0x0801784c

08005278 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	460a      	mov	r2, r1
 8005282:	71fb      	strb	r3, [r7, #7]
 8005284:	4613      	mov	r3, r2
 8005286:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8005288:	4b2e      	ldr	r3, [pc, #184]	@ (8005344 <BSP_PB_Init+0xcc>)
 800528a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800528e:	4a2d      	ldr	r2, [pc, #180]	@ (8005344 <BSP_PB_Init+0xcc>)
 8005290:	f043 0304 	orr.w	r3, r3, #4
 8005294:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005298:	4b2a      	ldr	r3, [pc, #168]	@ (8005344 <BSP_PB_Init+0xcc>)
 800529a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80052a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80052ac:	2302      	movs	r3, #2
 80052ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80052b0:	2302      	movs	r3, #2
 80052b2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80052b4:	79bb      	ldrb	r3, [r7, #6]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10c      	bne.n	80052d4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	4a21      	ldr	r2, [pc, #132]	@ (8005348 <BSP_PB_Init+0xd0>)
 80052c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c6:	f107 020c 	add.w	r2, r7, #12
 80052ca:	4611      	mov	r1, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f005 f83f 	bl	800a350 <HAL_GPIO_Init>
 80052d2:	e031      	b.n	8005338 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80052d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80052d8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80052da:	79fb      	ldrb	r3, [r7, #7]
 80052dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <BSP_PB_Init+0xd0>)
 80052de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e2:	f107 020c 	add.w	r2, r7, #12
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f005 f831 	bl	800a350 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4a16      	ldr	r2, [pc, #88]	@ (800534c <BSP_PB_Init+0xd4>)
 80052f4:	441a      	add	r2, r3
 80052f6:	79fb      	ldrb	r3, [r7, #7]
 80052f8:	4915      	ldr	r1, [pc, #84]	@ (8005350 <BSP_PB_Init+0xd8>)
 80052fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f004 ffd5 	bl	800a2b0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4a10      	ldr	r2, [pc, #64]	@ (800534c <BSP_PB_Init+0xd4>)
 800530c:	1898      	adds	r0, r3, r2
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	4a10      	ldr	r2, [pc, #64]	@ (8005354 <BSP_PB_Init+0xdc>)
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	461a      	mov	r2, r3
 8005318:	2100      	movs	r1, #0
 800531a:	f004 ffaa 	bl	800a272 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800531e:	2028      	movs	r0, #40	@ 0x28
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	4a0d      	ldr	r2, [pc, #52]	@ (8005358 <BSP_PB_Init+0xe0>)
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	2200      	movs	r2, #0
 800532a:	4619      	mov	r1, r3
 800532c:	f000 fa5e 	bl	80057ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005330:	2328      	movs	r3, #40	@ 0x28
 8005332:	4618      	mov	r0, r3
 8005334:	f000 fa74 	bl	8005820 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	58024400 	.word	0x58024400
 8005348:	24000028 	.word	0x24000028
 800534c:	24071980 	.word	0x24071980
 8005350:	08017854 	.word	0x08017854
 8005354:	2400002c 	.word	0x2400002c
 8005358:	24000030 	.word	0x24000030

0800535c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4a04      	ldr	r2, [pc, #16]	@ (800537c <BSP_PB_IRQHandler+0x20>)
 800536c:	4413      	add	r3, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f004 ffb2 	bl	800a2d8 <HAL_EXTI_IRQHandler>
}
 8005374:	bf00      	nop
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	24071980 	.word	0x24071980

08005380 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8005390:	79fb      	ldrb	r3, [r7, #7]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005396:	f06f 0301 	mvn.w	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e018      	b.n	80053d0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	2294      	movs	r2, #148	@ 0x94
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	4a0d      	ldr	r2, [pc, #52]	@ (80053dc <BSP_COM_Init+0x5c>)
 80053a8:	4413      	add	r3, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f86e 	bl	800548c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	2294      	movs	r2, #148	@ 0x94
 80053b4:	fb02 f303 	mul.w	r3, r2, r3
 80053b8:	4a08      	ldr	r2, [pc, #32]	@ (80053dc <BSP_COM_Init+0x5c>)
 80053ba:	4413      	add	r3, r2
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f80e 	bl	80053e0 <MX_USART3_Init>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80053ca:	f06f 0303 	mvn.w	r3, #3
 80053ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80053d0:	68fb      	ldr	r3, [r7, #12]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	24071988 	.word	0x24071988

080053e0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80053ea:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <MX_USART3_Init+0x60>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	220c      	movs	r2, #12
 80053fe:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	895b      	ldrh	r3, [r3, #10]
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	891b      	ldrh	r3, [r3, #8]
 8005416:	461a      	mov	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	899b      	ldrh	r3, [r3, #12]
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800542c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f009 fdbe 	bl	800efb0 <HAL_UART_Init>
 8005434:	4603      	mov	r3, r0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	24000018 	.word	0x24000018

08005444 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <__io_putchar+0x30>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	2394      	movs	r3, #148	@ 0x94
 8005454:	fb02 f303 	mul.w	r3, r2, r3
 8005458:	4a07      	ldr	r2, [pc, #28]	@ (8005478 <__io_putchar+0x34>)
 800545a:	1898      	adds	r0, r3, r2
 800545c:	1d39      	adds	r1, r7, #4
 800545e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005462:	2201      	movs	r2, #1
 8005464:	f009 fdf4 	bl	800f050 <HAL_UART_Transmit>
  return ch;
 8005468:	687b      	ldr	r3, [r7, #4]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	24071a1c 	.word	0x24071a1c
 8005478:	24071988 	.word	0x24071988

0800547c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005480:	2000      	movs	r0, #0
 8005482:	f7fd f8db 	bl	800263c <BSP_PB_Callback>
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	@ 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8005494:	4b27      	ldr	r3, [pc, #156]	@ (8005534 <COM1_MspInit+0xa8>)
 8005496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800549a:	4a26      	ldr	r2, [pc, #152]	@ (8005534 <COM1_MspInit+0xa8>)
 800549c:	f043 0308 	orr.w	r3, r3, #8
 80054a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80054a4:	4b23      	ldr	r3, [pc, #140]	@ (8005534 <COM1_MspInit+0xa8>)
 80054a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80054b2:	4b20      	ldr	r3, [pc, #128]	@ (8005534 <COM1_MspInit+0xa8>)
 80054b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <COM1_MspInit+0xa8>)
 80054ba:	f043 0308 	orr.w	r3, r3, #8
 80054be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80054c2:	4b1c      	ldr	r3, [pc, #112]	@ (8005534 <COM1_MspInit+0xa8>)
 80054c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80054d0:	4b18      	ldr	r3, [pc, #96]	@ (8005534 <COM1_MspInit+0xa8>)
 80054d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054d6:	4a17      	ldr	r2, [pc, #92]	@ (8005534 <COM1_MspInit+0xa8>)
 80054d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <COM1_MspInit+0xa8>)
 80054e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80054ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80054f4:	2302      	movs	r3, #2
 80054f6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80054f8:	2302      	movs	r3, #2
 80054fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80054fc:	2301      	movs	r3, #1
 80054fe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8005500:	2307      	movs	r3, #7
 8005502:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	4619      	mov	r1, r3
 800550a:	480b      	ldr	r0, [pc, #44]	@ (8005538 <COM1_MspInit+0xac>)
 800550c:	f004 ff20 	bl	800a350 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8005510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005514:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005516:	2302      	movs	r3, #2
 8005518:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800551a:	2307      	movs	r3, #7
 800551c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	4619      	mov	r1, r3
 8005524:	4804      	ldr	r0, [pc, #16]	@ (8005538 <COM1_MspInit+0xac>)
 8005526:	f004 ff13 	bl	800a350 <HAL_GPIO_Init>
}
 800552a:	bf00      	nop
 800552c:	3728      	adds	r7, #40	@ 0x28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	58024400 	.word	0x58024400
 8005538:	58020c00 	.word	0x58020c00

0800553c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005542:	2003      	movs	r0, #3
 8005544:	f000 f947 	bl	80057d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005548:	f006 fde0 	bl	800c10c <HAL_RCC_GetSysClockFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <HAL_Init+0x68>)
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	4913      	ldr	r1, [pc, #76]	@ (80055a8 <HAL_Init+0x6c>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
 8005564:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005566:	4b0f      	ldr	r3, [pc, #60]	@ (80055a4 <HAL_Init+0x68>)
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	4a0e      	ldr	r2, [pc, #56]	@ (80055a8 <HAL_Init+0x6c>)
 8005570:	5cd3      	ldrb	r3, [r2, r3]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
 800557c:	4a0b      	ldr	r2, [pc, #44]	@ (80055ac <HAL_Init+0x70>)
 800557e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005580:	4a0b      	ldr	r2, [pc, #44]	@ (80055b0 <HAL_Init+0x74>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005586:	200f      	movs	r0, #15
 8005588:	f7fd fc4e 	bl	8002e28 <HAL_InitTick>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e002      	b.n	800559c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005596:	f7fd f86b 	bl	8002670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	58024400 	.word	0x58024400
 80055a8:	080168dc 	.word	0x080168dc
 80055ac:	24000004 	.word	0x24000004
 80055b0:	24000000 	.word	0x24000000

080055b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80055b8:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <HAL_IncTick+0x20>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <HAL_IncTick+0x24>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4413      	add	r3, r2
 80055c4:	4a04      	ldr	r2, [pc, #16]	@ (80055d8 <HAL_IncTick+0x24>)
 80055c6:	6013      	str	r3, [r2, #0]
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	24000038 	.word	0x24000038
 80055d8:	24071a20 	.word	0x24071a20

080055dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  return uwTick;
 80055e0:	4b03      	ldr	r3, [pc, #12]	@ (80055f0 <HAL_GetTick+0x14>)
 80055e2:	681b      	ldr	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	24071a20 	.word	0x24071a20

080055f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055fc:	f7ff ffee 	bl	80055dc <HAL_GetTick>
 8005600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d005      	beq.n	800561a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800560e:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <HAL_Delay+0x44>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800561a:	bf00      	nop
 800561c:	f7ff ffde 	bl	80055dc <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	429a      	cmp	r2, r3
 800562a:	d8f7      	bhi.n	800561c <HAL_Delay+0x28>
  {
  }
}
 800562c:	bf00      	nop
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	24000038 	.word	0x24000038

0800563c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005640:	4b03      	ldr	r3, [pc, #12]	@ (8005650 <HAL_GetREVID+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	0c1b      	lsrs	r3, r3, #16
}
 8005646:	4618      	mov	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	5c001000 	.word	0x5c001000

08005654 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800565c:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8005664:	4904      	ldr	r1, [pc, #16]	@ (8005678 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4313      	orrs	r3, r2
 800566a:	604b      	str	r3, [r1, #4]
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	58000400 	.word	0x58000400

0800567c <__NVIC_SetPriorityGrouping>:
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800568c:	4b0b      	ldr	r3, [pc, #44]	@ (80056bc <__NVIC_SetPriorityGrouping+0x40>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056a4:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <__NVIC_SetPriorityGrouping+0x44>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056aa:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <__NVIC_SetPriorityGrouping+0x40>)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	60d3      	str	r3, [r2, #12]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	e000ed00 	.word	0xe000ed00
 80056c0:	05fa0000 	.word	0x05fa0000

080056c4 <__NVIC_GetPriorityGrouping>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056c8:	4b04      	ldr	r3, [pc, #16]	@ (80056dc <__NVIC_GetPriorityGrouping+0x18>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	f003 0307 	and.w	r3, r3, #7
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	e000ed00 	.word	0xe000ed00

080056e0 <__NVIC_EnableIRQ>:
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db0b      	blt.n	800570a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	f003 021f 	and.w	r2, r3, #31
 80056f8:	4907      	ldr	r1, [pc, #28]	@ (8005718 <__NVIC_EnableIRQ+0x38>)
 80056fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2001      	movs	r0, #1
 8005702:	fa00 f202 	lsl.w	r2, r0, r2
 8005706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	e000e100 	.word	0xe000e100

0800571c <__NVIC_SetPriority>:
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	6039      	str	r1, [r7, #0]
 8005726:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005728:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	db0a      	blt.n	8005746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	490c      	ldr	r1, [pc, #48]	@ (8005768 <__NVIC_SetPriority+0x4c>)
 8005736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800573a:	0112      	lsls	r2, r2, #4
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	440b      	add	r3, r1
 8005740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005744:	e00a      	b.n	800575c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	4908      	ldr	r1, [pc, #32]	@ (800576c <__NVIC_SetPriority+0x50>)
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	3b04      	subs	r3, #4
 8005754:	0112      	lsls	r2, r2, #4
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	440b      	add	r3, r1
 800575a:	761a      	strb	r2, [r3, #24]
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	e000e100 	.word	0xe000e100
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <NVIC_EncodePriority>:
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	@ 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f1c3 0307 	rsb	r3, r3, #7
 800578a:	2b04      	cmp	r3, #4
 800578c:	bf28      	it	cs
 800578e:	2304      	movcs	r3, #4
 8005790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3304      	adds	r3, #4
 8005796:	2b06      	cmp	r3, #6
 8005798:	d902      	bls.n	80057a0 <NVIC_EncodePriority+0x30>
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3b03      	subs	r3, #3
 800579e:	e000      	b.n	80057a2 <NVIC_EncodePriority+0x32>
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	401a      	ands	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057b8:	f04f 31ff 	mov.w	r1, #4294967295
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	fa01 f303 	lsl.w	r3, r1, r3
 80057c2:	43d9      	mvns	r1, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c8:	4313      	orrs	r3, r2
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3724      	adds	r7, #36	@ 0x24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ff4c 	bl	800567c <__NVIC_SetPriorityGrouping>
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057fa:	f7ff ff63 	bl	80056c4 <__NVIC_GetPriorityGrouping>
 80057fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	6978      	ldr	r0, [r7, #20]
 8005806:	f7ff ffb3 	bl	8005770 <NVIC_EncodePriority>
 800580a:	4602      	mov	r2, r0
 800580c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005810:	4611      	mov	r1, r2
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff ff82 	bl	800571c <__NVIC_SetPriority>
}
 8005818:	bf00      	nop
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800582a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff ff56 	bl	80056e0 <__NVIC_EnableIRQ>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005840:	f3bf 8f5f 	dmb	sy
}
 8005844:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005846:	4b07      	ldr	r3, [pc, #28]	@ (8005864 <HAL_MPU_Disable+0x28>)
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	4a06      	ldr	r2, [pc, #24]	@ (8005864 <HAL_MPU_Disable+0x28>)
 800584c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005850:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005852:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <HAL_MPU_Disable+0x2c>)
 8005854:	2200      	movs	r2, #0
 8005856:	605a      	str	r2, [r3, #4]
}
 8005858:	bf00      	nop
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	e000ed00 	.word	0xe000ed00
 8005868:	e000ed90 	.word	0xe000ed90

0800586c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005874:	4a0b      	ldr	r2, [pc, #44]	@ (80058a4 <HAL_MPU_Enable+0x38>)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800587e:	4b0a      	ldr	r3, [pc, #40]	@ (80058a8 <HAL_MPU_Enable+0x3c>)
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	4a09      	ldr	r2, [pc, #36]	@ (80058a8 <HAL_MPU_Enable+0x3c>)
 8005884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005888:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800588a:	f3bf 8f4f 	dsb	sy
}
 800588e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005890:	f3bf 8f6f 	isb	sy
}
 8005894:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	e000ed90 	.word	0xe000ed90
 80058a8:	e000ed00 	.word	0xe000ed00

080058ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	785a      	ldrb	r2, [r3, #1]
 80058b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <HAL_MPU_ConfigRegion+0x7c>)
 80058ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80058bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005928 <HAL_MPU_ConfigRegion+0x7c>)
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <HAL_MPU_ConfigRegion+0x7c>)
 80058c2:	f023 0301 	bic.w	r3, r3, #1
 80058c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80058c8:	4a17      	ldr	r2, [pc, #92]	@ (8005928 <HAL_MPU_ConfigRegion+0x7c>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	7b1b      	ldrb	r3, [r3, #12]
 80058d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7adb      	ldrb	r3, [r3, #11]
 80058da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80058dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7a9b      	ldrb	r3, [r3, #10]
 80058e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80058e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7b5b      	ldrb	r3, [r3, #13]
 80058ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80058ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	7b9b      	ldrb	r3, [r3, #14]
 80058f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80058f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7bdb      	ldrb	r3, [r3, #15]
 80058fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80058fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	7a5b      	ldrb	r3, [r3, #9]
 8005902:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005904:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	7a1b      	ldrb	r3, [r3, #8]
 800590a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800590c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	7812      	ldrb	r2, [r2, #0]
 8005912:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005914:	4a04      	ldr	r2, [pc, #16]	@ (8005928 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005916:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005918:	6113      	str	r3, [r2, #16]
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	e000ed90 	.word	0xe000ed90

0800592c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005930:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_GetCurrentCPUID+0x24>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	2b07      	cmp	r3, #7
 800593c:	d101      	bne.n	8005942 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800593e:	2303      	movs	r3, #3
 8005940:	e000      	b.n	8005944 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8005942:	2301      	movs	r3, #1
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000ed00 	.word	0xe000ed00

08005954 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e054      	b.n	8005a10 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	7f5b      	ldrb	r3, [r3, #29]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc fea8 	bl	80026cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	791b      	ldrb	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10c      	bne.n	80059a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a22      	ldr	r2, [pc, #136]	@ (8005a18 <HAL_CRC_Init+0xc4>)
 8005990:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0218 	bic.w	r2, r2, #24
 80059a0:	609a      	str	r2, [r3, #8]
 80059a2:	e00c      	b.n	80059be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6899      	ldr	r1, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	461a      	mov	r2, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f834 	bl	8005a1c <HAL_CRCEx_Polynomial_Set>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e028      	b.n	8005a10 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	795b      	ldrb	r3, [r3, #5]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f04f 32ff 	mov.w	r2, #4294967295
 80059ce:	611a      	str	r2, [r3, #16]
 80059d0:	e004      	b.n	80059dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6912      	ldr	r2, [r2, #16]
 80059da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	04c11db7 	.word	0x04c11db7

08005a1c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005a2c:	231f      	movs	r3, #31
 8005a2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
 8005a3e:	e063      	b.n	8005b08 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005a40:	bf00      	nop
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1e5a      	subs	r2, r3, #1
 8005a46:	613a      	str	r2, [r7, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d009      	beq.n	8005a60 <HAL_CRCEx_Polynomial_Set+0x44>
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b18      	cmp	r3, #24
 8005a64:	d846      	bhi.n	8005af4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005a66:	a201      	add	r2, pc, #4	@ (adr r2, 8005a6c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005afb 	.word	0x08005afb
 8005a70:	08005af5 	.word	0x08005af5
 8005a74:	08005af5 	.word	0x08005af5
 8005a78:	08005af5 	.word	0x08005af5
 8005a7c:	08005af5 	.word	0x08005af5
 8005a80:	08005af5 	.word	0x08005af5
 8005a84:	08005af5 	.word	0x08005af5
 8005a88:	08005af5 	.word	0x08005af5
 8005a8c:	08005ae9 	.word	0x08005ae9
 8005a90:	08005af5 	.word	0x08005af5
 8005a94:	08005af5 	.word	0x08005af5
 8005a98:	08005af5 	.word	0x08005af5
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005af5 	.word	0x08005af5
 8005aa4:	08005af5 	.word	0x08005af5
 8005aa8:	08005af5 	.word	0x08005af5
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005af5 	.word	0x08005af5
 8005ab4:	08005af5 	.word	0x08005af5
 8005ab8:	08005af5 	.word	0x08005af5
 8005abc:	08005af5 	.word	0x08005af5
 8005ac0:	08005af5 	.word	0x08005af5
 8005ac4:	08005af5 	.word	0x08005af5
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	08005ad1 	.word	0x08005ad1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b06      	cmp	r3, #6
 8005ad4:	d913      	bls.n	8005afe <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005ada:	e010      	b.n	8005afe <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b07      	cmp	r3, #7
 8005ae0:	d90f      	bls.n	8005b02 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005ae6:	e00c      	b.n	8005b02 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	d90b      	bls.n	8005b06 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005af2:	e008      	b.n	8005b06 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	75fb      	strb	r3, [r7, #23]
        break;
 8005af8:	e006      	b.n	8005b08 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005afa:	bf00      	nop
 8005afc:	e004      	b.n	8005b08 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005afe:	bf00      	nop
 8005b00:	e002      	b.n	8005b08 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005b02:	bf00      	nop
 8005b04:	e000      	b.n	8005b08 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005b06:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10d      	bne.n	8005b2a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f023 0118 	bic.w	r1, r3, #24
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e069      	b.n	8005c1e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d102      	bne.n	8005b5c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fc fdda 	bl	8002710 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6819      	ldr	r1, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005c28 <HAL_DCMI_Init+0xf0>)
 8005b7e:	400b      	ands	r3, r1
 8005b80:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6819      	ldr	r1, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005b96:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005ba2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005bae:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005bba:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005bc6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d112      	bne.n	8005bfe <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7f1b      	ldrb	r3, [r3, #28]
 8005bdc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7f5b      	ldrb	r3, [r3, #29]
 8005be2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005be4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	7f9b      	ldrb	r3, [r3, #30]
 8005bea:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005bec:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	7fdb      	ldrb	r3, [r3, #31]
 8005bf4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005bfa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005bfc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 021e 	orr.w	r2, r2, #30
 8005c0c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	ffe0f007 	.word	0xffe0f007

08005c2c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_DCMI_Start_DMA+0x1c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e0ab      	b.n	8005da0 <HAL_DCMI_Start_DMA+0x174>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c66:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0202 	bic.w	r2, r2, #2
 8005c76:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8c:	4a46      	ldr	r2, [pc, #280]	@ (8005da8 <HAL_DCMI_Start_DMA+0x17c>)
 8005c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c94:	4a45      	ldr	r2, [pc, #276]	@ (8005dac <HAL_DCMI_Start_DMA+0x180>)
 8005c96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbe:	d219      	bcs.n	8005cf4 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3328      	adds	r3, #40	@ 0x28
 8005cca:	4619      	mov	r1, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	f000 fd5c 	bl	800678c <HAL_DMA_Start_IT>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d055      	beq.n	8005d86 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2240      	movs	r2, #64	@ 0x40
 8005cde:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e055      	b.n	8005da0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8005da8 <HAL_DCMI_Start_DMA+0x17c>)
 8005cfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8005d0e:	e009      	b.n	8005d24 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d14:	085a      	lsrs	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1e:	005a      	lsls	r2, r3, #1
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2c:	d2f0      	bcs.n	8005d10 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	1e9a      	subs	r2, r3, #2
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4413      	add	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3328      	adds	r3, #40	@ 0x28
 8005d56:	4619      	mov	r1, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	f002 fff3 	bl	8008d4c <HAL_DMAEx_MultiBufferStart_IT>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2240      	movs	r2, #64	@ 0x40
 8005d70:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e00c      	b.n	8005da0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f042 0201 	orr.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	08005f75 	.word	0x08005f75
 8005dac:	0800609b 	.word	0x0800609b

08005db0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8005db8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e68 <HAL_DCMI_Stop+0xb8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2b      	ldr	r2, [pc, #172]	@ (8005e6c <HAL_DCMI_Stop+0xbc>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	0a5b      	lsrs	r3, r3, #9
 8005dc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_DCMI_Stop+0x30>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e03f      	b.n	8005e60 <HAL_DCMI_Stop+0xb0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d108      	bne.n	8005e1e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e1c:	e006      	b.n	8005e2c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e9      	bne.n	8005e00 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 ff0d 	bl	8006c60 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8005e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	24000000 	.word	0x24000000
 8005e6c:	10624dd3 	.word	0x10624dd3

08005e70 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eaa:	4a31      	ldr	r2, [pc, #196]	@ (8005f70 <HAL_DCMI_IRQHandler+0x100>)
 8005eac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 f9f2 	bl	800729c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d016      	beq.n	8005ef0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ece:	f043 0201 	orr.w	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee2:	4a23      	ldr	r2, [pc, #140]	@ (8005f70 <HAL_DCMI_IRQHandler+0x100>)
 8005ee4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 f9d6 	bl	800729c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d006      	beq.n	8005f08 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2210      	movs	r2, #16
 8005f00:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fb fcbc 	bl	8001880 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d006      	beq.n	8005f20 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2208      	movs	r2, #8
 8005f18:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb fcc2 	bl	80018a4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01d      	beq.n	8005f66 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d107      	bne.n	8005f48 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 021e 	bic.w	r2, r2, #30
 8005f46:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fb fca9 	bl	80018b8 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	0800609b 	.word	0x0800609b

08005f74 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d043      	beq.n	8006012 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f96:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d118      	bne.n	8005fd6 <DCMI_DMAXferCplt+0x62>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d015      	beq.n	8005fd6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbc:	00da      	lsls	r2, r3, #3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f003 fa1f 	bl	8009408 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fce:	1e5a      	subs	r2, r3, #1
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005fd4:	e044      	b.n	8006060 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d13c      	bne.n	8006060 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff8:	00da      	lsls	r2, r3, #3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	2201      	movs	r2, #1
 8006000:	4619      	mov	r1, r3
 8006002:	f003 fa01 	bl	8009408 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600a:	1e5a      	subs	r2, r3, #1
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006010:	e026      	b.n	8006060 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	e017      	b.n	8006060 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10f      	bne.n	8006060 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006044:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	0099      	lsls	r1, r3, #2
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	440a      	add	r2, r1
 8006056:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006068:	429a      	cmp	r2, r3
 800606a:	d112      	bne.n	8006092 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b02      	cmp	r3, #2
 8006088:	d103      	bne.n	8006092 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d009      	beq.n	80060c6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7fb fc0a 	bl	80018e0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80060dc:	f7ff fa7e 	bl	80055dc <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e316      	b.n	800671a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a66      	ldr	r2, [pc, #408]	@ (800628c <HAL_DMA_Init+0x1b8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <HAL_DMA_Init+0xb8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a65      	ldr	r2, [pc, #404]	@ (8006290 <HAL_DMA_Init+0x1bc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a63      	ldr	r2, [pc, #396]	@ (8006294 <HAL_DMA_Init+0x1c0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <HAL_DMA_Init+0xb8>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a62      	ldr	r2, [pc, #392]	@ (8006298 <HAL_DMA_Init+0x1c4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a60      	ldr	r2, [pc, #384]	@ (800629c <HAL_DMA_Init+0x1c8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <HAL_DMA_Init+0xb8>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a5f      	ldr	r2, [pc, #380]	@ (80062a0 <HAL_DMA_Init+0x1cc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a5d      	ldr	r2, [pc, #372]	@ (80062a4 <HAL_DMA_Init+0x1d0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a5c      	ldr	r2, [pc, #368]	@ (80062a8 <HAL_DMA_Init+0x1d4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <HAL_DMA_Init+0xb8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a5a      	ldr	r2, [pc, #360]	@ (80062ac <HAL_DMA_Init+0x1d8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a59      	ldr	r2, [pc, #356]	@ (80062b0 <HAL_DMA_Init+0x1dc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a57      	ldr	r2, [pc, #348]	@ (80062b4 <HAL_DMA_Init+0x1e0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_DMA_Init+0xb8>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a56      	ldr	r2, [pc, #344]	@ (80062b8 <HAL_DMA_Init+0x1e4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a54      	ldr	r2, [pc, #336]	@ (80062bc <HAL_DMA_Init+0x1e8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_DMA_Init+0xb8>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a53      	ldr	r2, [pc, #332]	@ (80062c0 <HAL_DMA_Init+0x1ec>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a51      	ldr	r2, [pc, #324]	@ (80062c4 <HAL_DMA_Init+0x1f0>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_DMA_Init+0xb8>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a50      	ldr	r2, [pc, #320]	@ (80062c8 <HAL_DMA_Init+0x1f4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_DMA_Init+0xbc>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_DMA_Init+0xbe>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 813b 	beq.w	800640e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a37      	ldr	r2, [pc, #220]	@ (800628c <HAL_DMA_Init+0x1b8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a36      	ldr	r2, [pc, #216]	@ (8006290 <HAL_DMA_Init+0x1bc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d045      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a34      	ldr	r2, [pc, #208]	@ (8006294 <HAL_DMA_Init+0x1c0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d040      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a33      	ldr	r2, [pc, #204]	@ (8006298 <HAL_DMA_Init+0x1c4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d03b      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a31      	ldr	r2, [pc, #196]	@ (800629c <HAL_DMA_Init+0x1c8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d036      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a30      	ldr	r2, [pc, #192]	@ (80062a0 <HAL_DMA_Init+0x1cc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d031      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a2e      	ldr	r2, [pc, #184]	@ (80062a4 <HAL_DMA_Init+0x1d0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d02c      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a2d      	ldr	r2, [pc, #180]	@ (80062a8 <HAL_DMA_Init+0x1d4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d027      	beq.n	8006248 <HAL_DMA_Init+0x174>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a2b      	ldr	r2, [pc, #172]	@ (80062ac <HAL_DMA_Init+0x1d8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d022      	beq.n	8006248 <HAL_DMA_Init+0x174>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2a      	ldr	r2, [pc, #168]	@ (80062b0 <HAL_DMA_Init+0x1dc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d01d      	beq.n	8006248 <HAL_DMA_Init+0x174>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a28      	ldr	r2, [pc, #160]	@ (80062b4 <HAL_DMA_Init+0x1e0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d018      	beq.n	8006248 <HAL_DMA_Init+0x174>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a27      	ldr	r2, [pc, #156]	@ (80062b8 <HAL_DMA_Init+0x1e4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <HAL_DMA_Init+0x174>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a25      	ldr	r2, [pc, #148]	@ (80062bc <HAL_DMA_Init+0x1e8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d00e      	beq.n	8006248 <HAL_DMA_Init+0x174>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a24      	ldr	r2, [pc, #144]	@ (80062c0 <HAL_DMA_Init+0x1ec>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_DMA_Init+0x174>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a22      	ldr	r2, [pc, #136]	@ (80062c4 <HAL_DMA_Init+0x1f0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_DMA_Init+0x174>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a21      	ldr	r2, [pc, #132]	@ (80062c8 <HAL_DMA_Init+0x1f4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d108      	bne.n	800625a <HAL_DMA_Init+0x186>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0201 	bic.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	e007      	b.n	800626a <HAL_DMA_Init+0x196>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800626a:	e02f      	b.n	80062cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800626c:	f7ff f9b6 	bl	80055dc <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b05      	cmp	r3, #5
 8006278:	d928      	bls.n	80062cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2203      	movs	r2, #3
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e246      	b.n	800671a <HAL_DMA_Init+0x646>
 800628c:	40020010 	.word	0x40020010
 8006290:	40020028 	.word	0x40020028
 8006294:	40020040 	.word	0x40020040
 8006298:	40020058 	.word	0x40020058
 800629c:	40020070 	.word	0x40020070
 80062a0:	40020088 	.word	0x40020088
 80062a4:	400200a0 	.word	0x400200a0
 80062a8:	400200b8 	.word	0x400200b8
 80062ac:	40020410 	.word	0x40020410
 80062b0:	40020428 	.word	0x40020428
 80062b4:	40020440 	.word	0x40020440
 80062b8:	40020458 	.word	0x40020458
 80062bc:	40020470 	.word	0x40020470
 80062c0:	40020488 	.word	0x40020488
 80062c4:	400204a0 	.word	0x400204a0
 80062c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1c8      	bne.n	800626c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4b83      	ldr	r3, [pc, #524]	@ (80064f4 <HAL_DMA_Init+0x420>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80062f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	2b04      	cmp	r3, #4
 800631e:	d107      	bne.n	8006330 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006328:	4313      	orrs	r3, r2
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006330:	4b71      	ldr	r3, [pc, #452]	@ (80064f8 <HAL_DMA_Init+0x424>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b71      	ldr	r3, [pc, #452]	@ (80064fc <HAL_DMA_Init+0x428>)
 8006336:	4013      	ands	r3, r2
 8006338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800633c:	d328      	bcc.n	8006390 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b28      	cmp	r3, #40	@ 0x28
 8006344:	d903      	bls.n	800634e <HAL_DMA_Init+0x27a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b2e      	cmp	r3, #46	@ 0x2e
 800634c:	d917      	bls.n	800637e <HAL_DMA_Init+0x2aa>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2b3e      	cmp	r3, #62	@ 0x3e
 8006354:	d903      	bls.n	800635e <HAL_DMA_Init+0x28a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b42      	cmp	r3, #66	@ 0x42
 800635c:	d90f      	bls.n	800637e <HAL_DMA_Init+0x2aa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b46      	cmp	r3, #70	@ 0x46
 8006364:	d903      	bls.n	800636e <HAL_DMA_Init+0x29a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b48      	cmp	r3, #72	@ 0x48
 800636c:	d907      	bls.n	800637e <HAL_DMA_Init+0x2aa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b4e      	cmp	r3, #78	@ 0x4e
 8006374:	d905      	bls.n	8006382 <HAL_DMA_Init+0x2ae>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b52      	cmp	r3, #82	@ 0x52
 800637c:	d801      	bhi.n	8006382 <HAL_DMA_Init+0x2ae>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_DMA_Init+0x2b0>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800638e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f023 0307 	bic.w	r3, r3, #7
 80063a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	2b04      	cmp	r3, #4
 80063b8:	d117      	bne.n	80063ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00e      	beq.n	80063ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f002 fb33 	bl	8008a38 <DMA_CheckFifoParam>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2240      	movs	r2, #64	@ 0x40
 80063dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e197      	b.n	800671a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f002 fa6e 	bl	80088d4 <DMA_CalcBaseAndBitshift>
 80063f8:	4603      	mov	r3, r0
 80063fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	223f      	movs	r2, #63	@ 0x3f
 8006406:	409a      	lsls	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]
 800640c:	e0cd      	b.n	80065aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3b      	ldr	r2, [pc, #236]	@ (8006500 <HAL_DMA_Init+0x42c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d022      	beq.n	800645e <HAL_DMA_Init+0x38a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a39      	ldr	r2, [pc, #228]	@ (8006504 <HAL_DMA_Init+0x430>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01d      	beq.n	800645e <HAL_DMA_Init+0x38a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a38      	ldr	r2, [pc, #224]	@ (8006508 <HAL_DMA_Init+0x434>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d018      	beq.n	800645e <HAL_DMA_Init+0x38a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a36      	ldr	r2, [pc, #216]	@ (800650c <HAL_DMA_Init+0x438>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_DMA_Init+0x38a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a35      	ldr	r2, [pc, #212]	@ (8006510 <HAL_DMA_Init+0x43c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_DMA_Init+0x38a>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a33      	ldr	r2, [pc, #204]	@ (8006514 <HAL_DMA_Init+0x440>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_DMA_Init+0x38a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a32      	ldr	r2, [pc, #200]	@ (8006518 <HAL_DMA_Init+0x444>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_DMA_Init+0x38a>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a30      	ldr	r2, [pc, #192]	@ (800651c <HAL_DMA_Init+0x448>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d101      	bne.n	8006462 <HAL_DMA_Init+0x38e>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_DMA_Init+0x390>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8097 	beq.w	8006598 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a24      	ldr	r2, [pc, #144]	@ (8006500 <HAL_DMA_Init+0x42c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d021      	beq.n	80064b8 <HAL_DMA_Init+0x3e4>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a22      	ldr	r2, [pc, #136]	@ (8006504 <HAL_DMA_Init+0x430>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01c      	beq.n	80064b8 <HAL_DMA_Init+0x3e4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a21      	ldr	r2, [pc, #132]	@ (8006508 <HAL_DMA_Init+0x434>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d017      	beq.n	80064b8 <HAL_DMA_Init+0x3e4>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a1f      	ldr	r2, [pc, #124]	@ (800650c <HAL_DMA_Init+0x438>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d012      	beq.n	80064b8 <HAL_DMA_Init+0x3e4>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1e      	ldr	r2, [pc, #120]	@ (8006510 <HAL_DMA_Init+0x43c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00d      	beq.n	80064b8 <HAL_DMA_Init+0x3e4>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006514 <HAL_DMA_Init+0x440>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d008      	beq.n	80064b8 <HAL_DMA_Init+0x3e4>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006518 <HAL_DMA_Init+0x444>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <HAL_DMA_Init+0x3e4>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a19      	ldr	r2, [pc, #100]	@ (800651c <HAL_DMA_Init+0x448>)
 80064b6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <HAL_DMA_Init+0x44c>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d021      	beq.n	8006524 <HAL_DMA_Init+0x450>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b80      	cmp	r3, #128	@ 0x80
 80064e6:	d102      	bne.n	80064ee <HAL_DMA_Init+0x41a>
 80064e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80064ec:	e01b      	b.n	8006526 <HAL_DMA_Init+0x452>
 80064ee:	2300      	movs	r3, #0
 80064f0:	e019      	b.n	8006526 <HAL_DMA_Init+0x452>
 80064f2:	bf00      	nop
 80064f4:	fe10803f 	.word	0xfe10803f
 80064f8:	5c001000 	.word	0x5c001000
 80064fc:	ffff0000 	.word	0xffff0000
 8006500:	58025408 	.word	0x58025408
 8006504:	5802541c 	.word	0x5802541c
 8006508:	58025430 	.word	0x58025430
 800650c:	58025444 	.word	0x58025444
 8006510:	58025458 	.word	0x58025458
 8006514:	5802546c 	.word	0x5802546c
 8006518:	58025480 	.word	0x58025480
 800651c:	58025494 	.word	0x58025494
 8006520:	fffe000f 	.word	0xfffe000f
 8006524:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	68d2      	ldr	r2, [r2, #12]
 800652a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800652c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006534:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800653c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006544:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800654c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006554:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	4b6e      	ldr	r3, [pc, #440]	@ (8006724 <HAL_DMA_Init+0x650>)
 800656c:	4413      	add	r3, r2
 800656e:	4a6e      	ldr	r2, [pc, #440]	@ (8006728 <HAL_DMA_Init+0x654>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	009a      	lsls	r2, r3, #2
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f002 f9a9 	bl	80088d4 <DMA_CalcBaseAndBitshift>
 8006582:	4603      	mov	r3, r0
 8006584:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2201      	movs	r2, #1
 8006590:	409a      	lsls	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	e008      	b.n	80065aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2240      	movs	r2, #64	@ 0x40
 800659c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2203      	movs	r2, #3
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e0b7      	b.n	800671a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a5f      	ldr	r2, [pc, #380]	@ (800672c <HAL_DMA_Init+0x658>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d072      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006730 <HAL_DMA_Init+0x65c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d06d      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a5c      	ldr	r2, [pc, #368]	@ (8006734 <HAL_DMA_Init+0x660>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d068      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006738 <HAL_DMA_Init+0x664>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d063      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a59      	ldr	r2, [pc, #356]	@ (800673c <HAL_DMA_Init+0x668>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d05e      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a57      	ldr	r2, [pc, #348]	@ (8006740 <HAL_DMA_Init+0x66c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d059      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a56      	ldr	r2, [pc, #344]	@ (8006744 <HAL_DMA_Init+0x670>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d054      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a54      	ldr	r2, [pc, #336]	@ (8006748 <HAL_DMA_Init+0x674>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d04f      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a53      	ldr	r2, [pc, #332]	@ (800674c <HAL_DMA_Init+0x678>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04a      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a51      	ldr	r2, [pc, #324]	@ (8006750 <HAL_DMA_Init+0x67c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d045      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a50      	ldr	r2, [pc, #320]	@ (8006754 <HAL_DMA_Init+0x680>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d040      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a4e      	ldr	r2, [pc, #312]	@ (8006758 <HAL_DMA_Init+0x684>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d03b      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a4d      	ldr	r2, [pc, #308]	@ (800675c <HAL_DMA_Init+0x688>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d036      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a4b      	ldr	r2, [pc, #300]	@ (8006760 <HAL_DMA_Init+0x68c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d031      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a4a      	ldr	r2, [pc, #296]	@ (8006764 <HAL_DMA_Init+0x690>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d02c      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a48      	ldr	r2, [pc, #288]	@ (8006768 <HAL_DMA_Init+0x694>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d027      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a47      	ldr	r2, [pc, #284]	@ (800676c <HAL_DMA_Init+0x698>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a45      	ldr	r2, [pc, #276]	@ (8006770 <HAL_DMA_Init+0x69c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01d      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a44      	ldr	r2, [pc, #272]	@ (8006774 <HAL_DMA_Init+0x6a0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a42      	ldr	r2, [pc, #264]	@ (8006778 <HAL_DMA_Init+0x6a4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a41      	ldr	r2, [pc, #260]	@ (800677c <HAL_DMA_Init+0x6a8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3f      	ldr	r2, [pc, #252]	@ (8006780 <HAL_DMA_Init+0x6ac>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a3e      	ldr	r2, [pc, #248]	@ (8006784 <HAL_DMA_Init+0x6b0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_DMA_Init+0x5c6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a3c      	ldr	r2, [pc, #240]	@ (8006788 <HAL_DMA_Init+0x6b4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d101      	bne.n	800669e <HAL_DMA_Init+0x5ca>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <HAL_DMA_Init+0x5cc>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d032      	beq.n	800670a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f002 fa43 	bl	8008b30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b80      	cmp	r3, #128	@ 0x80
 80066b0:	d102      	bne.n	80066b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80066cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d010      	beq.n	80066f8 <HAL_DMA_Init+0x624>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d80c      	bhi.n	80066f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f002 fac0 	bl	8008c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	e008      	b.n	800670a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	a7fdabf8 	.word	0xa7fdabf8
 8006728:	cccccccd 	.word	0xcccccccd
 800672c:	40020010 	.word	0x40020010
 8006730:	40020028 	.word	0x40020028
 8006734:	40020040 	.word	0x40020040
 8006738:	40020058 	.word	0x40020058
 800673c:	40020070 	.word	0x40020070
 8006740:	40020088 	.word	0x40020088
 8006744:	400200a0 	.word	0x400200a0
 8006748:	400200b8 	.word	0x400200b8
 800674c:	40020410 	.word	0x40020410
 8006750:	40020428 	.word	0x40020428
 8006754:	40020440 	.word	0x40020440
 8006758:	40020458 	.word	0x40020458
 800675c:	40020470 	.word	0x40020470
 8006760:	40020488 	.word	0x40020488
 8006764:	400204a0 	.word	0x400204a0
 8006768:	400204b8 	.word	0x400204b8
 800676c:	58025408 	.word	0x58025408
 8006770:	5802541c 	.word	0x5802541c
 8006774:	58025430 	.word	0x58025430
 8006778:	58025444 	.word	0x58025444
 800677c:	58025458 	.word	0x58025458
 8006780:	5802546c 	.word	0x5802546c
 8006784:	58025480 	.word	0x58025480
 8006788:	58025494 	.word	0x58025494

0800678c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e226      	b.n	8006bf6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_DMA_Start_IT+0x2a>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e21f      	b.n	8006bf6 <HAL_DMA_Start_IT+0x46a>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f040 820a 	bne.w	8006be0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a68      	ldr	r2, [pc, #416]	@ (8006980 <HAL_DMA_Start_IT+0x1f4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a66      	ldr	r2, [pc, #408]	@ (8006984 <HAL_DMA_Start_IT+0x1f8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a65      	ldr	r2, [pc, #404]	@ (8006988 <HAL_DMA_Start_IT+0x1fc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a63      	ldr	r2, [pc, #396]	@ (800698c <HAL_DMA_Start_IT+0x200>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a62      	ldr	r2, [pc, #392]	@ (8006990 <HAL_DMA_Start_IT+0x204>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a60      	ldr	r2, [pc, #384]	@ (8006994 <HAL_DMA_Start_IT+0x208>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a5f      	ldr	r2, [pc, #380]	@ (8006998 <HAL_DMA_Start_IT+0x20c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a5d      	ldr	r2, [pc, #372]	@ (800699c <HAL_DMA_Start_IT+0x210>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a5c      	ldr	r2, [pc, #368]	@ (80069a0 <HAL_DMA_Start_IT+0x214>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a5a      	ldr	r2, [pc, #360]	@ (80069a4 <HAL_DMA_Start_IT+0x218>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a59      	ldr	r2, [pc, #356]	@ (80069a8 <HAL_DMA_Start_IT+0x21c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a57      	ldr	r2, [pc, #348]	@ (80069ac <HAL_DMA_Start_IT+0x220>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a56      	ldr	r2, [pc, #344]	@ (80069b0 <HAL_DMA_Start_IT+0x224>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a54      	ldr	r2, [pc, #336]	@ (80069b4 <HAL_DMA_Start_IT+0x228>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a53      	ldr	r2, [pc, #332]	@ (80069b8 <HAL_DMA_Start_IT+0x22c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_Start_IT+0xee>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a51      	ldr	r2, [pc, #324]	@ (80069bc <HAL_DMA_Start_IT+0x230>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d108      	bne.n	800688c <HAL_DMA_Start_IT+0x100>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0201 	bic.w	r2, r2, #1
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	e007      	b.n	800689c <HAL_DMA_Start_IT+0x110>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0201 	bic.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f001 fe6a 	bl	800857c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a34      	ldr	r2, [pc, #208]	@ (8006980 <HAL_DMA_Start_IT+0x1f4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d04a      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a33      	ldr	r2, [pc, #204]	@ (8006984 <HAL_DMA_Start_IT+0x1f8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d045      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a31      	ldr	r2, [pc, #196]	@ (8006988 <HAL_DMA_Start_IT+0x1fc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d040      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a30      	ldr	r2, [pc, #192]	@ (800698c <HAL_DMA_Start_IT+0x200>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d03b      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006990 <HAL_DMA_Start_IT+0x204>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d036      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2d      	ldr	r2, [pc, #180]	@ (8006994 <HAL_DMA_Start_IT+0x208>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d031      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006998 <HAL_DMA_Start_IT+0x20c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d02c      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a2a      	ldr	r2, [pc, #168]	@ (800699c <HAL_DMA_Start_IT+0x210>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d027      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a28      	ldr	r2, [pc, #160]	@ (80069a0 <HAL_DMA_Start_IT+0x214>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d022      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a27      	ldr	r2, [pc, #156]	@ (80069a4 <HAL_DMA_Start_IT+0x218>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d01d      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a25      	ldr	r2, [pc, #148]	@ (80069a8 <HAL_DMA_Start_IT+0x21c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d018      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a24      	ldr	r2, [pc, #144]	@ (80069ac <HAL_DMA_Start_IT+0x220>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d013      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <HAL_DMA_Start_IT+0x224>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00e      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	@ (80069b4 <HAL_DMA_Start_IT+0x228>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1f      	ldr	r2, [pc, #124]	@ (80069b8 <HAL_DMA_Start_IT+0x22c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d004      	beq.n	8006948 <HAL_DMA_Start_IT+0x1bc>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	@ (80069bc <HAL_DMA_Start_IT+0x230>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d101      	bne.n	800694c <HAL_DMA_Start_IT+0x1c0>
 8006948:	2301      	movs	r3, #1
 800694a:	e000      	b.n	800694e <HAL_DMA_Start_IT+0x1c2>
 800694c:	2300      	movs	r3, #0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d036      	beq.n	80069c0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f023 021e 	bic.w	r2, r3, #30
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0216 	orr.w	r2, r2, #22
 8006964:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03e      	beq.n	80069ec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0208 	orr.w	r2, r2, #8
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e035      	b.n	80069ec <HAL_DMA_Start_IT+0x260>
 8006980:	40020010 	.word	0x40020010
 8006984:	40020028 	.word	0x40020028
 8006988:	40020040 	.word	0x40020040
 800698c:	40020058 	.word	0x40020058
 8006990:	40020070 	.word	0x40020070
 8006994:	40020088 	.word	0x40020088
 8006998:	400200a0 	.word	0x400200a0
 800699c:	400200b8 	.word	0x400200b8
 80069a0:	40020410 	.word	0x40020410
 80069a4:	40020428 	.word	0x40020428
 80069a8:	40020440 	.word	0x40020440
 80069ac:	40020458 	.word	0x40020458
 80069b0:	40020470 	.word	0x40020470
 80069b4:	40020488 	.word	0x40020488
 80069b8:	400204a0 	.word	0x400204a0
 80069bc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 020e 	bic.w	r2, r3, #14
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f042 020a 	orr.w	r2, r2, #10
 80069d2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0204 	orr.w	r2, r2, #4
 80069ea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a83      	ldr	r2, [pc, #524]	@ (8006c00 <HAL_DMA_Start_IT+0x474>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d072      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a82      	ldr	r2, [pc, #520]	@ (8006c04 <HAL_DMA_Start_IT+0x478>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d06d      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a80      	ldr	r2, [pc, #512]	@ (8006c08 <HAL_DMA_Start_IT+0x47c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d068      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a7f      	ldr	r2, [pc, #508]	@ (8006c0c <HAL_DMA_Start_IT+0x480>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d063      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a7d      	ldr	r2, [pc, #500]	@ (8006c10 <HAL_DMA_Start_IT+0x484>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d05e      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7c      	ldr	r2, [pc, #496]	@ (8006c14 <HAL_DMA_Start_IT+0x488>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d059      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a7a      	ldr	r2, [pc, #488]	@ (8006c18 <HAL_DMA_Start_IT+0x48c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d054      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a79      	ldr	r2, [pc, #484]	@ (8006c1c <HAL_DMA_Start_IT+0x490>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d04f      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a77      	ldr	r2, [pc, #476]	@ (8006c20 <HAL_DMA_Start_IT+0x494>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d04a      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a76      	ldr	r2, [pc, #472]	@ (8006c24 <HAL_DMA_Start_IT+0x498>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d045      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a74      	ldr	r2, [pc, #464]	@ (8006c28 <HAL_DMA_Start_IT+0x49c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d040      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a73      	ldr	r2, [pc, #460]	@ (8006c2c <HAL_DMA_Start_IT+0x4a0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d03b      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a71      	ldr	r2, [pc, #452]	@ (8006c30 <HAL_DMA_Start_IT+0x4a4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d036      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a70      	ldr	r2, [pc, #448]	@ (8006c34 <HAL_DMA_Start_IT+0x4a8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d031      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8006c38 <HAL_DMA_Start_IT+0x4ac>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d02c      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a6d      	ldr	r2, [pc, #436]	@ (8006c3c <HAL_DMA_Start_IT+0x4b0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d027      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a6b      	ldr	r2, [pc, #428]	@ (8006c40 <HAL_DMA_Start_IT+0x4b4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d022      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a6a      	ldr	r2, [pc, #424]	@ (8006c44 <HAL_DMA_Start_IT+0x4b8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d01d      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a68      	ldr	r2, [pc, #416]	@ (8006c48 <HAL_DMA_Start_IT+0x4bc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d018      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a67      	ldr	r2, [pc, #412]	@ (8006c4c <HAL_DMA_Start_IT+0x4c0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d013      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a65      	ldr	r2, [pc, #404]	@ (8006c50 <HAL_DMA_Start_IT+0x4c4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00e      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a64      	ldr	r2, [pc, #400]	@ (8006c54 <HAL_DMA_Start_IT+0x4c8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a62      	ldr	r2, [pc, #392]	@ (8006c58 <HAL_DMA_Start_IT+0x4cc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_DMA_Start_IT+0x350>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a61      	ldr	r2, [pc, #388]	@ (8006c5c <HAL_DMA_Start_IT+0x4d0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d101      	bne.n	8006ae0 <HAL_DMA_Start_IT+0x354>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <HAL_DMA_Start_IT+0x356>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d01a      	beq.n	8006b1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006afe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a37      	ldr	r2, [pc, #220]	@ (8006c00 <HAL_DMA_Start_IT+0x474>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d04a      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a36      	ldr	r2, [pc, #216]	@ (8006c04 <HAL_DMA_Start_IT+0x478>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d045      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a34      	ldr	r2, [pc, #208]	@ (8006c08 <HAL_DMA_Start_IT+0x47c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d040      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a33      	ldr	r2, [pc, #204]	@ (8006c0c <HAL_DMA_Start_IT+0x480>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d03b      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a31      	ldr	r2, [pc, #196]	@ (8006c10 <HAL_DMA_Start_IT+0x484>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d036      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a30      	ldr	r2, [pc, #192]	@ (8006c14 <HAL_DMA_Start_IT+0x488>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d031      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006c18 <HAL_DMA_Start_IT+0x48c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d02c      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a2d      	ldr	r2, [pc, #180]	@ (8006c1c <HAL_DMA_Start_IT+0x490>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d027      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a2b      	ldr	r2, [pc, #172]	@ (8006c20 <HAL_DMA_Start_IT+0x494>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d022      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a2a      	ldr	r2, [pc, #168]	@ (8006c24 <HAL_DMA_Start_IT+0x498>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d01d      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a28      	ldr	r2, [pc, #160]	@ (8006c28 <HAL_DMA_Start_IT+0x49c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a27      	ldr	r2, [pc, #156]	@ (8006c2c <HAL_DMA_Start_IT+0x4a0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d013      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a25      	ldr	r2, [pc, #148]	@ (8006c30 <HAL_DMA_Start_IT+0x4a4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a24      	ldr	r2, [pc, #144]	@ (8006c34 <HAL_DMA_Start_IT+0x4a8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a22      	ldr	r2, [pc, #136]	@ (8006c38 <HAL_DMA_Start_IT+0x4ac>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_DMA_Start_IT+0x430>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a21      	ldr	r2, [pc, #132]	@ (8006c3c <HAL_DMA_Start_IT+0x4b0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d108      	bne.n	8006bce <HAL_DMA_Start_IT+0x442>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	e012      	b.n	8006bf4 <HAL_DMA_Start_IT+0x468>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e009      	b.n	8006bf4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006be6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40020010 	.word	0x40020010
 8006c04:	40020028 	.word	0x40020028
 8006c08:	40020040 	.word	0x40020040
 8006c0c:	40020058 	.word	0x40020058
 8006c10:	40020070 	.word	0x40020070
 8006c14:	40020088 	.word	0x40020088
 8006c18:	400200a0 	.word	0x400200a0
 8006c1c:	400200b8 	.word	0x400200b8
 8006c20:	40020410 	.word	0x40020410
 8006c24:	40020428 	.word	0x40020428
 8006c28:	40020440 	.word	0x40020440
 8006c2c:	40020458 	.word	0x40020458
 8006c30:	40020470 	.word	0x40020470
 8006c34:	40020488 	.word	0x40020488
 8006c38:	400204a0 	.word	0x400204a0
 8006c3c:	400204b8 	.word	0x400204b8
 8006c40:	58025408 	.word	0x58025408
 8006c44:	5802541c 	.word	0x5802541c
 8006c48:	58025430 	.word	0x58025430
 8006c4c:	58025444 	.word	0x58025444
 8006c50:	58025458 	.word	0x58025458
 8006c54:	5802546c 	.word	0x5802546c
 8006c58:	58025480 	.word	0x58025480
 8006c5c:	58025494 	.word	0x58025494

08006c60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c68:	f7fe fcb8 	bl	80055dc <HAL_GetTick>
 8006c6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e2dc      	b.n	8007232 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d008      	beq.n	8006c96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2280      	movs	r2, #128	@ 0x80
 8006c88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e2cd      	b.n	8007232 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a76      	ldr	r2, [pc, #472]	@ (8006e74 <HAL_DMA_Abort+0x214>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d04a      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a74      	ldr	r2, [pc, #464]	@ (8006e78 <HAL_DMA_Abort+0x218>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d045      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a73      	ldr	r2, [pc, #460]	@ (8006e7c <HAL_DMA_Abort+0x21c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d040      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a71      	ldr	r2, [pc, #452]	@ (8006e80 <HAL_DMA_Abort+0x220>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d03b      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a70      	ldr	r2, [pc, #448]	@ (8006e84 <HAL_DMA_Abort+0x224>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d036      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8006e88 <HAL_DMA_Abort+0x228>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d031      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a6d      	ldr	r2, [pc, #436]	@ (8006e8c <HAL_DMA_Abort+0x22c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d02c      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8006e90 <HAL_DMA_Abort+0x230>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d027      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a6a      	ldr	r2, [pc, #424]	@ (8006e94 <HAL_DMA_Abort+0x234>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d022      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a68      	ldr	r2, [pc, #416]	@ (8006e98 <HAL_DMA_Abort+0x238>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01d      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a67      	ldr	r2, [pc, #412]	@ (8006e9c <HAL_DMA_Abort+0x23c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d018      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a65      	ldr	r2, [pc, #404]	@ (8006ea0 <HAL_DMA_Abort+0x240>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d013      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a64      	ldr	r2, [pc, #400]	@ (8006ea4 <HAL_DMA_Abort+0x244>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d00e      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a62      	ldr	r2, [pc, #392]	@ (8006ea8 <HAL_DMA_Abort+0x248>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d009      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a61      	ldr	r2, [pc, #388]	@ (8006eac <HAL_DMA_Abort+0x24c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d004      	beq.n	8006d36 <HAL_DMA_Abort+0xd6>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5f      	ldr	r2, [pc, #380]	@ (8006eb0 <HAL_DMA_Abort+0x250>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <HAL_DMA_Abort+0xda>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <HAL_DMA_Abort+0xdc>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d013      	beq.n	8006d68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 021e 	bic.w	r2, r2, #30
 8006d4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e00a      	b.n	8006d7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 020e 	bic.w	r2, r2, #14
 8006d76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a3c      	ldr	r2, [pc, #240]	@ (8006e74 <HAL_DMA_Abort+0x214>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d072      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006e78 <HAL_DMA_Abort+0x218>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d06d      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a39      	ldr	r2, [pc, #228]	@ (8006e7c <HAL_DMA_Abort+0x21c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d068      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a37      	ldr	r2, [pc, #220]	@ (8006e80 <HAL_DMA_Abort+0x220>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d063      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a36      	ldr	r2, [pc, #216]	@ (8006e84 <HAL_DMA_Abort+0x224>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d05e      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a34      	ldr	r2, [pc, #208]	@ (8006e88 <HAL_DMA_Abort+0x228>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d059      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a33      	ldr	r2, [pc, #204]	@ (8006e8c <HAL_DMA_Abort+0x22c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d054      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a31      	ldr	r2, [pc, #196]	@ (8006e90 <HAL_DMA_Abort+0x230>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d04f      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a30      	ldr	r2, [pc, #192]	@ (8006e94 <HAL_DMA_Abort+0x234>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d04a      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8006e98 <HAL_DMA_Abort+0x238>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d045      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a2d      	ldr	r2, [pc, #180]	@ (8006e9c <HAL_DMA_Abort+0x23c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d040      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a2b      	ldr	r2, [pc, #172]	@ (8006ea0 <HAL_DMA_Abort+0x240>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d03b      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea4 <HAL_DMA_Abort+0x244>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d036      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a28      	ldr	r2, [pc, #160]	@ (8006ea8 <HAL_DMA_Abort+0x248>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d031      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a27      	ldr	r2, [pc, #156]	@ (8006eac <HAL_DMA_Abort+0x24c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d02c      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a25      	ldr	r2, [pc, #148]	@ (8006eb0 <HAL_DMA_Abort+0x250>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d027      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a24      	ldr	r2, [pc, #144]	@ (8006eb4 <HAL_DMA_Abort+0x254>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d022      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a22      	ldr	r2, [pc, #136]	@ (8006eb8 <HAL_DMA_Abort+0x258>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01d      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a21      	ldr	r2, [pc, #132]	@ (8006ebc <HAL_DMA_Abort+0x25c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d018      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec0 <HAL_DMA_Abort+0x260>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec4 <HAL_DMA_Abort+0x264>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00e      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec8 <HAL_DMA_Abort+0x268>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d009      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ecc <HAL_DMA_Abort+0x26c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d004      	beq.n	8006e6e <HAL_DMA_Abort+0x20e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a19      	ldr	r2, [pc, #100]	@ (8006ed0 <HAL_DMA_Abort+0x270>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d132      	bne.n	8006ed4 <HAL_DMA_Abort+0x274>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e031      	b.n	8006ed6 <HAL_DMA_Abort+0x276>
 8006e72:	bf00      	nop
 8006e74:	40020010 	.word	0x40020010
 8006e78:	40020028 	.word	0x40020028
 8006e7c:	40020040 	.word	0x40020040
 8006e80:	40020058 	.word	0x40020058
 8006e84:	40020070 	.word	0x40020070
 8006e88:	40020088 	.word	0x40020088
 8006e8c:	400200a0 	.word	0x400200a0
 8006e90:	400200b8 	.word	0x400200b8
 8006e94:	40020410 	.word	0x40020410
 8006e98:	40020428 	.word	0x40020428
 8006e9c:	40020440 	.word	0x40020440
 8006ea0:	40020458 	.word	0x40020458
 8006ea4:	40020470 	.word	0x40020470
 8006ea8:	40020488 	.word	0x40020488
 8006eac:	400204a0 	.word	0x400204a0
 8006eb0:	400204b8 	.word	0x400204b8
 8006eb4:	58025408 	.word	0x58025408
 8006eb8:	5802541c 	.word	0x5802541c
 8006ebc:	58025430 	.word	0x58025430
 8006ec0:	58025444 	.word	0x58025444
 8006ec4:	58025458 	.word	0x58025458
 8006ec8:	5802546c 	.word	0x5802546c
 8006ecc:	58025480 	.word	0x58025480
 8006ed0:	58025494 	.word	0x58025494
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a6d      	ldr	r2, [pc, #436]	@ (80070a4 <HAL_DMA_Abort+0x444>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d04a      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a6b      	ldr	r2, [pc, #428]	@ (80070a8 <HAL_DMA_Abort+0x448>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d045      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a6a      	ldr	r2, [pc, #424]	@ (80070ac <HAL_DMA_Abort+0x44c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d040      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a68      	ldr	r2, [pc, #416]	@ (80070b0 <HAL_DMA_Abort+0x450>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d03b      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a67      	ldr	r2, [pc, #412]	@ (80070b4 <HAL_DMA_Abort+0x454>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d036      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a65      	ldr	r2, [pc, #404]	@ (80070b8 <HAL_DMA_Abort+0x458>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d031      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a64      	ldr	r2, [pc, #400]	@ (80070bc <HAL_DMA_Abort+0x45c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d02c      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a62      	ldr	r2, [pc, #392]	@ (80070c0 <HAL_DMA_Abort+0x460>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d027      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a61      	ldr	r2, [pc, #388]	@ (80070c4 <HAL_DMA_Abort+0x464>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d022      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a5f      	ldr	r2, [pc, #380]	@ (80070c8 <HAL_DMA_Abort+0x468>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01d      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a5e      	ldr	r2, [pc, #376]	@ (80070cc <HAL_DMA_Abort+0x46c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d018      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a5c      	ldr	r2, [pc, #368]	@ (80070d0 <HAL_DMA_Abort+0x470>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a5b      	ldr	r2, [pc, #364]	@ (80070d4 <HAL_DMA_Abort+0x474>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a59      	ldr	r2, [pc, #356]	@ (80070d8 <HAL_DMA_Abort+0x478>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a58      	ldr	r2, [pc, #352]	@ (80070dc <HAL_DMA_Abort+0x47c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_DMA_Abort+0x32a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a56      	ldr	r2, [pc, #344]	@ (80070e0 <HAL_DMA_Abort+0x480>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d108      	bne.n	8006f9c <HAL_DMA_Abort+0x33c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	e007      	b.n	8006fac <HAL_DMA_Abort+0x34c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fac:	e013      	b.n	8006fd6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fae:	f7fe fb15 	bl	80055dc <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d90c      	bls.n	8006fd6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2203      	movs	r2, #3
 8006fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e12d      	b.n	8007232 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80070a4 <HAL_DMA_Abort+0x444>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d04a      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80070a8 <HAL_DMA_Abort+0x448>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d045      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80070ac <HAL_DMA_Abort+0x44c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d040      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a2a      	ldr	r2, [pc, #168]	@ (80070b0 <HAL_DMA_Abort+0x450>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d03b      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a29      	ldr	r2, [pc, #164]	@ (80070b4 <HAL_DMA_Abort+0x454>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d036      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a27      	ldr	r2, [pc, #156]	@ (80070b8 <HAL_DMA_Abort+0x458>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d031      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a26      	ldr	r2, [pc, #152]	@ (80070bc <HAL_DMA_Abort+0x45c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d02c      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a24      	ldr	r2, [pc, #144]	@ (80070c0 <HAL_DMA_Abort+0x460>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d027      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a23      	ldr	r2, [pc, #140]	@ (80070c4 <HAL_DMA_Abort+0x464>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d022      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a21      	ldr	r2, [pc, #132]	@ (80070c8 <HAL_DMA_Abort+0x468>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d01d      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a20      	ldr	r2, [pc, #128]	@ (80070cc <HAL_DMA_Abort+0x46c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d018      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a1e      	ldr	r2, [pc, #120]	@ (80070d0 <HAL_DMA_Abort+0x470>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d013      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1d      	ldr	r2, [pc, #116]	@ (80070d4 <HAL_DMA_Abort+0x474>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00e      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1b      	ldr	r2, [pc, #108]	@ (80070d8 <HAL_DMA_Abort+0x478>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d009      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <HAL_DMA_Abort+0x47c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d004      	beq.n	8007082 <HAL_DMA_Abort+0x422>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a18      	ldr	r2, [pc, #96]	@ (80070e0 <HAL_DMA_Abort+0x480>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d101      	bne.n	8007086 <HAL_DMA_Abort+0x426>
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <HAL_DMA_Abort+0x428>
 8007086:	2300      	movs	r3, #0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02b      	beq.n	80070e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007090:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007096:	f003 031f 	and.w	r3, r3, #31
 800709a:	223f      	movs	r2, #63	@ 0x3f
 800709c:	409a      	lsls	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	609a      	str	r2, [r3, #8]
 80070a2:	e02a      	b.n	80070fa <HAL_DMA_Abort+0x49a>
 80070a4:	40020010 	.word	0x40020010
 80070a8:	40020028 	.word	0x40020028
 80070ac:	40020040 	.word	0x40020040
 80070b0:	40020058 	.word	0x40020058
 80070b4:	40020070 	.word	0x40020070
 80070b8:	40020088 	.word	0x40020088
 80070bc:	400200a0 	.word	0x400200a0
 80070c0:	400200b8 	.word	0x400200b8
 80070c4:	40020410 	.word	0x40020410
 80070c8:	40020428 	.word	0x40020428
 80070cc:	40020440 	.word	0x40020440
 80070d0:	40020458 	.word	0x40020458
 80070d4:	40020470 	.word	0x40020470
 80070d8:	40020488 	.word	0x40020488
 80070dc:	400204a0 	.word	0x400204a0
 80070e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	2201      	movs	r2, #1
 80070f4:	409a      	lsls	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a4f      	ldr	r2, [pc, #316]	@ (800723c <HAL_DMA_Abort+0x5dc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d072      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a4d      	ldr	r2, [pc, #308]	@ (8007240 <HAL_DMA_Abort+0x5e0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d06d      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a4c      	ldr	r2, [pc, #304]	@ (8007244 <HAL_DMA_Abort+0x5e4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d068      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a4a      	ldr	r2, [pc, #296]	@ (8007248 <HAL_DMA_Abort+0x5e8>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d063      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a49      	ldr	r2, [pc, #292]	@ (800724c <HAL_DMA_Abort+0x5ec>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d05e      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a47      	ldr	r2, [pc, #284]	@ (8007250 <HAL_DMA_Abort+0x5f0>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d059      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a46      	ldr	r2, [pc, #280]	@ (8007254 <HAL_DMA_Abort+0x5f4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d054      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a44      	ldr	r2, [pc, #272]	@ (8007258 <HAL_DMA_Abort+0x5f8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d04f      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a43      	ldr	r2, [pc, #268]	@ (800725c <HAL_DMA_Abort+0x5fc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d04a      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a41      	ldr	r2, [pc, #260]	@ (8007260 <HAL_DMA_Abort+0x600>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d045      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a40      	ldr	r2, [pc, #256]	@ (8007264 <HAL_DMA_Abort+0x604>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d040      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a3e      	ldr	r2, [pc, #248]	@ (8007268 <HAL_DMA_Abort+0x608>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d03b      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a3d      	ldr	r2, [pc, #244]	@ (800726c <HAL_DMA_Abort+0x60c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d036      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a3b      	ldr	r2, [pc, #236]	@ (8007270 <HAL_DMA_Abort+0x610>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d031      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a3a      	ldr	r2, [pc, #232]	@ (8007274 <HAL_DMA_Abort+0x614>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d02c      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a38      	ldr	r2, [pc, #224]	@ (8007278 <HAL_DMA_Abort+0x618>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d027      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a37      	ldr	r2, [pc, #220]	@ (800727c <HAL_DMA_Abort+0x61c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d022      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a35      	ldr	r2, [pc, #212]	@ (8007280 <HAL_DMA_Abort+0x620>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d01d      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a34      	ldr	r2, [pc, #208]	@ (8007284 <HAL_DMA_Abort+0x624>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d018      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a32      	ldr	r2, [pc, #200]	@ (8007288 <HAL_DMA_Abort+0x628>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d013      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a31      	ldr	r2, [pc, #196]	@ (800728c <HAL_DMA_Abort+0x62c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d00e      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007290 <HAL_DMA_Abort+0x630>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d009      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a2e      	ldr	r2, [pc, #184]	@ (8007294 <HAL_DMA_Abort+0x634>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d004      	beq.n	80071ea <HAL_DMA_Abort+0x58a>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007298 <HAL_DMA_Abort+0x638>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d101      	bne.n	80071ee <HAL_DMA_Abort+0x58e>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <HAL_DMA_Abort+0x590>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d015      	beq.n	8007220 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80071fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007210:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007214:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800721e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	40020010 	.word	0x40020010
 8007240:	40020028 	.word	0x40020028
 8007244:	40020040 	.word	0x40020040
 8007248:	40020058 	.word	0x40020058
 800724c:	40020070 	.word	0x40020070
 8007250:	40020088 	.word	0x40020088
 8007254:	400200a0 	.word	0x400200a0
 8007258:	400200b8 	.word	0x400200b8
 800725c:	40020410 	.word	0x40020410
 8007260:	40020428 	.word	0x40020428
 8007264:	40020440 	.word	0x40020440
 8007268:	40020458 	.word	0x40020458
 800726c:	40020470 	.word	0x40020470
 8007270:	40020488 	.word	0x40020488
 8007274:	400204a0 	.word	0x400204a0
 8007278:	400204b8 	.word	0x400204b8
 800727c:	58025408 	.word	0x58025408
 8007280:	5802541c 	.word	0x5802541c
 8007284:	58025430 	.word	0x58025430
 8007288:	58025444 	.word	0x58025444
 800728c:	58025458 	.word	0x58025458
 8007290:	5802546c 	.word	0x5802546c
 8007294:	58025480 	.word	0x58025480
 8007298:	58025494 	.word	0x58025494

0800729c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e237      	b.n	800771e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d004      	beq.n	80072c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2280      	movs	r2, #128	@ 0x80
 80072be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e22c      	b.n	800771e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a5c      	ldr	r2, [pc, #368]	@ (800743c <HAL_DMA_Abort_IT+0x1a0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d04a      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a5b      	ldr	r2, [pc, #364]	@ (8007440 <HAL_DMA_Abort_IT+0x1a4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d045      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a59      	ldr	r2, [pc, #356]	@ (8007444 <HAL_DMA_Abort_IT+0x1a8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d040      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a58      	ldr	r2, [pc, #352]	@ (8007448 <HAL_DMA_Abort_IT+0x1ac>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d03b      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a56      	ldr	r2, [pc, #344]	@ (800744c <HAL_DMA_Abort_IT+0x1b0>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d036      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a55      	ldr	r2, [pc, #340]	@ (8007450 <HAL_DMA_Abort_IT+0x1b4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d031      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a53      	ldr	r2, [pc, #332]	@ (8007454 <HAL_DMA_Abort_IT+0x1b8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d02c      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a52      	ldr	r2, [pc, #328]	@ (8007458 <HAL_DMA_Abort_IT+0x1bc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d027      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a50      	ldr	r2, [pc, #320]	@ (800745c <HAL_DMA_Abort_IT+0x1c0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d022      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a4f      	ldr	r2, [pc, #316]	@ (8007460 <HAL_DMA_Abort_IT+0x1c4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d01d      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a4d      	ldr	r2, [pc, #308]	@ (8007464 <HAL_DMA_Abort_IT+0x1c8>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d018      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a4c      	ldr	r2, [pc, #304]	@ (8007468 <HAL_DMA_Abort_IT+0x1cc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d013      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a4a      	ldr	r2, [pc, #296]	@ (800746c <HAL_DMA_Abort_IT+0x1d0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00e      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a49      	ldr	r2, [pc, #292]	@ (8007470 <HAL_DMA_Abort_IT+0x1d4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d009      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a47      	ldr	r2, [pc, #284]	@ (8007474 <HAL_DMA_Abort_IT+0x1d8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_DMA_Abort_IT+0xc8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a46      	ldr	r2, [pc, #280]	@ (8007478 <HAL_DMA_Abort_IT+0x1dc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <HAL_DMA_Abort_IT+0xcc>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <HAL_DMA_Abort_IT+0xce>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8086 	beq.w	800747c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2204      	movs	r2, #4
 8007374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a2f      	ldr	r2, [pc, #188]	@ (800743c <HAL_DMA_Abort_IT+0x1a0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d04a      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a2e      	ldr	r2, [pc, #184]	@ (8007440 <HAL_DMA_Abort_IT+0x1a4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d045      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2c      	ldr	r2, [pc, #176]	@ (8007444 <HAL_DMA_Abort_IT+0x1a8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d040      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2b      	ldr	r2, [pc, #172]	@ (8007448 <HAL_DMA_Abort_IT+0x1ac>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d03b      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a29      	ldr	r2, [pc, #164]	@ (800744c <HAL_DMA_Abort_IT+0x1b0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d036      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a28      	ldr	r2, [pc, #160]	@ (8007450 <HAL_DMA_Abort_IT+0x1b4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d031      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a26      	ldr	r2, [pc, #152]	@ (8007454 <HAL_DMA_Abort_IT+0x1b8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d02c      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a25      	ldr	r2, [pc, #148]	@ (8007458 <HAL_DMA_Abort_IT+0x1bc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d027      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a23      	ldr	r2, [pc, #140]	@ (800745c <HAL_DMA_Abort_IT+0x1c0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d022      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a22      	ldr	r2, [pc, #136]	@ (8007460 <HAL_DMA_Abort_IT+0x1c4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d01d      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a20      	ldr	r2, [pc, #128]	@ (8007464 <HAL_DMA_Abort_IT+0x1c8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d018      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007468 <HAL_DMA_Abort_IT+0x1cc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d013      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <HAL_DMA_Abort_IT+0x1d0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00e      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007470 <HAL_DMA_Abort_IT+0x1d4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d009      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1a      	ldr	r2, [pc, #104]	@ (8007474 <HAL_DMA_Abort_IT+0x1d8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d004      	beq.n	8007418 <HAL_DMA_Abort_IT+0x17c>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a19      	ldr	r2, [pc, #100]	@ (8007478 <HAL_DMA_Abort_IT+0x1dc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d108      	bne.n	800742a <HAL_DMA_Abort_IT+0x18e>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0201 	bic.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	e178      	b.n	800771c <HAL_DMA_Abort_IT+0x480>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0201 	bic.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	e16f      	b.n	800771c <HAL_DMA_Abort_IT+0x480>
 800743c:	40020010 	.word	0x40020010
 8007440:	40020028 	.word	0x40020028
 8007444:	40020040 	.word	0x40020040
 8007448:	40020058 	.word	0x40020058
 800744c:	40020070 	.word	0x40020070
 8007450:	40020088 	.word	0x40020088
 8007454:	400200a0 	.word	0x400200a0
 8007458:	400200b8 	.word	0x400200b8
 800745c:	40020410 	.word	0x40020410
 8007460:	40020428 	.word	0x40020428
 8007464:	40020440 	.word	0x40020440
 8007468:	40020458 	.word	0x40020458
 800746c:	40020470 	.word	0x40020470
 8007470:	40020488 	.word	0x40020488
 8007474:	400204a0 	.word	0x400204a0
 8007478:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 020e 	bic.w	r2, r2, #14
 800748a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a6c      	ldr	r2, [pc, #432]	@ (8007644 <HAL_DMA_Abort_IT+0x3a8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d04a      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a6b      	ldr	r2, [pc, #428]	@ (8007648 <HAL_DMA_Abort_IT+0x3ac>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d045      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a69      	ldr	r2, [pc, #420]	@ (800764c <HAL_DMA_Abort_IT+0x3b0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d040      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a68      	ldr	r2, [pc, #416]	@ (8007650 <HAL_DMA_Abort_IT+0x3b4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d03b      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a66      	ldr	r2, [pc, #408]	@ (8007654 <HAL_DMA_Abort_IT+0x3b8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d036      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a65      	ldr	r2, [pc, #404]	@ (8007658 <HAL_DMA_Abort_IT+0x3bc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d031      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a63      	ldr	r2, [pc, #396]	@ (800765c <HAL_DMA_Abort_IT+0x3c0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d02c      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a62      	ldr	r2, [pc, #392]	@ (8007660 <HAL_DMA_Abort_IT+0x3c4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d027      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a60      	ldr	r2, [pc, #384]	@ (8007664 <HAL_DMA_Abort_IT+0x3c8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d022      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a5f      	ldr	r2, [pc, #380]	@ (8007668 <HAL_DMA_Abort_IT+0x3cc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d01d      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a5d      	ldr	r2, [pc, #372]	@ (800766c <HAL_DMA_Abort_IT+0x3d0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d018      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a5c      	ldr	r2, [pc, #368]	@ (8007670 <HAL_DMA_Abort_IT+0x3d4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d013      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a5a      	ldr	r2, [pc, #360]	@ (8007674 <HAL_DMA_Abort_IT+0x3d8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00e      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a59      	ldr	r2, [pc, #356]	@ (8007678 <HAL_DMA_Abort_IT+0x3dc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d009      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a57      	ldr	r2, [pc, #348]	@ (800767c <HAL_DMA_Abort_IT+0x3e0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <HAL_DMA_Abort_IT+0x290>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a56      	ldr	r2, [pc, #344]	@ (8007680 <HAL_DMA_Abort_IT+0x3e4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d108      	bne.n	800753e <HAL_DMA_Abort_IT+0x2a2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0201 	bic.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e007      	b.n	800754e <HAL_DMA_Abort_IT+0x2b2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a3c      	ldr	r2, [pc, #240]	@ (8007644 <HAL_DMA_Abort_IT+0x3a8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d072      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a3a      	ldr	r2, [pc, #232]	@ (8007648 <HAL_DMA_Abort_IT+0x3ac>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d06d      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a39      	ldr	r2, [pc, #228]	@ (800764c <HAL_DMA_Abort_IT+0x3b0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d068      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a37      	ldr	r2, [pc, #220]	@ (8007650 <HAL_DMA_Abort_IT+0x3b4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d063      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a36      	ldr	r2, [pc, #216]	@ (8007654 <HAL_DMA_Abort_IT+0x3b8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d05e      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a34      	ldr	r2, [pc, #208]	@ (8007658 <HAL_DMA_Abort_IT+0x3bc>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d059      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a33      	ldr	r2, [pc, #204]	@ (800765c <HAL_DMA_Abort_IT+0x3c0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d054      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a31      	ldr	r2, [pc, #196]	@ (8007660 <HAL_DMA_Abort_IT+0x3c4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d04f      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a30      	ldr	r2, [pc, #192]	@ (8007664 <HAL_DMA_Abort_IT+0x3c8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d04a      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007668 <HAL_DMA_Abort_IT+0x3cc>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d045      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a2d      	ldr	r2, [pc, #180]	@ (800766c <HAL_DMA_Abort_IT+0x3d0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d040      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007670 <HAL_DMA_Abort_IT+0x3d4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d03b      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007674 <HAL_DMA_Abort_IT+0x3d8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d036      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a28      	ldr	r2, [pc, #160]	@ (8007678 <HAL_DMA_Abort_IT+0x3dc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d031      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a27      	ldr	r2, [pc, #156]	@ (800767c <HAL_DMA_Abort_IT+0x3e0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d02c      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a25      	ldr	r2, [pc, #148]	@ (8007680 <HAL_DMA_Abort_IT+0x3e4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d027      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a24      	ldr	r2, [pc, #144]	@ (8007684 <HAL_DMA_Abort_IT+0x3e8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d022      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a22      	ldr	r2, [pc, #136]	@ (8007688 <HAL_DMA_Abort_IT+0x3ec>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d01d      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a21      	ldr	r2, [pc, #132]	@ (800768c <HAL_DMA_Abort_IT+0x3f0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d018      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1f      	ldr	r2, [pc, #124]	@ (8007690 <HAL_DMA_Abort_IT+0x3f4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d013      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1e      	ldr	r2, [pc, #120]	@ (8007694 <HAL_DMA_Abort_IT+0x3f8>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00e      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1c      	ldr	r2, [pc, #112]	@ (8007698 <HAL_DMA_Abort_IT+0x3fc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d009      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1b      	ldr	r2, [pc, #108]	@ (800769c <HAL_DMA_Abort_IT+0x400>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d004      	beq.n	800763e <HAL_DMA_Abort_IT+0x3a2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a19      	ldr	r2, [pc, #100]	@ (80076a0 <HAL_DMA_Abort_IT+0x404>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d132      	bne.n	80076a4 <HAL_DMA_Abort_IT+0x408>
 800763e:	2301      	movs	r3, #1
 8007640:	e031      	b.n	80076a6 <HAL_DMA_Abort_IT+0x40a>
 8007642:	bf00      	nop
 8007644:	40020010 	.word	0x40020010
 8007648:	40020028 	.word	0x40020028
 800764c:	40020040 	.word	0x40020040
 8007650:	40020058 	.word	0x40020058
 8007654:	40020070 	.word	0x40020070
 8007658:	40020088 	.word	0x40020088
 800765c:	400200a0 	.word	0x400200a0
 8007660:	400200b8 	.word	0x400200b8
 8007664:	40020410 	.word	0x40020410
 8007668:	40020428 	.word	0x40020428
 800766c:	40020440 	.word	0x40020440
 8007670:	40020458 	.word	0x40020458
 8007674:	40020470 	.word	0x40020470
 8007678:	40020488 	.word	0x40020488
 800767c:	400204a0 	.word	0x400204a0
 8007680:	400204b8 	.word	0x400204b8
 8007684:	58025408 	.word	0x58025408
 8007688:	5802541c 	.word	0x5802541c
 800768c:	58025430 	.word	0x58025430
 8007690:	58025444 	.word	0x58025444
 8007694:	58025458 	.word	0x58025458
 8007698:	5802546c 	.word	0x5802546c
 800769c:	58025480 	.word	0x58025480
 80076a0:	58025494 	.word	0x58025494
 80076a4:	2300      	movs	r3, #0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d028      	beq.n	80076fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	2201      	movs	r2, #1
 80076ca:	409a      	lsls	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80076d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08a      	sub	sp, #40	@ 0x28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007734:	4b67      	ldr	r3, [pc, #412]	@ (80078d4 <HAL_DMA_IRQHandler+0x1ac>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a67      	ldr	r2, [pc, #412]	@ (80078d8 <HAL_DMA_IRQHandler+0x1b0>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	0a9b      	lsrs	r3, r3, #10
 8007740:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007746:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800774c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a5f      	ldr	r2, [pc, #380]	@ (80078dc <HAL_DMA_IRQHandler+0x1b4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d04a      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a5d      	ldr	r2, [pc, #372]	@ (80078e0 <HAL_DMA_IRQHandler+0x1b8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d045      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a5c      	ldr	r2, [pc, #368]	@ (80078e4 <HAL_DMA_IRQHandler+0x1bc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d040      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a5a      	ldr	r2, [pc, #360]	@ (80078e8 <HAL_DMA_IRQHandler+0x1c0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d03b      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a59      	ldr	r2, [pc, #356]	@ (80078ec <HAL_DMA_IRQHandler+0x1c4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d036      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a57      	ldr	r2, [pc, #348]	@ (80078f0 <HAL_DMA_IRQHandler+0x1c8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d031      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a56      	ldr	r2, [pc, #344]	@ (80078f4 <HAL_DMA_IRQHandler+0x1cc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d02c      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a54      	ldr	r2, [pc, #336]	@ (80078f8 <HAL_DMA_IRQHandler+0x1d0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d027      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a53      	ldr	r2, [pc, #332]	@ (80078fc <HAL_DMA_IRQHandler+0x1d4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d022      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a51      	ldr	r2, [pc, #324]	@ (8007900 <HAL_DMA_IRQHandler+0x1d8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d01d      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a50      	ldr	r2, [pc, #320]	@ (8007904 <HAL_DMA_IRQHandler+0x1dc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d018      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a4e      	ldr	r2, [pc, #312]	@ (8007908 <HAL_DMA_IRQHandler+0x1e0>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d013      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a4d      	ldr	r2, [pc, #308]	@ (800790c <HAL_DMA_IRQHandler+0x1e4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00e      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a4b      	ldr	r2, [pc, #300]	@ (8007910 <HAL_DMA_IRQHandler+0x1e8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d009      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a4a      	ldr	r2, [pc, #296]	@ (8007914 <HAL_DMA_IRQHandler+0x1ec>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d004      	beq.n	80077fa <HAL_DMA_IRQHandler+0xd2>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a48      	ldr	r2, [pc, #288]	@ (8007918 <HAL_DMA_IRQHandler+0x1f0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d101      	bne.n	80077fe <HAL_DMA_IRQHandler+0xd6>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <HAL_DMA_IRQHandler+0xd8>
 80077fe:	2300      	movs	r3, #0
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 842b 	beq.w	800805c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800780a:	f003 031f 	and.w	r3, r3, #31
 800780e:	2208      	movs	r2, #8
 8007810:	409a      	lsls	r2, r3
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	4013      	ands	r3, r2
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80a2 	beq.w	8007960 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a2e      	ldr	r2, [pc, #184]	@ (80078dc <HAL_DMA_IRQHandler+0x1b4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d04a      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a2d      	ldr	r2, [pc, #180]	@ (80078e0 <HAL_DMA_IRQHandler+0x1b8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d045      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a2b      	ldr	r2, [pc, #172]	@ (80078e4 <HAL_DMA_IRQHandler+0x1bc>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d040      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a2a      	ldr	r2, [pc, #168]	@ (80078e8 <HAL_DMA_IRQHandler+0x1c0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d03b      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a28      	ldr	r2, [pc, #160]	@ (80078ec <HAL_DMA_IRQHandler+0x1c4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d036      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a27      	ldr	r2, [pc, #156]	@ (80078f0 <HAL_DMA_IRQHandler+0x1c8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d031      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a25      	ldr	r2, [pc, #148]	@ (80078f4 <HAL_DMA_IRQHandler+0x1cc>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d02c      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a24      	ldr	r2, [pc, #144]	@ (80078f8 <HAL_DMA_IRQHandler+0x1d0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d027      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a22      	ldr	r2, [pc, #136]	@ (80078fc <HAL_DMA_IRQHandler+0x1d4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d022      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a21      	ldr	r2, [pc, #132]	@ (8007900 <HAL_DMA_IRQHandler+0x1d8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d01d      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1f      	ldr	r2, [pc, #124]	@ (8007904 <HAL_DMA_IRQHandler+0x1dc>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d018      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a1e      	ldr	r2, [pc, #120]	@ (8007908 <HAL_DMA_IRQHandler+0x1e0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d013      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1c      	ldr	r2, [pc, #112]	@ (800790c <HAL_DMA_IRQHandler+0x1e4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d00e      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007910 <HAL_DMA_IRQHandler+0x1e8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d009      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a19      	ldr	r2, [pc, #100]	@ (8007914 <HAL_DMA_IRQHandler+0x1ec>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d004      	beq.n	80078bc <HAL_DMA_IRQHandler+0x194>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a18      	ldr	r2, [pc, #96]	@ (8007918 <HAL_DMA_IRQHandler+0x1f0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d12f      	bne.n	800791c <HAL_DMA_IRQHandler+0x1f4>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	bf14      	ite	ne
 80078ca:	2301      	movne	r3, #1
 80078cc:	2300      	moveq	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	e02e      	b.n	8007930 <HAL_DMA_IRQHandler+0x208>
 80078d2:	bf00      	nop
 80078d4:	24000000 	.word	0x24000000
 80078d8:	1b4e81b5 	.word	0x1b4e81b5
 80078dc:	40020010 	.word	0x40020010
 80078e0:	40020028 	.word	0x40020028
 80078e4:	40020040 	.word	0x40020040
 80078e8:	40020058 	.word	0x40020058
 80078ec:	40020070 	.word	0x40020070
 80078f0:	40020088 	.word	0x40020088
 80078f4:	400200a0 	.word	0x400200a0
 80078f8:	400200b8 	.word	0x400200b8
 80078fc:	40020410 	.word	0x40020410
 8007900:	40020428 	.word	0x40020428
 8007904:	40020440 	.word	0x40020440
 8007908:	40020458 	.word	0x40020458
 800790c:	40020470 	.word	0x40020470
 8007910:	40020488 	.word	0x40020488
 8007914:	400204a0 	.word	0x400204a0
 8007918:	400204b8 	.word	0x400204b8
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0308 	and.w	r3, r3, #8
 8007926:	2b00      	cmp	r3, #0
 8007928:	bf14      	ite	ne
 800792a:	2301      	movne	r3, #1
 800792c:	2300      	moveq	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d015      	beq.n	8007960 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0204 	bic.w	r2, r2, #4
 8007942:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	2208      	movs	r2, #8
 800794e:	409a      	lsls	r2, r3
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007958:	f043 0201 	orr.w	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	fa22 f303 	lsr.w	r3, r2, r3
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d06e      	beq.n	8007a54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a69      	ldr	r2, [pc, #420]	@ (8007b20 <HAL_DMA_IRQHandler+0x3f8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d04a      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a67      	ldr	r2, [pc, #412]	@ (8007b24 <HAL_DMA_IRQHandler+0x3fc>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d045      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a66      	ldr	r2, [pc, #408]	@ (8007b28 <HAL_DMA_IRQHandler+0x400>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d040      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a64      	ldr	r2, [pc, #400]	@ (8007b2c <HAL_DMA_IRQHandler+0x404>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d03b      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a63      	ldr	r2, [pc, #396]	@ (8007b30 <HAL_DMA_IRQHandler+0x408>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d036      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a61      	ldr	r2, [pc, #388]	@ (8007b34 <HAL_DMA_IRQHandler+0x40c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d031      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a60      	ldr	r2, [pc, #384]	@ (8007b38 <HAL_DMA_IRQHandler+0x410>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d02c      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a5e      	ldr	r2, [pc, #376]	@ (8007b3c <HAL_DMA_IRQHandler+0x414>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d027      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a5d      	ldr	r2, [pc, #372]	@ (8007b40 <HAL_DMA_IRQHandler+0x418>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d022      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a5b      	ldr	r2, [pc, #364]	@ (8007b44 <HAL_DMA_IRQHandler+0x41c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d01d      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a5a      	ldr	r2, [pc, #360]	@ (8007b48 <HAL_DMA_IRQHandler+0x420>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d018      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a58      	ldr	r2, [pc, #352]	@ (8007b4c <HAL_DMA_IRQHandler+0x424>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a57      	ldr	r2, [pc, #348]	@ (8007b50 <HAL_DMA_IRQHandler+0x428>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d00e      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a55      	ldr	r2, [pc, #340]	@ (8007b54 <HAL_DMA_IRQHandler+0x42c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d009      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a54      	ldr	r2, [pc, #336]	@ (8007b58 <HAL_DMA_IRQHandler+0x430>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x2ee>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a52      	ldr	r2, [pc, #328]	@ (8007b5c <HAL_DMA_IRQHandler+0x434>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d10a      	bne.n	8007a2c <HAL_DMA_IRQHandler+0x304>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bf14      	ite	ne
 8007a24:	2301      	movne	r3, #1
 8007a26:	2300      	moveq	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	e003      	b.n	8007a34 <HAL_DMA_IRQHandler+0x30c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00d      	beq.n	8007a54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a3c:	f003 031f 	and.w	r3, r3, #31
 8007a40:	2201      	movs	r2, #1
 8007a42:	409a      	lsls	r2, r3
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4c:	f043 0202 	orr.w	r2, r3, #2
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 808f 	beq.w	8007b88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b20 <HAL_DMA_IRQHandler+0x3f8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d04a      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2a      	ldr	r2, [pc, #168]	@ (8007b24 <HAL_DMA_IRQHandler+0x3fc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d045      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a29      	ldr	r2, [pc, #164]	@ (8007b28 <HAL_DMA_IRQHandler+0x400>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d040      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a27      	ldr	r2, [pc, #156]	@ (8007b2c <HAL_DMA_IRQHandler+0x404>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d03b      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a26      	ldr	r2, [pc, #152]	@ (8007b30 <HAL_DMA_IRQHandler+0x408>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d036      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a24      	ldr	r2, [pc, #144]	@ (8007b34 <HAL_DMA_IRQHandler+0x40c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d031      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a23      	ldr	r2, [pc, #140]	@ (8007b38 <HAL_DMA_IRQHandler+0x410>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d02c      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a21      	ldr	r2, [pc, #132]	@ (8007b3c <HAL_DMA_IRQHandler+0x414>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d027      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a20      	ldr	r2, [pc, #128]	@ (8007b40 <HAL_DMA_IRQHandler+0x418>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d022      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b44 <HAL_DMA_IRQHandler+0x41c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d01d      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b48 <HAL_DMA_IRQHandler+0x420>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d018      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b4c <HAL_DMA_IRQHandler+0x424>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d013      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b50 <HAL_DMA_IRQHandler+0x428>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d00e      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a18      	ldr	r2, [pc, #96]	@ (8007b54 <HAL_DMA_IRQHandler+0x42c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d009      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a17      	ldr	r2, [pc, #92]	@ (8007b58 <HAL_DMA_IRQHandler+0x430>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d004      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x3e2>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a15      	ldr	r2, [pc, #84]	@ (8007b5c <HAL_DMA_IRQHandler+0x434>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d12a      	bne.n	8007b60 <HAL_DMA_IRQHandler+0x438>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	e023      	b.n	8007b68 <HAL_DMA_IRQHandler+0x440>
 8007b20:	40020010 	.word	0x40020010
 8007b24:	40020028 	.word	0x40020028
 8007b28:	40020040 	.word	0x40020040
 8007b2c:	40020058 	.word	0x40020058
 8007b30:	40020070 	.word	0x40020070
 8007b34:	40020088 	.word	0x40020088
 8007b38:	400200a0 	.word	0x400200a0
 8007b3c:	400200b8 	.word	0x400200b8
 8007b40:	40020410 	.word	0x40020410
 8007b44:	40020428 	.word	0x40020428
 8007b48:	40020440 	.word	0x40020440
 8007b4c:	40020458 	.word	0x40020458
 8007b50:	40020470 	.word	0x40020470
 8007b54:	40020488 	.word	0x40020488
 8007b58:	400204a0 	.word	0x400204a0
 8007b5c:	400204b8 	.word	0x400204b8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2300      	movs	r3, #0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00d      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	2204      	movs	r2, #4
 8007b76:	409a      	lsls	r2, r3
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b80:	f043 0204 	orr.w	r2, r3, #4
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	2210      	movs	r2, #16
 8007b92:	409a      	lsls	r2, r3
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	4013      	ands	r3, r2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 80a6 	beq.w	8007cea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a85      	ldr	r2, [pc, #532]	@ (8007db8 <HAL_DMA_IRQHandler+0x690>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d04a      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a83      	ldr	r2, [pc, #524]	@ (8007dbc <HAL_DMA_IRQHandler+0x694>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d045      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a82      	ldr	r2, [pc, #520]	@ (8007dc0 <HAL_DMA_IRQHandler+0x698>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d040      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a80      	ldr	r2, [pc, #512]	@ (8007dc4 <HAL_DMA_IRQHandler+0x69c>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d03b      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a7f      	ldr	r2, [pc, #508]	@ (8007dc8 <HAL_DMA_IRQHandler+0x6a0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d036      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a7d      	ldr	r2, [pc, #500]	@ (8007dcc <HAL_DMA_IRQHandler+0x6a4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d031      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a7c      	ldr	r2, [pc, #496]	@ (8007dd0 <HAL_DMA_IRQHandler+0x6a8>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d02c      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a7a      	ldr	r2, [pc, #488]	@ (8007dd4 <HAL_DMA_IRQHandler+0x6ac>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d027      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a79      	ldr	r2, [pc, #484]	@ (8007dd8 <HAL_DMA_IRQHandler+0x6b0>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d022      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a77      	ldr	r2, [pc, #476]	@ (8007ddc <HAL_DMA_IRQHandler+0x6b4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01d      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a76      	ldr	r2, [pc, #472]	@ (8007de0 <HAL_DMA_IRQHandler+0x6b8>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d018      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a74      	ldr	r2, [pc, #464]	@ (8007de4 <HAL_DMA_IRQHandler+0x6bc>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d013      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a73      	ldr	r2, [pc, #460]	@ (8007de8 <HAL_DMA_IRQHandler+0x6c0>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00e      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a71      	ldr	r2, [pc, #452]	@ (8007dec <HAL_DMA_IRQHandler+0x6c4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d009      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a70      	ldr	r2, [pc, #448]	@ (8007df0 <HAL_DMA_IRQHandler+0x6c8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d004      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x516>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a6e      	ldr	r2, [pc, #440]	@ (8007df4 <HAL_DMA_IRQHandler+0x6cc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d10a      	bne.n	8007c54 <HAL_DMA_IRQHandler+0x52c>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bf14      	ite	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	2300      	moveq	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e009      	b.n	8007c68 <HAL_DMA_IRQHandler+0x540>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	bf14      	ite	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	2300      	moveq	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d03e      	beq.n	8007cea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c70:	f003 031f 	and.w	r3, r3, #31
 8007c74:	2210      	movs	r2, #16
 8007c76:	409a      	lsls	r2, r3
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d018      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d024      	beq.n	8007cea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	4798      	blx	r3
 8007ca8:	e01f      	b.n	8007cea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01b      	beq.n	8007cea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
 8007cba:	e016      	b.n	8007cea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0208 	bic.w	r2, r2, #8
 8007cd8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cee:	f003 031f 	and.w	r3, r3, #31
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	409a      	lsls	r2, r3
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 8110 	beq.w	8007f20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a2c      	ldr	r2, [pc, #176]	@ (8007db8 <HAL_DMA_IRQHandler+0x690>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d04a      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dbc <HAL_DMA_IRQHandler+0x694>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d045      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a29      	ldr	r2, [pc, #164]	@ (8007dc0 <HAL_DMA_IRQHandler+0x698>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d040      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a28      	ldr	r2, [pc, #160]	@ (8007dc4 <HAL_DMA_IRQHandler+0x69c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d03b      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a26      	ldr	r2, [pc, #152]	@ (8007dc8 <HAL_DMA_IRQHandler+0x6a0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d036      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a25      	ldr	r2, [pc, #148]	@ (8007dcc <HAL_DMA_IRQHandler+0x6a4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d031      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a23      	ldr	r2, [pc, #140]	@ (8007dd0 <HAL_DMA_IRQHandler+0x6a8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d02c      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a22      	ldr	r2, [pc, #136]	@ (8007dd4 <HAL_DMA_IRQHandler+0x6ac>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d027      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a20      	ldr	r2, [pc, #128]	@ (8007dd8 <HAL_DMA_IRQHandler+0x6b0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d022      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007ddc <HAL_DMA_IRQHandler+0x6b4>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d01d      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a1d      	ldr	r2, [pc, #116]	@ (8007de0 <HAL_DMA_IRQHandler+0x6b8>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d018      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a1c      	ldr	r2, [pc, #112]	@ (8007de4 <HAL_DMA_IRQHandler+0x6bc>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d013      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007de8 <HAL_DMA_IRQHandler+0x6c0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00e      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a19      	ldr	r2, [pc, #100]	@ (8007dec <HAL_DMA_IRQHandler+0x6c4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d009      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a17      	ldr	r2, [pc, #92]	@ (8007df0 <HAL_DMA_IRQHandler+0x6c8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d004      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x678>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a16      	ldr	r2, [pc, #88]	@ (8007df4 <HAL_DMA_IRQHandler+0x6cc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d12b      	bne.n	8007df8 <HAL_DMA_IRQHandler+0x6d0>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	bf14      	ite	ne
 8007dae:	2301      	movne	r3, #1
 8007db0:	2300      	moveq	r3, #0
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	e02a      	b.n	8007e0c <HAL_DMA_IRQHandler+0x6e4>
 8007db6:	bf00      	nop
 8007db8:	40020010 	.word	0x40020010
 8007dbc:	40020028 	.word	0x40020028
 8007dc0:	40020040 	.word	0x40020040
 8007dc4:	40020058 	.word	0x40020058
 8007dc8:	40020070 	.word	0x40020070
 8007dcc:	40020088 	.word	0x40020088
 8007dd0:	400200a0 	.word	0x400200a0
 8007dd4:	400200b8 	.word	0x400200b8
 8007dd8:	40020410 	.word	0x40020410
 8007ddc:	40020428 	.word	0x40020428
 8007de0:	40020440 	.word	0x40020440
 8007de4:	40020458 	.word	0x40020458
 8007de8:	40020470 	.word	0x40020470
 8007dec:	40020488 	.word	0x40020488
 8007df0:	400204a0 	.word	0x400204a0
 8007df4:	400204b8 	.word	0x400204b8
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bf14      	ite	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	2300      	moveq	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8087 	beq.w	8007f20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e16:	f003 031f 	and.w	r3, r3, #31
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	409a      	lsls	r2, r3
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d139      	bne.n	8007ea2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0216 	bic.w	r2, r2, #22
 8007e3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695a      	ldr	r2, [r3, #20]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d103      	bne.n	8007e5e <HAL_DMA_IRQHandler+0x736>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0208 	bic.w	r2, r2, #8
 8007e6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	223f      	movs	r2, #63	@ 0x3f
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	6a3b      	ldr	r3, [r7, #32]
 8007e7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 834a 	beq.w	800852c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
          }
          return;
 8007ea0:	e344      	b.n	800852c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d018      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d108      	bne.n	8007ed0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d02c      	beq.n	8007f20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
 8007ece:	e027      	b.n	8007f20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d023      	beq.n	8007f20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
 8007ee0:	e01e      	b.n	8007f20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10f      	bne.n	8007f10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0210 	bic.w	r2, r2, #16
 8007efe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f000 8306 	beq.w	8008536 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 8088 	beq.w	8008048 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a7a      	ldr	r2, [pc, #488]	@ (8008130 <HAL_DMA_IRQHandler+0xa08>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d04a      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a79      	ldr	r2, [pc, #484]	@ (8008134 <HAL_DMA_IRQHandler+0xa0c>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d045      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a77      	ldr	r2, [pc, #476]	@ (8008138 <HAL_DMA_IRQHandler+0xa10>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d040      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a76      	ldr	r2, [pc, #472]	@ (800813c <HAL_DMA_IRQHandler+0xa14>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d03b      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a74      	ldr	r2, [pc, #464]	@ (8008140 <HAL_DMA_IRQHandler+0xa18>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d036      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a73      	ldr	r2, [pc, #460]	@ (8008144 <HAL_DMA_IRQHandler+0xa1c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d031      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a71      	ldr	r2, [pc, #452]	@ (8008148 <HAL_DMA_IRQHandler+0xa20>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d02c      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a70      	ldr	r2, [pc, #448]	@ (800814c <HAL_DMA_IRQHandler+0xa24>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d027      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a6e      	ldr	r2, [pc, #440]	@ (8008150 <HAL_DMA_IRQHandler+0xa28>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d022      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a6d      	ldr	r2, [pc, #436]	@ (8008154 <HAL_DMA_IRQHandler+0xa2c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d01d      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8008158 <HAL_DMA_IRQHandler+0xa30>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d018      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800815c <HAL_DMA_IRQHandler+0xa34>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d013      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a68      	ldr	r2, [pc, #416]	@ (8008160 <HAL_DMA_IRQHandler+0xa38>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00e      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a67      	ldr	r2, [pc, #412]	@ (8008164 <HAL_DMA_IRQHandler+0xa3c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d009      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a65      	ldr	r2, [pc, #404]	@ (8008168 <HAL_DMA_IRQHandler+0xa40>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <HAL_DMA_IRQHandler+0x8b8>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a64      	ldr	r2, [pc, #400]	@ (800816c <HAL_DMA_IRQHandler+0xa44>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d108      	bne.n	8007ff2 <HAL_DMA_IRQHandler+0x8ca>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	e007      	b.n	8008002 <HAL_DMA_IRQHandler+0x8da>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0201 	bic.w	r2, r2, #1
 8008000:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800800a:	429a      	cmp	r2, r3
 800800c:	d307      	bcc.n	800801e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1f2      	bne.n	8008002 <HAL_DMA_IRQHandler+0x8da>
 800801c:	e000      	b.n	8008020 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800801e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2203      	movs	r2, #3
 8008032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008036:	e003      	b.n	8008040 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8272 	beq.w	8008536 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
 800805a:	e26c      	b.n	8008536 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a43      	ldr	r2, [pc, #268]	@ (8008170 <HAL_DMA_IRQHandler+0xa48>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d022      	beq.n	80080ac <HAL_DMA_IRQHandler+0x984>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a42      	ldr	r2, [pc, #264]	@ (8008174 <HAL_DMA_IRQHandler+0xa4c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d01d      	beq.n	80080ac <HAL_DMA_IRQHandler+0x984>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a40      	ldr	r2, [pc, #256]	@ (8008178 <HAL_DMA_IRQHandler+0xa50>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d018      	beq.n	80080ac <HAL_DMA_IRQHandler+0x984>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a3f      	ldr	r2, [pc, #252]	@ (800817c <HAL_DMA_IRQHandler+0xa54>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <HAL_DMA_IRQHandler+0x984>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a3d      	ldr	r2, [pc, #244]	@ (8008180 <HAL_DMA_IRQHandler+0xa58>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00e      	beq.n	80080ac <HAL_DMA_IRQHandler+0x984>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3c      	ldr	r2, [pc, #240]	@ (8008184 <HAL_DMA_IRQHandler+0xa5c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d009      	beq.n	80080ac <HAL_DMA_IRQHandler+0x984>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a3a      	ldr	r2, [pc, #232]	@ (8008188 <HAL_DMA_IRQHandler+0xa60>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <HAL_DMA_IRQHandler+0x984>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a39      	ldr	r2, [pc, #228]	@ (800818c <HAL_DMA_IRQHandler+0xa64>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d101      	bne.n	80080b0 <HAL_DMA_IRQHandler+0x988>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <HAL_DMA_IRQHandler+0x98a>
 80080b0:	2300      	movs	r3, #0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 823f 	beq.w	8008536 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080c4:	f003 031f 	and.w	r3, r3, #31
 80080c8:	2204      	movs	r2, #4
 80080ca:	409a      	lsls	r2, r3
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	4013      	ands	r3, r2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80cd 	beq.w	8008270 <HAL_DMA_IRQHandler+0xb48>
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 80c7 	beq.w	8008270 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080e6:	f003 031f 	and.w	r3, r3, #31
 80080ea:	2204      	movs	r2, #4
 80080ec:	409a      	lsls	r2, r3
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d049      	beq.n	8008190 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 8210 	beq.w	8008530 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008118:	e20a      	b.n	8008530 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 8206 	beq.w	8008530 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800812c:	e200      	b.n	8008530 <HAL_DMA_IRQHandler+0xe08>
 800812e:	bf00      	nop
 8008130:	40020010 	.word	0x40020010
 8008134:	40020028 	.word	0x40020028
 8008138:	40020040 	.word	0x40020040
 800813c:	40020058 	.word	0x40020058
 8008140:	40020070 	.word	0x40020070
 8008144:	40020088 	.word	0x40020088
 8008148:	400200a0 	.word	0x400200a0
 800814c:	400200b8 	.word	0x400200b8
 8008150:	40020410 	.word	0x40020410
 8008154:	40020428 	.word	0x40020428
 8008158:	40020440 	.word	0x40020440
 800815c:	40020458 	.word	0x40020458
 8008160:	40020470 	.word	0x40020470
 8008164:	40020488 	.word	0x40020488
 8008168:	400204a0 	.word	0x400204a0
 800816c:	400204b8 	.word	0x400204b8
 8008170:	58025408 	.word	0x58025408
 8008174:	5802541c 	.word	0x5802541c
 8008178:	58025430 	.word	0x58025430
 800817c:	58025444 	.word	0x58025444
 8008180:	58025458 	.word	0x58025458
 8008184:	5802546c 	.word	0x5802546c
 8008188:	58025480 	.word	0x58025480
 800818c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	d160      	bne.n	800825c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a7f      	ldr	r2, [pc, #508]	@ (800839c <HAL_DMA_IRQHandler+0xc74>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d04a      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a7d      	ldr	r2, [pc, #500]	@ (80083a0 <HAL_DMA_IRQHandler+0xc78>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d045      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a7c      	ldr	r2, [pc, #496]	@ (80083a4 <HAL_DMA_IRQHandler+0xc7c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d040      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a7a      	ldr	r2, [pc, #488]	@ (80083a8 <HAL_DMA_IRQHandler+0xc80>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d03b      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a79      	ldr	r2, [pc, #484]	@ (80083ac <HAL_DMA_IRQHandler+0xc84>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d036      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a77      	ldr	r2, [pc, #476]	@ (80083b0 <HAL_DMA_IRQHandler+0xc88>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d031      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a76      	ldr	r2, [pc, #472]	@ (80083b4 <HAL_DMA_IRQHandler+0xc8c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d02c      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a74      	ldr	r2, [pc, #464]	@ (80083b8 <HAL_DMA_IRQHandler+0xc90>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d027      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a73      	ldr	r2, [pc, #460]	@ (80083bc <HAL_DMA_IRQHandler+0xc94>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d022      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a71      	ldr	r2, [pc, #452]	@ (80083c0 <HAL_DMA_IRQHandler+0xc98>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d01d      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a70      	ldr	r2, [pc, #448]	@ (80083c4 <HAL_DMA_IRQHandler+0xc9c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d018      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a6e      	ldr	r2, [pc, #440]	@ (80083c8 <HAL_DMA_IRQHandler+0xca0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a6d      	ldr	r2, [pc, #436]	@ (80083cc <HAL_DMA_IRQHandler+0xca4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00e      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a6b      	ldr	r2, [pc, #428]	@ (80083d0 <HAL_DMA_IRQHandler+0xca8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d009      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a6a      	ldr	r2, [pc, #424]	@ (80083d4 <HAL_DMA_IRQHandler+0xcac>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d004      	beq.n	800823a <HAL_DMA_IRQHandler+0xb12>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a68      	ldr	r2, [pc, #416]	@ (80083d8 <HAL_DMA_IRQHandler+0xcb0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d108      	bne.n	800824c <HAL_DMA_IRQHandler+0xb24>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0208 	bic.w	r2, r2, #8
 8008248:	601a      	str	r2, [r3, #0]
 800824a:	e007      	b.n	800825c <HAL_DMA_IRQHandler+0xb34>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0204 	bic.w	r2, r2, #4
 800825a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8165 	beq.w	8008530 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800826e:	e15f      	b.n	8008530 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008274:	f003 031f 	and.w	r3, r3, #31
 8008278:	2202      	movs	r2, #2
 800827a:	409a      	lsls	r2, r3
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80c5 	beq.w	8008410 <HAL_DMA_IRQHandler+0xce8>
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80bf 	beq.w	8008410 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008296:	f003 031f 	and.w	r3, r3, #31
 800829a:	2202      	movs	r2, #2
 800829c:	409a      	lsls	r2, r3
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d018      	beq.n	80082de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 813a 	beq.w	8008534 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082c8:	e134      	b.n	8008534 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8130 	beq.w	8008534 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082dc:	e12a      	b.n	8008534 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f003 0320 	and.w	r3, r3, #32
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f040 8089 	bne.w	80083fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a2b      	ldr	r2, [pc, #172]	@ (800839c <HAL_DMA_IRQHandler+0xc74>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d04a      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a29      	ldr	r2, [pc, #164]	@ (80083a0 <HAL_DMA_IRQHandler+0xc78>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d045      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a28      	ldr	r2, [pc, #160]	@ (80083a4 <HAL_DMA_IRQHandler+0xc7c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d040      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a26      	ldr	r2, [pc, #152]	@ (80083a8 <HAL_DMA_IRQHandler+0xc80>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d03b      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a25      	ldr	r2, [pc, #148]	@ (80083ac <HAL_DMA_IRQHandler+0xc84>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d036      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a23      	ldr	r2, [pc, #140]	@ (80083b0 <HAL_DMA_IRQHandler+0xc88>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d031      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a22      	ldr	r2, [pc, #136]	@ (80083b4 <HAL_DMA_IRQHandler+0xc8c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d02c      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a20      	ldr	r2, [pc, #128]	@ (80083b8 <HAL_DMA_IRQHandler+0xc90>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d027      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1f      	ldr	r2, [pc, #124]	@ (80083bc <HAL_DMA_IRQHandler+0xc94>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d022      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1d      	ldr	r2, [pc, #116]	@ (80083c0 <HAL_DMA_IRQHandler+0xc98>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d01d      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1c      	ldr	r2, [pc, #112]	@ (80083c4 <HAL_DMA_IRQHandler+0xc9c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d018      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a1a      	ldr	r2, [pc, #104]	@ (80083c8 <HAL_DMA_IRQHandler+0xca0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d013      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a19      	ldr	r2, [pc, #100]	@ (80083cc <HAL_DMA_IRQHandler+0xca4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00e      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a17      	ldr	r2, [pc, #92]	@ (80083d0 <HAL_DMA_IRQHandler+0xca8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d009      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a16      	ldr	r2, [pc, #88]	@ (80083d4 <HAL_DMA_IRQHandler+0xcac>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d004      	beq.n	800838a <HAL_DMA_IRQHandler+0xc62>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a14      	ldr	r2, [pc, #80]	@ (80083d8 <HAL_DMA_IRQHandler+0xcb0>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d128      	bne.n	80083dc <HAL_DMA_IRQHandler+0xcb4>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0214 	bic.w	r2, r2, #20
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e027      	b.n	80083ec <HAL_DMA_IRQHandler+0xcc4>
 800839c:	40020010 	.word	0x40020010
 80083a0:	40020028 	.word	0x40020028
 80083a4:	40020040 	.word	0x40020040
 80083a8:	40020058 	.word	0x40020058
 80083ac:	40020070 	.word	0x40020070
 80083b0:	40020088 	.word	0x40020088
 80083b4:	400200a0 	.word	0x400200a0
 80083b8:	400200b8 	.word	0x400200b8
 80083bc:	40020410 	.word	0x40020410
 80083c0:	40020428 	.word	0x40020428
 80083c4:	40020440 	.word	0x40020440
 80083c8:	40020458 	.word	0x40020458
 80083cc:	40020470 	.word	0x40020470
 80083d0:	40020488 	.word	0x40020488
 80083d4:	400204a0 	.word	0x400204a0
 80083d8:	400204b8 	.word	0x400204b8
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 020a 	bic.w	r2, r2, #10
 80083ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 8097 	beq.w	8008534 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800840e:	e091      	b.n	8008534 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	2208      	movs	r2, #8
 800841a:	409a      	lsls	r2, r3
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	4013      	ands	r3, r2
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 8088 	beq.w	8008536 <HAL_DMA_IRQHandler+0xe0e>
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8082 	beq.w	8008536 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a41      	ldr	r2, [pc, #260]	@ (800853c <HAL_DMA_IRQHandler+0xe14>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d04a      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a3f      	ldr	r2, [pc, #252]	@ (8008540 <HAL_DMA_IRQHandler+0xe18>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d045      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a3e      	ldr	r2, [pc, #248]	@ (8008544 <HAL_DMA_IRQHandler+0xe1c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d040      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a3c      	ldr	r2, [pc, #240]	@ (8008548 <HAL_DMA_IRQHandler+0xe20>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d03b      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a3b      	ldr	r2, [pc, #236]	@ (800854c <HAL_DMA_IRQHandler+0xe24>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d036      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a39      	ldr	r2, [pc, #228]	@ (8008550 <HAL_DMA_IRQHandler+0xe28>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d031      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a38      	ldr	r2, [pc, #224]	@ (8008554 <HAL_DMA_IRQHandler+0xe2c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d02c      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a36      	ldr	r2, [pc, #216]	@ (8008558 <HAL_DMA_IRQHandler+0xe30>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d027      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a35      	ldr	r2, [pc, #212]	@ (800855c <HAL_DMA_IRQHandler+0xe34>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d022      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a33      	ldr	r2, [pc, #204]	@ (8008560 <HAL_DMA_IRQHandler+0xe38>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d01d      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a32      	ldr	r2, [pc, #200]	@ (8008564 <HAL_DMA_IRQHandler+0xe3c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d018      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a30      	ldr	r2, [pc, #192]	@ (8008568 <HAL_DMA_IRQHandler+0xe40>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d013      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a2f      	ldr	r2, [pc, #188]	@ (800856c <HAL_DMA_IRQHandler+0xe44>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00e      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008570 <HAL_DMA_IRQHandler+0xe48>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d009      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008574 <HAL_DMA_IRQHandler+0xe4c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d004      	beq.n	80084d2 <HAL_DMA_IRQHandler+0xdaa>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a2a      	ldr	r2, [pc, #168]	@ (8008578 <HAL_DMA_IRQHandler+0xe50>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d108      	bne.n	80084e4 <HAL_DMA_IRQHandler+0xdbc>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 021c 	bic.w	r2, r2, #28
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e007      	b.n	80084f4 <HAL_DMA_IRQHandler+0xdcc>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 020e 	bic.w	r2, r2, #14
 80084f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084f8:	f003 031f 	and.w	r3, r3, #31
 80084fc:	2201      	movs	r2, #1
 80084fe:	409a      	lsls	r2, r3
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d009      	beq.n	8008536 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
 800852a:	e004      	b.n	8008536 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800852c:	bf00      	nop
 800852e:	e002      	b.n	8008536 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008530:	bf00      	nop
 8008532:	e000      	b.n	8008536 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008534:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008536:	3728      	adds	r7, #40	@ 0x28
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	40020010 	.word	0x40020010
 8008540:	40020028 	.word	0x40020028
 8008544:	40020040 	.word	0x40020040
 8008548:	40020058 	.word	0x40020058
 800854c:	40020070 	.word	0x40020070
 8008550:	40020088 	.word	0x40020088
 8008554:	400200a0 	.word	0x400200a0
 8008558:	400200b8 	.word	0x400200b8
 800855c:	40020410 	.word	0x40020410
 8008560:	40020428 	.word	0x40020428
 8008564:	40020440 	.word	0x40020440
 8008568:	40020458 	.word	0x40020458
 800856c:	40020470 	.word	0x40020470
 8008570:	40020488 	.word	0x40020488
 8008574:	400204a0 	.word	0x400204a0
 8008578:	400204b8 	.word	0x400204b8

0800857c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800858e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008594:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a7f      	ldr	r2, [pc, #508]	@ (8008798 <DMA_SetConfig+0x21c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d072      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a7d      	ldr	r2, [pc, #500]	@ (800879c <DMA_SetConfig+0x220>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d06d      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a7c      	ldr	r2, [pc, #496]	@ (80087a0 <DMA_SetConfig+0x224>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d068      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a7a      	ldr	r2, [pc, #488]	@ (80087a4 <DMA_SetConfig+0x228>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d063      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a79      	ldr	r2, [pc, #484]	@ (80087a8 <DMA_SetConfig+0x22c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d05e      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a77      	ldr	r2, [pc, #476]	@ (80087ac <DMA_SetConfig+0x230>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d059      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a76      	ldr	r2, [pc, #472]	@ (80087b0 <DMA_SetConfig+0x234>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d054      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a74      	ldr	r2, [pc, #464]	@ (80087b4 <DMA_SetConfig+0x238>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d04f      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a73      	ldr	r2, [pc, #460]	@ (80087b8 <DMA_SetConfig+0x23c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d04a      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a71      	ldr	r2, [pc, #452]	@ (80087bc <DMA_SetConfig+0x240>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d045      	beq.n	8008686 <DMA_SetConfig+0x10a>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a70      	ldr	r2, [pc, #448]	@ (80087c0 <DMA_SetConfig+0x244>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d040      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a6e      	ldr	r2, [pc, #440]	@ (80087c4 <DMA_SetConfig+0x248>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d03b      	beq.n	8008686 <DMA_SetConfig+0x10a>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a6d      	ldr	r2, [pc, #436]	@ (80087c8 <DMA_SetConfig+0x24c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d036      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a6b      	ldr	r2, [pc, #428]	@ (80087cc <DMA_SetConfig+0x250>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d031      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a6a      	ldr	r2, [pc, #424]	@ (80087d0 <DMA_SetConfig+0x254>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d02c      	beq.n	8008686 <DMA_SetConfig+0x10a>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a68      	ldr	r2, [pc, #416]	@ (80087d4 <DMA_SetConfig+0x258>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d027      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a67      	ldr	r2, [pc, #412]	@ (80087d8 <DMA_SetConfig+0x25c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d022      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a65      	ldr	r2, [pc, #404]	@ (80087dc <DMA_SetConfig+0x260>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d01d      	beq.n	8008686 <DMA_SetConfig+0x10a>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a64      	ldr	r2, [pc, #400]	@ (80087e0 <DMA_SetConfig+0x264>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d018      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a62      	ldr	r2, [pc, #392]	@ (80087e4 <DMA_SetConfig+0x268>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d013      	beq.n	8008686 <DMA_SetConfig+0x10a>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a61      	ldr	r2, [pc, #388]	@ (80087e8 <DMA_SetConfig+0x26c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d00e      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a5f      	ldr	r2, [pc, #380]	@ (80087ec <DMA_SetConfig+0x270>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d009      	beq.n	8008686 <DMA_SetConfig+0x10a>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a5e      	ldr	r2, [pc, #376]	@ (80087f0 <DMA_SetConfig+0x274>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d004      	beq.n	8008686 <DMA_SetConfig+0x10a>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a5c      	ldr	r2, [pc, #368]	@ (80087f4 <DMA_SetConfig+0x278>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d101      	bne.n	800868a <DMA_SetConfig+0x10e>
 8008686:	2301      	movs	r3, #1
 8008688:	e000      	b.n	800868c <DMA_SetConfig+0x110>
 800868a:	2300      	movs	r3, #0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00d      	beq.n	80086ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008698:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80086aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a39      	ldr	r2, [pc, #228]	@ (8008798 <DMA_SetConfig+0x21c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d04a      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a38      	ldr	r2, [pc, #224]	@ (800879c <DMA_SetConfig+0x220>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d045      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a36      	ldr	r2, [pc, #216]	@ (80087a0 <DMA_SetConfig+0x224>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d040      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a35      	ldr	r2, [pc, #212]	@ (80087a4 <DMA_SetConfig+0x228>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d03b      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a33      	ldr	r2, [pc, #204]	@ (80087a8 <DMA_SetConfig+0x22c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d036      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a32      	ldr	r2, [pc, #200]	@ (80087ac <DMA_SetConfig+0x230>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d031      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a30      	ldr	r2, [pc, #192]	@ (80087b0 <DMA_SetConfig+0x234>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d02c      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a2f      	ldr	r2, [pc, #188]	@ (80087b4 <DMA_SetConfig+0x238>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d027      	beq.n	800874c <DMA_SetConfig+0x1d0>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a2d      	ldr	r2, [pc, #180]	@ (80087b8 <DMA_SetConfig+0x23c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d022      	beq.n	800874c <DMA_SetConfig+0x1d0>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a2c      	ldr	r2, [pc, #176]	@ (80087bc <DMA_SetConfig+0x240>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d01d      	beq.n	800874c <DMA_SetConfig+0x1d0>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a2a      	ldr	r2, [pc, #168]	@ (80087c0 <DMA_SetConfig+0x244>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d018      	beq.n	800874c <DMA_SetConfig+0x1d0>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a29      	ldr	r2, [pc, #164]	@ (80087c4 <DMA_SetConfig+0x248>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <DMA_SetConfig+0x1d0>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a27      	ldr	r2, [pc, #156]	@ (80087c8 <DMA_SetConfig+0x24c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00e      	beq.n	800874c <DMA_SetConfig+0x1d0>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a26      	ldr	r2, [pc, #152]	@ (80087cc <DMA_SetConfig+0x250>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <DMA_SetConfig+0x1d0>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a24      	ldr	r2, [pc, #144]	@ (80087d0 <DMA_SetConfig+0x254>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <DMA_SetConfig+0x1d0>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a23      	ldr	r2, [pc, #140]	@ (80087d4 <DMA_SetConfig+0x258>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d101      	bne.n	8008750 <DMA_SetConfig+0x1d4>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <DMA_SetConfig+0x1d6>
 8008750:	2300      	movs	r3, #0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d059      	beq.n	800880a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800875a:	f003 031f 	and.w	r3, r3, #31
 800875e:	223f      	movs	r2, #63	@ 0x3f
 8008760:	409a      	lsls	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008774:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	2b40      	cmp	r3, #64	@ 0x40
 8008784:	d138      	bne.n	80087f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008796:	e086      	b.n	80088a6 <DMA_SetConfig+0x32a>
 8008798:	40020010 	.word	0x40020010
 800879c:	40020028 	.word	0x40020028
 80087a0:	40020040 	.word	0x40020040
 80087a4:	40020058 	.word	0x40020058
 80087a8:	40020070 	.word	0x40020070
 80087ac:	40020088 	.word	0x40020088
 80087b0:	400200a0 	.word	0x400200a0
 80087b4:	400200b8 	.word	0x400200b8
 80087b8:	40020410 	.word	0x40020410
 80087bc:	40020428 	.word	0x40020428
 80087c0:	40020440 	.word	0x40020440
 80087c4:	40020458 	.word	0x40020458
 80087c8:	40020470 	.word	0x40020470
 80087cc:	40020488 	.word	0x40020488
 80087d0:	400204a0 	.word	0x400204a0
 80087d4:	400204b8 	.word	0x400204b8
 80087d8:	58025408 	.word	0x58025408
 80087dc:	5802541c 	.word	0x5802541c
 80087e0:	58025430 	.word	0x58025430
 80087e4:	58025444 	.word	0x58025444
 80087e8:	58025458 	.word	0x58025458
 80087ec:	5802546c 	.word	0x5802546c
 80087f0:	58025480 	.word	0x58025480
 80087f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]
}
 8008808:	e04d      	b.n	80088a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a29      	ldr	r2, [pc, #164]	@ (80088b4 <DMA_SetConfig+0x338>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d022      	beq.n	800885a <DMA_SetConfig+0x2de>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a27      	ldr	r2, [pc, #156]	@ (80088b8 <DMA_SetConfig+0x33c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d01d      	beq.n	800885a <DMA_SetConfig+0x2de>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a26      	ldr	r2, [pc, #152]	@ (80088bc <DMA_SetConfig+0x340>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d018      	beq.n	800885a <DMA_SetConfig+0x2de>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a24      	ldr	r2, [pc, #144]	@ (80088c0 <DMA_SetConfig+0x344>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d013      	beq.n	800885a <DMA_SetConfig+0x2de>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a23      	ldr	r2, [pc, #140]	@ (80088c4 <DMA_SetConfig+0x348>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00e      	beq.n	800885a <DMA_SetConfig+0x2de>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a21      	ldr	r2, [pc, #132]	@ (80088c8 <DMA_SetConfig+0x34c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d009      	beq.n	800885a <DMA_SetConfig+0x2de>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a20      	ldr	r2, [pc, #128]	@ (80088cc <DMA_SetConfig+0x350>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d004      	beq.n	800885a <DMA_SetConfig+0x2de>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1e      	ldr	r2, [pc, #120]	@ (80088d0 <DMA_SetConfig+0x354>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d101      	bne.n	800885e <DMA_SetConfig+0x2e2>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <DMA_SetConfig+0x2e4>
 800885e:	2300      	movs	r3, #0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d020      	beq.n	80088a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	2201      	movs	r2, #1
 800886e:	409a      	lsls	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b40      	cmp	r3, #64	@ 0x40
 8008882:	d108      	bne.n	8008896 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	60da      	str	r2, [r3, #12]
}
 8008894:	e007      	b.n	80088a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	60da      	str	r2, [r3, #12]
}
 80088a6:	bf00      	nop
 80088a8:	371c      	adds	r7, #28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	58025408 	.word	0x58025408
 80088b8:	5802541c 	.word	0x5802541c
 80088bc:	58025430 	.word	0x58025430
 80088c0:	58025444 	.word	0x58025444
 80088c4:	58025458 	.word	0x58025458
 80088c8:	5802546c 	.word	0x5802546c
 80088cc:	58025480 	.word	0x58025480
 80088d0:	58025494 	.word	0x58025494

080088d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a42      	ldr	r2, [pc, #264]	@ (80089ec <DMA_CalcBaseAndBitshift+0x118>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d04a      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a41      	ldr	r2, [pc, #260]	@ (80089f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d045      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a3f      	ldr	r2, [pc, #252]	@ (80089f4 <DMA_CalcBaseAndBitshift+0x120>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d040      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a3e      	ldr	r2, [pc, #248]	@ (80089f8 <DMA_CalcBaseAndBitshift+0x124>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d03b      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a3c      	ldr	r2, [pc, #240]	@ (80089fc <DMA_CalcBaseAndBitshift+0x128>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d036      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a3b      	ldr	r2, [pc, #236]	@ (8008a00 <DMA_CalcBaseAndBitshift+0x12c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d031      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a39      	ldr	r2, [pc, #228]	@ (8008a04 <DMA_CalcBaseAndBitshift+0x130>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d02c      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a38      	ldr	r2, [pc, #224]	@ (8008a08 <DMA_CalcBaseAndBitshift+0x134>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d027      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a36      	ldr	r2, [pc, #216]	@ (8008a0c <DMA_CalcBaseAndBitshift+0x138>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d022      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a35      	ldr	r2, [pc, #212]	@ (8008a10 <DMA_CalcBaseAndBitshift+0x13c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d01d      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a33      	ldr	r2, [pc, #204]	@ (8008a14 <DMA_CalcBaseAndBitshift+0x140>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d018      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a32      	ldr	r2, [pc, #200]	@ (8008a18 <DMA_CalcBaseAndBitshift+0x144>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d013      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a30      	ldr	r2, [pc, #192]	@ (8008a1c <DMA_CalcBaseAndBitshift+0x148>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d00e      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2f      	ldr	r2, [pc, #188]	@ (8008a20 <DMA_CalcBaseAndBitshift+0x14c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d009      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a2d      	ldr	r2, [pc, #180]	@ (8008a24 <DMA_CalcBaseAndBitshift+0x150>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d004      	beq.n	800897c <DMA_CalcBaseAndBitshift+0xa8>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a2c      	ldr	r2, [pc, #176]	@ (8008a28 <DMA_CalcBaseAndBitshift+0x154>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d101      	bne.n	8008980 <DMA_CalcBaseAndBitshift+0xac>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <DMA_CalcBaseAndBitshift+0xae>
 8008980:	2300      	movs	r3, #0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d024      	beq.n	80089d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	3b10      	subs	r3, #16
 800898e:	4a27      	ldr	r2, [pc, #156]	@ (8008a2c <DMA_CalcBaseAndBitshift+0x158>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	091b      	lsrs	r3, r3, #4
 8008996:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	4a24      	ldr	r2, [pc, #144]	@ (8008a30 <DMA_CalcBaseAndBitshift+0x15c>)
 80089a0:	5cd3      	ldrb	r3, [r2, r3]
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d908      	bls.n	80089c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	4b1f      	ldr	r3, [pc, #124]	@ (8008a34 <DMA_CalcBaseAndBitshift+0x160>)
 80089b6:	4013      	ands	r3, r2
 80089b8:	1d1a      	adds	r2, r3, #4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80089be:	e00d      	b.n	80089dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	461a      	mov	r2, r3
 80089c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a34 <DMA_CalcBaseAndBitshift+0x160>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80089ce:	e005      	b.n	80089dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	40020010 	.word	0x40020010
 80089f0:	40020028 	.word	0x40020028
 80089f4:	40020040 	.word	0x40020040
 80089f8:	40020058 	.word	0x40020058
 80089fc:	40020070 	.word	0x40020070
 8008a00:	40020088 	.word	0x40020088
 8008a04:	400200a0 	.word	0x400200a0
 8008a08:	400200b8 	.word	0x400200b8
 8008a0c:	40020410 	.word	0x40020410
 8008a10:	40020428 	.word	0x40020428
 8008a14:	40020440 	.word	0x40020440
 8008a18:	40020458 	.word	0x40020458
 8008a1c:	40020470 	.word	0x40020470
 8008a20:	40020488 	.word	0x40020488
 8008a24:	400204a0 	.word	0x400204a0
 8008a28:	400204b8 	.word	0x400204b8
 8008a2c:	aaaaaaab 	.word	0xaaaaaaab
 8008a30:	08017858 	.word	0x08017858
 8008a34:	fffffc00 	.word	0xfffffc00

08008a38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d120      	bne.n	8008a8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d858      	bhi.n	8008b06 <DMA_CheckFifoParam+0xce>
 8008a54:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <DMA_CheckFifoParam+0x24>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a6d 	.word	0x08008a6d
 8008a60:	08008a7f 	.word	0x08008a7f
 8008a64:	08008a6d 	.word	0x08008a6d
 8008a68:	08008b07 	.word	0x08008b07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d048      	beq.n	8008b0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a7c:	e045      	b.n	8008b0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008a86:	d142      	bne.n	8008b0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a8c:	e03f      	b.n	8008b0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a96:	d123      	bne.n	8008ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d838      	bhi.n	8008b12 <DMA_CheckFifoParam+0xda>
 8008aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa8 <DMA_CheckFifoParam+0x70>)
 8008aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa6:	bf00      	nop
 8008aa8:	08008ab9 	.word	0x08008ab9
 8008aac:	08008abf 	.word	0x08008abf
 8008ab0:	08008ab9 	.word	0x08008ab9
 8008ab4:	08008ad1 	.word	0x08008ad1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	73fb      	strb	r3, [r7, #15]
        break;
 8008abc:	e030      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d025      	beq.n	8008b16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ace:	e022      	b.n	8008b16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ad8:	d11f      	bne.n	8008b1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ade:	e01c      	b.n	8008b1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d902      	bls.n	8008aee <DMA_CheckFifoParam+0xb6>
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d003      	beq.n	8008af4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008aec:	e018      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	73fb      	strb	r3, [r7, #15]
        break;
 8008af2:	e015      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	73fb      	strb	r3, [r7, #15]
    break;
 8008b04:	e00b      	b.n	8008b1e <DMA_CheckFifoParam+0xe6>
        break;
 8008b06:	bf00      	nop
 8008b08:	e00a      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
        break;
 8008b0a:	bf00      	nop
 8008b0c:	e008      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
        break;
 8008b0e:	bf00      	nop
 8008b10:	e006      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
        break;
 8008b12:	bf00      	nop
 8008b14:	e004      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
        break;
 8008b16:	bf00      	nop
 8008b18:	e002      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
        break;
 8008b1a:	bf00      	nop
 8008b1c:	e000      	b.n	8008b20 <DMA_CheckFifoParam+0xe8>
    break;
 8008b1e:	bf00      	nop
    }
  }

  return status;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop

08008b30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a38      	ldr	r2, [pc, #224]	@ (8008c24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d022      	beq.n	8008b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a36      	ldr	r2, [pc, #216]	@ (8008c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d01d      	beq.n	8008b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a35      	ldr	r2, [pc, #212]	@ (8008c2c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d018      	beq.n	8008b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a33      	ldr	r2, [pc, #204]	@ (8008c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d013      	beq.n	8008b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a32      	ldr	r2, [pc, #200]	@ (8008c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00e      	beq.n	8008b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a30      	ldr	r2, [pc, #192]	@ (8008c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d009      	beq.n	8008b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d004      	beq.n	8008b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a2d      	ldr	r2, [pc, #180]	@ (8008c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d101      	bne.n	8008b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b92:	2300      	movs	r3, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01a      	beq.n	8008bce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	3b08      	subs	r3, #8
 8008ba0:	4a28      	ldr	r2, [pc, #160]	@ (8008c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	091b      	lsrs	r3, r3, #4
 8008ba8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	4b26      	ldr	r3, [pc, #152]	@ (8008c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a24      	ldr	r2, [pc, #144]	@ (8008c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008bbc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	409a      	lsls	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008bcc:	e024      	b.n	8008c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	3b10      	subs	r3, #16
 8008bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bdc:	091b      	lsrs	r3, r3, #4
 8008bde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d806      	bhi.n	8008bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4a1b      	ldr	r2, [pc, #108]	@ (8008c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d902      	bls.n	8008bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	4b18      	ldr	r3, [pc, #96]	@ (8008c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a16      	ldr	r2, [pc, #88]	@ (8008c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008c08:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f003 031f 	and.w	r3, r3, #31
 8008c10:	2201      	movs	r2, #1
 8008c12:	409a      	lsls	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c18:	bf00      	nop
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	58025408 	.word	0x58025408
 8008c28:	5802541c 	.word	0x5802541c
 8008c2c:	58025430 	.word	0x58025430
 8008c30:	58025444 	.word	0x58025444
 8008c34:	58025458 	.word	0x58025458
 8008c38:	5802546c 	.word	0x5802546c
 8008c3c:	58025480 	.word	0x58025480
 8008c40:	58025494 	.word	0x58025494
 8008c44:	cccccccd 	.word	0xcccccccd
 8008c48:	16009600 	.word	0x16009600
 8008c4c:	58025880 	.word	0x58025880
 8008c50:	aaaaaaab 	.word	0xaaaaaaab
 8008c54:	400204b8 	.word	0x400204b8
 8008c58:	4002040f 	.word	0x4002040f
 8008c5c:	10008200 	.word	0x10008200
 8008c60:	40020880 	.word	0x40020880

08008c64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d04a      	beq.n	8008d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d847      	bhi.n	8008d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a25      	ldr	r2, [pc, #148]	@ (8008d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d022      	beq.n	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a24      	ldr	r2, [pc, #144]	@ (8008d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d01d      	beq.n	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a22      	ldr	r2, [pc, #136]	@ (8008d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d018      	beq.n	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a21      	ldr	r2, [pc, #132]	@ (8008d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1f      	ldr	r2, [pc, #124]	@ (8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00e      	beq.n	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d009      	beq.n	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8008d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d004      	beq.n	8008cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a1b      	ldr	r2, [pc, #108]	@ (8008d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d101      	bne.n	8008cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4b17      	ldr	r3, [pc, #92]	@ (8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a15      	ldr	r2, [pc, #84]	@ (8008d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008cec:	671a      	str	r2, [r3, #112]	@ 0x70
 8008cee:	e009      	b.n	8008d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4b14      	ldr	r3, [pc, #80]	@ (8008d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a11      	ldr	r2, [pc, #68]	@ (8008d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008d02:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	2201      	movs	r2, #1
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008d10:	bf00      	nop
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	58025408 	.word	0x58025408
 8008d20:	5802541c 	.word	0x5802541c
 8008d24:	58025430 	.word	0x58025430
 8008d28:	58025444 	.word	0x58025444
 8008d2c:	58025458 	.word	0x58025458
 8008d30:	5802546c 	.word	0x5802546c
 8008d34:	58025480 	.word	0x58025480
 8008d38:	58025494 	.word	0x58025494
 8008d3c:	1600963f 	.word	0x1600963f
 8008d40:	58025940 	.word	0x58025940
 8008d44:	1000823f 	.word	0x1000823f
 8008d48:	40020940 	.word	0x40020940

08008d4c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	2b80      	cmp	r3, #128	@ 0x80
 8008d64:	d105      	bne.n	8008d72 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e315      	b.n	800939e <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d101      	bne.n	8008d80 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e30e      	b.n	800939e <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	f040 82fd 	bne.w	8009390 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a82      	ldr	r2, [pc, #520]	@ (8008fb4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d04a      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a81      	ldr	r2, [pc, #516]	@ (8008fb8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d045      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a7f      	ldr	r2, [pc, #508]	@ (8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d040      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a7e      	ldr	r2, [pc, #504]	@ (8008fc0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d03b      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a7c      	ldr	r2, [pc, #496]	@ (8008fc4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d036      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a7b      	ldr	r2, [pc, #492]	@ (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d031      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a79      	ldr	r2, [pc, #484]	@ (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d02c      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a78      	ldr	r2, [pc, #480]	@ (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d027      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a76      	ldr	r2, [pc, #472]	@ (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d022      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a75      	ldr	r2, [pc, #468]	@ (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d01d      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a73      	ldr	r2, [pc, #460]	@ (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d018      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a72      	ldr	r2, [pc, #456]	@ (8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d013      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a70      	ldr	r2, [pc, #448]	@ (8008fe4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00e      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a6f      	ldr	r2, [pc, #444]	@ (8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d009      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a6d      	ldr	r2, [pc, #436]	@ (8008fec <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d004      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8008ff0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d101      	bne.n	8008e48 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d018      	beq.n	8008e80 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008e5c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	223f      	movs	r2, #63	@ 0x3f
 8008e78:	409a      	lsls	r2, r3
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	e018      	b.n	8008eb2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6819      	ldr	r1, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	f248 0320 	movw	r3, #32800	@ 0x8020
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea6:	f003 031f 	and.w	r3, r3, #31
 8008eaa:	2201      	movs	r2, #1
 8008eac:	409a      	lsls	r2, r3
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fb41 	bl	8009540 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a3c      	ldr	r2, [pc, #240]	@ (8008fb4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d072      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a3a      	ldr	r2, [pc, #232]	@ (8008fb8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d06d      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a39      	ldr	r2, [pc, #228]	@ (8008fbc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d068      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a37      	ldr	r2, [pc, #220]	@ (8008fc0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d063      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a36      	ldr	r2, [pc, #216]	@ (8008fc4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d05e      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a34      	ldr	r2, [pc, #208]	@ (8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d059      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a33      	ldr	r2, [pc, #204]	@ (8008fcc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d054      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a31      	ldr	r2, [pc, #196]	@ (8008fd0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d04f      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a30      	ldr	r2, [pc, #192]	@ (8008fd4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d04a      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8008fd8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d045      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a2d      	ldr	r2, [pc, #180]	@ (8008fdc <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d040      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a2b      	ldr	r2, [pc, #172]	@ (8008fe0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d03b      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d036      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a28      	ldr	r2, [pc, #160]	@ (8008fe8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d031      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a27      	ldr	r2, [pc, #156]	@ (8008fec <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d02c      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a25      	ldr	r2, [pc, #148]	@ (8008ff0 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d027      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a24      	ldr	r2, [pc, #144]	@ (8008ff4 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d022      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a22      	ldr	r2, [pc, #136]	@ (8008ff8 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d01d      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a21      	ldr	r2, [pc, #132]	@ (8008ffc <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d018      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a1f      	ldr	r2, [pc, #124]	@ (8009000 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8009004 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00e      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1c      	ldr	r2, [pc, #112]	@ (8009008 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800900c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a19      	ldr	r2, [pc, #100]	@ (8009010 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d132      	bne.n	8009014 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e031      	b.n	8009016 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8008fb2:	bf00      	nop
 8008fb4:	40020010 	.word	0x40020010
 8008fb8:	40020028 	.word	0x40020028
 8008fbc:	40020040 	.word	0x40020040
 8008fc0:	40020058 	.word	0x40020058
 8008fc4:	40020070 	.word	0x40020070
 8008fc8:	40020088 	.word	0x40020088
 8008fcc:	400200a0 	.word	0x400200a0
 8008fd0:	400200b8 	.word	0x400200b8
 8008fd4:	40020410 	.word	0x40020410
 8008fd8:	40020428 	.word	0x40020428
 8008fdc:	40020440 	.word	0x40020440
 8008fe0:	40020458 	.word	0x40020458
 8008fe4:	40020470 	.word	0x40020470
 8008fe8:	40020488 	.word	0x40020488
 8008fec:	400204a0 	.word	0x400204a0
 8008ff0:	400204b8 	.word	0x400204b8
 8008ff4:	58025408 	.word	0x58025408
 8008ff8:	5802541c 	.word	0x5802541c
 8008ffc:	58025430 	.word	0x58025430
 8009000:	58025444 	.word	0x58025444
 8009004:	58025458 	.word	0x58025458
 8009008:	5802546c 	.word	0x5802546c
 800900c:	58025480 	.word	0x58025480
 8009010:	58025494 	.word	0x58025494
 8009014:	2300      	movs	r3, #0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00d      	beq.n	8009036 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009022:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d004      	beq.n	8009036 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009034:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a3b      	ldr	r2, [pc, #236]	@ (8009128 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d04a      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a39      	ldr	r2, [pc, #228]	@ (800912c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d045      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a38      	ldr	r2, [pc, #224]	@ (8009130 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d040      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a36      	ldr	r2, [pc, #216]	@ (8009134 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d03b      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a35      	ldr	r2, [pc, #212]	@ (8009138 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d036      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a33      	ldr	r2, [pc, #204]	@ (800913c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d031      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a32      	ldr	r2, [pc, #200]	@ (8009140 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d02c      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a30      	ldr	r2, [pc, #192]	@ (8009144 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d027      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a2f      	ldr	r2, [pc, #188]	@ (8009148 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d022      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a2d      	ldr	r2, [pc, #180]	@ (800914c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d01d      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a2c      	ldr	r2, [pc, #176]	@ (8009150 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d018      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a2a      	ldr	r2, [pc, #168]	@ (8009154 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d013      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a29      	ldr	r2, [pc, #164]	@ (8009158 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00e      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a27      	ldr	r2, [pc, #156]	@ (800915c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d009      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a26      	ldr	r2, [pc, #152]	@ (8009160 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d004      	beq.n	80090d6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a24      	ldr	r2, [pc, #144]	@ (8009164 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d101      	bne.n	80090da <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80090da:	2300      	movs	r3, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d043      	beq.n	8009168 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f023 021e 	bic.w	r2, r3, #30
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0216 	orr.w	r2, r2, #22
 80090f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695a      	ldr	r2, [r3, #20]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009102:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009110:	2b00      	cmp	r3, #0
 8009112:	d043      	beq.n	800919c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0208 	orr.w	r2, r2, #8
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	e03a      	b.n	800919c <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8009126:	bf00      	nop
 8009128:	40020010 	.word	0x40020010
 800912c:	40020028 	.word	0x40020028
 8009130:	40020040 	.word	0x40020040
 8009134:	40020058 	.word	0x40020058
 8009138:	40020070 	.word	0x40020070
 800913c:	40020088 	.word	0x40020088
 8009140:	400200a0 	.word	0x400200a0
 8009144:	400200b8 	.word	0x400200b8
 8009148:	40020410 	.word	0x40020410
 800914c:	40020428 	.word	0x40020428
 8009150:	40020440 	.word	0x40020440
 8009154:	40020458 	.word	0x40020458
 8009158:	40020470 	.word	0x40020470
 800915c:	40020488 	.word	0x40020488
 8009160:	400204a0 	.word	0x400204a0
 8009164:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f023 020e 	bic.w	r2, r3, #14
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f042 020a 	orr.w	r2, r2, #10
 800917a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009188:	2b00      	cmp	r3, #0
 800918a:	d007      	beq.n	800919c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0204 	orr.w	r2, r2, #4
 800919a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a81      	ldr	r2, [pc, #516]	@ (80093a8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d072      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a80      	ldr	r2, [pc, #512]	@ (80093ac <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d06d      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a7e      	ldr	r2, [pc, #504]	@ (80093b0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d068      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a7d      	ldr	r2, [pc, #500]	@ (80093b4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d063      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a7b      	ldr	r2, [pc, #492]	@ (80093b8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d05e      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a7a      	ldr	r2, [pc, #488]	@ (80093bc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d059      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a78      	ldr	r2, [pc, #480]	@ (80093c0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d054      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a77      	ldr	r2, [pc, #476]	@ (80093c4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d04f      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a75      	ldr	r2, [pc, #468]	@ (80093c8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d04a      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a74      	ldr	r2, [pc, #464]	@ (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d045      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a72      	ldr	r2, [pc, #456]	@ (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d040      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a71      	ldr	r2, [pc, #452]	@ (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d03b      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a6f      	ldr	r2, [pc, #444]	@ (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d036      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a6e      	ldr	r2, [pc, #440]	@ (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d031      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a6c      	ldr	r2, [pc, #432]	@ (80093e0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d02c      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a6b      	ldr	r2, [pc, #428]	@ (80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d027      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a69      	ldr	r2, [pc, #420]	@ (80093e8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d022      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a68      	ldr	r2, [pc, #416]	@ (80093ec <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d01d      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a66      	ldr	r2, [pc, #408]	@ (80093f0 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d018      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a65      	ldr	r2, [pc, #404]	@ (80093f4 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d013      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a63      	ldr	r2, [pc, #396]	@ (80093f8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d00e      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a62      	ldr	r2, [pc, #392]	@ (80093fc <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d009      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a60      	ldr	r2, [pc, #384]	@ (8009400 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d004      	beq.n	800928c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a5f      	ldr	r2, [pc, #380]	@ (8009404 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d101      	bne.n	8009290 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8009290:	2300      	movs	r3, #0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d01a      	beq.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a35      	ldr	r2, [pc, #212]	@ (80093a8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d04a      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a34      	ldr	r2, [pc, #208]	@ (80093ac <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d045      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a32      	ldr	r2, [pc, #200]	@ (80093b0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d040      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a31      	ldr	r2, [pc, #196]	@ (80093b4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d03b      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a2f      	ldr	r2, [pc, #188]	@ (80093b8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d036      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a2e      	ldr	r2, [pc, #184]	@ (80093bc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d031      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a2c      	ldr	r2, [pc, #176]	@ (80093c0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d02c      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a2b      	ldr	r2, [pc, #172]	@ (80093c4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d027      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a29      	ldr	r2, [pc, #164]	@ (80093c8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d022      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a28      	ldr	r2, [pc, #160]	@ (80093cc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d01d      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a26      	ldr	r2, [pc, #152]	@ (80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d018      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a25      	ldr	r2, [pc, #148]	@ (80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d013      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a23      	ldr	r2, [pc, #140]	@ (80093d8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00e      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a22      	ldr	r2, [pc, #136]	@ (80093dc <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d009      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a20      	ldr	r2, [pc, #128]	@ (80093e0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d004      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a1f      	ldr	r2, [pc, #124]	@ (80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d108      	bne.n	800937e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	e00e      	b.n	800939c <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f042 0201 	orr.w	r2, r2, #1
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	e005      	b.n	800939c <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009396:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	40020010 	.word	0x40020010
 80093ac:	40020028 	.word	0x40020028
 80093b0:	40020040 	.word	0x40020040
 80093b4:	40020058 	.word	0x40020058
 80093b8:	40020070 	.word	0x40020070
 80093bc:	40020088 	.word	0x40020088
 80093c0:	400200a0 	.word	0x400200a0
 80093c4:	400200b8 	.word	0x400200b8
 80093c8:	40020410 	.word	0x40020410
 80093cc:	40020428 	.word	0x40020428
 80093d0:	40020440 	.word	0x40020440
 80093d4:	40020458 	.word	0x40020458
 80093d8:	40020470 	.word	0x40020470
 80093dc:	40020488 	.word	0x40020488
 80093e0:	400204a0 	.word	0x400204a0
 80093e4:	400204b8 	.word	0x400204b8
 80093e8:	58025408 	.word	0x58025408
 80093ec:	5802541c 	.word	0x5802541c
 80093f0:	58025430 	.word	0x58025430
 80093f4:	58025444 	.word	0x58025444
 80093f8:	58025458 	.word	0x58025458
 80093fc:	5802546c 	.word	0x5802546c
 8009400:	58025480 	.word	0x58025480
 8009404:	58025494 	.word	0x58025494

08009408 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a39      	ldr	r2, [pc, #228]	@ (8009500 <HAL_DMAEx_ChangeMemory+0xf8>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d04a      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a37      	ldr	r2, [pc, #220]	@ (8009504 <HAL_DMAEx_ChangeMemory+0xfc>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d045      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a36      	ldr	r2, [pc, #216]	@ (8009508 <HAL_DMAEx_ChangeMemory+0x100>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d040      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a34      	ldr	r2, [pc, #208]	@ (800950c <HAL_DMAEx_ChangeMemory+0x104>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d03b      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a33      	ldr	r2, [pc, #204]	@ (8009510 <HAL_DMAEx_ChangeMemory+0x108>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d036      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a31      	ldr	r2, [pc, #196]	@ (8009514 <HAL_DMAEx_ChangeMemory+0x10c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d031      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a30      	ldr	r2, [pc, #192]	@ (8009518 <HAL_DMAEx_ChangeMemory+0x110>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d02c      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a2e      	ldr	r2, [pc, #184]	@ (800951c <HAL_DMAEx_ChangeMemory+0x114>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d027      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a2d      	ldr	r2, [pc, #180]	@ (8009520 <HAL_DMAEx_ChangeMemory+0x118>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d022      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a2b      	ldr	r2, [pc, #172]	@ (8009524 <HAL_DMAEx_ChangeMemory+0x11c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d01d      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a2a      	ldr	r2, [pc, #168]	@ (8009528 <HAL_DMAEx_ChangeMemory+0x120>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d018      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a28      	ldr	r2, [pc, #160]	@ (800952c <HAL_DMAEx_ChangeMemory+0x124>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d013      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a27      	ldr	r2, [pc, #156]	@ (8009530 <HAL_DMAEx_ChangeMemory+0x128>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d00e      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a25      	ldr	r2, [pc, #148]	@ (8009534 <HAL_DMAEx_ChangeMemory+0x12c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d009      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a24      	ldr	r2, [pc, #144]	@ (8009538 <HAL_DMAEx_ChangeMemory+0x130>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d004      	beq.n	80094b6 <HAL_DMAEx_ChangeMemory+0xae>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a22      	ldr	r2, [pc, #136]	@ (800953c <HAL_DMAEx_ChangeMemory+0x134>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d101      	bne.n	80094ba <HAL_DMAEx_ChangeMemory+0xb2>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <HAL_DMAEx_ChangeMemory+0xb4>
 80094ba:	2300      	movs	r3, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00c      	beq.n	80094da <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d104      	bne.n	80094d0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	60da      	str	r2, [r3, #12]
 80094ce:	e010      	b.n	80094f2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	611a      	str	r2, [r3, #16]
 80094d8:	e00b      	b.n	80094f2 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d104      	bne.n	80094ea <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	60da      	str	r2, [r3, #12]
 80094e8:	e003      	b.n	80094f2 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	40020010 	.word	0x40020010
 8009504:	40020028 	.word	0x40020028
 8009508:	40020040 	.word	0x40020040
 800950c:	40020058 	.word	0x40020058
 8009510:	40020070 	.word	0x40020070
 8009514:	40020088 	.word	0x40020088
 8009518:	400200a0 	.word	0x400200a0
 800951c:	400200b8 	.word	0x400200b8
 8009520:	40020410 	.word	0x40020410
 8009524:	40020428 	.word	0x40020428
 8009528:	40020440 	.word	0x40020440
 800952c:	40020458 	.word	0x40020458
 8009530:	40020470 	.word	0x40020470
 8009534:	40020488 	.word	0x40020488
 8009538:	400204a0 	.word	0x400204a0
 800953c:	400204b8 	.word	0x400204b8

08009540 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a46      	ldr	r2, [pc, #280]	@ (800966c <DMA_MultiBufferSetConfig+0x12c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d04a      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a44      	ldr	r2, [pc, #272]	@ (8009670 <DMA_MultiBufferSetConfig+0x130>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d045      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a43      	ldr	r2, [pc, #268]	@ (8009674 <DMA_MultiBufferSetConfig+0x134>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d040      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a41      	ldr	r2, [pc, #260]	@ (8009678 <DMA_MultiBufferSetConfig+0x138>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d03b      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a40      	ldr	r2, [pc, #256]	@ (800967c <DMA_MultiBufferSetConfig+0x13c>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d036      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a3e      	ldr	r2, [pc, #248]	@ (8009680 <DMA_MultiBufferSetConfig+0x140>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d031      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a3d      	ldr	r2, [pc, #244]	@ (8009684 <DMA_MultiBufferSetConfig+0x144>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d02c      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a3b      	ldr	r2, [pc, #236]	@ (8009688 <DMA_MultiBufferSetConfig+0x148>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d027      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a3a      	ldr	r2, [pc, #232]	@ (800968c <DMA_MultiBufferSetConfig+0x14c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d022      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a38      	ldr	r2, [pc, #224]	@ (8009690 <DMA_MultiBufferSetConfig+0x150>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d01d      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a37      	ldr	r2, [pc, #220]	@ (8009694 <DMA_MultiBufferSetConfig+0x154>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d018      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a35      	ldr	r2, [pc, #212]	@ (8009698 <DMA_MultiBufferSetConfig+0x158>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d013      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a34      	ldr	r2, [pc, #208]	@ (800969c <DMA_MultiBufferSetConfig+0x15c>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00e      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a32      	ldr	r2, [pc, #200]	@ (80096a0 <DMA_MultiBufferSetConfig+0x160>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d009      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a31      	ldr	r2, [pc, #196]	@ (80096a4 <DMA_MultiBufferSetConfig+0x164>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d004      	beq.n	80095ee <DMA_MultiBufferSetConfig+0xae>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a2f      	ldr	r2, [pc, #188]	@ (80096a8 <DMA_MultiBufferSetConfig+0x168>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d101      	bne.n	80095f2 <DMA_MultiBufferSetConfig+0xb2>
 80095ee:	2301      	movs	r3, #1
 80095f0:	e000      	b.n	80095f4 <DMA_MultiBufferSetConfig+0xb4>
 80095f2:	2300      	movs	r3, #0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d019      	beq.n	800962c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	2b40      	cmp	r3, #64	@ 0x40
 8009606:	d108      	bne.n	800961a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8009618:	e021      	b.n	800965e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	60da      	str	r2, [r3, #12]
}
 800962a:	e018      	b.n	800965e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	2b40      	cmp	r3, #64	@ 0x40
 800963a:	d108      	bne.n	800964e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	60da      	str	r2, [r3, #12]
}
 800964c:	e007      	b.n	800965e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	60da      	str	r2, [r3, #12]
}
 800965e:	bf00      	nop
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	40020010 	.word	0x40020010
 8009670:	40020028 	.word	0x40020028
 8009674:	40020040 	.word	0x40020040
 8009678:	40020058 	.word	0x40020058
 800967c:	40020070 	.word	0x40020070
 8009680:	40020088 	.word	0x40020088
 8009684:	400200a0 	.word	0x400200a0
 8009688:	400200b8 	.word	0x400200b8
 800968c:	40020410 	.word	0x40020410
 8009690:	40020428 	.word	0x40020428
 8009694:	40020440 	.word	0x40020440
 8009698:	40020458 	.word	0x40020458
 800969c:	40020470 	.word	0x40020470
 80096a0:	40020488 	.word	0x40020488
 80096a4:	400204a0 	.word	0x400204a0
 80096a8:	400204b8 	.word	0x400204b8

080096ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e0e3      	b.n	8009886 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d106      	bne.n	80096d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2223      	movs	r2, #35	@ 0x23
 80096cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7f9 f93b 	bl	800294c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096d6:	4b6e      	ldr	r3, [pc, #440]	@ (8009890 <HAL_ETH_Init+0x1e4>)
 80096d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096dc:	4a6c      	ldr	r2, [pc, #432]	@ (8009890 <HAL_ETH_Init+0x1e4>)
 80096de:	f043 0302 	orr.w	r3, r3, #2
 80096e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80096e6:	4b6a      	ldr	r3, [pc, #424]	@ (8009890 <HAL_ETH_Init+0x1e4>)
 80096e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	60bb      	str	r3, [r7, #8]
 80096f2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	7a1b      	ldrb	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d103      	bne.n	8009704 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80096fc:	2000      	movs	r0, #0
 80096fe:	f7fb ffa9 	bl	8005654 <HAL_SYSCFG_ETHInterfaceSelect>
 8009702:	e003      	b.n	800970c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009704:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009708:	f7fb ffa4 	bl	8005654 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800970c:	4b61      	ldr	r3, [pc, #388]	@ (8009894 <HAL_ETH_Init+0x1e8>)
 800970e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6812      	ldr	r2, [r2, #0]
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009726:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009728:	f7fb ff58 	bl	80055dc <HAL_GetTick>
 800972c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800972e:	e011      	b.n	8009754 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009730:	f7fb ff54 	bl	80055dc <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800973e:	d909      	bls.n	8009754 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2204      	movs	r2, #4
 8009744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	22e0      	movs	r2, #224	@ 0xe0
 800974c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e098      	b.n	8009886 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e4      	bne.n	8009730 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa4e 	bl	8009c08 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800976c:	f002 fe48 	bl	800c400 <HAL_RCC_GetHCLKFreq>
 8009770:	4603      	mov	r3, r0
 8009772:	4a49      	ldr	r2, [pc, #292]	@ (8009898 <HAL_ETH_Init+0x1ec>)
 8009774:	fba2 2303 	umull	r2, r3, r2, r3
 8009778:	0c9a      	lsrs	r2, r3, #18
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3a01      	subs	r2, #1
 8009780:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fc31 	bl	8009fec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009792:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009796:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80097a6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d009      	beq.n	80097ca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2201      	movs	r2, #1
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	22e0      	movs	r2, #224	@ 0xe0
 80097c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e05d      	b.n	8009886 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80097d6:	4b31      	ldr	r3, [pc, #196]	@ (800989c <HAL_ETH_Init+0x1f0>)
 80097d8:	4013      	ands	r3, r2
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6952      	ldr	r2, [r2, #20]
 80097de:	0051      	lsls	r1, r2, #1
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6812      	ldr	r2, [r2, #0]
 80097e4:	430b      	orrs	r3, r1
 80097e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80097ea:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fc99 	bl	800a126 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fcdf 	bl	800a1b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	3305      	adds	r3, #5
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	021a      	lsls	r2, r3, #8
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	3304      	adds	r3, #4
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	4619      	mov	r1, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	3303      	adds	r3, #3
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	061a      	lsls	r2, r3, #24
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	3302      	adds	r3, #2
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	041b      	lsls	r3, r3, #16
 800982c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	3301      	adds	r3, #1
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009838:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009846:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009848:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	4b11      	ldr	r3, [pc, #68]	@ (80098a0 <HAL_ETH_Init+0x1f4>)
 800985a:	430b      	orrs	r3, r1
 800985c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	4b0d      	ldr	r3, [pc, #52]	@ (80098a4 <HAL_ETH_Init+0x1f8>)
 800986e:	430b      	orrs	r3, r1
 8009870:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2210      	movs	r2, #16
 8009880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	58024400 	.word	0x58024400
 8009894:	58000400 	.word	0x58000400
 8009898:	431bde83 	.word	0x431bde83
 800989c:	ffff8001 	.word	0xffff8001
 80098a0:	0c020060 	.word	0x0c020060
 80098a4:	0c20c000 	.word	0x0c20c000

080098a8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d153      	bne.n	8009962 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2223      	movs	r2, #35	@ 0x23
 80098be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2204      	movs	r2, #4
 80098c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f90c 	bl	8009ae6 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f042 0202 	orr.w	r2, r2, #2
 80098dc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f042 0201 	orr.w	r2, r2, #1
 80098ec:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f042 0201 	orr.w	r2, r2, #1
 80098fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800990a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800991a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009926:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	6812      	ldr	r2, [r2, #0]
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009936:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009942:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	6812      	ldr	r2, [r2, #0]
 800994a:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800994e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009952:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2223      	movs	r2, #35	@ 0x23
 800995a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	e000      	b.n	8009964 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
  }
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b088      	sub	sp, #32
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800998a:	f043 0201 	orr.w	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e0a2      	b.n	8009ade <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800999e:	2b23      	cmp	r3, #35	@ 0x23
 80099a0:	d001      	beq.n	80099a6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e09b      	b.n	8009ade <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	69fa      	ldr	r2, [r7, #28]
 80099b0:	3212      	adds	r2, #18
 80099b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099bc:	f1c3 0304 	rsb	r3, r3, #4
 80099c0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80099c2:	e064      	b.n	8009a8e <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d007      	beq.n	80099e0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d103      	bne.n	80099f4 <HAL_ETH_ReadData+0x88>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d03a      	beq.n	8009a6a <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d005      	beq.n	8009a0c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8009a30:	2301      	movs	r3, #1
 8009a32:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8009a44:	461a      	mov	r2, r3
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	f000 f8cf 	bl	8009bec <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	441a      	add	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	2200      	movs	r2, #0
 8009a68:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d902      	bls.n	8009a7c <HAL_ETH_ReadData+0x110>
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	3b04      	subs	r3, #4
 8009a7a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	3212      	adds	r2, #18
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	db06      	blt.n	8009aa4 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d202      	bcs.n	8009aa4 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8009a9e:	7cfb      	ldrb	r3, [r7, #19]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d08f      	beq.n	80099c4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	441a      	add	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f814 	bl	8009ae6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8009ac4:	7cfb      	ldrb	r3, [r7, #19]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d108      	bne.n	8009adc <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e000      	b.n	8009ade <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3720      	adds	r7, #32
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b088      	sub	sp, #32
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8009af2:	2301      	movs	r3, #1
 8009af4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009afa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	3212      	adds	r2, #18
 8009b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b06:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b0c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8009b0e:	e038      	b.n	8009b82 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d112      	bne.n	8009b3e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8009b18:	f107 0308 	add.w	r3, r7, #8
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f85b 	bl	8009bd8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	74fb      	strb	r3, [r7, #19]
 8009b2c:	e007      	b.n	8009b3e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	461a      	mov	r2, r3
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8009b3e:	7cfb      	ldrb	r3, [r7, #19]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d01e      	beq.n	8009b82 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8009b52:	60da      	str	r2, [r3, #12]
 8009b54:	e003      	b.n	8009b5e <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8009b5c:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	3301      	adds	r3, #1
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d902      	bls.n	8009b70 <ETH_UpdateDescriptor+0x8a>
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	3b04      	subs	r3, #4
 8009b6e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	3212      	adds	r2, #18
 8009b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7a:	617b      	str	r3, [r7, #20]
      desccount--;
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <ETH_UpdateDescriptor+0xa8>
 8009b88:	7cfb      	ldrb	r3, [r7, #19]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1c0      	bne.n	8009b10 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d01b      	beq.n	8009bd0 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	f003 0303 	and.w	r3, r3, #3
 8009ba0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8009ba2:	f3bf 8f5f 	dmb	sy
}
 8009ba6:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6919      	ldr	r1, [r3, #16]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	4413      	add	r3, r2
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	18ca      	adds	r2, r1, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bc0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	69fa      	ldr	r2, [r7, #28]
 8009bc8:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8009bd0:	bf00      	nop
 8009bd2:	3720      	adds	r7, #32
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_ETH_RxAllocateCallback>:
  * @brief  Rx Allocate callback.
  * @param  buff: pointer to allocated buffer
  * @retval None
  */
__weak void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxAllocateCallback could be implemented in the user file
  */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_ETH_RxLinkCallback>:
  * @param  buff: pointer to received data
  * @param  Length: received data length
  * @retval None
  */
__weak void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	807b      	strh	r3, [r7, #2]
  UNUSED(buff);
  UNUSED(Length);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxLinkCallback could be implemented in the user file
  */
}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
	...

08009c08 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009c20:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009c22:	f002 fbed 	bl	800c400 <HAL_RCC_GetHCLKFreq>
 8009c26:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009c94 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d804      	bhi.n	8009c3a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	e022      	b.n	8009c80 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4a16      	ldr	r2, [pc, #88]	@ (8009c98 <HAL_ETH_SetMDIOClockRange+0x90>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d204      	bcs.n	8009c4c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	e019      	b.n	8009c80 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4a13      	ldr	r2, [pc, #76]	@ (8009c9c <HAL_ETH_SetMDIOClockRange+0x94>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d915      	bls.n	8009c80 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4a12      	ldr	r2, [pc, #72]	@ (8009ca0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d804      	bhi.n	8009c66 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e00c      	b.n	8009c80 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4a0e      	ldr	r2, [pc, #56]	@ (8009ca4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d804      	bhi.n	8009c78 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009c74:	60fb      	str	r3, [r7, #12]
 8009c76:	e003      	b.n	8009c80 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8009c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	02160ebf 	.word	0x02160ebf
 8009c98:	03938700 	.word	0x03938700
 8009c9c:	05f5e0ff 	.word	0x05f5e0ff
 8009ca0:	08f0d17f 	.word	0x08f0d17f
 8009ca4:	0ee6b27f 	.word	0x0ee6b27f

08009ca8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	791b      	ldrb	r3, [r3, #4]
 8009cc0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009cc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	7b1b      	ldrb	r3, [r3, #12]
 8009cc8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	7b5b      	ldrb	r3, [r3, #13]
 8009cd0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	7b9b      	ldrb	r3, [r3, #14]
 8009cd8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009cda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	7bdb      	ldrb	r3, [r3, #15]
 8009ce0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009ce2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	7c12      	ldrb	r2, [r2, #16]
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	d102      	bne.n	8009cf2 <ETH_SetMACConfig+0x4a>
 8009cec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009cf0:	e000      	b.n	8009cf4 <ETH_SetMACConfig+0x4c>
 8009cf2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009cf4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	7c52      	ldrb	r2, [r2, #17]
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	d102      	bne.n	8009d04 <ETH_SetMACConfig+0x5c>
 8009cfe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009d02:	e000      	b.n	8009d06 <ETH_SetMACConfig+0x5e>
 8009d04:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009d06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	7c9b      	ldrb	r3, [r3, #18]
 8009d0c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009d0e:	431a      	orrs	r2, r3
               macconf->Speed |
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009d14:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009d1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	7f1b      	ldrb	r3, [r3, #28]
 8009d20:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009d22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	7f5b      	ldrb	r3, [r3, #29]
 8009d28:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009d2a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	7f92      	ldrb	r2, [r2, #30]
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	d102      	bne.n	8009d3a <ETH_SetMACConfig+0x92>
 8009d34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009d38:	e000      	b.n	8009d3c <ETH_SetMACConfig+0x94>
 8009d3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009d3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	7fdb      	ldrb	r3, [r3, #31]
 8009d42:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009d44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	d102      	bne.n	8009d56 <ETH_SetMACConfig+0xae>
 8009d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d54:	e000      	b.n	8009d58 <ETH_SetMACConfig+0xb0>
 8009d56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009d58:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d66:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009d68:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	4b56      	ldr	r3, [pc, #344]	@ (8009ed4 <ETH_SetMACConfig+0x22c>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	68f9      	ldr	r1, [r7, #12]
 8009d82:	430b      	orrs	r3, r1
 8009d84:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d8a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009d92:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009d94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d9c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009d9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009da6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009da8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8009db0:	2a00      	cmp	r2, #0
 8009db2:	d102      	bne.n	8009dba <ETH_SetMACConfig+0x112>
 8009db4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009db8:	e000      	b.n	8009dbc <ETH_SetMACConfig+0x114>
 8009dba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009dbc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	4b42      	ldr	r3, [pc, #264]	@ (8009ed8 <ETH_SetMACConfig+0x230>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	430b      	orrs	r3, r1
 8009dd8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009de0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	4b3a      	ldr	r3, [pc, #232]	@ (8009edc <ETH_SetMACConfig+0x234>)
 8009df2:	4013      	ands	r3, r2
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	68f9      	ldr	r1, [r7, #12]
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009e04:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009e0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	d101      	bne.n	8009e1a <ETH_SetMACConfig+0x172>
 8009e16:	2280      	movs	r2, #128	@ 0x80
 8009e18:	e000      	b.n	8009e1c <ETH_SetMACConfig+0x174>
 8009e1a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009e1c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e22:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009e24:	4313      	orrs	r3, r2
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009e2e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8009e32:	4013      	ands	r3, r2
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	68f9      	ldr	r1, [r7, #12]
 8009e3a:	430b      	orrs	r3, r1
 8009e3c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009e44:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009e4c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e5a:	f023 0103 	bic.w	r1, r3, #3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8009e72:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	d101      	bne.n	8009e96 <ETH_SetMACConfig+0x1ee>
 8009e92:	2240      	movs	r2, #64	@ 0x40
 8009e94:	e000      	b.n	8009e98 <ETH_SetMACConfig+0x1f0>
 8009e96:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009e98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009ea0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009ea2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8009eaa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8009eb8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8009ec8:	bf00      	nop
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	00048083 	.word	0x00048083
 8009ed8:	c0f88000 	.word	0xc0f88000
 8009edc:	fffffef0 	.word	0xfffffef0

08009ee0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	4b38      	ldr	r3, [pc, #224]	@ (8009fd8 <ETH_SetDMAConfig+0xf8>)
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	6811      	ldr	r1, [r2, #0]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6812      	ldr	r2, [r2, #0]
 8009f00:	430b      	orrs	r3, r1
 8009f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f06:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	791b      	ldrb	r3, [r3, #4]
 8009f0c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009f12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	7b1b      	ldrb	r3, [r3, #12]
 8009f18:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	4b2c      	ldr	r3, [pc, #176]	@ (8009fdc <ETH_SetDMAConfig+0xfc>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6812      	ldr	r2, [r2, #0]
 8009f30:	68f9      	ldr	r1, [r7, #12]
 8009f32:	430b      	orrs	r3, r1
 8009f34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f38:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	7b5b      	ldrb	r3, [r3, #13]
 8009f3e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009f44:	4313      	orrs	r3, r2
 8009f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f50:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009f54:	4b22      	ldr	r3, [pc, #136]	@ (8009fe0 <ETH_SetDMAConfig+0x100>)
 8009f56:	4013      	ands	r3, r2
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	6812      	ldr	r2, [r2, #0]
 8009f5c:	68f9      	ldr	r1, [r7, #12]
 8009f5e:	430b      	orrs	r3, r1
 8009f60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f64:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	7d1b      	ldrb	r3, [r3, #20]
 8009f70:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009f72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	7f5b      	ldrb	r3, [r3, #29]
 8009f78:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f86:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8009f8a:	4b16      	ldr	r3, [pc, #88]	@ (8009fe4 <ETH_SetDMAConfig+0x104>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	68f9      	ldr	r1, [r7, #12]
 8009f94:	430b      	orrs	r3, r1
 8009f96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f9a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	7f1b      	ldrb	r3, [r3, #28]
 8009fa2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fb4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8009fe8 <ETH_SetDMAConfig+0x108>)
 8009fba:	4013      	ands	r3, r2
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	68f9      	ldr	r1, [r7, #12]
 8009fc2:	430b      	orrs	r3, r1
 8009fc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009fc8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8009fcc:	bf00      	nop
 8009fce:	3714      	adds	r7, #20
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	ffff87fd 	.word	0xffff87fd
 8009fdc:	ffff2ffe 	.word	0xffff2ffe
 8009fe0:	fffec000 	.word	0xfffec000
 8009fe4:	ffc0efef 	.word	0xffc0efef
 8009fe8:	7fc0ffff 	.word	0x7fc0ffff

08009fec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b0a4      	sub	sp, #144	@ 0x90
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009ffe:	2300      	movs	r3, #0
 800a000:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a004:	2300      	movs	r3, #0
 800a006:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a00a:	2301      	movs	r3, #1
 800a00c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a010:	2301      	movs	r3, #1
 800a012:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a022:	2301      	movs	r3, #1
 800a024:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a02c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a02e:	2300      	movs	r3, #0
 800a030:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800a034:	2300      	movs	r3, #0
 800a036:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a038:	2300      	movs	r3, #0
 800a03a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a03e:	2300      	movs	r3, #0
 800a040:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800a044:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800a048:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a04a:	2300      	movs	r3, #0
 800a04c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a050:	2300      	movs	r3, #0
 800a052:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800a054:	2301      	movs	r3, #1
 800a056:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a060:	2300      	movs	r3, #0
 800a062:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a066:	2300      	movs	r3, #0
 800a068:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a06e:	2300      	movs	r3, #0
 800a070:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a072:	2300      	movs	r3, #0
 800a074:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a078:	2300      	movs	r3, #0
 800a07a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a07e:	2301      	movs	r3, #1
 800a080:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a084:	2320      	movs	r3, #32
 800a086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a08a:	2301      	movs	r3, #1
 800a08c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a090:	2300      	movs	r3, #0
 800a092:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a096:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a09a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a09c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a0a0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a0d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7ff fde6 	bl	8009ca8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a0f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a0fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a100:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a104:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a106:	2300      	movs	r3, #0
 800a108:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a10c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800a110:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a112:	f107 0308 	add.w	r3, r7, #8
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff fee1 	bl	8009ee0 <ETH_SetDMAConfig>
}
 800a11e:	bf00      	nop
 800a120:	3790      	adds	r7, #144	@ 0x90
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a12e:	2300      	movs	r3, #0
 800a130:	60fb      	str	r3, [r7, #12]
 800a132:	e01d      	b.n	800a170 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	68d9      	ldr	r1, [r3, #12]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4613      	mov	r3, r2
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4413      	add	r3, r2
 800a140:	00db      	lsls	r3, r3, #3
 800a142:	440b      	add	r3, r1
 800a144:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2200      	movs	r2, #0
 800a150:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2200      	movs	r2, #0
 800a15c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	3206      	adds	r2, #6
 800a166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b03      	cmp	r3, #3
 800a174:	d9de      	bls.n	800a134 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a184:	461a      	mov	r2, r3
 800a186:	2303      	movs	r3, #3
 800a188:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a198:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1a8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800a1ac:	bf00      	nop
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e023      	b.n	800a20e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6919      	ldr	r1, [r3, #16]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	4413      	add	r3, r2
 800a1d2:	00db      	lsls	r3, r3, #3
 800a1d4:	440b      	add	r3, r1
 800a1d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a1fc:	68b9      	ldr	r1, [r7, #8]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	3212      	adds	r2, #18
 800a204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3301      	adds	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b03      	cmp	r3, #3
 800a212:	d9d8      	bls.n	800a1c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a23a:	461a      	mov	r2, r3
 800a23c:	2303      	movs	r3, #3
 800a23e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691a      	ldr	r2, [r3, #16]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a24e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a262:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800a266:	bf00      	nop
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a272:	b480      	push	{r7}
 800a274:	b087      	sub	sp, #28
 800a276:	af00      	add	r7, sp, #0
 800a278:	60f8      	str	r0, [r7, #12]
 800a27a:	460b      	mov	r3, r1
 800a27c:	607a      	str	r2, [r7, #4]
 800a27e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e00a      	b.n	800a2a4 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d103      	bne.n	800a29c <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	605a      	str	r2, [r3, #4]
      break;
 800a29a:	e002      	b.n	800a2a2 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a0:	bf00      	nop
  }

  return status;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	371c      	adds	r7, #28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d101      	bne.n	800a2c4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e003      	b.n	800a2cc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
  }
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	0c1b      	lsrs	r3, r3, #16
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 031f 	and.w	r3, r3, #31
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fa:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800a2fc:	f7fb fb16 	bl	800592c <HAL_GetCurrentCPUID>
 800a300:	4603      	mov	r3, r0
 800a302:	2b03      	cmp	r3, #3
 800a304:	d105      	bne.n	800a312 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	011a      	lsls	r2, r3, #4
 800a30a:	4b0f      	ldr	r3, [pc, #60]	@ (800a348 <HAL_EXTI_IRQHandler+0x70>)
 800a30c:	4413      	add	r3, r2
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e004      	b.n	800a31c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	011a      	lsls	r2, r3, #4
 800a316:	4b0d      	ldr	r3, [pc, #52]	@ (800a34c <HAL_EXTI_IRQHandler+0x74>)
 800a318:	4413      	add	r3, r2
 800a31a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4013      	ands	r3, r2
 800a324:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d009      	beq.n	800a340 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	4798      	blx	r3
    }
  }
}
 800a340:	bf00      	nop
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	58000088 	.word	0x58000088
 800a34c:	580000c8 	.word	0x580000c8

0800a350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a350:	b480      	push	{r7}
 800a352:	b089      	sub	sp, #36	@ 0x24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a35a:	2300      	movs	r3, #0
 800a35c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a35e:	4b89      	ldr	r3, [pc, #548]	@ (800a584 <HAL_GPIO_Init+0x234>)
 800a360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a362:	e194      	b.n	800a68e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	2101      	movs	r1, #1
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	fa01 f303 	lsl.w	r3, r1, r3
 800a370:	4013      	ands	r3, r2
 800a372:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 8186 	beq.w	800a688 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f003 0303 	and.w	r3, r3, #3
 800a384:	2b01      	cmp	r3, #1
 800a386:	d005      	beq.n	800a394 <HAL_GPIO_Init+0x44>
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f003 0303 	and.w	r3, r3, #3
 800a390:	2b02      	cmp	r3, #2
 800a392:	d130      	bne.n	800a3f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	2203      	movs	r2, #3
 800a3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a4:	43db      	mvns	r3, r3
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b8:	69ba      	ldr	r2, [r7, #24]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d2:	43db      	mvns	r3, r3
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	091b      	lsrs	r3, r3, #4
 800a3e0:	f003 0201 	and.w	r2, r3, #1
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	69ba      	ldr	r2, [r7, #24]
 800a3f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f003 0303 	and.w	r3, r3, #3
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d017      	beq.n	800a432 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	2203      	movs	r2, #3
 800a40e:	fa02 f303 	lsl.w	r3, r2, r3
 800a412:	43db      	mvns	r3, r3
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	4013      	ands	r3, r2
 800a418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	689a      	ldr	r2, [r3, #8]
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	005b      	lsls	r3, r3, #1
 800a422:	fa02 f303 	lsl.w	r3, r2, r3
 800a426:	69ba      	ldr	r2, [r7, #24]
 800a428:	4313      	orrs	r3, r2
 800a42a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	f003 0303 	and.w	r3, r3, #3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d123      	bne.n	800a486 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	08da      	lsrs	r2, r3, #3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3208      	adds	r2, #8
 800a446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	220f      	movs	r2, #15
 800a456:	fa02 f303 	lsl.w	r3, r2, r3
 800a45a:	43db      	mvns	r3, r3
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	4013      	ands	r3, r2
 800a460:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	691a      	ldr	r2, [r3, #16]
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	fa02 f303 	lsl.w	r3, r2, r3
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	4313      	orrs	r3, r2
 800a476:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	08da      	lsrs	r2, r3, #3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3208      	adds	r2, #8
 800a480:	69b9      	ldr	r1, [r7, #24]
 800a482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	2203      	movs	r2, #3
 800a492:	fa02 f303 	lsl.w	r3, r2, r3
 800a496:	43db      	mvns	r3, r3
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	4013      	ands	r3, r2
 800a49c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f003 0203 	and.w	r2, r3, #3
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	69ba      	ldr	r2, [r7, #24]
 800a4b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80e0 	beq.w	800a688 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4c8:	4b2f      	ldr	r3, [pc, #188]	@ (800a588 <HAL_GPIO_Init+0x238>)
 800a4ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4ce:	4a2e      	ldr	r2, [pc, #184]	@ (800a588 <HAL_GPIO_Init+0x238>)
 800a4d0:	f043 0302 	orr.w	r3, r3, #2
 800a4d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a4d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a588 <HAL_GPIO_Init+0x238>)
 800a4da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4e6:	4a29      	ldr	r2, [pc, #164]	@ (800a58c <HAL_GPIO_Init+0x23c>)
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	089b      	lsrs	r3, r3, #2
 800a4ec:	3302      	adds	r3, #2
 800a4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	f003 0303 	and.w	r3, r3, #3
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	220f      	movs	r2, #15
 800a4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a502:	43db      	mvns	r3, r3
 800a504:	69ba      	ldr	r2, [r7, #24]
 800a506:	4013      	ands	r3, r2
 800a508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a20      	ldr	r2, [pc, #128]	@ (800a590 <HAL_GPIO_Init+0x240>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d052      	beq.n	800a5b8 <HAL_GPIO_Init+0x268>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a1f      	ldr	r2, [pc, #124]	@ (800a594 <HAL_GPIO_Init+0x244>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d031      	beq.n	800a57e <HAL_GPIO_Init+0x22e>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a1e      	ldr	r2, [pc, #120]	@ (800a598 <HAL_GPIO_Init+0x248>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d02b      	beq.n	800a57a <HAL_GPIO_Init+0x22a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a1d      	ldr	r2, [pc, #116]	@ (800a59c <HAL_GPIO_Init+0x24c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d025      	beq.n	800a576 <HAL_GPIO_Init+0x226>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a0 <HAL_GPIO_Init+0x250>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d01f      	beq.n	800a572 <HAL_GPIO_Init+0x222>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a4 <HAL_GPIO_Init+0x254>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d019      	beq.n	800a56e <HAL_GPIO_Init+0x21e>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a1a      	ldr	r2, [pc, #104]	@ (800a5a8 <HAL_GPIO_Init+0x258>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d013      	beq.n	800a56a <HAL_GPIO_Init+0x21a>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a19      	ldr	r2, [pc, #100]	@ (800a5ac <HAL_GPIO_Init+0x25c>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d00d      	beq.n	800a566 <HAL_GPIO_Init+0x216>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a18      	ldr	r2, [pc, #96]	@ (800a5b0 <HAL_GPIO_Init+0x260>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d007      	beq.n	800a562 <HAL_GPIO_Init+0x212>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a17      	ldr	r2, [pc, #92]	@ (800a5b4 <HAL_GPIO_Init+0x264>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d101      	bne.n	800a55e <HAL_GPIO_Init+0x20e>
 800a55a:	2309      	movs	r3, #9
 800a55c:	e02d      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a55e:	230a      	movs	r3, #10
 800a560:	e02b      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a562:	2308      	movs	r3, #8
 800a564:	e029      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a566:	2307      	movs	r3, #7
 800a568:	e027      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a56a:	2306      	movs	r3, #6
 800a56c:	e025      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a56e:	2305      	movs	r3, #5
 800a570:	e023      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a572:	2304      	movs	r3, #4
 800a574:	e021      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a576:	2303      	movs	r3, #3
 800a578:	e01f      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a57a:	2302      	movs	r3, #2
 800a57c:	e01d      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a57e:	2301      	movs	r3, #1
 800a580:	e01b      	b.n	800a5ba <HAL_GPIO_Init+0x26a>
 800a582:	bf00      	nop
 800a584:	58000080 	.word	0x58000080
 800a588:	58024400 	.word	0x58024400
 800a58c:	58000400 	.word	0x58000400
 800a590:	58020000 	.word	0x58020000
 800a594:	58020400 	.word	0x58020400
 800a598:	58020800 	.word	0x58020800
 800a59c:	58020c00 	.word	0x58020c00
 800a5a0:	58021000 	.word	0x58021000
 800a5a4:	58021400 	.word	0x58021400
 800a5a8:	58021800 	.word	0x58021800
 800a5ac:	58021c00 	.word	0x58021c00
 800a5b0:	58022000 	.word	0x58022000
 800a5b4:	58022400 	.word	0x58022400
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	f002 0203 	and.w	r2, r2, #3
 800a5c0:	0092      	lsls	r2, r2, #2
 800a5c2:	4093      	lsls	r3, r2
 800a5c4:	69ba      	ldr	r2, [r7, #24]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a5ca:	4938      	ldr	r1, [pc, #224]	@ (800a6ac <HAL_GPIO_Init+0x35c>)
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	089b      	lsrs	r3, r3, #2
 800a5d0:	3302      	adds	r3, #2
 800a5d2:	69ba      	ldr	r2, [r7, #24]
 800a5d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a5d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	43db      	mvns	r3, r3
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a5fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	43db      	mvns	r3, r3
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	4013      	ands	r3, r2
 800a616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	4313      	orrs	r3, r2
 800a62a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a62c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	43db      	mvns	r3, r3
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	4013      	ands	r3, r2
 800a642:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	4313      	orrs	r3, r2
 800a656:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	43db      	mvns	r3, r3
 800a668:	69ba      	ldr	r2, [r7, #24]
 800a66a:	4013      	ands	r3, r2
 800a66c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	3301      	adds	r3, #1
 800a68c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	fa22 f303 	lsr.w	r3, r2, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f47f ae63 	bne.w	800a364 <HAL_GPIO_Init+0x14>
  }
}
 800a69e:	bf00      	nop
 800a6a0:	bf00      	nop
 800a6a2:	3724      	adds	r7, #36	@ 0x24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	58000400 	.word	0x58000400

0800a6b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	807b      	strh	r3, [r7, #2]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6c0:	787b      	ldrb	r3, [r7, #1]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6c6:	887a      	ldrh	r2, [r7, #2]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a6cc:	e003      	b.n	800a6d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a6ce:	887b      	ldrh	r3, [r7, #2]
 800a6d0:	041a      	lsls	r2, r3, #16
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	619a      	str	r2, [r3, #24]
}
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	b085      	sub	sp, #20
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6f4:	887a      	ldrh	r2, [r7, #2]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	041a      	lsls	r2, r3, #16
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	43d9      	mvns	r1, r3
 800a700:	887b      	ldrh	r3, [r7, #2]
 800a702:	400b      	ands	r3, r1
 800a704:	431a      	orrs	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	619a      	str	r2, [r3, #24]
}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
	...

0800a718 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800a720:	4a08      	ldr	r2, [pc, #32]	@ (800a744 <HAL_HSEM_FastTake+0x2c>)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3320      	adds	r3, #32
 800a726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a72a:	4a07      	ldr	r2, [pc, #28]	@ (800a748 <HAL_HSEM_FastTake+0x30>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d101      	bne.n	800a734 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e000      	b.n	800a736 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
}
 800a736:	4618      	mov	r0, r3
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	58026400 	.word	0x58026400
 800a748:	80000300 	.word	0x80000300

0800a74c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800a756:	4906      	ldr	r1, [pc, #24]	@ (800a770 <HAL_HSEM_Release+0x24>)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	58026400 	.word	0x58026400

0800a774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e08b      	b.n	800a89e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7f8 f9b4 	bl	8002b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2224      	movs	r2, #36	@ 0x24
 800a7a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f022 0201 	bic.w	r2, r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a7c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d107      	bne.n	800a7ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7ea:	609a      	str	r2, [r3, #8]
 800a7ec:	e006      	b.n	800a7fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a7fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	2b02      	cmp	r3, #2
 800a802:	d108      	bne.n	800a816 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a812:	605a      	str	r2, [r3, #4]
 800a814:	e007      	b.n	800a826 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a824:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	6859      	ldr	r1, [r3, #4]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a8 <HAL_I2C_Init+0x134>)
 800a832:	430b      	orrs	r3, r1
 800a834:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a844:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691a      	ldr	r2, [r3, #16]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	430a      	orrs	r2, r1
 800a85e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	69d9      	ldr	r1, [r3, #28]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a1a      	ldr	r2, [r3, #32]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0201 	orr.w	r2, r2, #1
 800a87e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	02008000 	.word	0x02008000

0800a8ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	607a      	str	r2, [r7, #4]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	817b      	strh	r3, [r7, #10]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b20      	cmp	r3, #32
 800a8ca:	f040 80fd 	bne.w	800aac8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d101      	bne.n	800a8dc <HAL_I2C_Master_Transmit+0x30>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e0f6      	b.n	800aaca <HAL_I2C_Master_Transmit+0x21e>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a8e4:	f7fa fe7a 	bl	80055dc <HAL_GetTick>
 800a8e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	2319      	movs	r3, #25
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 fa0a 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e0e1      	b.n	800aaca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2221      	movs	r2, #33	@ 0x21
 800a90a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2210      	movs	r2, #16
 800a912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	893a      	ldrh	r2, [r7, #8]
 800a926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a932:	b29b      	uxth	r3, r3
 800a934:	2bff      	cmp	r3, #255	@ 0xff
 800a936:	d906      	bls.n	800a946 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	22ff      	movs	r2, #255	@ 0xff
 800a93c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a93e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e007      	b.n	800a956 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a950:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a954:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d024      	beq.n	800a9a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a962:	781a      	ldrb	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a978:	b29b      	uxth	r3, r3
 800a97a:	3b01      	subs	r3, #1
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a986:	3b01      	subs	r3, #1
 800a988:	b29a      	uxth	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a992:	b2db      	uxtb	r3, r3
 800a994:	3301      	adds	r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	8979      	ldrh	r1, [r7, #10]
 800a99a:	4b4e      	ldr	r3, [pc, #312]	@ (800aad4 <HAL_I2C_Master_Transmit+0x228>)
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 fc05 	bl	800b1b0 <I2C_TransferConfig>
 800a9a6:	e066      	b.n	800aa76 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	8979      	ldrh	r1, [r7, #10]
 800a9b0:	4b48      	ldr	r3, [pc, #288]	@ (800aad4 <HAL_I2C_Master_Transmit+0x228>)
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 fbfa 	bl	800b1b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800a9bc:	e05b      	b.n	800aa76 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	6a39      	ldr	r1, [r7, #32]
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f000 f9fd 	bl	800adc2 <I2C_WaitOnTXISFlagUntilTimeout>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e07b      	b.n	800aaca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d6:	781a      	ldrb	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d034      	beq.n	800aa76 <HAL_I2C_Master_Transmit+0x1ca>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d130      	bne.n	800aa76 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	6a3b      	ldr	r3, [r7, #32]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2180      	movs	r1, #128	@ 0x80
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f976 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e04d      	b.n	800aaca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	2bff      	cmp	r3, #255	@ 0xff
 800aa36:	d90e      	bls.n	800aa56 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	22ff      	movs	r2, #255	@ 0xff
 800aa3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	8979      	ldrh	r1, [r7, #10]
 800aa46:	2300      	movs	r3, #0
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 fbae 	bl	800b1b0 <I2C_TransferConfig>
 800aa54:	e00f      	b.n	800aa76 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	8979      	ldrh	r1, [r7, #10]
 800aa68:	2300      	movs	r3, #0
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f000 fb9d 	bl	800b1b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d19e      	bne.n	800a9be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	6a39      	ldr	r1, [r7, #32]
 800aa84:	68f8      	ldr	r0, [r7, #12]
 800aa86:	f000 f9e3 	bl	800ae50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e01a      	b.n	800aaca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6859      	ldr	r1, [r3, #4]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	4b0c      	ldr	r3, [pc, #48]	@ (800aad8 <HAL_I2C_Master_Transmit+0x22c>)
 800aaa8:	400b      	ands	r3, r1
 800aaaa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2220      	movs	r2, #32
 800aab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	e000      	b.n	800aaca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800aac8:	2302      	movs	r3, #2
  }
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	80002000 	.word	0x80002000
 800aad8:	fe00e800 	.word	0xfe00e800

0800aadc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	607a      	str	r2, [r7, #4]
 800aae6:	461a      	mov	r2, r3
 800aae8:	460b      	mov	r3, r1
 800aaea:	817b      	strh	r3, [r7, #10]
 800aaec:	4613      	mov	r3, r2
 800aaee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	f040 80db 	bne.w	800acb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d101      	bne.n	800ab0c <HAL_I2C_Master_Receive+0x30>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	e0d4      	b.n	800acb6 <HAL_I2C_Master_Receive+0x1da>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab14:	f7fa fd62 	bl	80055dc <HAL_GetTick>
 800ab18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	2319      	movs	r3, #25
 800ab20:	2201      	movs	r2, #1
 800ab22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 f8f2 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e0bf      	b.n	800acb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2222      	movs	r2, #34	@ 0x22
 800ab3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2210      	movs	r2, #16
 800ab42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	893a      	ldrh	r2, [r7, #8]
 800ab56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	2bff      	cmp	r3, #255	@ 0xff
 800ab66:	d90e      	bls.n	800ab86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	22ff      	movs	r2, #255	@ 0xff
 800ab6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	8979      	ldrh	r1, [r7, #10]
 800ab76:	4b52      	ldr	r3, [pc, #328]	@ (800acc0 <HAL_I2C_Master_Receive+0x1e4>)
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 fb16 	bl	800b1b0 <I2C_TransferConfig>
 800ab84:	e06d      	b.n	800ac62 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	8979      	ldrh	r1, [r7, #10]
 800ab98:	4b49      	ldr	r3, [pc, #292]	@ (800acc0 <HAL_I2C_Master_Receive+0x1e4>)
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 fb05 	bl	800b1b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800aba6:	e05c      	b.n	800ac62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	6a39      	ldr	r1, [r7, #32]
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 f993 	bl	800aed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e07c      	b.n	800acb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc6:	b2d2      	uxtb	r2, r2
 800abc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abd8:	3b01      	subs	r3, #1
 800abda:	b29a      	uxth	r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	3b01      	subs	r3, #1
 800abe8:	b29a      	uxth	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d034      	beq.n	800ac62 <HAL_I2C_Master_Receive+0x186>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d130      	bne.n	800ac62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	2200      	movs	r2, #0
 800ac08:	2180      	movs	r1, #128	@ 0x80
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 f880 	bl	800ad10 <I2C_WaitOnFlagUntilTimeout>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e04d      	b.n	800acb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	2bff      	cmp	r3, #255	@ 0xff
 800ac22:	d90e      	bls.n	800ac42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	22ff      	movs	r2, #255	@ 0xff
 800ac28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	8979      	ldrh	r1, [r7, #10]
 800ac32:	2300      	movs	r3, #0
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 fab8 	bl	800b1b0 <I2C_TransferConfig>
 800ac40:	e00f      	b.n	800ac62 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac50:	b2da      	uxtb	r2, r3
 800ac52:	8979      	ldrh	r1, [r7, #10]
 800ac54:	2300      	movs	r3, #0
 800ac56:	9300      	str	r3, [sp, #0]
 800ac58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 faa7 	bl	800b1b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d19d      	bne.n	800aba8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	6a39      	ldr	r1, [r7, #32]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f8ed 	bl	800ae50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e01a      	b.n	800acb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2220      	movs	r2, #32
 800ac86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6859      	ldr	r1, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <HAL_I2C_Master_Receive+0x1e8>)
 800ac94:	400b      	ands	r3, r1
 800ac96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	e000      	b.n	800acb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800acb4:	2302      	movs	r3, #2
  }
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	80002400 	.word	0x80002400
 800acc4:	fe00e800 	.word	0xfe00e800

0800acc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d103      	bne.n	800ace6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	699b      	ldr	r3, [r3, #24]
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d007      	beq.n	800ad04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	699a      	ldr	r2, [r3, #24]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 0201 	orr.w	r2, r2, #1
 800ad02:	619a      	str	r2, [r3, #24]
  }
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad20:	e03b      	b.n	800ad9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f000 f962 	bl	800aff0 <I2C_IsErrorOccurred>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e041      	b.n	800adba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3c:	d02d      	beq.n	800ad9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad3e:	f7fa fc4d 	bl	80055dc <HAL_GetTick>
 800ad42:	4602      	mov	r2, r0
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d302      	bcc.n	800ad54 <I2C_WaitOnFlagUntilTimeout+0x44>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d122      	bne.n	800ad9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	699a      	ldr	r2, [r3, #24]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	68ba      	ldr	r2, [r7, #8]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	bf0c      	ite	eq
 800ad64:	2301      	moveq	r3, #1
 800ad66:	2300      	movne	r3, #0
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d113      	bne.n	800ad9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad76:	f043 0220 	orr.w	r2, r3, #32
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2220      	movs	r2, #32
 800ad82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e00f      	b.n	800adba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	699a      	ldr	r2, [r3, #24]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4013      	ands	r3, r2
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	bf0c      	ite	eq
 800adaa:	2301      	moveq	r3, #1
 800adac:	2300      	movne	r3, #0
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	461a      	mov	r2, r3
 800adb2:	79fb      	ldrb	r3, [r7, #7]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d0b4      	beq.n	800ad22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b084      	sub	sp, #16
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800adce:	e033      	b.n	800ae38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f90b 	bl	800aff0 <I2C_IsErrorOccurred>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d001      	beq.n	800ade4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e031      	b.n	800ae48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adea:	d025      	beq.n	800ae38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adec:	f7fa fbf6 	bl	80055dc <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d302      	bcc.n	800ae02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d11a      	bne.n	800ae38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	f003 0302 	and.w	r3, r3, #2
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d013      	beq.n	800ae38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae14:	f043 0220 	orr.w	r2, r3, #32
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e007      	b.n	800ae48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d1c4      	bne.n	800add0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae5c:	e02f      	b.n	800aebe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 f8c4 	bl	800aff0 <I2C_IsErrorOccurred>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e02d      	b.n	800aece <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae72:	f7fa fbb3 	bl	80055dc <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d302      	bcc.n	800ae88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d11a      	bne.n	800aebe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	f003 0320 	and.w	r3, r3, #32
 800ae92:	2b20      	cmp	r3, #32
 800ae94:	d013      	beq.n	800aebe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae9a:	f043 0220 	orr.w	r2, r3, #32
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e007      	b.n	800aece <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	f003 0320 	and.w	r3, r3, #32
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d1c8      	bne.n	800ae5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800aee8:	e071      	b.n	800afce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	68b9      	ldr	r1, [r7, #8]
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 f87e 	bl	800aff0 <I2C_IsErrorOccurred>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b20      	cmp	r3, #32
 800af0a:	d13b      	bne.n	800af84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d138      	bne.n	800af84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d105      	bne.n	800af2c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	f003 0310 	and.w	r3, r3, #16
 800af36:	2b10      	cmp	r3, #16
 800af38:	d121      	bne.n	800af7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2210      	movs	r2, #16
 800af40:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2204      	movs	r2, #4
 800af46:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2220      	movs	r2, #32
 800af4e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6859      	ldr	r1, [r3, #4]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	4b24      	ldr	r3, [pc, #144]	@ (800afec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800af5c:	400b      	ands	r3, r1
 800af5e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2220      	movs	r2, #32
 800af64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	75fb      	strb	r3, [r7, #23]
 800af7c:	e002      	b.n	800af84 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800af84:	f7fa fb2a 	bl	80055dc <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	429a      	cmp	r2, r3
 800af92:	d302      	bcc.n	800af9a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d119      	bne.n	800afce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800af9a:	7dfb      	ldrb	r3, [r7, #23]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d116      	bne.n	800afce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	f003 0304 	and.w	r3, r3, #4
 800afaa:	2b04      	cmp	r3, #4
 800afac:	d00f      	beq.n	800afce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb2:	f043 0220 	orr.w	r2, r3, #32
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	f003 0304 	and.w	r3, r3, #4
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d002      	beq.n	800afe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800afdc:	7dfb      	ldrb	r3, [r7, #23]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d083      	beq.n	800aeea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	fe00e800 	.word	0xfe00e800

0800aff0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b08a      	sub	sp, #40	@ 0x28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	f003 0310 	and.w	r3, r3, #16
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d068      	beq.n	800b0ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2210      	movs	r2, #16
 800b022:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b024:	e049      	b.n	800b0ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02c:	d045      	beq.n	800b0ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b02e:	f7fa fad5 	bl	80055dc <HAL_GetTick>
 800b032:	4602      	mov	r2, r0
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d302      	bcc.n	800b044 <I2C_IsErrorOccurred+0x54>
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d13a      	bne.n	800b0ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b04e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b056:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b062:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b066:	d121      	bne.n	800b0ac <I2C_IsErrorOccurred+0xbc>
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b06e:	d01d      	beq.n	800b0ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b070:	7cfb      	ldrb	r3, [r7, #19]
 800b072:	2b20      	cmp	r3, #32
 800b074:	d01a      	beq.n	800b0ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b084:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b086:	f7fa faa9 	bl	80055dc <HAL_GetTick>
 800b08a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b08c:	e00e      	b.n	800b0ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b08e:	f7fa faa5 	bl	80055dc <HAL_GetTick>
 800b092:	4602      	mov	r2, r0
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	2b19      	cmp	r3, #25
 800b09a:	d907      	bls.n	800b0ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	f043 0320 	orr.w	r3, r3, #32
 800b0a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b0aa:	e006      	b.n	800b0ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b20      	cmp	r3, #32
 800b0b8:	d1e9      	bne.n	800b08e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d003      	beq.n	800b0d0 <I2C_IsErrorOccurred+0xe0>
 800b0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0aa      	beq.n	800b026 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d103      	bne.n	800b0e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	f043 0304 	orr.w	r3, r3, #4
 800b0e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b110:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00b      	beq.n	800b13a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b122:	6a3b      	ldr	r3, [r7, #32]
 800b124:	f043 0308 	orr.w	r3, r3, #8
 800b128:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00b      	beq.n	800b15c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	f043 0302 	orr.w	r3, r3, #2
 800b14a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b15c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b160:	2b00      	cmp	r3, #0
 800b162:	d01c      	beq.n	800b19e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f7ff fdaf 	bl	800acc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	6859      	ldr	r1, [r3, #4]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	4b0d      	ldr	r3, [pc, #52]	@ (800b1ac <I2C_IsErrorOccurred+0x1bc>)
 800b176:	400b      	ands	r3, r1
 800b178:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	431a      	orrs	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2220      	movs	r2, #32
 800b18a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b19e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3728      	adds	r7, #40	@ 0x28
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	fe00e800 	.word	0xfe00e800

0800b1b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b087      	sub	sp, #28
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	607b      	str	r3, [r7, #4]
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	817b      	strh	r3, [r7, #10]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1c2:	897b      	ldrh	r3, [r7, #10]
 800b1c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1c8:	7a7b      	ldrb	r3, [r7, #9]
 800b1ca:	041b      	lsls	r3, r3, #16
 800b1cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685a      	ldr	r2, [r3, #4]
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	0d5b      	lsrs	r3, r3, #21
 800b1ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b1ee:	4b08      	ldr	r3, [pc, #32]	@ (800b210 <I2C_TransferConfig+0x60>)
 800b1f0:	430b      	orrs	r3, r1
 800b1f2:	43db      	mvns	r3, r3
 800b1f4:	ea02 0103 	and.w	r1, r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b202:	bf00      	nop
 800b204:	371c      	adds	r7, #28
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	03ff63ff 	.word	0x03ff63ff

0800b214 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b20      	cmp	r3, #32
 800b228:	d138      	bne.n	800b29c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b230:	2b01      	cmp	r3, #1
 800b232:	d101      	bne.n	800b238 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b234:	2302      	movs	r3, #2
 800b236:	e032      	b.n	800b29e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2224      	movs	r2, #36	@ 0x24
 800b244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f022 0201 	bic.w	r2, r2, #1
 800b256:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b266:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6819      	ldr	r1, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	683a      	ldr	r2, [r7, #0]
 800b274:	430a      	orrs	r2, r1
 800b276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f042 0201 	orr.w	r2, r2, #1
 800b286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2220      	movs	r2, #32
 800b28c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	e000      	b.n	800b29e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b29c:	2302      	movs	r3, #2
  }
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b085      	sub	sp, #20
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d139      	bne.n	800b334 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e033      	b.n	800b336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2224      	movs	r2, #36	@ 0x24
 800b2da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f022 0201 	bic.w	r2, r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b2fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	021b      	lsls	r3, r3, #8
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	4313      	orrs	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f042 0201 	orr.w	r2, r2, #1
 800b31e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2220      	movs	r2, #32
 800b324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	e000      	b.n	800b336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b334:	2302      	movs	r3, #2
  }
}
 800b336:	4618      	mov	r0, r3
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
	...

0800b344 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b34c:	4b0d      	ldr	r3, [pc, #52]	@ (800b384 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800b34e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b352:	4a0c      	ldr	r2, [pc, #48]	@ (800b384 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800b354:	f043 0302 	orr.w	r3, r3, #2
 800b358:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b35c:	4b09      	ldr	r3, [pc, #36]	@ (800b384 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800b35e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b362:	f003 0302 	and.w	r3, r3, #2
 800b366:	60fb      	str	r3, [r7, #12]
 800b368:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800b36a:	4b07      	ldr	r3, [pc, #28]	@ (800b388 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	4906      	ldr	r1, [pc, #24]	@ (800b388 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4313      	orrs	r3, r2
 800b374:	604b      	str	r3, [r1, #4]
}
 800b376:	bf00      	nop
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	58024400 	.word	0x58024400
 800b388:	58000400 	.word	0x58000400

0800b38c <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d035      	beq.n	800b406 <HAL_PWR_ConfigPVD+0x7a>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 800b39a:	4b1e      	ldr	r3, [pc, #120]	@ (800b414 <HAL_PWR_ConfigPVD+0x88>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	491b      	ldr	r1, [pc, #108]	@ (800b414 <HAL_PWR_ConfigPVD+0x88>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	600b      	str	r3, [r1, #0]
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800b3ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3ba:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800b3bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3ca:	6053      	str	r3, [r2, #4]
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d007      	beq.n	800b3e8 <HAL_PWR_ConfigPVD+0x5c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 800b3d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3e6:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f003 0302 	and.w	r3, r3, #2
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <HAL_PWR_ConfigPVD+0x7c>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 800b3f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b402:	6053      	str	r3, [r2, #4]
 800b404:	e000      	b.n	800b408 <HAL_PWR_ConfigPVD+0x7c>
    return;
 800b406:	bf00      	nop
  }
}
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	58024800 	.word	0x58024800

0800b418 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 800b418:	b480      	push	{r7}
 800b41a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 800b41c:	4b05      	ldr	r3, [pc, #20]	@ (800b434 <HAL_PWR_EnablePVD+0x1c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a04      	ldr	r2, [pc, #16]	@ (800b434 <HAL_PWR_EnablePVD+0x1c>)
 800b422:	f043 0310 	orr.w	r3, r3, #16
 800b426:	6013      	str	r3, [r2, #0]
}
 800b428:	bf00      	nop
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	58024800 	.word	0x58024800

0800b438 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b440:	4b29      	ldr	r3, [pc, #164]	@ (800b4e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	f003 0307 	and.w	r3, r3, #7
 800b448:	2b06      	cmp	r3, #6
 800b44a:	d00a      	beq.n	800b462 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b44c:	4b26      	ldr	r3, [pc, #152]	@ (800b4e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	429a      	cmp	r2, r3
 800b458:	d001      	beq.n	800b45e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e040      	b.n	800b4e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	e03e      	b.n	800b4e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b462:	4b21      	ldr	r3, [pc, #132]	@ (800b4e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b46a:	491f      	ldr	r1, [pc, #124]	@ (800b4e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b472:	f7fa f8b3 	bl	80055dc <HAL_GetTick>
 800b476:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b478:	e009      	b.n	800b48e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b47a:	f7fa f8af 	bl	80055dc <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b488:	d901      	bls.n	800b48e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e028      	b.n	800b4e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b48e:	4b16      	ldr	r3, [pc, #88]	@ (800b4e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b49a:	d1ee      	bne.n	800b47a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b1e      	cmp	r3, #30
 800b4a0:	d008      	beq.n	800b4b4 <HAL_PWREx_ConfigSupply+0x7c>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4a6:	d005      	beq.n	800b4b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b1d      	cmp	r3, #29
 800b4ac:	d002      	beq.n	800b4b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4b2:	d114      	bne.n	800b4de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b4b4:	f7fa f892 	bl	80055dc <HAL_GetTick>
 800b4b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b4ba:	e009      	b.n	800b4d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b4bc:	f7fa f88e 	bl	80055dc <HAL_GetTick>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b4ca:	d901      	bls.n	800b4d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e007      	b.n	800b4e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b4d0:	4b05      	ldr	r3, [pc, #20]	@ (800b4e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b4d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4dc:	d1ee      	bne.n	800b4bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	58024800 	.word	0x58024800

0800b4ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08c      	sub	sp, #48	@ 0x30
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d102      	bne.n	800b500 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	f000 bc48 	b.w	800bd90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 8088 	beq.w	800b61e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b50e:	4b99      	ldr	r3, [pc, #612]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b518:	4b96      	ldr	r3, [pc, #600]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b520:	2b10      	cmp	r3, #16
 800b522:	d007      	beq.n	800b534 <HAL_RCC_OscConfig+0x48>
 800b524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b526:	2b18      	cmp	r3, #24
 800b528:	d111      	bne.n	800b54e <HAL_RCC_OscConfig+0x62>
 800b52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52c:	f003 0303 	and.w	r3, r3, #3
 800b530:	2b02      	cmp	r3, #2
 800b532:	d10c      	bne.n	800b54e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b534:	4b8f      	ldr	r3, [pc, #572]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d06d      	beq.n	800b61c <HAL_RCC_OscConfig+0x130>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d169      	bne.n	800b61c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	f000 bc21 	b.w	800bd90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b556:	d106      	bne.n	800b566 <HAL_RCC_OscConfig+0x7a>
 800b558:	4b86      	ldr	r3, [pc, #536]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a85      	ldr	r2, [pc, #532]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b55e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	e02e      	b.n	800b5c4 <HAL_RCC_OscConfig+0xd8>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10c      	bne.n	800b588 <HAL_RCC_OscConfig+0x9c>
 800b56e:	4b81      	ldr	r3, [pc, #516]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a80      	ldr	r2, [pc, #512]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	4b7e      	ldr	r3, [pc, #504]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a7d      	ldr	r2, [pc, #500]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	e01d      	b.n	800b5c4 <HAL_RCC_OscConfig+0xd8>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b590:	d10c      	bne.n	800b5ac <HAL_RCC_OscConfig+0xc0>
 800b592:	4b78      	ldr	r3, [pc, #480]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a77      	ldr	r2, [pc, #476]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b59c:	6013      	str	r3, [r2, #0]
 800b59e:	4b75      	ldr	r3, [pc, #468]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a74      	ldr	r2, [pc, #464]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b5a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b5a8:	6013      	str	r3, [r2, #0]
 800b5aa:	e00b      	b.n	800b5c4 <HAL_RCC_OscConfig+0xd8>
 800b5ac:	4b71      	ldr	r3, [pc, #452]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a70      	ldr	r2, [pc, #448]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b5b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	4b6e      	ldr	r3, [pc, #440]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a6d      	ldr	r2, [pc, #436]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b5be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d013      	beq.n	800b5f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5cc:	f7fa f806 	bl	80055dc <HAL_GetTick>
 800b5d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5d2:	e008      	b.n	800b5e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5d4:	f7fa f802 	bl	80055dc <HAL_GetTick>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	2b64      	cmp	r3, #100	@ 0x64
 800b5e0:	d901      	bls.n	800b5e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e3d4      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b5e6:	4b63      	ldr	r3, [pc, #396]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d0f0      	beq.n	800b5d4 <HAL_RCC_OscConfig+0xe8>
 800b5f2:	e014      	b.n	800b61e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5f4:	f7f9 fff2 	bl	80055dc <HAL_GetTick>
 800b5f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5fa:	e008      	b.n	800b60e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5fc:	f7f9 ffee 	bl	80055dc <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	2b64      	cmp	r3, #100	@ 0x64
 800b608:	d901      	bls.n	800b60e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b60a:	2303      	movs	r3, #3
 800b60c:	e3c0      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b60e:	4b59      	ldr	r3, [pc, #356]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1f0      	bne.n	800b5fc <HAL_RCC_OscConfig+0x110>
 800b61a:	e000      	b.n	800b61e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b61c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 80ca 	beq.w	800b7c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b62c:	4b51      	ldr	r3, [pc, #324]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b634:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b636:	4b4f      	ldr	r3, [pc, #316]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b63a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d007      	beq.n	800b652 <HAL_RCC_OscConfig+0x166>
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	2b18      	cmp	r3, #24
 800b646:	d156      	bne.n	800b6f6 <HAL_RCC_OscConfig+0x20a>
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d151      	bne.n	800b6f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b652:	4b48      	ldr	r3, [pc, #288]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0304 	and.w	r3, r3, #4
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d005      	beq.n	800b66a <HAL_RCC_OscConfig+0x17e>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d101      	bne.n	800b66a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e392      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b66a:	4b42      	ldr	r3, [pc, #264]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f023 0219 	bic.w	r2, r3, #25
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	493f      	ldr	r1, [pc, #252]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b67c:	f7f9 ffae 	bl	80055dc <HAL_GetTick>
 800b680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b682:	e008      	b.n	800b696 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b684:	f7f9 ffaa 	bl	80055dc <HAL_GetTick>
 800b688:	4602      	mov	r2, r0
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d901      	bls.n	800b696 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e37c      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b696:	4b37      	ldr	r3, [pc, #220]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0304 	and.w	r3, r3, #4
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d0f0      	beq.n	800b684 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6a2:	f7f9 ffcb 	bl	800563c <HAL_GetREVID>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d817      	bhi.n	800b6e0 <HAL_RCC_OscConfig+0x1f4>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b40      	cmp	r3, #64	@ 0x40
 800b6b6:	d108      	bne.n	800b6ca <HAL_RCC_OscConfig+0x1de>
 800b6b8:	4b2e      	ldr	r3, [pc, #184]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b6c0:	4a2c      	ldr	r2, [pc, #176]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b6c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6c8:	e07a      	b.n	800b7c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6ca:	4b2a      	ldr	r3, [pc, #168]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	031b      	lsls	r3, r3, #12
 800b6d8:	4926      	ldr	r1, [pc, #152]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6de:	e06f      	b.n	800b7c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6e0:	4b24      	ldr	r3, [pc, #144]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	061b      	lsls	r3, r3, #24
 800b6ee:	4921      	ldr	r1, [pc, #132]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6f4:	e064      	b.n	800b7c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d047      	beq.n	800b78e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b6fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f023 0219 	bic.w	r2, r3, #25
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	491a      	ldr	r1, [pc, #104]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b70c:	4313      	orrs	r3, r2
 800b70e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b710:	f7f9 ff64 	bl	80055dc <HAL_GetTick>
 800b714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b716:	e008      	b.n	800b72a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b718:	f7f9 ff60 	bl	80055dc <HAL_GetTick>
 800b71c:	4602      	mov	r2, r0
 800b71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	2b02      	cmp	r3, #2
 800b724:	d901      	bls.n	800b72a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b726:	2303      	movs	r3, #3
 800b728:	e332      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b72a:	4b12      	ldr	r3, [pc, #72]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f003 0304 	and.w	r3, r3, #4
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0f0      	beq.n	800b718 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b736:	f7f9 ff81 	bl	800563c <HAL_GetREVID>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b740:	4293      	cmp	r3, r2
 800b742:	d819      	bhi.n	800b778 <HAL_RCC_OscConfig+0x28c>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	2b40      	cmp	r3, #64	@ 0x40
 800b74a:	d108      	bne.n	800b75e <HAL_RCC_OscConfig+0x272>
 800b74c:	4b09      	ldr	r3, [pc, #36]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b754:	4a07      	ldr	r2, [pc, #28]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b75a:	6053      	str	r3, [r2, #4]
 800b75c:	e030      	b.n	800b7c0 <HAL_RCC_OscConfig+0x2d4>
 800b75e:	4b05      	ldr	r3, [pc, #20]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	031b      	lsls	r3, r3, #12
 800b76c:	4901      	ldr	r1, [pc, #4]	@ (800b774 <HAL_RCC_OscConfig+0x288>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	604b      	str	r3, [r1, #4]
 800b772:	e025      	b.n	800b7c0 <HAL_RCC_OscConfig+0x2d4>
 800b774:	58024400 	.word	0x58024400
 800b778:	4b9a      	ldr	r3, [pc, #616]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	061b      	lsls	r3, r3, #24
 800b786:	4997      	ldr	r1, [pc, #604]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b788:	4313      	orrs	r3, r2
 800b78a:	604b      	str	r3, [r1, #4]
 800b78c:	e018      	b.n	800b7c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b78e:	4b95      	ldr	r3, [pc, #596]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a94      	ldr	r2, [pc, #592]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b794:	f023 0301 	bic.w	r3, r3, #1
 800b798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b79a:	f7f9 ff1f 	bl	80055dc <HAL_GetTick>
 800b79e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b7a0:	e008      	b.n	800b7b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7a2:	f7f9 ff1b 	bl	80055dc <HAL_GetTick>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d901      	bls.n	800b7b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e2ed      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b7b4:	4b8b      	ldr	r3, [pc, #556]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 0304 	and.w	r3, r3, #4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1f0      	bne.n	800b7a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 0310 	and.w	r3, r3, #16
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 80a9 	beq.w	800b920 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7ce:	4b85      	ldr	r3, [pc, #532]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b7d8:	4b82      	ldr	r3, [pc, #520]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b08      	cmp	r3, #8
 800b7e2:	d007      	beq.n	800b7f4 <HAL_RCC_OscConfig+0x308>
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	2b18      	cmp	r3, #24
 800b7e8:	d13a      	bne.n	800b860 <HAL_RCC_OscConfig+0x374>
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f003 0303 	and.w	r3, r3, #3
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d135      	bne.n	800b860 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7f4:	4b7b      	ldr	r3, [pc, #492]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <HAL_RCC_OscConfig+0x320>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	69db      	ldr	r3, [r3, #28]
 800b804:	2b80      	cmp	r3, #128	@ 0x80
 800b806:	d001      	beq.n	800b80c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e2c1      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b80c:	f7f9 ff16 	bl	800563c <HAL_GetREVID>
 800b810:	4603      	mov	r3, r0
 800b812:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b816:	4293      	cmp	r3, r2
 800b818:	d817      	bhi.n	800b84a <HAL_RCC_OscConfig+0x35e>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d108      	bne.n	800b834 <HAL_RCC_OscConfig+0x348>
 800b822:	4b70      	ldr	r3, [pc, #448]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b82a:	4a6e      	ldr	r2, [pc, #440]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b82c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b830:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b832:	e075      	b.n	800b920 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b834:	4b6b      	ldr	r3, [pc, #428]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	069b      	lsls	r3, r3, #26
 800b842:	4968      	ldr	r1, [pc, #416]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b844:	4313      	orrs	r3, r2
 800b846:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b848:	e06a      	b.n	800b920 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b84a:	4b66      	ldr	r3, [pc, #408]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	061b      	lsls	r3, r3, #24
 800b858:	4962      	ldr	r1, [pc, #392]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b85e:	e05f      	b.n	800b920 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	69db      	ldr	r3, [r3, #28]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d042      	beq.n	800b8ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b868:	4b5e      	ldr	r3, [pc, #376]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a5d      	ldr	r2, [pc, #372]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b86e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b874:	f7f9 feb2 	bl	80055dc <HAL_GetTick>
 800b878:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b87a:	e008      	b.n	800b88e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b87c:	f7f9 feae 	bl	80055dc <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b02      	cmp	r3, #2
 800b888:	d901      	bls.n	800b88e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e280      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b88e:	4b55      	ldr	r3, [pc, #340]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b896:	2b00      	cmp	r3, #0
 800b898:	d0f0      	beq.n	800b87c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b89a:	f7f9 fecf 	bl	800563c <HAL_GetREVID>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d817      	bhi.n	800b8d8 <HAL_RCC_OscConfig+0x3ec>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	2b20      	cmp	r3, #32
 800b8ae:	d108      	bne.n	800b8c2 <HAL_RCC_OscConfig+0x3d6>
 800b8b0:	4b4c      	ldr	r3, [pc, #304]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b8b8:	4a4a      	ldr	r2, [pc, #296]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8be:	6053      	str	r3, [r2, #4]
 800b8c0:	e02e      	b.n	800b920 <HAL_RCC_OscConfig+0x434>
 800b8c2:	4b48      	ldr	r3, [pc, #288]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a1b      	ldr	r3, [r3, #32]
 800b8ce:	069b      	lsls	r3, r3, #26
 800b8d0:	4944      	ldr	r1, [pc, #272]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	604b      	str	r3, [r1, #4]
 800b8d6:	e023      	b.n	800b920 <HAL_RCC_OscConfig+0x434>
 800b8d8:	4b42      	ldr	r3, [pc, #264]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	061b      	lsls	r3, r3, #24
 800b8e6:	493f      	ldr	r1, [pc, #252]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	60cb      	str	r3, [r1, #12]
 800b8ec:	e018      	b.n	800b920 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b8ee:	4b3d      	ldr	r3, [pc, #244]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a3c      	ldr	r2, [pc, #240]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b8f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8fa:	f7f9 fe6f 	bl	80055dc <HAL_GetTick>
 800b8fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b900:	e008      	b.n	800b914 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b902:	f7f9 fe6b 	bl	80055dc <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d901      	bls.n	800b914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e23d      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b914:	4b33      	ldr	r3, [pc, #204]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1f0      	bne.n	800b902 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0308 	and.w	r3, r3, #8
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d036      	beq.n	800b99a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	695b      	ldr	r3, [r3, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d019      	beq.n	800b968 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b934:	4b2b      	ldr	r3, [pc, #172]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b938:	4a2a      	ldr	r2, [pc, #168]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b93a:	f043 0301 	orr.w	r3, r3, #1
 800b93e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b940:	f7f9 fe4c 	bl	80055dc <HAL_GetTick>
 800b944:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b946:	e008      	b.n	800b95a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b948:	f7f9 fe48 	bl	80055dc <HAL_GetTick>
 800b94c:	4602      	mov	r2, r0
 800b94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	2b02      	cmp	r3, #2
 800b954:	d901      	bls.n	800b95a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b956:	2303      	movs	r3, #3
 800b958:	e21a      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b95a:	4b22      	ldr	r3, [pc, #136]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b95e:	f003 0302 	and.w	r3, r3, #2
 800b962:	2b00      	cmp	r3, #0
 800b964:	d0f0      	beq.n	800b948 <HAL_RCC_OscConfig+0x45c>
 800b966:	e018      	b.n	800b99a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b968:	4b1e      	ldr	r3, [pc, #120]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b96a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b96c:	4a1d      	ldr	r2, [pc, #116]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b96e:	f023 0301 	bic.w	r3, r3, #1
 800b972:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b974:	f7f9 fe32 	bl	80055dc <HAL_GetTick>
 800b978:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b97a:	e008      	b.n	800b98e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b97c:	f7f9 fe2e 	bl	80055dc <HAL_GetTick>
 800b980:	4602      	mov	r2, r0
 800b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	2b02      	cmp	r3, #2
 800b988:	d901      	bls.n	800b98e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e200      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b98e:	4b15      	ldr	r3, [pc, #84]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b992:	f003 0302 	and.w	r3, r3, #2
 800b996:	2b00      	cmp	r3, #0
 800b998:	d1f0      	bne.n	800b97c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d039      	beq.n	800ba1a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d01c      	beq.n	800b9e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4a0c      	ldr	r2, [pc, #48]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b9b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b9b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b9ba:	f7f9 fe0f 	bl	80055dc <HAL_GetTick>
 800b9be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b9c0:	e008      	b.n	800b9d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b9c2:	f7f9 fe0b 	bl	80055dc <HAL_GetTick>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d901      	bls.n	800b9d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e1dd      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b9d4:	4b03      	ldr	r3, [pc, #12]	@ (800b9e4 <HAL_RCC_OscConfig+0x4f8>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d0f0      	beq.n	800b9c2 <HAL_RCC_OscConfig+0x4d6>
 800b9e0:	e01b      	b.n	800ba1a <HAL_RCC_OscConfig+0x52e>
 800b9e2:	bf00      	nop
 800b9e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b9e8:	4b9b      	ldr	r3, [pc, #620]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a9a      	ldr	r2, [pc, #616]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800b9ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b9f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b9f4:	f7f9 fdf2 	bl	80055dc <HAL_GetTick>
 800b9f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b9fa:	e008      	b.n	800ba0e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b9fc:	f7f9 fdee 	bl	80055dc <HAL_GetTick>
 800ba00:	4602      	mov	r2, r0
 800ba02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d901      	bls.n	800ba0e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e1c0      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ba0e:	4b92      	ldr	r3, [pc, #584]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1f0      	bne.n	800b9fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 0304 	and.w	r3, r3, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 8081 	beq.w	800bb2a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ba28:	4b8c      	ldr	r3, [pc, #560]	@ (800bc5c <HAL_RCC_OscConfig+0x770>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a8b      	ldr	r2, [pc, #556]	@ (800bc5c <HAL_RCC_OscConfig+0x770>)
 800ba2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba34:	f7f9 fdd2 	bl	80055dc <HAL_GetTick>
 800ba38:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba3a:	e008      	b.n	800ba4e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba3c:	f7f9 fdce 	bl	80055dc <HAL_GetTick>
 800ba40:	4602      	mov	r2, r0
 800ba42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	2b64      	cmp	r3, #100	@ 0x64
 800ba48:	d901      	bls.n	800ba4e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e1a0      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba4e:	4b83      	ldr	r3, [pc, #524]	@ (800bc5c <HAL_RCC_OscConfig+0x770>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0f0      	beq.n	800ba3c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d106      	bne.n	800ba70 <HAL_RCC_OscConfig+0x584>
 800ba62:	4b7d      	ldr	r3, [pc, #500]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba66:	4a7c      	ldr	r2, [pc, #496]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba68:	f043 0301 	orr.w	r3, r3, #1
 800ba6c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ba6e:	e02d      	b.n	800bacc <HAL_RCC_OscConfig+0x5e0>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10c      	bne.n	800ba92 <HAL_RCC_OscConfig+0x5a6>
 800ba78:	4b77      	ldr	r3, [pc, #476]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba7c:	4a76      	ldr	r2, [pc, #472]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba7e:	f023 0301 	bic.w	r3, r3, #1
 800ba82:	6713      	str	r3, [r2, #112]	@ 0x70
 800ba84:	4b74      	ldr	r3, [pc, #464]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba88:	4a73      	ldr	r2, [pc, #460]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba8a:	f023 0304 	bic.w	r3, r3, #4
 800ba8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ba90:	e01c      	b.n	800bacc <HAL_RCC_OscConfig+0x5e0>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	2b05      	cmp	r3, #5
 800ba98:	d10c      	bne.n	800bab4 <HAL_RCC_OscConfig+0x5c8>
 800ba9a:	4b6f      	ldr	r3, [pc, #444]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800ba9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba9e:	4a6e      	ldr	r2, [pc, #440]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800baa0:	f043 0304 	orr.w	r3, r3, #4
 800baa4:	6713      	str	r3, [r2, #112]	@ 0x70
 800baa6:	4b6c      	ldr	r3, [pc, #432]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800baa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baaa:	4a6b      	ldr	r2, [pc, #428]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800baac:	f043 0301 	orr.w	r3, r3, #1
 800bab0:	6713      	str	r3, [r2, #112]	@ 0x70
 800bab2:	e00b      	b.n	800bacc <HAL_RCC_OscConfig+0x5e0>
 800bab4:	4b68      	ldr	r3, [pc, #416]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bab8:	4a67      	ldr	r2, [pc, #412]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800baba:	f023 0301 	bic.w	r3, r3, #1
 800babe:	6713      	str	r3, [r2, #112]	@ 0x70
 800bac0:	4b65      	ldr	r3, [pc, #404]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bac4:	4a64      	ldr	r2, [pc, #400]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bac6:	f023 0304 	bic.w	r3, r3, #4
 800baca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d015      	beq.n	800bb00 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bad4:	f7f9 fd82 	bl	80055dc <HAL_GetTick>
 800bad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bada:	e00a      	b.n	800baf2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800badc:	f7f9 fd7e 	bl	80055dc <HAL_GetTick>
 800bae0:	4602      	mov	r2, r0
 800bae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae4:	1ad3      	subs	r3, r2, r3
 800bae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800baea:	4293      	cmp	r3, r2
 800baec:	d901      	bls.n	800baf2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e14e      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800baf2:	4b59      	ldr	r3, [pc, #356]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800baf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baf6:	f003 0302 	and.w	r3, r3, #2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d0ee      	beq.n	800badc <HAL_RCC_OscConfig+0x5f0>
 800bafe:	e014      	b.n	800bb2a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb00:	f7f9 fd6c 	bl	80055dc <HAL_GetTick>
 800bb04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb06:	e00a      	b.n	800bb1e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb08:	f7f9 fd68 	bl	80055dc <HAL_GetTick>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d901      	bls.n	800bb1e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e138      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bb1e:	4b4e      	ldr	r3, [pc, #312]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bb20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb22:	f003 0302 	and.w	r3, r3, #2
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1ee      	bne.n	800bb08 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 812d 	beq.w	800bd8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bb34:	4b48      	ldr	r3, [pc, #288]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb3c:	2b18      	cmp	r3, #24
 800bb3e:	f000 80bd 	beq.w	800bcbc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	f040 809e 	bne.w	800bc88 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb4c:	4b42      	ldr	r3, [pc, #264]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a41      	ldr	r2, [pc, #260]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bb52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb58:	f7f9 fd40 	bl	80055dc <HAL_GetTick>
 800bb5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb5e:	e008      	b.n	800bb72 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb60:	f7f9 fd3c 	bl	80055dc <HAL_GetTick>
 800bb64:	4602      	mov	r2, r0
 800bb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d901      	bls.n	800bb72 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e10e      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb72:	4b39      	ldr	r3, [pc, #228]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f0      	bne.n	800bb60 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb7e:	4b36      	ldr	r3, [pc, #216]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bb80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb82:	4b37      	ldr	r3, [pc, #220]	@ (800bc60 <HAL_RCC_OscConfig+0x774>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bb8e:	0112      	lsls	r2, r2, #4
 800bb90:	430a      	orrs	r2, r1
 800bb92:	4931      	ldr	r1, [pc, #196]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bba6:	3b01      	subs	r3, #1
 800bba8:	025b      	lsls	r3, r3, #9
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	431a      	orrs	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	041b      	lsls	r3, r3, #16
 800bbb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	061b      	lsls	r3, r3, #24
 800bbc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bbc8:	4923      	ldr	r1, [pc, #140]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bbce:	4b22      	ldr	r3, [pc, #136]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbd2:	4a21      	ldr	r2, [pc, #132]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bbd4:	f023 0301 	bic.w	r3, r3, #1
 800bbd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bbda:	4b1f      	ldr	r3, [pc, #124]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bbdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbde:	4b21      	ldr	r3, [pc, #132]	@ (800bc64 <HAL_RCC_OscConfig+0x778>)
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bbe6:	00d2      	lsls	r2, r2, #3
 800bbe8:	491b      	ldr	r1, [pc, #108]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bbee:	4b1a      	ldr	r3, [pc, #104]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bbf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf2:	f023 020c 	bic.w	r2, r3, #12
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbfa:	4917      	ldr	r1, [pc, #92]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bc00:	4b15      	ldr	r3, [pc, #84]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc04:	f023 0202 	bic.w	r2, r3, #2
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc0c:	4912      	ldr	r1, [pc, #72]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bc12:	4b11      	ldr	r3, [pc, #68]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc16:	4a10      	ldr	r2, [pc, #64]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc1e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc22:	4a0d      	ldr	r2, [pc, #52]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bc2a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2e:	4a0a      	ldr	r2, [pc, #40]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bc34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bc36:	4b08      	ldr	r3, [pc, #32]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	4a07      	ldr	r2, [pc, #28]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc3c:	f043 0301 	orr.w	r3, r3, #1
 800bc40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bc42:	4b05      	ldr	r3, [pc, #20]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a04      	ldr	r2, [pc, #16]	@ (800bc58 <HAL_RCC_OscConfig+0x76c>)
 800bc48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc4e:	f7f9 fcc5 	bl	80055dc <HAL_GetTick>
 800bc52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc54:	e011      	b.n	800bc7a <HAL_RCC_OscConfig+0x78e>
 800bc56:	bf00      	nop
 800bc58:	58024400 	.word	0x58024400
 800bc5c:	58024800 	.word	0x58024800
 800bc60:	fffffc0c 	.word	0xfffffc0c
 800bc64:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc68:	f7f9 fcb8 	bl	80055dc <HAL_GetTick>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d901      	bls.n	800bc7a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e08a      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc7a:	4b47      	ldr	r3, [pc, #284]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0f0      	beq.n	800bc68 <HAL_RCC_OscConfig+0x77c>
 800bc86:	e082      	b.n	800bd8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc88:	4b43      	ldr	r3, [pc, #268]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a42      	ldr	r2, [pc, #264]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bc8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc94:	f7f9 fca2 	bl	80055dc <HAL_GetTick>
 800bc98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc9a:	e008      	b.n	800bcae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc9c:	f7f9 fc9e 	bl	80055dc <HAL_GetTick>
 800bca0:	4602      	mov	r2, r0
 800bca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d901      	bls.n	800bcae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	e070      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcae:	4b3a      	ldr	r3, [pc, #232]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1f0      	bne.n	800bc9c <HAL_RCC_OscConfig+0x7b0>
 800bcba:	e068      	b.n	800bd8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bcbc:	4b36      	ldr	r3, [pc, #216]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bcbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bcc2:	4b35      	ldr	r3, [pc, #212]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcc6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d031      	beq.n	800bd34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f003 0203 	and.w	r2, r3, #3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d12a      	bne.n	800bd34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	091b      	lsrs	r3, r3, #4
 800bce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d122      	bne.n	800bd34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d11a      	bne.n	800bd34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	0a5b      	lsrs	r3, r3, #9
 800bd02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d111      	bne.n	800bd34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	0c1b      	lsrs	r3, r3, #16
 800bd14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d108      	bne.n	800bd34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	0e1b      	lsrs	r3, r3, #24
 800bd26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d001      	beq.n	800bd38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e02b      	b.n	800bd90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bd38:	4b17      	ldr	r3, [pc, #92]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bd3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd3c:	08db      	lsrs	r3, r3, #3
 800bd3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd48:	693a      	ldr	r2, [r7, #16]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d01f      	beq.n	800bd8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bd4e:	4b12      	ldr	r3, [pc, #72]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd52:	4a11      	ldr	r2, [pc, #68]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bd54:	f023 0301 	bic.w	r3, r3, #1
 800bd58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd5a:	f7f9 fc3f 	bl	80055dc <HAL_GetTick>
 800bd5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bd60:	bf00      	nop
 800bd62:	f7f9 fc3b 	bl	80055dc <HAL_GetTick>
 800bd66:	4602      	mov	r2, r0
 800bd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d0f9      	beq.n	800bd62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bd6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bd70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd72:	4b0a      	ldr	r3, [pc, #40]	@ (800bd9c <HAL_RCC_OscConfig+0x8b0>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bd7a:	00d2      	lsls	r2, r2, #3
 800bd7c:	4906      	ldr	r1, [pc, #24]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bd82:	4b05      	ldr	r3, [pc, #20]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd86:	4a04      	ldr	r2, [pc, #16]	@ (800bd98 <HAL_RCC_OscConfig+0x8ac>)
 800bd88:	f043 0301 	orr.w	r3, r3, #1
 800bd8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3730      	adds	r7, #48	@ 0x30
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	58024400 	.word	0x58024400
 800bd9c:	ffff0007 	.word	0xffff0007

0800bda0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e19c      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bdb4:	4b8a      	ldr	r3, [pc, #552]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d910      	bls.n	800bde4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdc2:	4b87      	ldr	r3, [pc, #540]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f023 020f 	bic.w	r2, r3, #15
 800bdca:	4985      	ldr	r1, [pc, #532]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdd2:	4b83      	ldr	r3, [pc, #524]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 030f 	and.w	r3, r3, #15
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d001      	beq.n	800bde4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e184      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 0304 	and.w	r3, r3, #4
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d010      	beq.n	800be12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	691a      	ldr	r2, [r3, #16]
 800bdf4:	4b7b      	ldr	r3, [pc, #492]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d908      	bls.n	800be12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be00:	4b78      	ldr	r3, [pc, #480]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	4975      	ldr	r1, [pc, #468]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 0308 	and.w	r3, r3, #8
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d010      	beq.n	800be40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	695a      	ldr	r2, [r3, #20]
 800be22:	4b70      	ldr	r3, [pc, #448]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be24:	69db      	ldr	r3, [r3, #28]
 800be26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d908      	bls.n	800be40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be2e:	4b6d      	ldr	r3, [pc, #436]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be30:	69db      	ldr	r3, [r3, #28]
 800be32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	496a      	ldr	r1, [pc, #424]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0310 	and.w	r3, r3, #16
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d010      	beq.n	800be6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	699a      	ldr	r2, [r3, #24]
 800be50:	4b64      	ldr	r3, [pc, #400]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be52:	69db      	ldr	r3, [r3, #28]
 800be54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be58:	429a      	cmp	r2, r3
 800be5a:	d908      	bls.n	800be6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be5c:	4b61      	ldr	r3, [pc, #388]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be5e:	69db      	ldr	r3, [r3, #28]
 800be60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	495e      	ldr	r1, [pc, #376]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b00      	cmp	r3, #0
 800be78:	d010      	beq.n	800be9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	69da      	ldr	r2, [r3, #28]
 800be7e:	4b59      	ldr	r3, [pc, #356]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be86:	429a      	cmp	r2, r3
 800be88:	d908      	bls.n	800be9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800be8a:	4b56      	ldr	r3, [pc, #344]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	4953      	ldr	r1, [pc, #332]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800be98:	4313      	orrs	r3, r2
 800be9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d010      	beq.n	800beca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68da      	ldr	r2, [r3, #12]
 800beac:	4b4d      	ldr	r3, [pc, #308]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d908      	bls.n	800beca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800beb8:	4b4a      	ldr	r3, [pc, #296]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	f023 020f 	bic.w	r2, r3, #15
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	4947      	ldr	r1, [pc, #284]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bec6:	4313      	orrs	r3, r2
 800bec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0301 	and.w	r3, r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d055      	beq.n	800bf82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bed6:	4b43      	ldr	r3, [pc, #268]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bed8:	699b      	ldr	r3, [r3, #24]
 800beda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	4940      	ldr	r1, [pc, #256]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bee4:	4313      	orrs	r3, r2
 800bee6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d107      	bne.n	800bf00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bef0:	4b3c      	ldr	r3, [pc, #240]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d121      	bne.n	800bf40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800befc:	2301      	movs	r3, #1
 800befe:	e0f6      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d107      	bne.n	800bf18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf08:	4b36      	ldr	r3, [pc, #216]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d115      	bne.n	800bf40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e0ea      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d107      	bne.n	800bf30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf20:	4b30      	ldr	r3, [pc, #192]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d109      	bne.n	800bf40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e0de      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bf30:	4b2c      	ldr	r3, [pc, #176]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 0304 	and.w	r3, r3, #4
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d101      	bne.n	800bf40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e0d6      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bf40:	4b28      	ldr	r3, [pc, #160]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	f023 0207 	bic.w	r2, r3, #7
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4925      	ldr	r1, [pc, #148]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf52:	f7f9 fb43 	bl	80055dc <HAL_GetTick>
 800bf56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf58:	e00a      	b.n	800bf70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf5a:	f7f9 fb3f 	bl	80055dc <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d901      	bls.n	800bf70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	e0be      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf70:	4b1c      	ldr	r3, [pc, #112]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	00db      	lsls	r3, r3, #3
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d1eb      	bne.n	800bf5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d010      	beq.n	800bfb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	4b14      	ldr	r3, [pc, #80]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	f003 030f 	and.w	r3, r3, #15
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d208      	bcs.n	800bfb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf9e:	4b11      	ldr	r3, [pc, #68]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bfa0:	699b      	ldr	r3, [r3, #24]
 800bfa2:	f023 020f 	bic.w	r2, r3, #15
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	490e      	ldr	r1, [pc, #56]	@ (800bfe4 <HAL_RCC_ClockConfig+0x244>)
 800bfac:	4313      	orrs	r3, r2
 800bfae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 030f 	and.w	r3, r3, #15
 800bfb8:	683a      	ldr	r2, [r7, #0]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d214      	bcs.n	800bfe8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfbe:	4b08      	ldr	r3, [pc, #32]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f023 020f 	bic.w	r2, r3, #15
 800bfc6:	4906      	ldr	r1, [pc, #24]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfce:	4b04      	ldr	r3, [pc, #16]	@ (800bfe0 <HAL_RCC_ClockConfig+0x240>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 030f 	and.w	r3, r3, #15
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d005      	beq.n	800bfe8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e086      	b.n	800c0ee <HAL_RCC_ClockConfig+0x34e>
 800bfe0:	52002000 	.word	0x52002000
 800bfe4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f003 0304 	and.w	r3, r3, #4
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d010      	beq.n	800c016 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	691a      	ldr	r2, [r3, #16]
 800bff8:	4b3f      	ldr	r3, [pc, #252]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800bffa:	699b      	ldr	r3, [r3, #24]
 800bffc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c000:	429a      	cmp	r2, r3
 800c002:	d208      	bcs.n	800c016 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c004:	4b3c      	ldr	r3, [pc, #240]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	4939      	ldr	r1, [pc, #228]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c012:	4313      	orrs	r3, r2
 800c014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0308 	and.w	r3, r3, #8
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d010      	beq.n	800c044 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	695a      	ldr	r2, [r3, #20]
 800c026:	4b34      	ldr	r3, [pc, #208]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c028:	69db      	ldr	r3, [r3, #28]
 800c02a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c02e:	429a      	cmp	r2, r3
 800c030:	d208      	bcs.n	800c044 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c032:	4b31      	ldr	r3, [pc, #196]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	492e      	ldr	r1, [pc, #184]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c040:	4313      	orrs	r3, r2
 800c042:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 0310 	and.w	r3, r3, #16
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d010      	beq.n	800c072 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	699a      	ldr	r2, [r3, #24]
 800c054:	4b28      	ldr	r3, [pc, #160]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d208      	bcs.n	800c072 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c060:	4b25      	ldr	r3, [pc, #148]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c062:	69db      	ldr	r3, [r3, #28]
 800c064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	4922      	ldr	r1, [pc, #136]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c06e:	4313      	orrs	r3, r2
 800c070:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 0320 	and.w	r3, r3, #32
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d010      	beq.n	800c0a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	69da      	ldr	r2, [r3, #28]
 800c082:	4b1d      	ldr	r3, [pc, #116]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d208      	bcs.n	800c0a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c08e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	69db      	ldr	r3, [r3, #28]
 800c09a:	4917      	ldr	r1, [pc, #92]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c09c:	4313      	orrs	r3, r2
 800c09e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c0a0:	f000 f834 	bl	800c10c <HAL_RCC_GetSysClockFreq>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	4b14      	ldr	r3, [pc, #80]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	0a1b      	lsrs	r3, r3, #8
 800c0ac:	f003 030f 	and.w	r3, r3, #15
 800c0b0:	4912      	ldr	r1, [pc, #72]	@ (800c0fc <HAL_RCC_ClockConfig+0x35c>)
 800c0b2:	5ccb      	ldrb	r3, [r1, r3]
 800c0b4:	f003 031f 	and.w	r3, r3, #31
 800c0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c0be:	4b0e      	ldr	r3, [pc, #56]	@ (800c0f8 <HAL_RCC_ClockConfig+0x358>)
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	f003 030f 	and.w	r3, r3, #15
 800c0c6:	4a0d      	ldr	r2, [pc, #52]	@ (800c0fc <HAL_RCC_ClockConfig+0x35c>)
 800c0c8:	5cd3      	ldrb	r3, [r2, r3]
 800c0ca:	f003 031f 	and.w	r3, r3, #31
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d4:	4a0a      	ldr	r2, [pc, #40]	@ (800c100 <HAL_RCC_ClockConfig+0x360>)
 800c0d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c0d8:	4a0a      	ldr	r2, [pc, #40]	@ (800c104 <HAL_RCC_ClockConfig+0x364>)
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c0de:	4b0a      	ldr	r3, [pc, #40]	@ (800c108 <HAL_RCC_ClockConfig+0x368>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7f6 fea0 	bl	8002e28 <HAL_InitTick>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	58024400 	.word	0x58024400
 800c0fc:	080168dc 	.word	0x080168dc
 800c100:	24000004 	.word	0x24000004
 800c104:	24000000 	.word	0x24000000
 800c108:	24000034 	.word	0x24000034

0800c10c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b089      	sub	sp, #36	@ 0x24
 800c110:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c112:	4bb3      	ldr	r3, [pc, #716]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c11a:	2b18      	cmp	r3, #24
 800c11c:	f200 8155 	bhi.w	800c3ca <HAL_RCC_GetSysClockFreq+0x2be>
 800c120:	a201      	add	r2, pc, #4	@ (adr r2, 800c128 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c126:	bf00      	nop
 800c128:	0800c18d 	.word	0x0800c18d
 800c12c:	0800c3cb 	.word	0x0800c3cb
 800c130:	0800c3cb 	.word	0x0800c3cb
 800c134:	0800c3cb 	.word	0x0800c3cb
 800c138:	0800c3cb 	.word	0x0800c3cb
 800c13c:	0800c3cb 	.word	0x0800c3cb
 800c140:	0800c3cb 	.word	0x0800c3cb
 800c144:	0800c3cb 	.word	0x0800c3cb
 800c148:	0800c1b3 	.word	0x0800c1b3
 800c14c:	0800c3cb 	.word	0x0800c3cb
 800c150:	0800c3cb 	.word	0x0800c3cb
 800c154:	0800c3cb 	.word	0x0800c3cb
 800c158:	0800c3cb 	.word	0x0800c3cb
 800c15c:	0800c3cb 	.word	0x0800c3cb
 800c160:	0800c3cb 	.word	0x0800c3cb
 800c164:	0800c3cb 	.word	0x0800c3cb
 800c168:	0800c1b9 	.word	0x0800c1b9
 800c16c:	0800c3cb 	.word	0x0800c3cb
 800c170:	0800c3cb 	.word	0x0800c3cb
 800c174:	0800c3cb 	.word	0x0800c3cb
 800c178:	0800c3cb 	.word	0x0800c3cb
 800c17c:	0800c3cb 	.word	0x0800c3cb
 800c180:	0800c3cb 	.word	0x0800c3cb
 800c184:	0800c3cb 	.word	0x0800c3cb
 800c188:	0800c1bf 	.word	0x0800c1bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c18c:	4b94      	ldr	r3, [pc, #592]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0320 	and.w	r3, r3, #32
 800c194:	2b00      	cmp	r3, #0
 800c196:	d009      	beq.n	800c1ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c198:	4b91      	ldr	r3, [pc, #580]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	08db      	lsrs	r3, r3, #3
 800c19e:	f003 0303 	and.w	r3, r3, #3
 800c1a2:	4a90      	ldr	r2, [pc, #576]	@ (800c3e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c1aa:	e111      	b.n	800c3d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c1ac:	4b8d      	ldr	r3, [pc, #564]	@ (800c3e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c1ae:	61bb      	str	r3, [r7, #24]
      break;
 800c1b0:	e10e      	b.n	800c3d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c1b2:	4b8d      	ldr	r3, [pc, #564]	@ (800c3e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c1b4:	61bb      	str	r3, [r7, #24]
      break;
 800c1b6:	e10b      	b.n	800c3d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c1b8:	4b8c      	ldr	r3, [pc, #560]	@ (800c3ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c1ba:	61bb      	str	r3, [r7, #24]
      break;
 800c1bc:	e108      	b.n	800c3d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1be:	4b88      	ldr	r3, [pc, #544]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c2:	f003 0303 	and.w	r3, r3, #3
 800c1c6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c1c8:	4b85      	ldr	r3, [pc, #532]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1cc:	091b      	lsrs	r3, r3, #4
 800c1ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1d2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c1d4:	4b82      	ldr	r3, [pc, #520]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d8:	f003 0301 	and.w	r3, r3, #1
 800c1dc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c1de:	4b80      	ldr	r3, [pc, #512]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1e2:	08db      	lsrs	r3, r3, #3
 800c1e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	fb02 f303 	mul.w	r3, r2, r3
 800c1ee:	ee07 3a90 	vmov	s15, r3
 800c1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f000 80e1 	beq.w	800c3c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	2b02      	cmp	r3, #2
 800c206:	f000 8083 	beq.w	800c310 <HAL_RCC_GetSysClockFreq+0x204>
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	f200 80a1 	bhi.w	800c354 <HAL_RCC_GetSysClockFreq+0x248>
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <HAL_RCC_GetSysClockFreq+0x114>
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d056      	beq.n	800c2cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800c21e:	e099      	b.n	800c354 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c220:	4b6f      	ldr	r3, [pc, #444]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 0320 	and.w	r3, r3, #32
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d02d      	beq.n	800c288 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c22c:	4b6c      	ldr	r3, [pc, #432]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	08db      	lsrs	r3, r3, #3
 800c232:	f003 0303 	and.w	r3, r3, #3
 800c236:	4a6b      	ldr	r2, [pc, #428]	@ (800c3e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c238:	fa22 f303 	lsr.w	r3, r2, r3
 800c23c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	ee07 3a90 	vmov	s15, r3
 800c244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	ee07 3a90 	vmov	s15, r3
 800c24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c256:	4b62      	ldr	r3, [pc, #392]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c25e:	ee07 3a90 	vmov	s15, r3
 800c262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c266:	ed97 6a02 	vldr	s12, [r7, #8]
 800c26a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c3f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c282:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c286:	e087      	b.n	800c398 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c292:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c3f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c29a:	4b51      	ldr	r3, [pc, #324]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a2:	ee07 3a90 	vmov	s15, r3
 800c2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2ae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c3f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c2ca:	e065      	b.n	800c398 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	ee07 3a90 	vmov	s15, r3
 800c2d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c3f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2de:	4b40      	ldr	r3, [pc, #256]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e6:	ee07 3a90 	vmov	s15, r3
 800c2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800c2f2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c3f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c30a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c30e:	e043      	b.n	800c398 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	ee07 3a90 	vmov	s15, r3
 800c316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c31a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c3fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800c31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c322:	4b2f      	ldr	r3, [pc, #188]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c32a:	ee07 3a90 	vmov	s15, r3
 800c32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c332:	ed97 6a02 	vldr	s12, [r7, #8]
 800c336:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c3f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c352:	e021      	b.n	800c398 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	ee07 3a90 	vmov	s15, r3
 800c35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c3f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c366:	4b1e      	ldr	r3, [pc, #120]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36e:	ee07 3a90 	vmov	s15, r3
 800c372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c376:	ed97 6a02 	vldr	s12, [r7, #8]
 800c37a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c3f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c392:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c396:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c398:	4b11      	ldr	r3, [pc, #68]	@ (800c3e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c39a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39c:	0a5b      	lsrs	r3, r3, #9
 800c39e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	ee07 3a90 	vmov	s15, r3
 800c3ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c3b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3bc:	ee17 3a90 	vmov	r3, s15
 800c3c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c3c2:	e005      	b.n	800c3d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	61bb      	str	r3, [r7, #24]
      break;
 800c3c8:	e002      	b.n	800c3d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c3ca:	4b07      	ldr	r3, [pc, #28]	@ (800c3e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c3cc:	61bb      	str	r3, [r7, #24]
      break;
 800c3ce:	bf00      	nop
  }

  return sysclockfreq;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3724      	adds	r7, #36	@ 0x24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	58024400 	.word	0x58024400
 800c3e4:	03d09000 	.word	0x03d09000
 800c3e8:	003d0900 	.word	0x003d0900
 800c3ec:	017d7840 	.word	0x017d7840
 800c3f0:	46000000 	.word	0x46000000
 800c3f4:	4c742400 	.word	0x4c742400
 800c3f8:	4a742400 	.word	0x4a742400
 800c3fc:	4bbebc20 	.word	0x4bbebc20

0800c400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c406:	f7ff fe81 	bl	800c10c <HAL_RCC_GetSysClockFreq>
 800c40a:	4602      	mov	r2, r0
 800c40c:	4b10      	ldr	r3, [pc, #64]	@ (800c450 <HAL_RCC_GetHCLKFreq+0x50>)
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	0a1b      	lsrs	r3, r3, #8
 800c412:	f003 030f 	and.w	r3, r3, #15
 800c416:	490f      	ldr	r1, [pc, #60]	@ (800c454 <HAL_RCC_GetHCLKFreq+0x54>)
 800c418:	5ccb      	ldrb	r3, [r1, r3]
 800c41a:	f003 031f 	and.w	r3, r3, #31
 800c41e:	fa22 f303 	lsr.w	r3, r2, r3
 800c422:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c424:	4b0a      	ldr	r3, [pc, #40]	@ (800c450 <HAL_RCC_GetHCLKFreq+0x50>)
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	f003 030f 	and.w	r3, r3, #15
 800c42c:	4a09      	ldr	r2, [pc, #36]	@ (800c454 <HAL_RCC_GetHCLKFreq+0x54>)
 800c42e:	5cd3      	ldrb	r3, [r2, r3]
 800c430:	f003 031f 	and.w	r3, r3, #31
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	fa22 f303 	lsr.w	r3, r2, r3
 800c43a:	4a07      	ldr	r2, [pc, #28]	@ (800c458 <HAL_RCC_GetHCLKFreq+0x58>)
 800c43c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c43e:	4a07      	ldr	r2, [pc, #28]	@ (800c45c <HAL_RCC_GetHCLKFreq+0x5c>)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c444:	4b04      	ldr	r3, [pc, #16]	@ (800c458 <HAL_RCC_GetHCLKFreq+0x58>)
 800c446:	681b      	ldr	r3, [r3, #0]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3708      	adds	r7, #8
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	58024400 	.word	0x58024400
 800c454:	080168dc 	.word	0x080168dc
 800c458:	24000004 	.word	0x24000004
 800c45c:	24000000 	.word	0x24000000

0800c460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c464:	f7ff ffcc 	bl	800c400 <HAL_RCC_GetHCLKFreq>
 800c468:	4602      	mov	r2, r0
 800c46a:	4b06      	ldr	r3, [pc, #24]	@ (800c484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c46c:	69db      	ldr	r3, [r3, #28]
 800c46e:	091b      	lsrs	r3, r3, #4
 800c470:	f003 0307 	and.w	r3, r3, #7
 800c474:	4904      	ldr	r1, [pc, #16]	@ (800c488 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c476:	5ccb      	ldrb	r3, [r1, r3]
 800c478:	f003 031f 	and.w	r3, r3, #31
 800c47c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c480:	4618      	mov	r0, r3
 800c482:	bd80      	pop	{r7, pc}
 800c484:	58024400 	.word	0x58024400
 800c488:	080168dc 	.word	0x080168dc

0800c48c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c490:	f7ff ffb6 	bl	800c400 <HAL_RCC_GetHCLKFreq>
 800c494:	4602      	mov	r2, r0
 800c496:	4b06      	ldr	r3, [pc, #24]	@ (800c4b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	0a1b      	lsrs	r3, r3, #8
 800c49c:	f003 0307 	and.w	r3, r3, #7
 800c4a0:	4904      	ldr	r1, [pc, #16]	@ (800c4b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c4a2:	5ccb      	ldrb	r3, [r1, r3]
 800c4a4:	f003 031f 	and.w	r3, r3, #31
 800c4a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	58024400 	.word	0x58024400
 800c4b4:	080168dc 	.word	0x080168dc

0800c4b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	223f      	movs	r2, #63	@ 0x3f
 800c4c6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c4c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c534 <HAL_RCC_GetClockConfig+0x7c>)
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	f003 0207 	and.w	r2, r3, #7
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800c4d4:	4b17      	ldr	r3, [pc, #92]	@ (800c534 <HAL_RCC_GetClockConfig+0x7c>)
 800c4d6:	699b      	ldr	r3, [r3, #24]
 800c4d8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800c4e0:	4b14      	ldr	r3, [pc, #80]	@ (800c534 <HAL_RCC_GetClockConfig+0x7c>)
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	f003 020f 	and.w	r2, r3, #15
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800c4ec:	4b11      	ldr	r3, [pc, #68]	@ (800c534 <HAL_RCC_GetClockConfig+0x7c>)
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <HAL_RCC_GetClockConfig+0x7c>)
 800c4fa:	69db      	ldr	r3, [r3, #28]
 800c4fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800c504:	4b0b      	ldr	r3, [pc, #44]	@ (800c534 <HAL_RCC_GetClockConfig+0x7c>)
 800c506:	69db      	ldr	r3, [r3, #28]
 800c508:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800c510:	4b08      	ldr	r3, [pc, #32]	@ (800c534 <HAL_RCC_GetClockConfig+0x7c>)
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c51c:	4b06      	ldr	r3, [pc, #24]	@ (800c538 <HAL_RCC_GetClockConfig+0x80>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 020f 	and.w	r2, r3, #15
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	601a      	str	r2, [r3, #0]
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	58024400 	.word	0x58024400
 800c538:	52002000 	.word	0x52002000

0800c53c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c540:	b0ca      	sub	sp, #296	@ 0x128
 800c542:	af00      	add	r7, sp, #0
 800c544:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c548:	2300      	movs	r3, #0
 800c54a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c54e:	2300      	movs	r3, #0
 800c550:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c560:	2500      	movs	r5, #0
 800c562:	ea54 0305 	orrs.w	r3, r4, r5
 800c566:	d049      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c56c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c56e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c572:	d02f      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c574:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c578:	d828      	bhi.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c57a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c57e:	d01a      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c580:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c584:	d822      	bhi.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c58a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c58e:	d007      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c590:	e01c      	b.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c592:	4bb8      	ldr	r3, [pc, #736]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c596:	4ab7      	ldr	r2, [pc, #732]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c59c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c59e:	e01a      	b.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	2102      	movs	r1, #2
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f001 fc8f 	bl	800decc <RCCEx_PLL2_Config>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5b4:	e00f      	b.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5ba:	3328      	adds	r3, #40	@ 0x28
 800c5bc:	2102      	movs	r1, #2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f001 fd36 	bl	800e030 <RCCEx_PLL3_Config>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5ca:	e004      	b.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c5d2:	e000      	b.n	800c5d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c5d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10a      	bne.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c5de:	4ba5      	ldr	r3, [pc, #660]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c5e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c5ec:	4aa1      	ldr	r2, [pc, #644]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c5ee:	430b      	orrs	r3, r1
 800c5f0:	6513      	str	r3, [r2, #80]	@ 0x50
 800c5f2:	e003      	b.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c5f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c608:	f04f 0900 	mov.w	r9, #0
 800c60c:	ea58 0309 	orrs.w	r3, r8, r9
 800c610:	d047      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c618:	2b04      	cmp	r3, #4
 800c61a:	d82a      	bhi.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c61c:	a201      	add	r2, pc, #4	@ (adr r2, 800c624 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c639 	.word	0x0800c639
 800c628:	0800c647 	.word	0x0800c647
 800c62c:	0800c65d 	.word	0x0800c65d
 800c630:	0800c67b 	.word	0x0800c67b
 800c634:	0800c67b 	.word	0x0800c67b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c638:	4b8e      	ldr	r3, [pc, #568]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c63c:	4a8d      	ldr	r2, [pc, #564]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c63e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c642:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c644:	e01a      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c64a:	3308      	adds	r3, #8
 800c64c:	2100      	movs	r1, #0
 800c64e:	4618      	mov	r0, r3
 800c650:	f001 fc3c 	bl	800decc <RCCEx_PLL2_Config>
 800c654:	4603      	mov	r3, r0
 800c656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c65a:	e00f      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c660:	3328      	adds	r3, #40	@ 0x28
 800c662:	2100      	movs	r1, #0
 800c664:	4618      	mov	r0, r3
 800c666:	f001 fce3 	bl	800e030 <RCCEx_PLL3_Config>
 800c66a:	4603      	mov	r3, r0
 800c66c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c670:	e004      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c678:	e000      	b.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c67a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c67c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c684:	4b7b      	ldr	r3, [pc, #492]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c688:	f023 0107 	bic.w	r1, r3, #7
 800c68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c692:	4a78      	ldr	r2, [pc, #480]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c694:	430b      	orrs	r3, r1
 800c696:	6513      	str	r3, [r2, #80]	@ 0x50
 800c698:	e003      	b.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c69a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c69e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800c6ae:	f04f 0b00 	mov.w	fp, #0
 800c6b2:	ea5a 030b 	orrs.w	r3, sl, fp
 800c6b6:	d04c      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800c6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6c2:	d030      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800c6c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6c8:	d829      	bhi.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c6ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800c6cc:	d02d      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c6ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800c6d0:	d825      	bhi.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c6d2:	2b80      	cmp	r3, #128	@ 0x80
 800c6d4:	d018      	beq.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800c6d6:	2b80      	cmp	r3, #128	@ 0x80
 800c6d8:	d821      	bhi.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d002      	beq.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800c6de:	2b40      	cmp	r3, #64	@ 0x40
 800c6e0:	d007      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800c6e2:	e01c      	b.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6e4:	4b63      	ldr	r3, [pc, #396]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e8:	4a62      	ldr	r2, [pc, #392]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c6ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c6f0:	e01c      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6f6:	3308      	adds	r3, #8
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f001 fbe6 	bl	800decc <RCCEx_PLL2_Config>
 800c700:	4603      	mov	r3, r0
 800c702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c706:	e011      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c70c:	3328      	adds	r3, #40	@ 0x28
 800c70e:	2100      	movs	r1, #0
 800c710:	4618      	mov	r0, r3
 800c712:	f001 fc8d 	bl	800e030 <RCCEx_PLL3_Config>
 800c716:	4603      	mov	r3, r0
 800c718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800c71c:	e006      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c724:	e002      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c726:	bf00      	nop
 800c728:	e000      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800c72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c72c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10a      	bne.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c734:	4b4f      	ldr	r3, [pc, #316]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c738:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800c73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c742:	4a4c      	ldr	r2, [pc, #304]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c744:	430b      	orrs	r3, r1
 800c746:	6513      	str	r3, [r2, #80]	@ 0x50
 800c748:	e003      	b.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c74e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800c75e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800c762:	2300      	movs	r3, #0
 800c764:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800c768:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800c76c:	460b      	mov	r3, r1
 800c76e:	4313      	orrs	r3, r2
 800c770:	d053      	beq.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c77a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c77e:	d035      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800c780:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c784:	d82e      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c786:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c78a:	d031      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800c78c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c790:	d828      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c796:	d01a      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 800c798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c79c:	d822      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c7a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c7a6:	d007      	beq.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800c7a8:	e01c      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7aa:	4b32      	ldr	r3, [pc, #200]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ae:	4a31      	ldr	r2, [pc, #196]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c7b6:	e01c      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7bc:	3308      	adds	r3, #8
 800c7be:	2100      	movs	r1, #0
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f001 fb83 	bl	800decc <RCCEx_PLL2_Config>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c7cc:	e011      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7d2:	3328      	adds	r3, #40	@ 0x28
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f001 fc2a 	bl	800e030 <RCCEx_PLL3_Config>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c7e2:	e006      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c7ea:	e002      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c7ec:	bf00      	nop
 800c7ee:	e000      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800c7f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10b      	bne.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c7fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c7fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c80a:	4a1a      	ldr	r2, [pc, #104]	@ (800c874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800c80c:	430b      	orrs	r3, r1
 800c80e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c810:	e003      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c826:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c82a:	2300      	movs	r3, #0
 800c82c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c830:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800c834:	460b      	mov	r3, r1
 800c836:	4313      	orrs	r3, r2
 800c838:	d056      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c83e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c846:	d038      	beq.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c848:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c84c:	d831      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c84e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c852:	d034      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x382>
 800c854:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c858:	d82b      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c85a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c85e:	d01d      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800c860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c864:	d825      	bhi.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c866:	2b00      	cmp	r3, #0
 800c868:	d006      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c86a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c86e:	d00a      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c870:	e01f      	b.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800c872:	bf00      	nop
 800c874:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c878:	4ba2      	ldr	r3, [pc, #648]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c87c:	4aa1      	ldr	r2, [pc, #644]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c87e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c884:	e01c      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c88a:	3308      	adds	r3, #8
 800c88c:	2100      	movs	r1, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f001 fb1c 	bl	800decc <RCCEx_PLL2_Config>
 800c894:	4603      	mov	r3, r0
 800c896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c89a:	e011      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8a0:	3328      	adds	r3, #40	@ 0x28
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f001 fbc3 	bl	800e030 <RCCEx_PLL3_Config>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8b0:	e006      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c8b8:	e002      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c8ba:	bf00      	nop
 800c8bc:	e000      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800c8be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10b      	bne.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c8c8:	4b8e      	ldr	r3, [pc, #568]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c8d8:	4a8a      	ldr	r2, [pc, #552]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c8da:	430b      	orrs	r3, r1
 800c8dc:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8de:	e003      	b.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c8e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c8f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c8fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c902:	460b      	mov	r3, r1
 800c904:	4313      	orrs	r3, r2
 800c906:	d03a      	beq.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800c908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c90c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c90e:	2b30      	cmp	r3, #48	@ 0x30
 800c910:	d01f      	beq.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800c912:	2b30      	cmp	r3, #48	@ 0x30
 800c914:	d819      	bhi.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c916:	2b20      	cmp	r3, #32
 800c918:	d00c      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800c91a:	2b20      	cmp	r3, #32
 800c91c:	d815      	bhi.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d019      	beq.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800c922:	2b10      	cmp	r3, #16
 800c924:	d111      	bne.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c926:	4b77      	ldr	r3, [pc, #476]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c92a:	4a76      	ldr	r2, [pc, #472]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c92c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c930:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c932:	e011      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c938:	3308      	adds	r3, #8
 800c93a:	2102      	movs	r1, #2
 800c93c:	4618      	mov	r0, r3
 800c93e:	f001 fac5 	bl	800decc <RCCEx_PLL2_Config>
 800c942:	4603      	mov	r3, r0
 800c944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800c948:	e006      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c950:	e002      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c952:	bf00      	nop
 800c954:	e000      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800c956:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c960:	4b68      	ldr	r3, [pc, #416]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c964:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c96c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c96e:	4a65      	ldr	r2, [pc, #404]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c970:	430b      	orrs	r3, r1
 800c972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c974:	e003      	b.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c97a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c97e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c986:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c98a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c98e:	2300      	movs	r3, #0
 800c990:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c994:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c998:	460b      	mov	r3, r1
 800c99a:	4313      	orrs	r3, r2
 800c99c:	d051      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c9a8:	d035      	beq.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800c9aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c9ae:	d82e      	bhi.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c9b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c9b4:	d031      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800c9b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c9ba:	d828      	bhi.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c9bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9c0:	d01a      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800c9c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9c6:	d822      	bhi.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d003      	beq.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800c9cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9d0:	d007      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800c9d2:	e01c      	b.n	800ca0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9d4:	4b4b      	ldr	r3, [pc, #300]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d8:	4a4a      	ldr	r2, [pc, #296]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800c9da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9e0:	e01c      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f001 fa6e 	bl	800decc <RCCEx_PLL2_Config>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c9f6:	e011      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9fc:	3328      	adds	r3, #40	@ 0x28
 800c9fe:	2100      	movs	r1, #0
 800ca00:	4618      	mov	r0, r3
 800ca02:	f001 fb15 	bl	800e030 <RCCEx_PLL3_Config>
 800ca06:	4603      	mov	r3, r0
 800ca08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ca0c:	e006      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ca14:	e002      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ca16:	bf00      	nop
 800ca18:	e000      	b.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ca1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10a      	bne.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ca24:	4b37      	ldr	r3, [pc, #220]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ca2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca32:	4a34      	ldr	r2, [pc, #208]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ca34:	430b      	orrs	r3, r1
 800ca36:	6513      	str	r3, [r2, #80]	@ 0x50
 800ca38:	e003      	b.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ca42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ca4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ca52:	2300      	movs	r3, #0
 800ca54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ca58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	d056      	beq.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ca62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca6c:	d033      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ca6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ca72:	d82c      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca78:	d02f      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ca7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ca7e:	d826      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca84:	d02b      	beq.n	800cade <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ca86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ca8a:	d820      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca90:	d012      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ca92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca96:	d81a      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d022      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ca9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caa0:	d115      	bne.n	800cace <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800caa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caa6:	3308      	adds	r3, #8
 800caa8:	2101      	movs	r1, #1
 800caaa:	4618      	mov	r0, r3
 800caac:	f001 fa0e 	bl	800decc <RCCEx_PLL2_Config>
 800cab0:	4603      	mov	r3, r0
 800cab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cab6:	e015      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cabc:	3328      	adds	r3, #40	@ 0x28
 800cabe:	2101      	movs	r1, #1
 800cac0:	4618      	mov	r0, r3
 800cac2:	f001 fab5 	bl	800e030 <RCCEx_PLL3_Config>
 800cac6:	4603      	mov	r3, r0
 800cac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cacc:	e00a      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cad4:	e006      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cad6:	bf00      	nop
 800cad8:	e004      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cada:	bf00      	nop
 800cadc:	e002      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cade:	bf00      	nop
 800cae0:	e000      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800cae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10d      	bne.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800caec:	4b05      	ldr	r3, [pc, #20]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800caee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caf0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800caf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cafa:	4a02      	ldr	r2, [pc, #8]	@ (800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cafc:	430b      	orrs	r3, r1
 800cafe:	6513      	str	r3, [r2, #80]	@ 0x50
 800cb00:	e006      	b.n	800cb10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cb02:	bf00      	nop
 800cb04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cb0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800cb1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cb20:	2300      	movs	r3, #0
 800cb22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cb26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	d055      	beq.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb3c:	d033      	beq.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800cb3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb42:	d82c      	bhi.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb48:	d02f      	beq.n	800cbaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800cb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb4e:	d826      	bhi.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb54:	d02b      	beq.n	800cbae <HAL_RCCEx_PeriphCLKConfig+0x672>
 800cb56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cb5a:	d820      	bhi.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb60:	d012      	beq.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800cb62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb66:	d81a      	bhi.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d022      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800cb6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb70:	d115      	bne.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb76:	3308      	adds	r3, #8
 800cb78:	2101      	movs	r1, #1
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f001 f9a6 	bl	800decc <RCCEx_PLL2_Config>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb86:	e015      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb8c:	3328      	adds	r3, #40	@ 0x28
 800cb8e:	2101      	movs	r1, #1
 800cb90:	4618      	mov	r0, r3
 800cb92:	f001 fa4d 	bl	800e030 <RCCEx_PLL3_Config>
 800cb96:	4603      	mov	r3, r0
 800cb98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cb9c:	e00a      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cba4:	e006      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cba6:	bf00      	nop
 800cba8:	e004      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cbaa:	bf00      	nop
 800cbac:	e002      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cbae:	bf00      	nop
 800cbb0:	e000      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800cbb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10b      	bne.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cbbc:	4ba3      	ldr	r3, [pc, #652]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cbbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cbcc:	4a9f      	ldr	r2, [pc, #636]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cbce:	430b      	orrs	r3, r1
 800cbd0:	6593      	str	r3, [r2, #88]	@ 0x58
 800cbd2:	e003      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cbd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cbe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cbec:	2300      	movs	r3, #0
 800cbee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cbf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	d037      	beq.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc06:	d00e      	beq.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800cc08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc0c:	d816      	bhi.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d018      	beq.n	800cc44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800cc12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc16:	d111      	bne.n	800cc3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc18:	4b8c      	ldr	r3, [pc, #560]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc1c:	4a8b      	ldr	r2, [pc, #556]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc24:	e00f      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f001 f94c 	bl	800decc <RCCEx_PLL2_Config>
 800cc34:	4603      	mov	r3, r0
 800cc36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cc3a:	e004      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cc42:	e000      	b.n	800cc46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800cc44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d10a      	bne.n	800cc64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cc4e:	4b7f      	ldr	r3, [pc, #508]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc5c:	4a7b      	ldr	r2, [pc, #492]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cc5e:	430b      	orrs	r3, r1
 800cc60:	6513      	str	r3, [r2, #80]	@ 0x50
 800cc62:	e003      	b.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cc78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cc82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	d039      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d81c      	bhi.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800cc96:	a201      	add	r2, pc, #4	@ (adr r2, 800cc9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800cc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9c:	0800ccd9 	.word	0x0800ccd9
 800cca0:	0800ccad 	.word	0x0800ccad
 800cca4:	0800ccbb 	.word	0x0800ccbb
 800cca8:	0800ccd9 	.word	0x0800ccd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccac:	4b67      	ldr	r3, [pc, #412]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb0:	4a66      	ldr	r2, [pc, #408]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ccb8:	e00f      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ccba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccbe:	3308      	adds	r3, #8
 800ccc0:	2102      	movs	r1, #2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f001 f902 	bl	800decc <RCCEx_PLL2_Config>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ccce:	e004      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ccd6:	e000      	b.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ccd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10a      	bne.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cce2:	4b5a      	ldr	r3, [pc, #360]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cce6:	f023 0103 	bic.w	r1, r3, #3
 800ccea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccf0:	4a56      	ldr	r2, [pc, #344]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ccf2:	430b      	orrs	r3, r1
 800ccf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ccf6:	e003      	b.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800cd0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd10:	2300      	movs	r3, #0
 800cd12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	f000 809f 	beq.w	800ce60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd22:	4b4b      	ldr	r3, [pc, #300]	@ (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a4a      	ldr	r2, [pc, #296]	@ (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd2e:	f7f8 fc55 	bl	80055dc <HAL_GetTick>
 800cd32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd36:	e00b      	b.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd38:	f7f8 fc50 	bl	80055dc <HAL_GetTick>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	2b64      	cmp	r3, #100	@ 0x64
 800cd46:	d903      	bls.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cd4e:	e005      	b.n	800cd5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd50:	4b3f      	ldr	r3, [pc, #252]	@ (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0ed      	beq.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800cd5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d179      	bne.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cd64:	4b39      	ldr	r3, [pc, #228]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cd70:	4053      	eors	r3, r2
 800cd72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d015      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cd7a:	4b34      	ldr	r3, [pc, #208]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd86:	4b31      	ldr	r3, [pc, #196]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd8a:	4a30      	ldr	r2, [pc, #192]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd92:	4b2e      	ldr	r3, [pc, #184]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd96:	4a2d      	ldr	r2, [pc, #180]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cd98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cd9e:	4a2b      	ldr	r2, [pc, #172]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cda0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cda4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cdae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdb2:	d118      	bne.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdb4:	f7f8 fc12 	bl	80055dc <HAL_GetTick>
 800cdb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cdbc:	e00d      	b.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdbe:	f7f8 fc0d 	bl	80055dc <HAL_GetTick>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800cdc8:	1ad2      	subs	r2, r2, r3
 800cdca:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d903      	bls.n	800cdda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800cdd8:	e005      	b.n	800cde6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cdda:	4b1c      	ldr	r3, [pc, #112]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800cddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdde:	f003 0302 	and.w	r3, r3, #2
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0eb      	beq.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800cde6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d129      	bne.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cdf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cdf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cdfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdfe:	d10e      	bne.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800ce00:	4b12      	ldr	r3, [pc, #72]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ce08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce10:	091a      	lsrs	r2, r3, #4
 800ce12:	4b10      	ldr	r3, [pc, #64]	@ (800ce54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800ce14:	4013      	ands	r3, r2
 800ce16:	4a0d      	ldr	r2, [pc, #52]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce18:	430b      	orrs	r3, r1
 800ce1a:	6113      	str	r3, [r2, #16]
 800ce1c:	e005      	b.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800ce1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	4a0a      	ldr	r2, [pc, #40]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ce28:	6113      	str	r3, [r2, #16]
 800ce2a:	4b08      	ldr	r3, [pc, #32]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ce2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ce36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce3a:	4a04      	ldr	r2, [pc, #16]	@ (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ce3c:	430b      	orrs	r3, r1
 800ce3e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce40:	e00e      	b.n	800ce60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800ce4a:	e009      	b.n	800ce60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800ce4c:	58024400 	.word	0x58024400
 800ce50:	58024800 	.word	0x58024800
 800ce54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ce5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ce60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce68:	f002 0301 	and.w	r3, r2, #1
 800ce6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce70:	2300      	movs	r3, #0
 800ce72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	f000 8089 	beq.w	800cf94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800ce82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ce86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce88:	2b28      	cmp	r3, #40	@ 0x28
 800ce8a:	d86b      	bhi.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800ce8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ce8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce92:	bf00      	nop
 800ce94:	0800cf6d 	.word	0x0800cf6d
 800ce98:	0800cf65 	.word	0x0800cf65
 800ce9c:	0800cf65 	.word	0x0800cf65
 800cea0:	0800cf65 	.word	0x0800cf65
 800cea4:	0800cf65 	.word	0x0800cf65
 800cea8:	0800cf65 	.word	0x0800cf65
 800ceac:	0800cf65 	.word	0x0800cf65
 800ceb0:	0800cf65 	.word	0x0800cf65
 800ceb4:	0800cf39 	.word	0x0800cf39
 800ceb8:	0800cf65 	.word	0x0800cf65
 800cebc:	0800cf65 	.word	0x0800cf65
 800cec0:	0800cf65 	.word	0x0800cf65
 800cec4:	0800cf65 	.word	0x0800cf65
 800cec8:	0800cf65 	.word	0x0800cf65
 800cecc:	0800cf65 	.word	0x0800cf65
 800ced0:	0800cf65 	.word	0x0800cf65
 800ced4:	0800cf4f 	.word	0x0800cf4f
 800ced8:	0800cf65 	.word	0x0800cf65
 800cedc:	0800cf65 	.word	0x0800cf65
 800cee0:	0800cf65 	.word	0x0800cf65
 800cee4:	0800cf65 	.word	0x0800cf65
 800cee8:	0800cf65 	.word	0x0800cf65
 800ceec:	0800cf65 	.word	0x0800cf65
 800cef0:	0800cf65 	.word	0x0800cf65
 800cef4:	0800cf6d 	.word	0x0800cf6d
 800cef8:	0800cf65 	.word	0x0800cf65
 800cefc:	0800cf65 	.word	0x0800cf65
 800cf00:	0800cf65 	.word	0x0800cf65
 800cf04:	0800cf65 	.word	0x0800cf65
 800cf08:	0800cf65 	.word	0x0800cf65
 800cf0c:	0800cf65 	.word	0x0800cf65
 800cf10:	0800cf65 	.word	0x0800cf65
 800cf14:	0800cf6d 	.word	0x0800cf6d
 800cf18:	0800cf65 	.word	0x0800cf65
 800cf1c:	0800cf65 	.word	0x0800cf65
 800cf20:	0800cf65 	.word	0x0800cf65
 800cf24:	0800cf65 	.word	0x0800cf65
 800cf28:	0800cf65 	.word	0x0800cf65
 800cf2c:	0800cf65 	.word	0x0800cf65
 800cf30:	0800cf65 	.word	0x0800cf65
 800cf34:	0800cf6d 	.word	0x0800cf6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf3c:	3308      	adds	r3, #8
 800cf3e:	2101      	movs	r1, #1
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 ffc3 	bl	800decc <RCCEx_PLL2_Config>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf4c:	e00f      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf52:	3328      	adds	r3, #40	@ 0x28
 800cf54:	2101      	movs	r1, #1
 800cf56:	4618      	mov	r0, r3
 800cf58:	f001 f86a 	bl	800e030 <RCCEx_PLL3_Config>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cf62:	e004      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800cf6a:	e000      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800cf6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10a      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cf76:	4bbf      	ldr	r3, [pc, #764]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cf78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cf7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf84:	4abb      	ldr	r2, [pc, #748]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800cf86:	430b      	orrs	r3, r1
 800cf88:	6553      	str	r3, [r2, #84]	@ 0x54
 800cf8a:	e003      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cf90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cf94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f002 0302 	and.w	r3, r2, #2
 800cfa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cfaa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	d041      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cfb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cfba:	2b05      	cmp	r3, #5
 800cfbc:	d824      	bhi.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800cfbe:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800cfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc4:	0800d011 	.word	0x0800d011
 800cfc8:	0800cfdd 	.word	0x0800cfdd
 800cfcc:	0800cff3 	.word	0x0800cff3
 800cfd0:	0800d011 	.word	0x0800d011
 800cfd4:	0800d011 	.word	0x0800d011
 800cfd8:	0800d011 	.word	0x0800d011
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f000 ff71 	bl	800decc <RCCEx_PLL2_Config>
 800cfea:	4603      	mov	r3, r0
 800cfec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cff0:	e00f      	b.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cff6:	3328      	adds	r3, #40	@ 0x28
 800cff8:	2101      	movs	r1, #1
 800cffa:	4618      	mov	r0, r3
 800cffc:	f001 f818 	bl	800e030 <RCCEx_PLL3_Config>
 800d000:	4603      	mov	r3, r0
 800d002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d006:	e004      	b.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d008:	2301      	movs	r3, #1
 800d00a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d00e:	e000      	b.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d010:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d016:	2b00      	cmp	r3, #0
 800d018:	d10a      	bne.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d01a:	4b96      	ldr	r3, [pc, #600]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d01e:	f023 0107 	bic.w	r1, r3, #7
 800d022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d026:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d028:	4a92      	ldr	r2, [pc, #584]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d02a:	430b      	orrs	r3, r1
 800d02c:	6553      	str	r3, [r2, #84]	@ 0x54
 800d02e:	e003      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f002 0304 	and.w	r3, r2, #4
 800d044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d048:	2300      	movs	r3, #0
 800d04a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d04e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d052:	460b      	mov	r3, r1
 800d054:	4313      	orrs	r3, r2
 800d056:	d044      	beq.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d05c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d060:	2b05      	cmp	r3, #5
 800d062:	d825      	bhi.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d064:	a201      	add	r2, pc, #4	@ (adr r2, 800d06c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06a:	bf00      	nop
 800d06c:	0800d0b9 	.word	0x0800d0b9
 800d070:	0800d085 	.word	0x0800d085
 800d074:	0800d09b 	.word	0x0800d09b
 800d078:	0800d0b9 	.word	0x0800d0b9
 800d07c:	0800d0b9 	.word	0x0800d0b9
 800d080:	0800d0b9 	.word	0x0800d0b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d088:	3308      	adds	r3, #8
 800d08a:	2101      	movs	r1, #1
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 ff1d 	bl	800decc <RCCEx_PLL2_Config>
 800d092:	4603      	mov	r3, r0
 800d094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d098:	e00f      	b.n	800d0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d09e:	3328      	adds	r3, #40	@ 0x28
 800d0a0:	2101      	movs	r1, #1
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f000 ffc4 	bl	800e030 <RCCEx_PLL3_Config>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d0ae:	e004      	b.n	800d0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d0b6:	e000      	b.n	800d0ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d0b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10b      	bne.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d0c2:	4b6c      	ldr	r3, [pc, #432]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0c6:	f023 0107 	bic.w	r1, r3, #7
 800d0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d0d2:	4a68      	ldr	r2, [pc, #416]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d0d4:	430b      	orrs	r3, r1
 800d0d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0d8:	e003      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ea:	f002 0320 	and.w	r3, r2, #32
 800d0ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d0f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4313      	orrs	r3, r2
 800d100:	d055      	beq.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d10a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d10e:	d033      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d114:	d82c      	bhi.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d11a:	d02f      	beq.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d11c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d120:	d826      	bhi.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d126:	d02b      	beq.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d128:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d12c:	d820      	bhi.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d12e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d132:	d012      	beq.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d138:	d81a      	bhi.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d022      	beq.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d13e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d142:	d115      	bne.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d148:	3308      	adds	r3, #8
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 febd 	bl	800decc <RCCEx_PLL2_Config>
 800d152:	4603      	mov	r3, r0
 800d154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d158:	e015      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d15e:	3328      	adds	r3, #40	@ 0x28
 800d160:	2102      	movs	r1, #2
 800d162:	4618      	mov	r0, r3
 800d164:	f000 ff64 	bl	800e030 <RCCEx_PLL3_Config>
 800d168:	4603      	mov	r3, r0
 800d16a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d16e:	e00a      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d176:	e006      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d178:	bf00      	nop
 800d17a:	e004      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d17c:	bf00      	nop
 800d17e:	e002      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d180:	bf00      	nop
 800d182:	e000      	b.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d184:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d186:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10b      	bne.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d18e:	4b39      	ldr	r3, [pc, #228]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d192:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d19e:	4a35      	ldr	r2, [pc, #212]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d1a0:	430b      	orrs	r3, r1
 800d1a2:	6553      	str	r3, [r2, #84]	@ 0x54
 800d1a4:	e003      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d1aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d1ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d1c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	d058      	beq.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d1d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d1d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d1da:	d033      	beq.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d1dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d1e0:	d82c      	bhi.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d1e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1e6:	d02f      	beq.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d1e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1ec:	d826      	bhi.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d1ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1f2:	d02b      	beq.n	800d24c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d1f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d1f8:	d820      	bhi.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d1fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1fe:	d012      	beq.n	800d226 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d204:	d81a      	bhi.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d206:	2b00      	cmp	r3, #0
 800d208:	d022      	beq.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d20a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d20e:	d115      	bne.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d214:	3308      	adds	r3, #8
 800d216:	2100      	movs	r1, #0
 800d218:	4618      	mov	r0, r3
 800d21a:	f000 fe57 	bl	800decc <RCCEx_PLL2_Config>
 800d21e:	4603      	mov	r3, r0
 800d220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d224:	e015      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d22a:	3328      	adds	r3, #40	@ 0x28
 800d22c:	2102      	movs	r1, #2
 800d22e:	4618      	mov	r0, r3
 800d230:	f000 fefe 	bl	800e030 <RCCEx_PLL3_Config>
 800d234:	4603      	mov	r3, r0
 800d236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d23a:	e00a      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d23c:	2301      	movs	r3, #1
 800d23e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d242:	e006      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d244:	bf00      	nop
 800d246:	e004      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d248:	bf00      	nop
 800d24a:	e002      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d24c:	bf00      	nop
 800d24e:	e000      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d256:	2b00      	cmp	r3, #0
 800d258:	d10e      	bne.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d25a:	4b06      	ldr	r3, [pc, #24]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d25e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d266:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d26a:	4a02      	ldr	r2, [pc, #8]	@ (800d274 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d26c:	430b      	orrs	r3, r1
 800d26e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d270:	e006      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d272:	bf00      	nop
 800d274:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d27c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d28c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d290:	2300      	movs	r3, #0
 800d292:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d296:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d29a:	460b      	mov	r3, r1
 800d29c:	4313      	orrs	r3, r2
 800d29e:	d055      	beq.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d2a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d2ac:	d033      	beq.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d2ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d2b2:	d82c      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d2b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2b8:	d02f      	beq.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d2ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d2be:	d826      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d2c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d2c4:	d02b      	beq.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d2c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d2ca:	d820      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d2cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2d0:	d012      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d2d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d2d6:	d81a      	bhi.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d022      	beq.n	800d322 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d2dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2e0:	d115      	bne.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2e6:	3308      	adds	r3, #8
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 fdee 	bl	800decc <RCCEx_PLL2_Config>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d2f6:	e015      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d2fc:	3328      	adds	r3, #40	@ 0x28
 800d2fe:	2102      	movs	r1, #2
 800d300:	4618      	mov	r0, r3
 800d302:	f000 fe95 	bl	800e030 <RCCEx_PLL3_Config>
 800d306:	4603      	mov	r3, r0
 800d308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d30c:	e00a      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d314:	e006      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d316:	bf00      	nop
 800d318:	e004      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d31a:	bf00      	nop
 800d31c:	e002      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d31e:	bf00      	nop
 800d320:	e000      	b.n	800d324 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800d322:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10b      	bne.n	800d344 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d32c:	4ba1      	ldr	r3, [pc, #644]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d32e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d330:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d33c:	4a9d      	ldr	r2, [pc, #628]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d33e:	430b      	orrs	r3, r1
 800d340:	6593      	str	r3, [r2, #88]	@ 0x58
 800d342:	e003      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	f002 0308 	and.w	r3, r2, #8
 800d358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d35c:	2300      	movs	r3, #0
 800d35e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d362:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d366:	460b      	mov	r3, r1
 800d368:	4313      	orrs	r3, r2
 800d36a:	d01e      	beq.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d378:	d10c      	bne.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d37e:	3328      	adds	r3, #40	@ 0x28
 800d380:	2102      	movs	r1, #2
 800d382:	4618      	mov	r0, r3
 800d384:	f000 fe54 	bl	800e030 <RCCEx_PLL3_Config>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d002      	beq.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d394:	4b87      	ldr	r3, [pc, #540]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d398:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3a4:	4a83      	ldr	r2, [pc, #524]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d3a6:	430b      	orrs	r3, r1
 800d3a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	f002 0310 	and.w	r3, r2, #16
 800d3b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d3c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	d01e      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d3d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3d6:	d10c      	bne.n	800d3f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3dc:	3328      	adds	r3, #40	@ 0x28
 800d3de:	2102      	movs	r1, #2
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f000 fe25 	bl	800e030 <RCCEx_PLL3_Config>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d3f2:	4b70      	ldr	r3, [pc, #448]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d3fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d402:	4a6c      	ldr	r2, [pc, #432]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d404:	430b      	orrs	r3, r1
 800d406:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d410:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d414:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d418:	2300      	movs	r3, #0
 800d41a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d41e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d422:	460b      	mov	r3, r1
 800d424:	4313      	orrs	r3, r2
 800d426:	d03e      	beq.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d42c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d434:	d022      	beq.n	800d47c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800d436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d43a:	d81b      	bhi.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d003      	beq.n	800d448 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800d440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d444:	d00b      	beq.n	800d45e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800d446:	e015      	b.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d44c:	3308      	adds	r3, #8
 800d44e:	2100      	movs	r1, #0
 800d450:	4618      	mov	r0, r3
 800d452:	f000 fd3b 	bl	800decc <RCCEx_PLL2_Config>
 800d456:	4603      	mov	r3, r0
 800d458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d45c:	e00f      	b.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d462:	3328      	adds	r3, #40	@ 0x28
 800d464:	2102      	movs	r1, #2
 800d466:	4618      	mov	r0, r3
 800d468:	f000 fde2 	bl	800e030 <RCCEx_PLL3_Config>
 800d46c:	4603      	mov	r3, r0
 800d46e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d472:	e004      	b.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d47a:	e000      	b.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800d47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d47e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10b      	bne.n	800d49e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d486:	4b4b      	ldr	r3, [pc, #300]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d48a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d496:	4a47      	ldr	r2, [pc, #284]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d498:	430b      	orrs	r3, r1
 800d49a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d49c:	e003      	b.n	800d4a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d4a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d4b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	d03b      	beq.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d4ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d4ce:	d01f      	beq.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800d4d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d4d4:	d818      	bhi.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800d4d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4da:	d003      	beq.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800d4dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d4e0:	d007      	beq.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800d4e2:	e011      	b.n	800d508 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4e4:	4b33      	ldr	r3, [pc, #204]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e8:	4a32      	ldr	r2, [pc, #200]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d4ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d4f0:	e00f      	b.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d4f6:	3328      	adds	r3, #40	@ 0x28
 800d4f8:	2101      	movs	r1, #1
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 fd98 	bl	800e030 <RCCEx_PLL3_Config>
 800d500:	4603      	mov	r3, r0
 800d502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800d506:	e004      	b.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d50e:	e000      	b.n	800d512 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800d510:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d51a:	4b26      	ldr	r3, [pc, #152]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d51c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d51e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d52a:	4a22      	ldr	r2, [pc, #136]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d52c:	430b      	orrs	r3, r1
 800d52e:	6553      	str	r3, [r2, #84]	@ 0x54
 800d530:	e003      	b.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d546:	673b      	str	r3, [r7, #112]	@ 0x70
 800d548:	2300      	movs	r3, #0
 800d54a:	677b      	str	r3, [r7, #116]	@ 0x74
 800d54c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d550:	460b      	mov	r3, r1
 800d552:	4313      	orrs	r3, r2
 800d554:	d034      	beq.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d003      	beq.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800d560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d564:	d007      	beq.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800d566:	e011      	b.n	800d58c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d568:	4b12      	ldr	r3, [pc, #72]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56c:	4a11      	ldr	r2, [pc, #68]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d56e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d574:	e00e      	b.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d57a:	3308      	adds	r3, #8
 800d57c:	2102      	movs	r1, #2
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 fca4 	bl	800decc <RCCEx_PLL2_Config>
 800d584:	4603      	mov	r3, r0
 800d586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d58a:	e003      	b.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d592:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10d      	bne.n	800d5b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d59c:	4b05      	ldr	r3, [pc, #20]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d59e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d5a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5aa:	4a02      	ldr	r2, [pc, #8]	@ (800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800d5ac:	430b      	orrs	r3, r1
 800d5ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d5b0:	e006      	b.n	800d5c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800d5b2:	bf00      	nop
 800d5b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d5bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d5cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d5d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	d00c      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5e0:	3328      	adds	r3, #40	@ 0x28
 800d5e2:	2102      	movs	r1, #2
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 fd23 	bl	800e030 <RCCEx_PLL3_Config>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d602:	663b      	str	r3, [r7, #96]	@ 0x60
 800d604:	2300      	movs	r3, #0
 800d606:	667b      	str	r3, [r7, #100]	@ 0x64
 800d608:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d60c:	460b      	mov	r3, r1
 800d60e:	4313      	orrs	r3, r2
 800d610:	d038      	beq.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d61a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d61e:	d018      	beq.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800d620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d624:	d811      	bhi.n	800d64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d62a:	d014      	beq.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800d62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d630:	d80b      	bhi.n	800d64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800d632:	2b00      	cmp	r3, #0
 800d634:	d011      	beq.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800d636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d63a:	d106      	bne.n	800d64a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d63c:	4bc3      	ldr	r3, [pc, #780]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d640:	4ac2      	ldr	r2, [pc, #776]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d646:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d648:	e008      	b.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d64a:	2301      	movs	r3, #1
 800d64c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800d650:	e004      	b.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d652:	bf00      	nop
 800d654:	e002      	b.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d656:	bf00      	nop
 800d658:	e000      	b.n	800d65c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800d65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d65c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10b      	bne.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d664:	4bb9      	ldr	r3, [pc, #740]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d668:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d674:	4ab5      	ldr	r2, [pc, #724]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d676:	430b      	orrs	r3, r1
 800d678:	6553      	str	r3, [r2, #84]	@ 0x54
 800d67a:	e003      	b.n	800d684 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d67c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d690:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d692:	2300      	movs	r3, #0
 800d694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d696:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d69a:	460b      	mov	r3, r1
 800d69c:	4313      	orrs	r3, r2
 800d69e:	d009      	beq.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d6a0:	4baa      	ldr	r3, [pc, #680]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d6ae:	4aa7      	ldr	r2, [pc, #668]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6b0:	430b      	orrs	r3, r1
 800d6b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800d6c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800d6c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	d00a      	beq.n	800d6e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d6d0:	4b9e      	ldr	r3, [pc, #632]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800d6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d6e0:	4a9a      	ldr	r2, [pc, #616]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d6e2:	430b      	orrs	r3, r1
 800d6e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d6f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	4313      	orrs	r3, r2
 800d700:	d009      	beq.n	800d716 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d702:	4b92      	ldr	r3, [pc, #584]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d706:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d710:	4a8e      	ldr	r2, [pc, #568]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d712:	430b      	orrs	r3, r1
 800d714:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d722:	643b      	str	r3, [r7, #64]	@ 0x40
 800d724:	2300      	movs	r3, #0
 800d726:	647b      	str	r3, [r7, #68]	@ 0x44
 800d728:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d72c:	460b      	mov	r3, r1
 800d72e:	4313      	orrs	r3, r2
 800d730:	d00e      	beq.n	800d750 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d732:	4b86      	ldr	r3, [pc, #536]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	4a85      	ldr	r2, [pc, #532]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d738:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d73c:	6113      	str	r3, [r2, #16]
 800d73e:	4b83      	ldr	r3, [pc, #524]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d740:	6919      	ldr	r1, [r3, #16]
 800d742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d746:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d74a:	4a80      	ldr	r2, [pc, #512]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d74c:	430b      	orrs	r3, r1
 800d74e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d75c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d75e:	2300      	movs	r3, #0
 800d760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d762:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d766:	460b      	mov	r3, r1
 800d768:	4313      	orrs	r3, r2
 800d76a:	d009      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d76c:	4b77      	ldr	r3, [pc, #476]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d76e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d770:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d77a:	4a74      	ldr	r2, [pc, #464]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d77c:	430b      	orrs	r3, r1
 800d77e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d788:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d78c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d78e:	2300      	movs	r3, #0
 800d790:	637b      	str	r3, [r7, #52]	@ 0x34
 800d792:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d796:	460b      	mov	r3, r1
 800d798:	4313      	orrs	r3, r2
 800d79a:	d00a      	beq.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d79c:	4b6b      	ldr	r3, [pc, #428]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d79e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d7ac:	4a67      	ldr	r2, [pc, #412]	@ (800d94c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800d7ae:	430b      	orrs	r3, r1
 800d7b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ba:	2100      	movs	r1, #0
 800d7bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d7be:	f003 0301 	and.w	r3, r3, #1
 800d7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	d011      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7d2:	3308      	adds	r3, #8
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 fb78 	bl	800decc <RCCEx_PLL2_Config>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d003      	beq.n	800d7f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d7ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	6239      	str	r1, [r7, #32]
 800d7fe:	f003 0302 	and.w	r3, r3, #2
 800d802:	627b      	str	r3, [r7, #36]	@ 0x24
 800d804:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d808:	460b      	mov	r3, r1
 800d80a:	4313      	orrs	r3, r2
 800d80c:	d011      	beq.n	800d832 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d812:	3308      	adds	r3, #8
 800d814:	2101      	movs	r1, #1
 800d816:	4618      	mov	r0, r3
 800d818:	f000 fb58 	bl	800decc <RCCEx_PLL2_Config>
 800d81c:	4603      	mov	r3, r0
 800d81e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d826:	2b00      	cmp	r3, #0
 800d828:	d003      	beq.n	800d832 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d82a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d82e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83a:	2100      	movs	r1, #0
 800d83c:	61b9      	str	r1, [r7, #24]
 800d83e:	f003 0304 	and.w	r3, r3, #4
 800d842:	61fb      	str	r3, [r7, #28]
 800d844:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d848:	460b      	mov	r3, r1
 800d84a:	4313      	orrs	r3, r2
 800d84c:	d011      	beq.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d852:	3308      	adds	r3, #8
 800d854:	2102      	movs	r1, #2
 800d856:	4618      	mov	r0, r3
 800d858:	f000 fb38 	bl	800decc <RCCEx_PLL2_Config>
 800d85c:	4603      	mov	r3, r0
 800d85e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d86a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d86e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	2100      	movs	r1, #0
 800d87c:	6139      	str	r1, [r7, #16]
 800d87e:	f003 0308 	and.w	r3, r3, #8
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d888:	460b      	mov	r3, r1
 800d88a:	4313      	orrs	r3, r2
 800d88c:	d011      	beq.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d892:	3328      	adds	r3, #40	@ 0x28
 800d894:	2100      	movs	r1, #0
 800d896:	4618      	mov	r0, r3
 800d898:	f000 fbca 	bl	800e030 <RCCEx_PLL3_Config>
 800d89c:	4603      	mov	r3, r0
 800d89e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800d8a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d8b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	f003 0310 	and.w	r3, r3, #16
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	d011      	beq.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8d2:	3328      	adds	r3, #40	@ 0x28
 800d8d4:	2101      	movs	r1, #1
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 fbaa 	bl	800e030 <RCCEx_PLL3_Config>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d8ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	6039      	str	r1, [r7, #0]
 800d8fe:	f003 0320 	and.w	r3, r3, #32
 800d902:	607b      	str	r3, [r7, #4]
 800d904:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d908:	460b      	mov	r3, r1
 800d90a:	4313      	orrs	r3, r2
 800d90c:	d011      	beq.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800d912:	3328      	adds	r3, #40	@ 0x28
 800d914:	2102      	movs	r1, #2
 800d916:	4618      	mov	r0, r3
 800d918:	f000 fb8a 	bl	800e030 <RCCEx_PLL3_Config>
 800d91c:	4603      	mov	r3, r0
 800d91e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800d922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d926:	2b00      	cmp	r3, #0
 800d928:	d003      	beq.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d92a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800d92e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800d932:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e000      	b.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
}
 800d940:	4618      	mov	r0, r3
 800d942:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800d946:	46bd      	mov	sp, r7
 800d948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d94c:	58024400 	.word	0x58024400

0800d950 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d954:	f7fe fd54 	bl	800c400 <HAL_RCC_GetHCLKFreq>
 800d958:	4602      	mov	r2, r0
 800d95a:	4b06      	ldr	r3, [pc, #24]	@ (800d974 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	091b      	lsrs	r3, r3, #4
 800d960:	f003 0307 	and.w	r3, r3, #7
 800d964:	4904      	ldr	r1, [pc, #16]	@ (800d978 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d966:	5ccb      	ldrb	r3, [r1, r3]
 800d968:	f003 031f 	and.w	r3, r3, #31
 800d96c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d970:	4618      	mov	r0, r3
 800d972:	bd80      	pop	{r7, pc}
 800d974:	58024400 	.word	0x58024400
 800d978:	080168dc 	.word	0x080168dc

0800d97c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b089      	sub	sp, #36	@ 0x24
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d984:	4ba1      	ldr	r3, [pc, #644]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d988:	f003 0303 	and.w	r3, r3, #3
 800d98c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d98e:	4b9f      	ldr	r3, [pc, #636]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d992:	0b1b      	lsrs	r3, r3, #12
 800d994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d998:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d99a:	4b9c      	ldr	r3, [pc, #624]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d99e:	091b      	lsrs	r3, r3, #4
 800d9a0:	f003 0301 	and.w	r3, r3, #1
 800d9a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d9a6:	4b99      	ldr	r3, [pc, #612]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9aa:	08db      	lsrs	r3, r3, #3
 800d9ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	fb02 f303 	mul.w	r3, r2, r3
 800d9b6:	ee07 3a90 	vmov	s15, r3
 800d9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 8111 	beq.w	800dbec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	f000 8083 	beq.w	800dad8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	f200 80a1 	bhi.w	800db1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d056      	beq.n	800da94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d9e6:	e099      	b.n	800db1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9e8:	4b88      	ldr	r3, [pc, #544]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f003 0320 	and.w	r3, r3, #32
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d02d      	beq.n	800da50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9f4:	4b85      	ldr	r3, [pc, #532]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	08db      	lsrs	r3, r3, #3
 800d9fa:	f003 0303 	and.w	r3, r3, #3
 800d9fe:	4a84      	ldr	r2, [pc, #528]	@ (800dc10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800da00:	fa22 f303 	lsr.w	r3, r2, r3
 800da04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	ee07 3a90 	vmov	s15, r3
 800da0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da1e:	4b7b      	ldr	r3, [pc, #492]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da26:	ee07 3a90 	vmov	s15, r3
 800da2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800da4e:	e087      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	ee07 3a90 	vmov	s15, r3
 800da56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dc18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800da5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da62:	4b6a      	ldr	r3, [pc, #424]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da6a:	ee07 3a90 	vmov	s15, r3
 800da6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da72:	ed97 6a03 	vldr	s12, [r7, #12]
 800da76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da92:	e065      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	ee07 3a90 	vmov	s15, r3
 800da9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dc1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800daa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daa6:	4b59      	ldr	r3, [pc, #356]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daae:	ee07 3a90 	vmov	s15, r3
 800dab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800daba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dad6:	e043      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	ee07 3a90 	vmov	s15, r3
 800dade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dc20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800dae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daea:	4b48      	ldr	r3, [pc, #288]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daf2:	ee07 3a90 	vmov	s15, r3
 800daf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dafa:	ed97 6a03 	vldr	s12, [r7, #12]
 800dafe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db1a:	e021      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	ee07 3a90 	vmov	s15, r3
 800db22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dc1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800db2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db2e:	4b37      	ldr	r3, [pc, #220]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db36:	ee07 3a90 	vmov	s15, r3
 800db3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800db42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800db60:	4b2a      	ldr	r3, [pc, #168]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db64:	0a5b      	lsrs	r3, r3, #9
 800db66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db6a:	ee07 3a90 	vmov	s15, r3
 800db6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db86:	ee17 2a90 	vmov	r2, s15
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800db8e:	4b1f      	ldr	r3, [pc, #124]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db92:	0c1b      	lsrs	r3, r3, #16
 800db94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db98:	ee07 3a90 	vmov	s15, r3
 800db9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dba4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dba8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbb4:	ee17 2a90 	vmov	r2, s15
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800dbbc:	4b13      	ldr	r3, [pc, #76]	@ (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dbbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbc0:	0e1b      	lsrs	r3, r3, #24
 800dbc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbc6:	ee07 3a90 	vmov	s15, r3
 800dbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbe2:	ee17 2a90 	vmov	r2, s15
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800dbea:	e008      	b.n	800dbfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	609a      	str	r2, [r3, #8]
}
 800dbfe:	bf00      	nop
 800dc00:	3724      	adds	r7, #36	@ 0x24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	58024400 	.word	0x58024400
 800dc10:	03d09000 	.word	0x03d09000
 800dc14:	46000000 	.word	0x46000000
 800dc18:	4c742400 	.word	0x4c742400
 800dc1c:	4a742400 	.word	0x4a742400
 800dc20:	4bbebc20 	.word	0x4bbebc20

0800dc24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b089      	sub	sp, #36	@ 0x24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dc2c:	4ba1      	ldr	r3, [pc, #644]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc30:	f003 0303 	and.w	r3, r3, #3
 800dc34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dc36:	4b9f      	ldr	r3, [pc, #636]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc3a:	0d1b      	lsrs	r3, r3, #20
 800dc3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dc42:	4b9c      	ldr	r3, [pc, #624]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc46:	0a1b      	lsrs	r3, r3, #8
 800dc48:	f003 0301 	and.w	r3, r3, #1
 800dc4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dc4e:	4b99      	ldr	r3, [pc, #612]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc52:	08db      	lsrs	r3, r3, #3
 800dc54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	fb02 f303 	mul.w	r3, r2, r3
 800dc5e:	ee07 3a90 	vmov	s15, r3
 800dc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f000 8111 	beq.w	800de94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	f000 8083 	beq.w	800dd80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	f200 80a1 	bhi.w	800ddc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d003      	beq.n	800dc90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d056      	beq.n	800dd3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dc8e:	e099      	b.n	800ddc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc90:	4b88      	ldr	r3, [pc, #544]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 0320 	and.w	r3, r3, #32
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d02d      	beq.n	800dcf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc9c:	4b85      	ldr	r3, [pc, #532]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	08db      	lsrs	r3, r3, #3
 800dca2:	f003 0303 	and.w	r3, r3, #3
 800dca6:	4a84      	ldr	r2, [pc, #528]	@ (800deb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dca8:	fa22 f303 	lsr.w	r3, r2, r3
 800dcac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	ee07 3a90 	vmov	s15, r3
 800dcb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	ee07 3a90 	vmov	s15, r3
 800dcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc6:	4b7b      	ldr	r3, [pc, #492]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcce:	ee07 3a90 	vmov	s15, r3
 800dcd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dcf6:	e087      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	ee07 3a90 	vmov	s15, r3
 800dcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dec0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dd06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd0a:	4b6a      	ldr	r3, [pc, #424]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd12:	ee07 3a90 	vmov	s15, r3
 800dd16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd3a:	e065      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	ee07 3a90 	vmov	s15, r3
 800dd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd4e:	4b59      	ldr	r3, [pc, #356]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd56:	ee07 3a90 	vmov	s15, r3
 800dd5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd7e:	e043      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	ee07 3a90 	vmov	s15, r3
 800dd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dd8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd92:	4b48      	ldr	r3, [pc, #288]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd9a:	ee07 3a90 	vmov	s15, r3
 800dd9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dda2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dda6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ddaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddc2:	e021      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	ee07 3a90 	vmov	s15, r3
 800ddca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ddd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddd6:	4b37      	ldr	r3, [pc, #220]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddde:	ee07 3a90 	vmov	s15, r3
 800dde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dde6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ddee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ddfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800de08:	4b2a      	ldr	r3, [pc, #168]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de0c:	0a5b      	lsrs	r3, r3, #9
 800de0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de12:	ee07 3a90 	vmov	s15, r3
 800de16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de22:	edd7 6a07 	vldr	s13, [r7, #28]
 800de26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de2e:	ee17 2a90 	vmov	r2, s15
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800de36:	4b1f      	ldr	r3, [pc, #124]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de3a:	0c1b      	lsrs	r3, r3, #16
 800de3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de40:	ee07 3a90 	vmov	s15, r3
 800de44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de50:	edd7 6a07 	vldr	s13, [r7, #28]
 800de54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de5c:	ee17 2a90 	vmov	r2, s15
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800de64:	4b13      	ldr	r3, [pc, #76]	@ (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de68:	0e1b      	lsrs	r3, r3, #24
 800de6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de6e:	ee07 3a90 	vmov	s15, r3
 800de72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800de7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800de82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de8a:	ee17 2a90 	vmov	r2, s15
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800de92:	e008      	b.n	800dea6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	609a      	str	r2, [r3, #8]
}
 800dea6:	bf00      	nop
 800dea8:	3724      	adds	r7, #36	@ 0x24
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	58024400 	.word	0x58024400
 800deb8:	03d09000 	.word	0x03d09000
 800debc:	46000000 	.word	0x46000000
 800dec0:	4c742400 	.word	0x4c742400
 800dec4:	4a742400 	.word	0x4a742400
 800dec8:	4bbebc20 	.word	0x4bbebc20

0800decc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ded6:	2300      	movs	r3, #0
 800ded8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800deda:	4b53      	ldr	r3, [pc, #332]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dede:	f003 0303 	and.w	r3, r3, #3
 800dee2:	2b03      	cmp	r3, #3
 800dee4:	d101      	bne.n	800deea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dee6:	2301      	movs	r3, #1
 800dee8:	e099      	b.n	800e01e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800deea:	4b4f      	ldr	r3, [pc, #316]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a4e      	ldr	r2, [pc, #312]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800def0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800def4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800def6:	f7f7 fb71 	bl	80055dc <HAL_GetTick>
 800defa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800defc:	e008      	b.n	800df10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800defe:	f7f7 fb6d 	bl	80055dc <HAL_GetTick>
 800df02:	4602      	mov	r2, r0
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	2b02      	cmp	r3, #2
 800df0a:	d901      	bls.n	800df10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800df0c:	2303      	movs	r3, #3
 800df0e:	e086      	b.n	800e01e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800df10:	4b45      	ldr	r3, [pc, #276]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1f0      	bne.n	800defe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800df1c:	4b42      	ldr	r3, [pc, #264]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	031b      	lsls	r3, r3, #12
 800df2a:	493f      	ldr	r1, [pc, #252]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df2c:	4313      	orrs	r3, r2
 800df2e:	628b      	str	r3, [r1, #40]	@ 0x28
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	3b01      	subs	r3, #1
 800df36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	3b01      	subs	r3, #1
 800df40:	025b      	lsls	r3, r3, #9
 800df42:	b29b      	uxth	r3, r3
 800df44:	431a      	orrs	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	3b01      	subs	r3, #1
 800df4c:	041b      	lsls	r3, r3, #16
 800df4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800df52:	431a      	orrs	r2, r3
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	3b01      	subs	r3, #1
 800df5a:	061b      	lsls	r3, r3, #24
 800df5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800df60:	4931      	ldr	r1, [pc, #196]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df62:	4313      	orrs	r3, r2
 800df64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800df66:	4b30      	ldr	r3, [pc, #192]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	492d      	ldr	r1, [pc, #180]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df74:	4313      	orrs	r3, r2
 800df76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800df78:	4b2b      	ldr	r3, [pc, #172]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df7c:	f023 0220 	bic.w	r2, r3, #32
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	4928      	ldr	r1, [pc, #160]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df86:	4313      	orrs	r3, r2
 800df88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800df8a:	4b27      	ldr	r3, [pc, #156]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df8e:	4a26      	ldr	r2, [pc, #152]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df90:	f023 0310 	bic.w	r3, r3, #16
 800df94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800df96:	4b24      	ldr	r3, [pc, #144]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800df98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df9a:	4b24      	ldr	r3, [pc, #144]	@ (800e02c <RCCEx_PLL2_Config+0x160>)
 800df9c:	4013      	ands	r3, r2
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	69d2      	ldr	r2, [r2, #28]
 800dfa2:	00d2      	lsls	r2, r2, #3
 800dfa4:	4920      	ldr	r1, [pc, #128]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dfaa:	4b1f      	ldr	r3, [pc, #124]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfae:	4a1e      	ldr	r2, [pc, #120]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfb0:	f043 0310 	orr.w	r3, r3, #16
 800dfb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d106      	bne.n	800dfca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dfbc:	4b1a      	ldr	r3, [pc, #104]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc0:	4a19      	ldr	r2, [pc, #100]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfc2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dfc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dfc8:	e00f      	b.n	800dfea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d106      	bne.n	800dfde <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dfd0:	4b15      	ldr	r3, [pc, #84]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfd4:	4a14      	ldr	r2, [pc, #80]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dfda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dfdc:	e005      	b.n	800dfea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dfde:	4b12      	ldr	r3, [pc, #72]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfe2:	4a11      	ldr	r2, [pc, #68]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfe4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dfe8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dfea:	4b0f      	ldr	r3, [pc, #60]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4a0e      	ldr	r2, [pc, #56]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800dff0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dff6:	f7f7 faf1 	bl	80055dc <HAL_GetTick>
 800dffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dffc:	e008      	b.n	800e010 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dffe:	f7f7 faed 	bl	80055dc <HAL_GetTick>
 800e002:	4602      	mov	r2, r0
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d901      	bls.n	800e010 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e00c:	2303      	movs	r3, #3
 800e00e:	e006      	b.n	800e01e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e010:	4b05      	ldr	r3, [pc, #20]	@ (800e028 <RCCEx_PLL2_Config+0x15c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d0f0      	beq.n	800dffe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	58024400 	.word	0x58024400
 800e02c:	ffff0007 	.word	0xffff0007

0800e030 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e03a:	2300      	movs	r3, #0
 800e03c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e03e:	4b53      	ldr	r3, [pc, #332]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e042:	f003 0303 	and.w	r3, r3, #3
 800e046:	2b03      	cmp	r3, #3
 800e048:	d101      	bne.n	800e04e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e04a:	2301      	movs	r3, #1
 800e04c:	e099      	b.n	800e182 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e04e:	4b4f      	ldr	r3, [pc, #316]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a4e      	ldr	r2, [pc, #312]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e054:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e05a:	f7f7 fabf 	bl	80055dc <HAL_GetTick>
 800e05e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e060:	e008      	b.n	800e074 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e062:	f7f7 fabb 	bl	80055dc <HAL_GetTick>
 800e066:	4602      	mov	r2, r0
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d901      	bls.n	800e074 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e070:	2303      	movs	r3, #3
 800e072:	e086      	b.n	800e182 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e074:	4b45      	ldr	r3, [pc, #276]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d1f0      	bne.n	800e062 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e080:	4b42      	ldr	r3, [pc, #264]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e084:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	051b      	lsls	r3, r3, #20
 800e08e:	493f      	ldr	r1, [pc, #252]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e090:	4313      	orrs	r3, r2
 800e092:	628b      	str	r3, [r1, #40]	@ 0x28
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	3b01      	subs	r3, #1
 800e09a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	025b      	lsls	r3, r3, #9
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	431a      	orrs	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	041b      	lsls	r3, r3, #16
 800e0b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	691b      	ldr	r3, [r3, #16]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	061b      	lsls	r3, r3, #24
 800e0c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e0c4:	4931      	ldr	r1, [pc, #196]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e0ca:	4b30      	ldr	r3, [pc, #192]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	695b      	ldr	r3, [r3, #20]
 800e0d6:	492d      	ldr	r1, [pc, #180]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e0dc:	4b2b      	ldr	r3, [pc, #172]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	4928      	ldr	r1, [pc, #160]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e0ee:	4b27      	ldr	r3, [pc, #156]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f2:	4a26      	ldr	r2, [pc, #152]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e0fa:	4b24      	ldr	r3, [pc, #144]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e0fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0fe:	4b24      	ldr	r3, [pc, #144]	@ (800e190 <RCCEx_PLL3_Config+0x160>)
 800e100:	4013      	ands	r3, r2
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	69d2      	ldr	r2, [r2, #28]
 800e106:	00d2      	lsls	r2, r2, #3
 800e108:	4920      	ldr	r1, [pc, #128]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e10a:	4313      	orrs	r3, r2
 800e10c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e10e:	4b1f      	ldr	r3, [pc, #124]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e112:	4a1e      	ldr	r2, [pc, #120]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e118:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d106      	bne.n	800e12e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e120:	4b1a      	ldr	r3, [pc, #104]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e124:	4a19      	ldr	r2, [pc, #100]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e126:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e12a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e12c:	e00f      	b.n	800e14e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b01      	cmp	r3, #1
 800e132:	d106      	bne.n	800e142 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e134:	4b15      	ldr	r3, [pc, #84]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e138:	4a14      	ldr	r2, [pc, #80]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e13a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e13e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e140:	e005      	b.n	800e14e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e142:	4b12      	ldr	r3, [pc, #72]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e146:	4a11      	ldr	r2, [pc, #68]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e148:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e14c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e14e:	4b0f      	ldr	r3, [pc, #60]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a0e      	ldr	r2, [pc, #56]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e15a:	f7f7 fa3f 	bl	80055dc <HAL_GetTick>
 800e15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e160:	e008      	b.n	800e174 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e162:	f7f7 fa3b 	bl	80055dc <HAL_GetTick>
 800e166:	4602      	mov	r2, r0
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	2b02      	cmp	r3, #2
 800e16e:	d901      	bls.n	800e174 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e170:	2303      	movs	r3, #3
 800e172:	e006      	b.n	800e182 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e174:	4b05      	ldr	r3, [pc, #20]	@ (800e18c <RCCEx_PLL3_Config+0x15c>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d0f0      	beq.n	800e162 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e180:	7bfb      	ldrb	r3, [r7, #15]
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	58024400 	.word	0x58024400
 800e190:	ffff0007 	.word	0xffff0007

0800e194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e049      	b.n	800e23a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7f4 fd0e 	bl	8002bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f000 fb52 	bl	800e87c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2201      	movs	r2, #1
 800e204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2201      	movs	r2, #1
 800e224:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3708      	adds	r7, #8
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
	...

0800e244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e252:	b2db      	uxtb	r3, r3
 800e254:	2b01      	cmp	r3, #1
 800e256:	d001      	beq.n	800e25c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e258:	2301      	movs	r3, #1
 800e25a:	e054      	b.n	800e306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2202      	movs	r2, #2
 800e260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	68da      	ldr	r2, [r3, #12]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f042 0201 	orr.w	r2, r2, #1
 800e272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a26      	ldr	r2, [pc, #152]	@ (800e314 <HAL_TIM_Base_Start_IT+0xd0>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d022      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0x80>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e286:	d01d      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0x80>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a22      	ldr	r2, [pc, #136]	@ (800e318 <HAL_TIM_Base_Start_IT+0xd4>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d018      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0x80>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a21      	ldr	r2, [pc, #132]	@ (800e31c <HAL_TIM_Base_Start_IT+0xd8>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d013      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0x80>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a1f      	ldr	r2, [pc, #124]	@ (800e320 <HAL_TIM_Base_Start_IT+0xdc>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d00e      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0x80>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a1e      	ldr	r2, [pc, #120]	@ (800e324 <HAL_TIM_Base_Start_IT+0xe0>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d009      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0x80>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4a1c      	ldr	r2, [pc, #112]	@ (800e328 <HAL_TIM_Base_Start_IT+0xe4>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d004      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0x80>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a1b      	ldr	r2, [pc, #108]	@ (800e32c <HAL_TIM_Base_Start_IT+0xe8>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d115      	bne.n	800e2f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	689a      	ldr	r2, [r3, #8]
 800e2ca:	4b19      	ldr	r3, [pc, #100]	@ (800e330 <HAL_TIM_Base_Start_IT+0xec>)
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b06      	cmp	r3, #6
 800e2d4:	d015      	beq.n	800e302 <HAL_TIM_Base_Start_IT+0xbe>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2dc:	d011      	beq.n	800e302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f042 0201 	orr.w	r2, r2, #1
 800e2ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2ee:	e008      	b.n	800e302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f042 0201 	orr.w	r2, r2, #1
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	e000      	b.n	800e304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	40010000 	.word	0x40010000
 800e318:	40000400 	.word	0x40000400
 800e31c:	40000800 	.word	0x40000800
 800e320:	40000c00 	.word	0x40000c00
 800e324:	40010400 	.word	0x40010400
 800e328:	40001800 	.word	0x40001800
 800e32c:	40014000 	.word	0x40014000
 800e330:	00010007 	.word	0x00010007

0800e334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e049      	b.n	800e3da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f841 	bl	800e3e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2202      	movs	r2, #2
 800e364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	3304      	adds	r3, #4
 800e370:	4619      	mov	r1, r3
 800e372:	4610      	mov	r0, r2
 800e374:	f000 fa82 	bl	800e87c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2201      	movs	r2, #1
 800e37c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2201      	movs	r2, #1
 800e384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3d8:	2300      	movs	r3, #0
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3708      	adds	r7, #8
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}

0800e3e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e3e2:	b480      	push	{r7}
 800e3e4:	b083      	sub	sp, #12
 800e3e6:	af00      	add	r7, sp, #0
 800e3e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e3ea:	bf00      	nop
 800e3ec:	370c      	adds	r7, #12
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b084      	sub	sp, #16
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	f003 0302 	and.w	r3, r3, #2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d020      	beq.n	800e45a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f003 0302 	and.w	r3, r3, #2
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d01b      	beq.n	800e45a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f06f 0202 	mvn.w	r2, #2
 800e42a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2201      	movs	r2, #1
 800e430:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	f003 0303 	and.w	r3, r3, #3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d003      	beq.n	800e448 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f9fd 	bl	800e840 <HAL_TIM_IC_CaptureCallback>
 800e446:	e005      	b.n	800e454 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f9ef 	bl	800e82c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 fa00 	bl	800e854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	f003 0304 	and.w	r3, r3, #4
 800e460:	2b00      	cmp	r3, #0
 800e462:	d020      	beq.n	800e4a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f003 0304 	and.w	r3, r3, #4
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d01b      	beq.n	800e4a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f06f 0204 	mvn.w	r2, #4
 800e476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2202      	movs	r2, #2
 800e47c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f9d7 	bl	800e840 <HAL_TIM_IC_CaptureCallback>
 800e492:	e005      	b.n	800e4a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f9c9 	bl	800e82c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f9da 	bl	800e854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	f003 0308 	and.w	r3, r3, #8
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d020      	beq.n	800e4f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f003 0308 	and.w	r3, r3, #8
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d01b      	beq.n	800e4f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	f06f 0208 	mvn.w	r2, #8
 800e4c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2204      	movs	r2, #4
 800e4c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	69db      	ldr	r3, [r3, #28]
 800e4d0:	f003 0303 	and.w	r3, r3, #3
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d003      	beq.n	800e4e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f9b1 	bl	800e840 <HAL_TIM_IC_CaptureCallback>
 800e4de:	e005      	b.n	800e4ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f9a3 	bl	800e82c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 f9b4 	bl	800e854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	f003 0310 	and.w	r3, r3, #16
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d020      	beq.n	800e53e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f003 0310 	and.w	r3, r3, #16
 800e502:	2b00      	cmp	r3, #0
 800e504:	d01b      	beq.n	800e53e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f06f 0210 	mvn.w	r2, #16
 800e50e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2208      	movs	r2, #8
 800e514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	69db      	ldr	r3, [r3, #28]
 800e51c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e520:	2b00      	cmp	r3, #0
 800e522:	d003      	beq.n	800e52c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 f98b 	bl	800e840 <HAL_TIM_IC_CaptureCallback>
 800e52a:	e005      	b.n	800e538 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 f97d 	bl	800e82c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 f98e 	bl	800e854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	f003 0301 	and.w	r3, r3, #1
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00c      	beq.n	800e562 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d007      	beq.n	800e562 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f06f 0201 	mvn.w	r2, #1
 800e55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7f4 f85b 	bl	8002618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d104      	bne.n	800e576 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00c      	beq.n	800e590 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d007      	beq.n	800e590 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 fcfc 	bl	800ef88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00c      	beq.n	800e5b4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d007      	beq.n	800e5b4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fcf4 	bl	800ef9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00c      	beq.n	800e5d8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d007      	beq.n	800e5d8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f948 	bl	800e868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f003 0320 	and.w	r3, r3, #32
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00c      	beq.n	800e5fc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f003 0320 	and.w	r3, r3, #32
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f06f 0220 	mvn.w	r2, #32
 800e5f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fcbc 	bl	800ef74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e5fc:	bf00      	nop
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e610:	2300      	movs	r3, #0
 800e612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e61a:	2b01      	cmp	r3, #1
 800e61c:	d101      	bne.n	800e622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e61e:	2302      	movs	r3, #2
 800e620:	e0ff      	b.n	800e822 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b14      	cmp	r3, #20
 800e62e:	f200 80f0 	bhi.w	800e812 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e632:	a201      	add	r2, pc, #4	@ (adr r2, 800e638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e638:	0800e68d 	.word	0x0800e68d
 800e63c:	0800e813 	.word	0x0800e813
 800e640:	0800e813 	.word	0x0800e813
 800e644:	0800e813 	.word	0x0800e813
 800e648:	0800e6cd 	.word	0x0800e6cd
 800e64c:	0800e813 	.word	0x0800e813
 800e650:	0800e813 	.word	0x0800e813
 800e654:	0800e813 	.word	0x0800e813
 800e658:	0800e70f 	.word	0x0800e70f
 800e65c:	0800e813 	.word	0x0800e813
 800e660:	0800e813 	.word	0x0800e813
 800e664:	0800e813 	.word	0x0800e813
 800e668:	0800e74f 	.word	0x0800e74f
 800e66c:	0800e813 	.word	0x0800e813
 800e670:	0800e813 	.word	0x0800e813
 800e674:	0800e813 	.word	0x0800e813
 800e678:	0800e791 	.word	0x0800e791
 800e67c:	0800e813 	.word	0x0800e813
 800e680:	0800e813 	.word	0x0800e813
 800e684:	0800e813 	.word	0x0800e813
 800e688:	0800e7d1 	.word	0x0800e7d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	68b9      	ldr	r1, [r7, #8]
 800e692:	4618      	mov	r0, r3
 800e694:	f000 f998 	bl	800e9c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	699a      	ldr	r2, [r3, #24]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f042 0208 	orr.w	r2, r2, #8
 800e6a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	699a      	ldr	r2, [r3, #24]
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f022 0204 	bic.w	r2, r2, #4
 800e6b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6999      	ldr	r1, [r3, #24]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	691a      	ldr	r2, [r3, #16]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	430a      	orrs	r2, r1
 800e6c8:	619a      	str	r2, [r3, #24]
      break;
 800e6ca:	e0a5      	b.n	800e818 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 fa08 	bl	800eae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	699a      	ldr	r2, [r3, #24]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	699a      	ldr	r2, [r3, #24]
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	6999      	ldr	r1, [r3, #24]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	021a      	lsls	r2, r3, #8
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	430a      	orrs	r2, r1
 800e70a:	619a      	str	r2, [r3, #24]
      break;
 800e70c:	e084      	b.n	800e818 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68b9      	ldr	r1, [r7, #8]
 800e714:	4618      	mov	r0, r3
 800e716:	f000 fa71 	bl	800ebfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	69da      	ldr	r2, [r3, #28]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f042 0208 	orr.w	r2, r2, #8
 800e728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	69da      	ldr	r2, [r3, #28]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f022 0204 	bic.w	r2, r2, #4
 800e738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	69d9      	ldr	r1, [r3, #28]
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	691a      	ldr	r2, [r3, #16]
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	430a      	orrs	r2, r1
 800e74a:	61da      	str	r2, [r3, #28]
      break;
 800e74c:	e064      	b.n	800e818 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68b9      	ldr	r1, [r7, #8]
 800e754:	4618      	mov	r0, r3
 800e756:	f000 fad9 	bl	800ed0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	69da      	ldr	r2, [r3, #28]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	69da      	ldr	r2, [r3, #28]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	69d9      	ldr	r1, [r3, #28]
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	021a      	lsls	r2, r3, #8
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	430a      	orrs	r2, r1
 800e78c:	61da      	str	r2, [r3, #28]
      break;
 800e78e:	e043      	b.n	800e818 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68b9      	ldr	r1, [r7, #8]
 800e796:	4618      	mov	r0, r3
 800e798:	f000 fb22 	bl	800ede0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f042 0208 	orr.w	r2, r2, #8
 800e7aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f022 0204 	bic.w	r2, r2, #4
 800e7ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	691a      	ldr	r2, [r3, #16]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e7ce:	e023      	b.n	800e818 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68b9      	ldr	r1, [r7, #8]
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f000 fb66 	bl	800eea8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e7ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e7fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	691b      	ldr	r3, [r3, #16]
 800e806:	021a      	lsls	r2, r3, #8
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	430a      	orrs	r2, r1
 800e80e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e810:	e002      	b.n	800e818 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	75fb      	strb	r3, [r7, #23]
      break;
 800e816:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2200      	movs	r2, #0
 800e81c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e820:	7dfb      	ldrb	r3, [r7, #23]
}
 800e822:	4618      	mov	r0, r3
 800e824:	3718      	adds	r7, #24
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop

0800e82c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e834:	bf00      	nop
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e848:	bf00      	nop
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr

0800e868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a46      	ldr	r2, [pc, #280]	@ (800e9a8 <TIM_Base_SetConfig+0x12c>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d013      	beq.n	800e8bc <TIM_Base_SetConfig+0x40>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e89a:	d00f      	beq.n	800e8bc <TIM_Base_SetConfig+0x40>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a43      	ldr	r2, [pc, #268]	@ (800e9ac <TIM_Base_SetConfig+0x130>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d00b      	beq.n	800e8bc <TIM_Base_SetConfig+0x40>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a42      	ldr	r2, [pc, #264]	@ (800e9b0 <TIM_Base_SetConfig+0x134>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d007      	beq.n	800e8bc <TIM_Base_SetConfig+0x40>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a41      	ldr	r2, [pc, #260]	@ (800e9b4 <TIM_Base_SetConfig+0x138>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d003      	beq.n	800e8bc <TIM_Base_SetConfig+0x40>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	4a40      	ldr	r2, [pc, #256]	@ (800e9b8 <TIM_Base_SetConfig+0x13c>)
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d108      	bne.n	800e8ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a35      	ldr	r2, [pc, #212]	@ (800e9a8 <TIM_Base_SetConfig+0x12c>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d01f      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8dc:	d01b      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	4a32      	ldr	r2, [pc, #200]	@ (800e9ac <TIM_Base_SetConfig+0x130>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d017      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4a31      	ldr	r2, [pc, #196]	@ (800e9b0 <TIM_Base_SetConfig+0x134>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d013      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4a30      	ldr	r2, [pc, #192]	@ (800e9b4 <TIM_Base_SetConfig+0x138>)
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d00f      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	4a2f      	ldr	r2, [pc, #188]	@ (800e9b8 <TIM_Base_SetConfig+0x13c>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d00b      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4a2e      	ldr	r2, [pc, #184]	@ (800e9bc <TIM_Base_SetConfig+0x140>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d007      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	4a2d      	ldr	r2, [pc, #180]	@ (800e9c0 <TIM_Base_SetConfig+0x144>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d003      	beq.n	800e916 <TIM_Base_SetConfig+0x9a>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a2c      	ldr	r2, [pc, #176]	@ (800e9c4 <TIM_Base_SetConfig+0x148>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d108      	bne.n	800e928 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e91c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	68db      	ldr	r3, [r3, #12]
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	4313      	orrs	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	4313      	orrs	r3, r2
 800e934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	689a      	ldr	r2, [r3, #8]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a16      	ldr	r2, [pc, #88]	@ (800e9a8 <TIM_Base_SetConfig+0x12c>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d00f      	beq.n	800e974 <TIM_Base_SetConfig+0xf8>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a18      	ldr	r2, [pc, #96]	@ (800e9b8 <TIM_Base_SetConfig+0x13c>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d00b      	beq.n	800e974 <TIM_Base_SetConfig+0xf8>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a17      	ldr	r2, [pc, #92]	@ (800e9bc <TIM_Base_SetConfig+0x140>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d007      	beq.n	800e974 <TIM_Base_SetConfig+0xf8>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a16      	ldr	r2, [pc, #88]	@ (800e9c0 <TIM_Base_SetConfig+0x144>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d003      	beq.n	800e974 <TIM_Base_SetConfig+0xf8>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4a15      	ldr	r2, [pc, #84]	@ (800e9c4 <TIM_Base_SetConfig+0x148>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d103      	bne.n	800e97c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	691a      	ldr	r2, [r3, #16]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2201      	movs	r2, #1
 800e980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	691b      	ldr	r3, [r3, #16]
 800e986:	f003 0301 	and.w	r3, r3, #1
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d105      	bne.n	800e99a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	691b      	ldr	r3, [r3, #16]
 800e992:	f023 0201 	bic.w	r2, r3, #1
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	611a      	str	r2, [r3, #16]
  }
}
 800e99a:	bf00      	nop
 800e99c:	3714      	adds	r7, #20
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	40010000 	.word	0x40010000
 800e9ac:	40000400 	.word	0x40000400
 800e9b0:	40000800 	.word	0x40000800
 800e9b4:	40000c00 	.word	0x40000c00
 800e9b8:	40010400 	.word	0x40010400
 800e9bc:	40014000 	.word	0x40014000
 800e9c0:	40014400 	.word	0x40014400
 800e9c4:	40014800 	.word	0x40014800

0800e9c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b087      	sub	sp, #28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a1b      	ldr	r3, [r3, #32]
 800e9d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a1b      	ldr	r3, [r3, #32]
 800e9dc:	f023 0201 	bic.w	r2, r3, #1
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4b37      	ldr	r3, [pc, #220]	@ (800ead0 <TIM_OC1_SetConfig+0x108>)
 800e9f4:	4013      	ands	r3, r2
 800e9f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f023 0303 	bic.w	r3, r3, #3
 800e9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	f023 0302 	bic.w	r3, r3, #2
 800ea10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	689b      	ldr	r3, [r3, #8]
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	4313      	orrs	r3, r2
 800ea1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4a2d      	ldr	r2, [pc, #180]	@ (800ead4 <TIM_OC1_SetConfig+0x10c>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d00f      	beq.n	800ea44 <TIM_OC1_SetConfig+0x7c>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a2c      	ldr	r2, [pc, #176]	@ (800ead8 <TIM_OC1_SetConfig+0x110>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d00b      	beq.n	800ea44 <TIM_OC1_SetConfig+0x7c>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a2b      	ldr	r2, [pc, #172]	@ (800eadc <TIM_OC1_SetConfig+0x114>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d007      	beq.n	800ea44 <TIM_OC1_SetConfig+0x7c>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	4a2a      	ldr	r2, [pc, #168]	@ (800eae0 <TIM_OC1_SetConfig+0x118>)
 800ea38:	4293      	cmp	r3, r2
 800ea3a:	d003      	beq.n	800ea44 <TIM_OC1_SetConfig+0x7c>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a29      	ldr	r2, [pc, #164]	@ (800eae4 <TIM_OC1_SetConfig+0x11c>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d10c      	bne.n	800ea5e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f023 0308 	bic.w	r3, r3, #8
 800ea4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	697a      	ldr	r2, [r7, #20]
 800ea52:	4313      	orrs	r3, r2
 800ea54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f023 0304 	bic.w	r3, r3, #4
 800ea5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a1c      	ldr	r2, [pc, #112]	@ (800ead4 <TIM_OC1_SetConfig+0x10c>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d00f      	beq.n	800ea86 <TIM_OC1_SetConfig+0xbe>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a1b      	ldr	r2, [pc, #108]	@ (800ead8 <TIM_OC1_SetConfig+0x110>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d00b      	beq.n	800ea86 <TIM_OC1_SetConfig+0xbe>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a1a      	ldr	r2, [pc, #104]	@ (800eadc <TIM_OC1_SetConfig+0x114>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d007      	beq.n	800ea86 <TIM_OC1_SetConfig+0xbe>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	4a19      	ldr	r2, [pc, #100]	@ (800eae0 <TIM_OC1_SetConfig+0x118>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d003      	beq.n	800ea86 <TIM_OC1_SetConfig+0xbe>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4a18      	ldr	r2, [pc, #96]	@ (800eae4 <TIM_OC1_SetConfig+0x11c>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d111      	bne.n	800eaaa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	693a      	ldr	r2, [r7, #16]
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	693a      	ldr	r2, [r7, #16]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	693a      	ldr	r2, [r7, #16]
 800eaae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	685a      	ldr	r2, [r3, #4]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	697a      	ldr	r2, [r7, #20]
 800eac2:	621a      	str	r2, [r3, #32]
}
 800eac4:	bf00      	nop
 800eac6:	371c      	adds	r7, #28
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	fffeff8f 	.word	0xfffeff8f
 800ead4:	40010000 	.word	0x40010000
 800ead8:	40010400 	.word	0x40010400
 800eadc:	40014000 	.word	0x40014000
 800eae0:	40014400 	.word	0x40014400
 800eae4:	40014800 	.word	0x40014800

0800eae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b087      	sub	sp, #28
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6a1b      	ldr	r3, [r3, #32]
 800eaf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a1b      	ldr	r3, [r3, #32]
 800eafc:	f023 0210 	bic.w	r2, r3, #16
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	4b34      	ldr	r3, [pc, #208]	@ (800ebe4 <TIM_OC2_SetConfig+0xfc>)
 800eb14:	4013      	ands	r3, r2
 800eb16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	021b      	lsls	r3, r3, #8
 800eb26:	68fa      	ldr	r2, [r7, #12]
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	f023 0320 	bic.w	r3, r3, #32
 800eb32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	689b      	ldr	r3, [r3, #8]
 800eb38:	011b      	lsls	r3, r3, #4
 800eb3a:	697a      	ldr	r2, [r7, #20]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	4a29      	ldr	r2, [pc, #164]	@ (800ebe8 <TIM_OC2_SetConfig+0x100>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d003      	beq.n	800eb50 <TIM_OC2_SetConfig+0x68>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a28      	ldr	r2, [pc, #160]	@ (800ebec <TIM_OC2_SetConfig+0x104>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d10d      	bne.n	800eb6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	011b      	lsls	r3, r3, #4
 800eb5e:	697a      	ldr	r2, [r7, #20]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a1e      	ldr	r2, [pc, #120]	@ (800ebe8 <TIM_OC2_SetConfig+0x100>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d00f      	beq.n	800eb94 <TIM_OC2_SetConfig+0xac>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a1d      	ldr	r2, [pc, #116]	@ (800ebec <TIM_OC2_SetConfig+0x104>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d00b      	beq.n	800eb94 <TIM_OC2_SetConfig+0xac>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4a1c      	ldr	r2, [pc, #112]	@ (800ebf0 <TIM_OC2_SetConfig+0x108>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d007      	beq.n	800eb94 <TIM_OC2_SetConfig+0xac>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a1b      	ldr	r2, [pc, #108]	@ (800ebf4 <TIM_OC2_SetConfig+0x10c>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d003      	beq.n	800eb94 <TIM_OC2_SetConfig+0xac>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a1a      	ldr	r2, [pc, #104]	@ (800ebf8 <TIM_OC2_SetConfig+0x110>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d113      	bne.n	800ebbc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	695b      	ldr	r3, [r3, #20]
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	693a      	ldr	r2, [r7, #16]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	699b      	ldr	r3, [r3, #24]
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	693a      	ldr	r2, [r7, #16]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	621a      	str	r2, [r3, #32]
}
 800ebd6:	bf00      	nop
 800ebd8:	371c      	adds	r7, #28
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	feff8fff 	.word	0xfeff8fff
 800ebe8:	40010000 	.word	0x40010000
 800ebec:	40010400 	.word	0x40010400
 800ebf0:	40014000 	.word	0x40014000
 800ebf4:	40014400 	.word	0x40014400
 800ebf8:	40014800 	.word	0x40014800

0800ebfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b087      	sub	sp, #28
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6a1b      	ldr	r3, [r3, #32]
 800ec0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a1b      	ldr	r3, [r3, #32]
 800ec10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	69db      	ldr	r3, [r3, #28]
 800ec22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4b33      	ldr	r3, [pc, #204]	@ (800ecf4 <TIM_OC3_SetConfig+0xf8>)
 800ec28:	4013      	ands	r3, r2
 800ec2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f023 0303 	bic.w	r3, r3, #3
 800ec32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	689b      	ldr	r3, [r3, #8]
 800ec4a:	021b      	lsls	r3, r3, #8
 800ec4c:	697a      	ldr	r2, [r7, #20]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a28      	ldr	r2, [pc, #160]	@ (800ecf8 <TIM_OC3_SetConfig+0xfc>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d003      	beq.n	800ec62 <TIM_OC3_SetConfig+0x66>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4a27      	ldr	r2, [pc, #156]	@ (800ecfc <TIM_OC3_SetConfig+0x100>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d10d      	bne.n	800ec7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	021b      	lsls	r3, r3, #8
 800ec70:	697a      	ldr	r2, [r7, #20]
 800ec72:	4313      	orrs	r3, r2
 800ec74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a1d      	ldr	r2, [pc, #116]	@ (800ecf8 <TIM_OC3_SetConfig+0xfc>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d00f      	beq.n	800eca6 <TIM_OC3_SetConfig+0xaa>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	4a1c      	ldr	r2, [pc, #112]	@ (800ecfc <TIM_OC3_SetConfig+0x100>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d00b      	beq.n	800eca6 <TIM_OC3_SetConfig+0xaa>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4a1b      	ldr	r2, [pc, #108]	@ (800ed00 <TIM_OC3_SetConfig+0x104>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d007      	beq.n	800eca6 <TIM_OC3_SetConfig+0xaa>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	4a1a      	ldr	r2, [pc, #104]	@ (800ed04 <TIM_OC3_SetConfig+0x108>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d003      	beq.n	800eca6 <TIM_OC3_SetConfig+0xaa>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a19      	ldr	r2, [pc, #100]	@ (800ed08 <TIM_OC3_SetConfig+0x10c>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d113      	bne.n	800ecce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	695b      	ldr	r3, [r3, #20]
 800ecba:	011b      	lsls	r3, r3, #4
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	699b      	ldr	r3, [r3, #24]
 800ecc6:	011b      	lsls	r3, r3, #4
 800ecc8:	693a      	ldr	r2, [r7, #16]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	697a      	ldr	r2, [r7, #20]
 800ece6:	621a      	str	r2, [r3, #32]
}
 800ece8:	bf00      	nop
 800ecea:	371c      	adds	r7, #28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr
 800ecf4:	fffeff8f 	.word	0xfffeff8f
 800ecf8:	40010000 	.word	0x40010000
 800ecfc:	40010400 	.word	0x40010400
 800ed00:	40014000 	.word	0x40014000
 800ed04:	40014400 	.word	0x40014400
 800ed08:	40014800 	.word	0x40014800

0800ed0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b087      	sub	sp, #28
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6a1b      	ldr	r3, [r3, #32]
 800ed20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	69db      	ldr	r3, [r3, #28]
 800ed32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	4b24      	ldr	r3, [pc, #144]	@ (800edc8 <TIM_OC4_SetConfig+0xbc>)
 800ed38:	4013      	ands	r3, r2
 800ed3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	021b      	lsls	r3, r3, #8
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	031b      	lsls	r3, r3, #12
 800ed5e:	693a      	ldr	r2, [r7, #16]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a19      	ldr	r2, [pc, #100]	@ (800edcc <TIM_OC4_SetConfig+0xc0>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d00f      	beq.n	800ed8c <TIM_OC4_SetConfig+0x80>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	4a18      	ldr	r2, [pc, #96]	@ (800edd0 <TIM_OC4_SetConfig+0xc4>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d00b      	beq.n	800ed8c <TIM_OC4_SetConfig+0x80>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4a17      	ldr	r2, [pc, #92]	@ (800edd4 <TIM_OC4_SetConfig+0xc8>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d007      	beq.n	800ed8c <TIM_OC4_SetConfig+0x80>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a16      	ldr	r2, [pc, #88]	@ (800edd8 <TIM_OC4_SetConfig+0xcc>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d003      	beq.n	800ed8c <TIM_OC4_SetConfig+0x80>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a15      	ldr	r2, [pc, #84]	@ (800eddc <TIM_OC4_SetConfig+0xd0>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d109      	bne.n	800eda0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	019b      	lsls	r3, r3, #6
 800ed9a:	697a      	ldr	r2, [r7, #20]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	697a      	ldr	r2, [r7, #20]
 800eda4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	621a      	str	r2, [r3, #32]
}
 800edba:	bf00      	nop
 800edbc:	371c      	adds	r7, #28
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	feff8fff 	.word	0xfeff8fff
 800edcc:	40010000 	.word	0x40010000
 800edd0:	40010400 	.word	0x40010400
 800edd4:	40014000 	.word	0x40014000
 800edd8:	40014400 	.word	0x40014400
 800eddc:	40014800 	.word	0x40014800

0800ede0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b087      	sub	sp, #28
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6a1b      	ldr	r3, [r3, #32]
 800edee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	4b21      	ldr	r3, [pc, #132]	@ (800ee90 <TIM_OC5_SetConfig+0xb0>)
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ee20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	041b      	lsls	r3, r3, #16
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4a18      	ldr	r2, [pc, #96]	@ (800ee94 <TIM_OC5_SetConfig+0xb4>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d00f      	beq.n	800ee56 <TIM_OC5_SetConfig+0x76>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4a17      	ldr	r2, [pc, #92]	@ (800ee98 <TIM_OC5_SetConfig+0xb8>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d00b      	beq.n	800ee56 <TIM_OC5_SetConfig+0x76>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4a16      	ldr	r2, [pc, #88]	@ (800ee9c <TIM_OC5_SetConfig+0xbc>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d007      	beq.n	800ee56 <TIM_OC5_SetConfig+0x76>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4a15      	ldr	r2, [pc, #84]	@ (800eea0 <TIM_OC5_SetConfig+0xc0>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d003      	beq.n	800ee56 <TIM_OC5_SetConfig+0x76>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4a14      	ldr	r2, [pc, #80]	@ (800eea4 <TIM_OC5_SetConfig+0xc4>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d109      	bne.n	800ee6a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	021b      	lsls	r3, r3, #8
 800ee64:	697a      	ldr	r2, [r7, #20]
 800ee66:	4313      	orrs	r3, r2
 800ee68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	685a      	ldr	r2, [r3, #4]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	621a      	str	r2, [r3, #32]
}
 800ee84:	bf00      	nop
 800ee86:	371c      	adds	r7, #28
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr
 800ee90:	fffeff8f 	.word	0xfffeff8f
 800ee94:	40010000 	.word	0x40010000
 800ee98:	40010400 	.word	0x40010400
 800ee9c:	40014000 	.word	0x40014000
 800eea0:	40014400 	.word	0x40014400
 800eea4:	40014800 	.word	0x40014800

0800eea8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b087      	sub	sp, #28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a1b      	ldr	r3, [r3, #32]
 800eebc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	4b22      	ldr	r3, [pc, #136]	@ (800ef5c <TIM_OC6_SetConfig+0xb4>)
 800eed4:	4013      	ands	r3, r2
 800eed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	021b      	lsls	r3, r3, #8
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	4313      	orrs	r3, r2
 800eee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eeea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	051b      	lsls	r3, r3, #20
 800eef2:	693a      	ldr	r2, [r7, #16]
 800eef4:	4313      	orrs	r3, r2
 800eef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4a19      	ldr	r2, [pc, #100]	@ (800ef60 <TIM_OC6_SetConfig+0xb8>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d00f      	beq.n	800ef20 <TIM_OC6_SetConfig+0x78>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	4a18      	ldr	r2, [pc, #96]	@ (800ef64 <TIM_OC6_SetConfig+0xbc>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d00b      	beq.n	800ef20 <TIM_OC6_SetConfig+0x78>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4a17      	ldr	r2, [pc, #92]	@ (800ef68 <TIM_OC6_SetConfig+0xc0>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d007      	beq.n	800ef20 <TIM_OC6_SetConfig+0x78>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a16      	ldr	r2, [pc, #88]	@ (800ef6c <TIM_OC6_SetConfig+0xc4>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d003      	beq.n	800ef20 <TIM_OC6_SetConfig+0x78>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4a15      	ldr	r2, [pc, #84]	@ (800ef70 <TIM_OC6_SetConfig+0xc8>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d109      	bne.n	800ef34 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ef26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	695b      	ldr	r3, [r3, #20]
 800ef2c:	029b      	lsls	r3, r3, #10
 800ef2e:	697a      	ldr	r2, [r7, #20]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	697a      	ldr	r2, [r7, #20]
 800ef38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	685a      	ldr	r2, [r3, #4]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	693a      	ldr	r2, [r7, #16]
 800ef4c:	621a      	str	r2, [r3, #32]
}
 800ef4e:	bf00      	nop
 800ef50:	371c      	adds	r7, #28
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	feff8fff 	.word	0xfeff8fff
 800ef60:	40010000 	.word	0x40010000
 800ef64:	40010400 	.word	0x40010400
 800ef68:	40014000 	.word	0x40014000
 800ef6c:	40014400 	.word	0x40014400
 800ef70:	40014800 	.word	0x40014800

0800ef74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d101      	bne.n	800efc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e042      	b.n	800f048 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d106      	bne.n	800efda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7f3 fe5f 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2224      	movs	r2, #36	@ 0x24
 800efde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f022 0201 	bic.w	r2, r2, #1
 800eff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d002      	beq.n	800f000 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f001 fa4e 	bl	801049c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fce3 	bl	800f9cc <UART_SetConfig>
 800f006:	4603      	mov	r3, r0
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d101      	bne.n	800f010 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f00c:	2301      	movs	r3, #1
 800f00e:	e01b      	b.n	800f048 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f01e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	689a      	ldr	r2, [r3, #8]
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f02e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f042 0201 	orr.w	r2, r2, #1
 800f03e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f001 facd 	bl	80105e0 <UART_CheckIdleState>
 800f046:	4603      	mov	r3, r0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b08a      	sub	sp, #40	@ 0x28
 800f054:	af02      	add	r7, sp, #8
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	603b      	str	r3, [r7, #0]
 800f05c:	4613      	mov	r3, r2
 800f05e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f066:	2b20      	cmp	r3, #32
 800f068:	d17b      	bne.n	800f162 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <HAL_UART_Transmit+0x26>
 800f070:	88fb      	ldrh	r3, [r7, #6]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d101      	bne.n	800f07a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f076:	2301      	movs	r3, #1
 800f078:	e074      	b.n	800f164 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2200      	movs	r2, #0
 800f07e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2221      	movs	r2, #33	@ 0x21
 800f086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f08a:	f7f6 faa7 	bl	80055dc <HAL_GetTick>
 800f08e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	88fa      	ldrh	r2, [r7, #6]
 800f094:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	88fa      	ldrh	r2, [r7, #6]
 800f09c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f0a8:	d108      	bne.n	800f0bc <HAL_UART_Transmit+0x6c>
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d104      	bne.n	800f0bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	61bb      	str	r3, [r7, #24]
 800f0ba:	e003      	b.n	800f0c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f0c4:	e030      	b.n	800f128 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	2180      	movs	r1, #128	@ 0x80
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f001 fb2f 	bl	8010734 <UART_WaitOnFlagUntilTimeout>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d005      	beq.n	800f0e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2220      	movs	r2, #32
 800f0e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f0e4:	2303      	movs	r3, #3
 800f0e6:	e03d      	b.n	800f164 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d10b      	bne.n	800f106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	881b      	ldrh	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f0fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	3302      	adds	r3, #2
 800f102:	61bb      	str	r3, [r7, #24]
 800f104:	e007      	b.n	800f116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	781a      	ldrb	r2, [r3, #0]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f110:	69fb      	ldr	r3, [r7, #28]
 800f112:	3301      	adds	r3, #1
 800f114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	3b01      	subs	r3, #1
 800f120:	b29a      	uxth	r2, r3
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f12e:	b29b      	uxth	r3, r3
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1c8      	bne.n	800f0c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	2200      	movs	r2, #0
 800f13c:	2140      	movs	r1, #64	@ 0x40
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f001 faf8 	bl	8010734 <UART_WaitOnFlagUntilTimeout>
 800f144:	4603      	mov	r3, r0
 800f146:	2b00      	cmp	r3, #0
 800f148:	d005      	beq.n	800f156 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2220      	movs	r2, #32
 800f14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f152:	2303      	movs	r3, #3
 800f154:	e006      	b.n	800f164 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2220      	movs	r2, #32
 800f15a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	e000      	b.n	800f164 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f162:	2302      	movs	r3, #2
  }
}
 800f164:	4618      	mov	r0, r3
 800f166:	3720      	adds	r7, #32
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b08a      	sub	sp, #40	@ 0x28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	4613      	mov	r3, r2
 800f178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f180:	2b20      	cmp	r3, #32
 800f182:	d137      	bne.n	800f1f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <HAL_UART_Receive_IT+0x24>
 800f18a:	88fb      	ldrh	r3, [r7, #6]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	e030      	b.n	800f1f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2200      	movs	r2, #0
 800f198:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a18      	ldr	r2, [pc, #96]	@ (800f200 <HAL_UART_Receive_IT+0x94>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d01f      	beq.n	800f1e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d018      	beq.n	800f1e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	e853 3f00 	ldrex	r3, [r3]
 800f1be:	613b      	str	r3, [r7, #16]
   return(result);
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f1c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d0:	623b      	str	r3, [r7, #32]
 800f1d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d4:	69f9      	ldr	r1, [r7, #28]
 800f1d6:	6a3a      	ldr	r2, [r7, #32]
 800f1d8:	e841 2300 	strex	r3, r2, [r1]
 800f1dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1e6      	bne.n	800f1b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f1e4:	88fb      	ldrh	r3, [r7, #6]
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	68b9      	ldr	r1, [r7, #8]
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f001 fb10 	bl	8010810 <UART_Start_Receive_IT>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	e000      	b.n	800f1f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f1f4:	2302      	movs	r3, #2
  }
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3728      	adds	r7, #40	@ 0x28
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	58000c00 	.word	0x58000c00

0800f204 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b0ba      	sub	sp, #232	@ 0xe8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	69db      	ldr	r3, [r3, #28]
 800f212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f22a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f22e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f232:	4013      	ands	r3, r2
 800f234:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f238:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d11b      	bne.n	800f278 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f244:	f003 0320 	and.w	r3, r3, #32
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d015      	beq.n	800f278 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f250:	f003 0320 	and.w	r3, r3, #32
 800f254:	2b00      	cmp	r3, #0
 800f256:	d105      	bne.n	800f264 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f25c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d009      	beq.n	800f278 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f000 8377 	beq.w	800f95c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	4798      	blx	r3
      }
      return;
 800f276:	e371      	b.n	800f95c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f000 8123 	beq.w	800f4c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f282:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f286:	4b8d      	ldr	r3, [pc, #564]	@ (800f4bc <HAL_UART_IRQHandler+0x2b8>)
 800f288:	4013      	ands	r3, r2
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f28e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f292:	4b8b      	ldr	r3, [pc, #556]	@ (800f4c0 <HAL_UART_IRQHandler+0x2bc>)
 800f294:	4013      	ands	r3, r2
 800f296:	2b00      	cmp	r3, #0
 800f298:	f000 8116 	beq.w	800f4c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2a0:	f003 0301 	and.w	r3, r3, #1
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d011      	beq.n	800f2cc <HAL_UART_IRQHandler+0xc8>
 800f2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00b      	beq.n	800f2cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2c2:	f043 0201 	orr.w	r2, r3, #1
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2d0:	f003 0302 	and.w	r3, r3, #2
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d011      	beq.n	800f2fc <HAL_UART_IRQHandler+0xf8>
 800f2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2dc:	f003 0301 	and.w	r3, r3, #1
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00b      	beq.n	800f2fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2202      	movs	r2, #2
 800f2ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2f2:	f043 0204 	orr.w	r2, r3, #4
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f300:	f003 0304 	and.w	r3, r3, #4
 800f304:	2b00      	cmp	r3, #0
 800f306:	d011      	beq.n	800f32c <HAL_UART_IRQHandler+0x128>
 800f308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f30c:	f003 0301 	and.w	r3, r3, #1
 800f310:	2b00      	cmp	r3, #0
 800f312:	d00b      	beq.n	800f32c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2204      	movs	r2, #4
 800f31a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f322:	f043 0202 	orr.w	r2, r3, #2
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f330:	f003 0308 	and.w	r3, r3, #8
 800f334:	2b00      	cmp	r3, #0
 800f336:	d017      	beq.n	800f368 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f33c:	f003 0320 	and.w	r3, r3, #32
 800f340:	2b00      	cmp	r3, #0
 800f342:	d105      	bne.n	800f350 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f344:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f348:	4b5c      	ldr	r3, [pc, #368]	@ (800f4bc <HAL_UART_IRQHandler+0x2b8>)
 800f34a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00b      	beq.n	800f368 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2208      	movs	r2, #8
 800f356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f35e:	f043 0208 	orr.w	r2, r3, #8
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f36c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f370:	2b00      	cmp	r3, #0
 800f372:	d012      	beq.n	800f39a <HAL_UART_IRQHandler+0x196>
 800f374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f378:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d00c      	beq.n	800f39a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f390:	f043 0220 	orr.w	r2, r3, #32
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f000 82dd 	beq.w	800f960 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3aa:	f003 0320 	and.w	r3, r3, #32
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d013      	beq.n	800f3da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f3b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3b6:	f003 0320 	and.w	r3, r3, #32
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d105      	bne.n	800f3ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f3be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d007      	beq.n	800f3da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d003      	beq.n	800f3da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	689b      	ldr	r3, [r3, #8]
 800f3ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ee:	2b40      	cmp	r3, #64	@ 0x40
 800f3f0:	d005      	beq.n	800f3fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f3f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f3f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d054      	beq.n	800f4a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f001 fb28 	bl	8010a54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	689b      	ldr	r3, [r3, #8]
 800f40a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f40e:	2b40      	cmp	r3, #64	@ 0x40
 800f410:	d146      	bne.n	800f4a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3308      	adds	r3, #8
 800f418:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f420:	e853 3f00 	ldrex	r3, [r3]
 800f424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f428:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f42c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	3308      	adds	r3, #8
 800f43a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f43e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f44a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f44e:	e841 2300 	strex	r3, r2, [r1]
 800f452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1d9      	bne.n	800f412 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f464:	2b00      	cmp	r3, #0
 800f466:	d017      	beq.n	800f498 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f46e:	4a15      	ldr	r2, [pc, #84]	@ (800f4c4 <HAL_UART_IRQHandler+0x2c0>)
 800f470:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f478:	4618      	mov	r0, r3
 800f47a:	f7f7 ff0f 	bl	800729c <HAL_DMA_Abort_IT>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b00      	cmp	r3, #0
 800f482:	d019      	beq.n	800f4b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f48a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f492:	4610      	mov	r0, r2
 800f494:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f496:	e00f      	b.n	800f4b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 fa81 	bl	800f9a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f49e:	e00b      	b.n	800f4b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fa7d 	bl	800f9a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4a6:	e007      	b.n	800f4b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 fa79 	bl	800f9a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f4b6:	e253      	b.n	800f960 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4b8:	bf00      	nop
    return;
 800f4ba:	e251      	b.n	800f960 <HAL_UART_IRQHandler+0x75c>
 800f4bc:	10000001 	.word	0x10000001
 800f4c0:	04000120 	.word	0x04000120
 800f4c4:	08010b21 	.word	0x08010b21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	f040 81e7 	bne.w	800f8a0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4d6:	f003 0310 	and.w	r3, r3, #16
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f000 81e0 	beq.w	800f8a0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4e4:	f003 0310 	and.w	r3, r3, #16
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	f000 81d9 	beq.w	800f8a0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2210      	movs	r2, #16
 800f4f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	689b      	ldr	r3, [r3, #8]
 800f4fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f500:	2b40      	cmp	r3, #64	@ 0x40
 800f502:	f040 8151 	bne.w	800f7a8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a96      	ldr	r2, [pc, #600]	@ (800f768 <HAL_UART_IRQHandler+0x564>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d068      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	4a93      	ldr	r2, [pc, #588]	@ (800f76c <HAL_UART_IRQHandler+0x568>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d061      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4a91      	ldr	r2, [pc, #580]	@ (800f770 <HAL_UART_IRQHandler+0x56c>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d05a      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	4a8e      	ldr	r2, [pc, #568]	@ (800f774 <HAL_UART_IRQHandler+0x570>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d053      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a8c      	ldr	r2, [pc, #560]	@ (800f778 <HAL_UART_IRQHandler+0x574>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d04c      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4a89      	ldr	r2, [pc, #548]	@ (800f77c <HAL_UART_IRQHandler+0x578>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d045      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4a87      	ldr	r2, [pc, #540]	@ (800f780 <HAL_UART_IRQHandler+0x57c>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d03e      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a84      	ldr	r2, [pc, #528]	@ (800f784 <HAL_UART_IRQHandler+0x580>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d037      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4a82      	ldr	r2, [pc, #520]	@ (800f788 <HAL_UART_IRQHandler+0x584>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d030      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4a7f      	ldr	r2, [pc, #508]	@ (800f78c <HAL_UART_IRQHandler+0x588>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d029      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4a7d      	ldr	r2, [pc, #500]	@ (800f790 <HAL_UART_IRQHandler+0x58c>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d022      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a7a      	ldr	r2, [pc, #488]	@ (800f794 <HAL_UART_IRQHandler+0x590>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	d01b      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a78      	ldr	r2, [pc, #480]	@ (800f798 <HAL_UART_IRQHandler+0x594>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d014      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a75      	ldr	r2, [pc, #468]	@ (800f79c <HAL_UART_IRQHandler+0x598>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d00d      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4a73      	ldr	r2, [pc, #460]	@ (800f7a0 <HAL_UART_IRQHandler+0x59c>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d006      	beq.n	800f5e6 <HAL_UART_IRQHandler+0x3e2>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	4a70      	ldr	r2, [pc, #448]	@ (800f7a4 <HAL_UART_IRQHandler+0x5a0>)
 800f5e2:	4293      	cmp	r3, r2
 800f5e4:	d106      	bne.n	800f5f4 <HAL_UART_IRQHandler+0x3f0>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	e005      	b.n	800f600 <HAL_UART_IRQHandler+0x3fc>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	685b      	ldr	r3, [r3, #4]
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f608:	2b00      	cmp	r3, #0
 800f60a:	f000 81ab 	beq.w	800f964 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f614:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f618:	429a      	cmp	r2, r3
 800f61a:	f080 81a3 	bcs.w	800f964 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f624:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f62e:	69db      	ldr	r3, [r3, #28]
 800f630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f634:	f000 8087 	beq.w	800f746 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f640:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f644:	e853 3f00 	ldrex	r3, [r3]
 800f648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f64c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f654:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	461a      	mov	r2, r3
 800f65e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f666:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f66a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f66e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f672:	e841 2300 	strex	r3, r2, [r1]
 800f676:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f67a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1da      	bne.n	800f638 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	3308      	adds	r3, #8
 800f688:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f68a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f68c:	e853 3f00 	ldrex	r3, [r3]
 800f690:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f694:	f023 0301 	bic.w	r3, r3, #1
 800f698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	3308      	adds	r3, #8
 800f6a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f6a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f6aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f6ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f6b2:	e841 2300 	strex	r3, r2, [r1]
 800f6b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f6b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1e1      	bne.n	800f682 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f6c8:	e853 3f00 	ldrex	r3, [r3]
 800f6cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f6ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f6d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f6d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	3308      	adds	r3, #8
 800f6de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f6e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f6e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f6e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f6ea:	e841 2300 	strex	r3, r2, [r1]
 800f6ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f6f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d1e3      	bne.n	800f6be <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2220      	movs	r2, #32
 800f6fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2200      	movs	r2, #0
 800f702:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f70c:	e853 3f00 	ldrex	r3, [r3]
 800f710:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f714:	f023 0310 	bic.w	r3, r3, #16
 800f718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	461a      	mov	r2, r3
 800f722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f726:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f728:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f72c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f72e:	e841 2300 	strex	r3, r2, [r1]
 800f732:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f734:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1e4      	bne.n	800f704 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f740:	4618      	mov	r0, r3
 800f742:	f7f7 fa8d 	bl	8006c60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2202      	movs	r2, #2
 800f74a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f758:	b29b      	uxth	r3, r3
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	4619      	mov	r1, r3
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 f927 	bl	800f9b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f766:	e0fd      	b.n	800f964 <HAL_UART_IRQHandler+0x760>
 800f768:	40020010 	.word	0x40020010
 800f76c:	40020028 	.word	0x40020028
 800f770:	40020040 	.word	0x40020040
 800f774:	40020058 	.word	0x40020058
 800f778:	40020070 	.word	0x40020070
 800f77c:	40020088 	.word	0x40020088
 800f780:	400200a0 	.word	0x400200a0
 800f784:	400200b8 	.word	0x400200b8
 800f788:	40020410 	.word	0x40020410
 800f78c:	40020428 	.word	0x40020428
 800f790:	40020440 	.word	0x40020440
 800f794:	40020458 	.word	0x40020458
 800f798:	40020470 	.word	0x40020470
 800f79c:	40020488 	.word	0x40020488
 800f7a0:	400204a0 	.word	0x400204a0
 800f7a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f000 80cf 	beq.w	800f968 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f7ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 80ca 	beq.w	800f968 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7dc:	e853 3f00 	ldrex	r3, [r3]
 800f7e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f7e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f7f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f7fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7fe:	e841 2300 	strex	r3, r2, [r1]
 800f802:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1e4      	bne.n	800f7d4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3308      	adds	r3, #8
 800f810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f814:	e853 3f00 	ldrex	r3, [r3]
 800f818:	623b      	str	r3, [r7, #32]
   return(result);
 800f81a:	6a3a      	ldr	r2, [r7, #32]
 800f81c:	4b55      	ldr	r3, [pc, #340]	@ (800f974 <HAL_UART_IRQHandler+0x770>)
 800f81e:	4013      	ands	r3, r2
 800f820:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	3308      	adds	r3, #8
 800f82a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f82e:	633a      	str	r2, [r7, #48]	@ 0x30
 800f830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f836:	e841 2300 	strex	r3, r2, [r1]
 800f83a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1e3      	bne.n	800f80a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2220      	movs	r2, #32
 800f846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2200      	movs	r2, #0
 800f84e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	e853 3f00 	ldrex	r3, [r3]
 800f862:	60fb      	str	r3, [r7, #12]
   return(result);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f023 0310 	bic.w	r3, r3, #16
 800f86a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	461a      	mov	r2, r3
 800f874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f878:	61fb      	str	r3, [r7, #28]
 800f87a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87c:	69b9      	ldr	r1, [r7, #24]
 800f87e:	69fa      	ldr	r2, [r7, #28]
 800f880:	e841 2300 	strex	r3, r2, [r1]
 800f884:	617b      	str	r3, [r7, #20]
   return(result);
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1e4      	bne.n	800f856 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2202      	movs	r2, #2
 800f890:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f896:	4619      	mov	r1, r3
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f88b 	bl	800f9b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f89e:	e063      	b.n	800f968 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00e      	beq.n	800f8ca <HAL_UART_IRQHandler+0x6c6>
 800f8ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d008      	beq.n	800f8ca <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f8c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f001 fe8a 	bl	80115dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f8c8:	e051      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d014      	beq.n	800f900 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f8d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d105      	bne.n	800f8ee <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f8e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d008      	beq.n	800f900 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d03a      	beq.n	800f96c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	4798      	blx	r3
    }
    return;
 800f8fe:	e035      	b.n	800f96c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d009      	beq.n	800f920 <HAL_UART_IRQHandler+0x71c>
 800f90c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f914:	2b00      	cmp	r3, #0
 800f916:	d003      	beq.n	800f920 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f001 f917 	bl	8010b4c <UART_EndTransmit_IT>
    return;
 800f91e:	e026      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d009      	beq.n	800f940 <HAL_UART_IRQHandler+0x73c>
 800f92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f930:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f934:	2b00      	cmp	r3, #0
 800f936:	d003      	beq.n	800f940 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f001 fe63 	bl	8011604 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f93e:	e016      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f944:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d010      	beq.n	800f96e <HAL_UART_IRQHandler+0x76a>
 800f94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f950:	2b00      	cmp	r3, #0
 800f952:	da0c      	bge.n	800f96e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f001 fe4b 	bl	80115f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f95a:	e008      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
      return;
 800f95c:	bf00      	nop
 800f95e:	e006      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
    return;
 800f960:	bf00      	nop
 800f962:	e004      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
      return;
 800f964:	bf00      	nop
 800f966:	e002      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
      return;
 800f968:	bf00      	nop
 800f96a:	e000      	b.n	800f96e <HAL_UART_IRQHandler+0x76a>
    return;
 800f96c:	bf00      	nop
  }
}
 800f96e:	37e8      	adds	r7, #232	@ 0xe8
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	effffffe 	.word	0xeffffffe

0800f978 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f9c0:	bf00      	nop
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f9cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f9d0:	b092      	sub	sp, #72	@ 0x48
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	689a      	ldr	r2, [r3, #8]
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	431a      	orrs	r2, r3
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	695b      	ldr	r3, [r3, #20]
 800f9ea:	431a      	orrs	r2, r3
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	69db      	ldr	r3, [r3, #28]
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	4bbe      	ldr	r3, [pc, #760]	@ (800fcf4 <UART_SetConfig+0x328>)
 800f9fc:	4013      	ands	r3, r2
 800f9fe:	697a      	ldr	r2, [r7, #20]
 800fa00:	6812      	ldr	r2, [r2, #0]
 800fa02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa04:	430b      	orrs	r3, r1
 800fa06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	68da      	ldr	r2, [r3, #12]
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	430a      	orrs	r2, r1
 800fa1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	699b      	ldr	r3, [r3, #24]
 800fa22:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4ab3      	ldr	r2, [pc, #716]	@ (800fcf8 <UART_SetConfig+0x32c>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d004      	beq.n	800fa38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	6a1b      	ldr	r3, [r3, #32]
 800fa32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa34:	4313      	orrs	r3, r2
 800fa36:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	689a      	ldr	r2, [r3, #8]
 800fa3e:	4baf      	ldr	r3, [pc, #700]	@ (800fcfc <UART_SetConfig+0x330>)
 800fa40:	4013      	ands	r3, r2
 800fa42:	697a      	ldr	r2, [r7, #20]
 800fa44:	6812      	ldr	r2, [r2, #0]
 800fa46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa48:	430b      	orrs	r3, r1
 800fa4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa52:	f023 010f 	bic.w	r1, r3, #15
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	430a      	orrs	r2, r1
 800fa60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4aa6      	ldr	r2, [pc, #664]	@ (800fd00 <UART_SetConfig+0x334>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d177      	bne.n	800fb5c <UART_SetConfig+0x190>
 800fa6c:	4ba5      	ldr	r3, [pc, #660]	@ (800fd04 <UART_SetConfig+0x338>)
 800fa6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa74:	2b28      	cmp	r3, #40	@ 0x28
 800fa76:	d86d      	bhi.n	800fb54 <UART_SetConfig+0x188>
 800fa78:	a201      	add	r2, pc, #4	@ (adr r2, 800fa80 <UART_SetConfig+0xb4>)
 800fa7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa7e:	bf00      	nop
 800fa80:	0800fb25 	.word	0x0800fb25
 800fa84:	0800fb55 	.word	0x0800fb55
 800fa88:	0800fb55 	.word	0x0800fb55
 800fa8c:	0800fb55 	.word	0x0800fb55
 800fa90:	0800fb55 	.word	0x0800fb55
 800fa94:	0800fb55 	.word	0x0800fb55
 800fa98:	0800fb55 	.word	0x0800fb55
 800fa9c:	0800fb55 	.word	0x0800fb55
 800faa0:	0800fb2d 	.word	0x0800fb2d
 800faa4:	0800fb55 	.word	0x0800fb55
 800faa8:	0800fb55 	.word	0x0800fb55
 800faac:	0800fb55 	.word	0x0800fb55
 800fab0:	0800fb55 	.word	0x0800fb55
 800fab4:	0800fb55 	.word	0x0800fb55
 800fab8:	0800fb55 	.word	0x0800fb55
 800fabc:	0800fb55 	.word	0x0800fb55
 800fac0:	0800fb35 	.word	0x0800fb35
 800fac4:	0800fb55 	.word	0x0800fb55
 800fac8:	0800fb55 	.word	0x0800fb55
 800facc:	0800fb55 	.word	0x0800fb55
 800fad0:	0800fb55 	.word	0x0800fb55
 800fad4:	0800fb55 	.word	0x0800fb55
 800fad8:	0800fb55 	.word	0x0800fb55
 800fadc:	0800fb55 	.word	0x0800fb55
 800fae0:	0800fb3d 	.word	0x0800fb3d
 800fae4:	0800fb55 	.word	0x0800fb55
 800fae8:	0800fb55 	.word	0x0800fb55
 800faec:	0800fb55 	.word	0x0800fb55
 800faf0:	0800fb55 	.word	0x0800fb55
 800faf4:	0800fb55 	.word	0x0800fb55
 800faf8:	0800fb55 	.word	0x0800fb55
 800fafc:	0800fb55 	.word	0x0800fb55
 800fb00:	0800fb45 	.word	0x0800fb45
 800fb04:	0800fb55 	.word	0x0800fb55
 800fb08:	0800fb55 	.word	0x0800fb55
 800fb0c:	0800fb55 	.word	0x0800fb55
 800fb10:	0800fb55 	.word	0x0800fb55
 800fb14:	0800fb55 	.word	0x0800fb55
 800fb18:	0800fb55 	.word	0x0800fb55
 800fb1c:	0800fb55 	.word	0x0800fb55
 800fb20:	0800fb4d 	.word	0x0800fb4d
 800fb24:	2301      	movs	r3, #1
 800fb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb2a:	e222      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb2c:	2304      	movs	r3, #4
 800fb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb32:	e21e      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb34:	2308      	movs	r3, #8
 800fb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb3a:	e21a      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb3c:	2310      	movs	r3, #16
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb42:	e216      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb44:	2320      	movs	r3, #32
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb4a:	e212      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb4c:	2340      	movs	r3, #64	@ 0x40
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb52:	e20e      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb54:	2380      	movs	r3, #128	@ 0x80
 800fb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb5a:	e20a      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a69      	ldr	r2, [pc, #420]	@ (800fd08 <UART_SetConfig+0x33c>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d130      	bne.n	800fbc8 <UART_SetConfig+0x1fc>
 800fb66:	4b67      	ldr	r3, [pc, #412]	@ (800fd04 <UART_SetConfig+0x338>)
 800fb68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb6a:	f003 0307 	and.w	r3, r3, #7
 800fb6e:	2b05      	cmp	r3, #5
 800fb70:	d826      	bhi.n	800fbc0 <UART_SetConfig+0x1f4>
 800fb72:	a201      	add	r2, pc, #4	@ (adr r2, 800fb78 <UART_SetConfig+0x1ac>)
 800fb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb78:	0800fb91 	.word	0x0800fb91
 800fb7c:	0800fb99 	.word	0x0800fb99
 800fb80:	0800fba1 	.word	0x0800fba1
 800fb84:	0800fba9 	.word	0x0800fba9
 800fb88:	0800fbb1 	.word	0x0800fbb1
 800fb8c:	0800fbb9 	.word	0x0800fbb9
 800fb90:	2300      	movs	r3, #0
 800fb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb96:	e1ec      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fb98:	2304      	movs	r3, #4
 800fb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9e:	e1e8      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fba0:	2308      	movs	r3, #8
 800fba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fba6:	e1e4      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fba8:	2310      	movs	r3, #16
 800fbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbae:	e1e0      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fbb0:	2320      	movs	r3, #32
 800fbb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbb6:	e1dc      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fbb8:	2340      	movs	r3, #64	@ 0x40
 800fbba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbbe:	e1d8      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fbc0:	2380      	movs	r3, #128	@ 0x80
 800fbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbc6:	e1d4      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a4f      	ldr	r2, [pc, #316]	@ (800fd0c <UART_SetConfig+0x340>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d130      	bne.n	800fc34 <UART_SetConfig+0x268>
 800fbd2:	4b4c      	ldr	r3, [pc, #304]	@ (800fd04 <UART_SetConfig+0x338>)
 800fbd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbd6:	f003 0307 	and.w	r3, r3, #7
 800fbda:	2b05      	cmp	r3, #5
 800fbdc:	d826      	bhi.n	800fc2c <UART_SetConfig+0x260>
 800fbde:	a201      	add	r2, pc, #4	@ (adr r2, 800fbe4 <UART_SetConfig+0x218>)
 800fbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe4:	0800fbfd 	.word	0x0800fbfd
 800fbe8:	0800fc05 	.word	0x0800fc05
 800fbec:	0800fc0d 	.word	0x0800fc0d
 800fbf0:	0800fc15 	.word	0x0800fc15
 800fbf4:	0800fc1d 	.word	0x0800fc1d
 800fbf8:	0800fc25 	.word	0x0800fc25
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc02:	e1b6      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc04:	2304      	movs	r3, #4
 800fc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc0a:	e1b2      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc0c:	2308      	movs	r3, #8
 800fc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc12:	e1ae      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc14:	2310      	movs	r3, #16
 800fc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc1a:	e1aa      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc1c:	2320      	movs	r3, #32
 800fc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc22:	e1a6      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc24:	2340      	movs	r3, #64	@ 0x40
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	e1a2      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc2c:	2380      	movs	r3, #128	@ 0x80
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc32:	e19e      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a35      	ldr	r2, [pc, #212]	@ (800fd10 <UART_SetConfig+0x344>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d130      	bne.n	800fca0 <UART_SetConfig+0x2d4>
 800fc3e:	4b31      	ldr	r3, [pc, #196]	@ (800fd04 <UART_SetConfig+0x338>)
 800fc40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc42:	f003 0307 	and.w	r3, r3, #7
 800fc46:	2b05      	cmp	r3, #5
 800fc48:	d826      	bhi.n	800fc98 <UART_SetConfig+0x2cc>
 800fc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800fc50 <UART_SetConfig+0x284>)
 800fc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc50:	0800fc69 	.word	0x0800fc69
 800fc54:	0800fc71 	.word	0x0800fc71
 800fc58:	0800fc79 	.word	0x0800fc79
 800fc5c:	0800fc81 	.word	0x0800fc81
 800fc60:	0800fc89 	.word	0x0800fc89
 800fc64:	0800fc91 	.word	0x0800fc91
 800fc68:	2300      	movs	r3, #0
 800fc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc6e:	e180      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc70:	2304      	movs	r3, #4
 800fc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc76:	e17c      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc78:	2308      	movs	r3, #8
 800fc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc7e:	e178      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc80:	2310      	movs	r3, #16
 800fc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc86:	e174      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc88:	2320      	movs	r3, #32
 800fc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc8e:	e170      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc90:	2340      	movs	r3, #64	@ 0x40
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc96:	e16c      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fc98:	2380      	movs	r3, #128	@ 0x80
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc9e:	e168      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a1b      	ldr	r2, [pc, #108]	@ (800fd14 <UART_SetConfig+0x348>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d142      	bne.n	800fd30 <UART_SetConfig+0x364>
 800fcaa:	4b16      	ldr	r3, [pc, #88]	@ (800fd04 <UART_SetConfig+0x338>)
 800fcac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcae:	f003 0307 	and.w	r3, r3, #7
 800fcb2:	2b05      	cmp	r3, #5
 800fcb4:	d838      	bhi.n	800fd28 <UART_SetConfig+0x35c>
 800fcb6:	a201      	add	r2, pc, #4	@ (adr r2, 800fcbc <UART_SetConfig+0x2f0>)
 800fcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcbc:	0800fcd5 	.word	0x0800fcd5
 800fcc0:	0800fcdd 	.word	0x0800fcdd
 800fcc4:	0800fce5 	.word	0x0800fce5
 800fcc8:	0800fced 	.word	0x0800fced
 800fccc:	0800fd19 	.word	0x0800fd19
 800fcd0:	0800fd21 	.word	0x0800fd21
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcda:	e14a      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fcdc:	2304      	movs	r3, #4
 800fcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fce2:	e146      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fce4:	2308      	movs	r3, #8
 800fce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcea:	e142      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fcec:	2310      	movs	r3, #16
 800fcee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcf2:	e13e      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fcf4:	cfff69f3 	.word	0xcfff69f3
 800fcf8:	58000c00 	.word	0x58000c00
 800fcfc:	11fff4ff 	.word	0x11fff4ff
 800fd00:	40011000 	.word	0x40011000
 800fd04:	58024400 	.word	0x58024400
 800fd08:	40004400 	.word	0x40004400
 800fd0c:	40004800 	.word	0x40004800
 800fd10:	40004c00 	.word	0x40004c00
 800fd14:	40005000 	.word	0x40005000
 800fd18:	2320      	movs	r3, #32
 800fd1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1e:	e128      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fd20:	2340      	movs	r3, #64	@ 0x40
 800fd22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd26:	e124      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fd28:	2380      	movs	r3, #128	@ 0x80
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2e:	e120      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	4acb      	ldr	r2, [pc, #812]	@ (8010064 <UART_SetConfig+0x698>)
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d176      	bne.n	800fe28 <UART_SetConfig+0x45c>
 800fd3a:	4bcb      	ldr	r3, [pc, #812]	@ (8010068 <UART_SetConfig+0x69c>)
 800fd3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fd42:	2b28      	cmp	r3, #40	@ 0x28
 800fd44:	d86c      	bhi.n	800fe20 <UART_SetConfig+0x454>
 800fd46:	a201      	add	r2, pc, #4	@ (adr r2, 800fd4c <UART_SetConfig+0x380>)
 800fd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4c:	0800fdf1 	.word	0x0800fdf1
 800fd50:	0800fe21 	.word	0x0800fe21
 800fd54:	0800fe21 	.word	0x0800fe21
 800fd58:	0800fe21 	.word	0x0800fe21
 800fd5c:	0800fe21 	.word	0x0800fe21
 800fd60:	0800fe21 	.word	0x0800fe21
 800fd64:	0800fe21 	.word	0x0800fe21
 800fd68:	0800fe21 	.word	0x0800fe21
 800fd6c:	0800fdf9 	.word	0x0800fdf9
 800fd70:	0800fe21 	.word	0x0800fe21
 800fd74:	0800fe21 	.word	0x0800fe21
 800fd78:	0800fe21 	.word	0x0800fe21
 800fd7c:	0800fe21 	.word	0x0800fe21
 800fd80:	0800fe21 	.word	0x0800fe21
 800fd84:	0800fe21 	.word	0x0800fe21
 800fd88:	0800fe21 	.word	0x0800fe21
 800fd8c:	0800fe01 	.word	0x0800fe01
 800fd90:	0800fe21 	.word	0x0800fe21
 800fd94:	0800fe21 	.word	0x0800fe21
 800fd98:	0800fe21 	.word	0x0800fe21
 800fd9c:	0800fe21 	.word	0x0800fe21
 800fda0:	0800fe21 	.word	0x0800fe21
 800fda4:	0800fe21 	.word	0x0800fe21
 800fda8:	0800fe21 	.word	0x0800fe21
 800fdac:	0800fe09 	.word	0x0800fe09
 800fdb0:	0800fe21 	.word	0x0800fe21
 800fdb4:	0800fe21 	.word	0x0800fe21
 800fdb8:	0800fe21 	.word	0x0800fe21
 800fdbc:	0800fe21 	.word	0x0800fe21
 800fdc0:	0800fe21 	.word	0x0800fe21
 800fdc4:	0800fe21 	.word	0x0800fe21
 800fdc8:	0800fe21 	.word	0x0800fe21
 800fdcc:	0800fe11 	.word	0x0800fe11
 800fdd0:	0800fe21 	.word	0x0800fe21
 800fdd4:	0800fe21 	.word	0x0800fe21
 800fdd8:	0800fe21 	.word	0x0800fe21
 800fddc:	0800fe21 	.word	0x0800fe21
 800fde0:	0800fe21 	.word	0x0800fe21
 800fde4:	0800fe21 	.word	0x0800fe21
 800fde8:	0800fe21 	.word	0x0800fe21
 800fdec:	0800fe19 	.word	0x0800fe19
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdf6:	e0bc      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fdf8:	2304      	movs	r3, #4
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdfe:	e0b8      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe00:	2308      	movs	r3, #8
 800fe02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe06:	e0b4      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe08:	2310      	movs	r3, #16
 800fe0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe0e:	e0b0      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe10:	2320      	movs	r3, #32
 800fe12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe16:	e0ac      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe18:	2340      	movs	r3, #64	@ 0x40
 800fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe1e:	e0a8      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe20:	2380      	movs	r3, #128	@ 0x80
 800fe22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe26:	e0a4      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a8f      	ldr	r2, [pc, #572]	@ (801006c <UART_SetConfig+0x6a0>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d130      	bne.n	800fe94 <UART_SetConfig+0x4c8>
 800fe32:	4b8d      	ldr	r3, [pc, #564]	@ (8010068 <UART_SetConfig+0x69c>)
 800fe34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe36:	f003 0307 	and.w	r3, r3, #7
 800fe3a:	2b05      	cmp	r3, #5
 800fe3c:	d826      	bhi.n	800fe8c <UART_SetConfig+0x4c0>
 800fe3e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe44 <UART_SetConfig+0x478>)
 800fe40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe44:	0800fe5d 	.word	0x0800fe5d
 800fe48:	0800fe65 	.word	0x0800fe65
 800fe4c:	0800fe6d 	.word	0x0800fe6d
 800fe50:	0800fe75 	.word	0x0800fe75
 800fe54:	0800fe7d 	.word	0x0800fe7d
 800fe58:	0800fe85 	.word	0x0800fe85
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe62:	e086      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe64:	2304      	movs	r3, #4
 800fe66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe6a:	e082      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe6c:	2308      	movs	r3, #8
 800fe6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe72:	e07e      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe74:	2310      	movs	r3, #16
 800fe76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe7a:	e07a      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe7c:	2320      	movs	r3, #32
 800fe7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe82:	e076      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe84:	2340      	movs	r3, #64	@ 0x40
 800fe86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe8a:	e072      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe8c:	2380      	movs	r3, #128	@ 0x80
 800fe8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe92:	e06e      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4a75      	ldr	r2, [pc, #468]	@ (8010070 <UART_SetConfig+0x6a4>)
 800fe9a:	4293      	cmp	r3, r2
 800fe9c:	d130      	bne.n	800ff00 <UART_SetConfig+0x534>
 800fe9e:	4b72      	ldr	r3, [pc, #456]	@ (8010068 <UART_SetConfig+0x69c>)
 800fea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fea2:	f003 0307 	and.w	r3, r3, #7
 800fea6:	2b05      	cmp	r3, #5
 800fea8:	d826      	bhi.n	800fef8 <UART_SetConfig+0x52c>
 800feaa:	a201      	add	r2, pc, #4	@ (adr r2, 800feb0 <UART_SetConfig+0x4e4>)
 800feac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feb0:	0800fec9 	.word	0x0800fec9
 800feb4:	0800fed1 	.word	0x0800fed1
 800feb8:	0800fed9 	.word	0x0800fed9
 800febc:	0800fee1 	.word	0x0800fee1
 800fec0:	0800fee9 	.word	0x0800fee9
 800fec4:	0800fef1 	.word	0x0800fef1
 800fec8:	2300      	movs	r3, #0
 800feca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fece:	e050      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fed0:	2304      	movs	r3, #4
 800fed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fed6:	e04c      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fed8:	2308      	movs	r3, #8
 800feda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fede:	e048      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fee0:	2310      	movs	r3, #16
 800fee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fee6:	e044      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fee8:	2320      	movs	r3, #32
 800feea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feee:	e040      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fef0:	2340      	movs	r3, #64	@ 0x40
 800fef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fef6:	e03c      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800fef8:	2380      	movs	r3, #128	@ 0x80
 800fefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fefe:	e038      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a5b      	ldr	r2, [pc, #364]	@ (8010074 <UART_SetConfig+0x6a8>)
 800ff06:	4293      	cmp	r3, r2
 800ff08:	d130      	bne.n	800ff6c <UART_SetConfig+0x5a0>
 800ff0a:	4b57      	ldr	r3, [pc, #348]	@ (8010068 <UART_SetConfig+0x69c>)
 800ff0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff0e:	f003 0307 	and.w	r3, r3, #7
 800ff12:	2b05      	cmp	r3, #5
 800ff14:	d826      	bhi.n	800ff64 <UART_SetConfig+0x598>
 800ff16:	a201      	add	r2, pc, #4	@ (adr r2, 800ff1c <UART_SetConfig+0x550>)
 800ff18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff1c:	0800ff35 	.word	0x0800ff35
 800ff20:	0800ff3d 	.word	0x0800ff3d
 800ff24:	0800ff45 	.word	0x0800ff45
 800ff28:	0800ff4d 	.word	0x0800ff4d
 800ff2c:	0800ff55 	.word	0x0800ff55
 800ff30:	0800ff5d 	.word	0x0800ff5d
 800ff34:	2302      	movs	r3, #2
 800ff36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff3a:	e01a      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff3c:	2304      	movs	r3, #4
 800ff3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff42:	e016      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff44:	2308      	movs	r3, #8
 800ff46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff4a:	e012      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff4c:	2310      	movs	r3, #16
 800ff4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff52:	e00e      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff54:	2320      	movs	r3, #32
 800ff56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff5a:	e00a      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff5c:	2340      	movs	r3, #64	@ 0x40
 800ff5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff62:	e006      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff64:	2380      	movs	r3, #128	@ 0x80
 800ff66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff6a:	e002      	b.n	800ff72 <UART_SetConfig+0x5a6>
 800ff6c:	2380      	movs	r3, #128	@ 0x80
 800ff6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a3f      	ldr	r2, [pc, #252]	@ (8010074 <UART_SetConfig+0x6a8>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	f040 80f8 	bne.w	801016e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ff7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff82:	2b20      	cmp	r3, #32
 800ff84:	dc46      	bgt.n	8010014 <UART_SetConfig+0x648>
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	f2c0 8082 	blt.w	8010090 <UART_SetConfig+0x6c4>
 800ff8c:	3b02      	subs	r3, #2
 800ff8e:	2b1e      	cmp	r3, #30
 800ff90:	d87e      	bhi.n	8010090 <UART_SetConfig+0x6c4>
 800ff92:	a201      	add	r2, pc, #4	@ (adr r2, 800ff98 <UART_SetConfig+0x5cc>)
 800ff94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff98:	0801001b 	.word	0x0801001b
 800ff9c:	08010091 	.word	0x08010091
 800ffa0:	08010023 	.word	0x08010023
 800ffa4:	08010091 	.word	0x08010091
 800ffa8:	08010091 	.word	0x08010091
 800ffac:	08010091 	.word	0x08010091
 800ffb0:	08010033 	.word	0x08010033
 800ffb4:	08010091 	.word	0x08010091
 800ffb8:	08010091 	.word	0x08010091
 800ffbc:	08010091 	.word	0x08010091
 800ffc0:	08010091 	.word	0x08010091
 800ffc4:	08010091 	.word	0x08010091
 800ffc8:	08010091 	.word	0x08010091
 800ffcc:	08010091 	.word	0x08010091
 800ffd0:	08010043 	.word	0x08010043
 800ffd4:	08010091 	.word	0x08010091
 800ffd8:	08010091 	.word	0x08010091
 800ffdc:	08010091 	.word	0x08010091
 800ffe0:	08010091 	.word	0x08010091
 800ffe4:	08010091 	.word	0x08010091
 800ffe8:	08010091 	.word	0x08010091
 800ffec:	08010091 	.word	0x08010091
 800fff0:	08010091 	.word	0x08010091
 800fff4:	08010091 	.word	0x08010091
 800fff8:	08010091 	.word	0x08010091
 800fffc:	08010091 	.word	0x08010091
 8010000:	08010091 	.word	0x08010091
 8010004:	08010091 	.word	0x08010091
 8010008:	08010091 	.word	0x08010091
 801000c:	08010091 	.word	0x08010091
 8010010:	08010083 	.word	0x08010083
 8010014:	2b40      	cmp	r3, #64	@ 0x40
 8010016:	d037      	beq.n	8010088 <UART_SetConfig+0x6bc>
 8010018:	e03a      	b.n	8010090 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801001a:	f7fd fc99 	bl	800d950 <HAL_RCCEx_GetD3PCLK1Freq>
 801001e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010020:	e03c      	b.n	801009c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd fca8 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801002c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010030:	e034      	b.n	801009c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010032:	f107 0318 	add.w	r3, r7, #24
 8010036:	4618      	mov	r0, r3
 8010038:	f7fd fdf4 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010040:	e02c      	b.n	801009c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010042:	4b09      	ldr	r3, [pc, #36]	@ (8010068 <UART_SetConfig+0x69c>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f003 0320 	and.w	r3, r3, #32
 801004a:	2b00      	cmp	r3, #0
 801004c:	d016      	beq.n	801007c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801004e:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <UART_SetConfig+0x69c>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	08db      	lsrs	r3, r3, #3
 8010054:	f003 0303 	and.w	r3, r3, #3
 8010058:	4a07      	ldr	r2, [pc, #28]	@ (8010078 <UART_SetConfig+0x6ac>)
 801005a:	fa22 f303 	lsr.w	r3, r2, r3
 801005e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010060:	e01c      	b.n	801009c <UART_SetConfig+0x6d0>
 8010062:	bf00      	nop
 8010064:	40011400 	.word	0x40011400
 8010068:	58024400 	.word	0x58024400
 801006c:	40007800 	.word	0x40007800
 8010070:	40007c00 	.word	0x40007c00
 8010074:	58000c00 	.word	0x58000c00
 8010078:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801007c:	4b9d      	ldr	r3, [pc, #628]	@ (80102f4 <UART_SetConfig+0x928>)
 801007e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010080:	e00c      	b.n	801009c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010082:	4b9d      	ldr	r3, [pc, #628]	@ (80102f8 <UART_SetConfig+0x92c>)
 8010084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010086:	e009      	b.n	801009c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010088:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801008c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801008e:	e005      	b.n	801009c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010090:	2300      	movs	r3, #0
 8010092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010094:	2301      	movs	r3, #1
 8010096:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801009a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801009c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801009e:	2b00      	cmp	r3, #0
 80100a0:	f000 81de 	beq.w	8010460 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100a8:	4a94      	ldr	r2, [pc, #592]	@ (80102fc <UART_SetConfig+0x930>)
 80100aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100ae:	461a      	mov	r2, r3
 80100b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80100b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	685a      	ldr	r2, [r3, #4]
 80100bc:	4613      	mov	r3, r2
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	4413      	add	r3, r2
 80100c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d305      	bcc.n	80100d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d903      	bls.n	80100dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80100d4:	2301      	movs	r3, #1
 80100d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80100da:	e1c1      	b.n	8010460 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100de:	2200      	movs	r2, #0
 80100e0:	60bb      	str	r3, [r7, #8]
 80100e2:	60fa      	str	r2, [r7, #12]
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100e8:	4a84      	ldr	r2, [pc, #528]	@ (80102fc <UART_SetConfig+0x930>)
 80100ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	2200      	movs	r2, #0
 80100f2:	603b      	str	r3, [r7, #0]
 80100f4:	607a      	str	r2, [r7, #4]
 80100f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80100fe:	f7f0 f947 	bl	8000390 <__aeabi_uldivmod>
 8010102:	4602      	mov	r2, r0
 8010104:	460b      	mov	r3, r1
 8010106:	4610      	mov	r0, r2
 8010108:	4619      	mov	r1, r3
 801010a:	f04f 0200 	mov.w	r2, #0
 801010e:	f04f 0300 	mov.w	r3, #0
 8010112:	020b      	lsls	r3, r1, #8
 8010114:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010118:	0202      	lsls	r2, r0, #8
 801011a:	6979      	ldr	r1, [r7, #20]
 801011c:	6849      	ldr	r1, [r1, #4]
 801011e:	0849      	lsrs	r1, r1, #1
 8010120:	2000      	movs	r0, #0
 8010122:	460c      	mov	r4, r1
 8010124:	4605      	mov	r5, r0
 8010126:	eb12 0804 	adds.w	r8, r2, r4
 801012a:	eb43 0905 	adc.w	r9, r3, r5
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	469a      	mov	sl, r3
 8010136:	4693      	mov	fp, r2
 8010138:	4652      	mov	r2, sl
 801013a:	465b      	mov	r3, fp
 801013c:	4640      	mov	r0, r8
 801013e:	4649      	mov	r1, r9
 8010140:	f7f0 f926 	bl	8000390 <__aeabi_uldivmod>
 8010144:	4602      	mov	r2, r0
 8010146:	460b      	mov	r3, r1
 8010148:	4613      	mov	r3, r2
 801014a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801014c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010152:	d308      	bcc.n	8010166 <UART_SetConfig+0x79a>
 8010154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801015a:	d204      	bcs.n	8010166 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010162:	60da      	str	r2, [r3, #12]
 8010164:	e17c      	b.n	8010460 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010166:	2301      	movs	r3, #1
 8010168:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801016c:	e178      	b.n	8010460 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	69db      	ldr	r3, [r3, #28]
 8010172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010176:	f040 80c5 	bne.w	8010304 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801017a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801017e:	2b20      	cmp	r3, #32
 8010180:	dc48      	bgt.n	8010214 <UART_SetConfig+0x848>
 8010182:	2b00      	cmp	r3, #0
 8010184:	db7b      	blt.n	801027e <UART_SetConfig+0x8b2>
 8010186:	2b20      	cmp	r3, #32
 8010188:	d879      	bhi.n	801027e <UART_SetConfig+0x8b2>
 801018a:	a201      	add	r2, pc, #4	@ (adr r2, 8010190 <UART_SetConfig+0x7c4>)
 801018c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010190:	0801021b 	.word	0x0801021b
 8010194:	08010223 	.word	0x08010223
 8010198:	0801027f 	.word	0x0801027f
 801019c:	0801027f 	.word	0x0801027f
 80101a0:	0801022b 	.word	0x0801022b
 80101a4:	0801027f 	.word	0x0801027f
 80101a8:	0801027f 	.word	0x0801027f
 80101ac:	0801027f 	.word	0x0801027f
 80101b0:	0801023b 	.word	0x0801023b
 80101b4:	0801027f 	.word	0x0801027f
 80101b8:	0801027f 	.word	0x0801027f
 80101bc:	0801027f 	.word	0x0801027f
 80101c0:	0801027f 	.word	0x0801027f
 80101c4:	0801027f 	.word	0x0801027f
 80101c8:	0801027f 	.word	0x0801027f
 80101cc:	0801027f 	.word	0x0801027f
 80101d0:	0801024b 	.word	0x0801024b
 80101d4:	0801027f 	.word	0x0801027f
 80101d8:	0801027f 	.word	0x0801027f
 80101dc:	0801027f 	.word	0x0801027f
 80101e0:	0801027f 	.word	0x0801027f
 80101e4:	0801027f 	.word	0x0801027f
 80101e8:	0801027f 	.word	0x0801027f
 80101ec:	0801027f 	.word	0x0801027f
 80101f0:	0801027f 	.word	0x0801027f
 80101f4:	0801027f 	.word	0x0801027f
 80101f8:	0801027f 	.word	0x0801027f
 80101fc:	0801027f 	.word	0x0801027f
 8010200:	0801027f 	.word	0x0801027f
 8010204:	0801027f 	.word	0x0801027f
 8010208:	0801027f 	.word	0x0801027f
 801020c:	0801027f 	.word	0x0801027f
 8010210:	08010271 	.word	0x08010271
 8010214:	2b40      	cmp	r3, #64	@ 0x40
 8010216:	d02e      	beq.n	8010276 <UART_SetConfig+0x8aa>
 8010218:	e031      	b.n	801027e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801021a:	f7fc f921 	bl	800c460 <HAL_RCC_GetPCLK1Freq>
 801021e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010220:	e033      	b.n	801028a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010222:	f7fc f933 	bl	800c48c <HAL_RCC_GetPCLK2Freq>
 8010226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010228:	e02f      	b.n	801028a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801022a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801022e:	4618      	mov	r0, r3
 8010230:	f7fd fba4 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010238:	e027      	b.n	801028a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801023a:	f107 0318 	add.w	r3, r7, #24
 801023e:	4618      	mov	r0, r3
 8010240:	f7fd fcf0 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010244:	69fb      	ldr	r3, [r7, #28]
 8010246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010248:	e01f      	b.n	801028a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801024a:	4b2d      	ldr	r3, [pc, #180]	@ (8010300 <UART_SetConfig+0x934>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f003 0320 	and.w	r3, r3, #32
 8010252:	2b00      	cmp	r3, #0
 8010254:	d009      	beq.n	801026a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010256:	4b2a      	ldr	r3, [pc, #168]	@ (8010300 <UART_SetConfig+0x934>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	08db      	lsrs	r3, r3, #3
 801025c:	f003 0303 	and.w	r3, r3, #3
 8010260:	4a24      	ldr	r2, [pc, #144]	@ (80102f4 <UART_SetConfig+0x928>)
 8010262:	fa22 f303 	lsr.w	r3, r2, r3
 8010266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010268:	e00f      	b.n	801028a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801026a:	4b22      	ldr	r3, [pc, #136]	@ (80102f4 <UART_SetConfig+0x928>)
 801026c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801026e:	e00c      	b.n	801028a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010270:	4b21      	ldr	r3, [pc, #132]	@ (80102f8 <UART_SetConfig+0x92c>)
 8010272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010274:	e009      	b.n	801028a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801027a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801027c:	e005      	b.n	801028a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801027e:	2300      	movs	r3, #0
 8010280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010282:	2301      	movs	r3, #1
 8010284:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801028a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801028c:	2b00      	cmp	r3, #0
 801028e:	f000 80e7 	beq.w	8010460 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010296:	4a19      	ldr	r2, [pc, #100]	@ (80102fc <UART_SetConfig+0x930>)
 8010298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801029c:	461a      	mov	r2, r3
 801029e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80102a4:	005a      	lsls	r2, r3, #1
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	085b      	lsrs	r3, r3, #1
 80102ac:	441a      	add	r2, r3
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ba:	2b0f      	cmp	r3, #15
 80102bc:	d916      	bls.n	80102ec <UART_SetConfig+0x920>
 80102be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102c4:	d212      	bcs.n	80102ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80102c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	f023 030f 	bic.w	r3, r3, #15
 80102ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80102d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d2:	085b      	lsrs	r3, r3, #1
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	f003 0307 	and.w	r3, r3, #7
 80102da:	b29a      	uxth	r2, r3
 80102dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80102de:	4313      	orrs	r3, r2
 80102e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80102e8:	60da      	str	r2, [r3, #12]
 80102ea:	e0b9      	b.n	8010460 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80102ec:	2301      	movs	r3, #1
 80102ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80102f2:	e0b5      	b.n	8010460 <UART_SetConfig+0xa94>
 80102f4:	03d09000 	.word	0x03d09000
 80102f8:	003d0900 	.word	0x003d0900
 80102fc:	08017860 	.word	0x08017860
 8010300:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010304:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010308:	2b20      	cmp	r3, #32
 801030a:	dc49      	bgt.n	80103a0 <UART_SetConfig+0x9d4>
 801030c:	2b00      	cmp	r3, #0
 801030e:	db7c      	blt.n	801040a <UART_SetConfig+0xa3e>
 8010310:	2b20      	cmp	r3, #32
 8010312:	d87a      	bhi.n	801040a <UART_SetConfig+0xa3e>
 8010314:	a201      	add	r2, pc, #4	@ (adr r2, 801031c <UART_SetConfig+0x950>)
 8010316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031a:	bf00      	nop
 801031c:	080103a7 	.word	0x080103a7
 8010320:	080103af 	.word	0x080103af
 8010324:	0801040b 	.word	0x0801040b
 8010328:	0801040b 	.word	0x0801040b
 801032c:	080103b7 	.word	0x080103b7
 8010330:	0801040b 	.word	0x0801040b
 8010334:	0801040b 	.word	0x0801040b
 8010338:	0801040b 	.word	0x0801040b
 801033c:	080103c7 	.word	0x080103c7
 8010340:	0801040b 	.word	0x0801040b
 8010344:	0801040b 	.word	0x0801040b
 8010348:	0801040b 	.word	0x0801040b
 801034c:	0801040b 	.word	0x0801040b
 8010350:	0801040b 	.word	0x0801040b
 8010354:	0801040b 	.word	0x0801040b
 8010358:	0801040b 	.word	0x0801040b
 801035c:	080103d7 	.word	0x080103d7
 8010360:	0801040b 	.word	0x0801040b
 8010364:	0801040b 	.word	0x0801040b
 8010368:	0801040b 	.word	0x0801040b
 801036c:	0801040b 	.word	0x0801040b
 8010370:	0801040b 	.word	0x0801040b
 8010374:	0801040b 	.word	0x0801040b
 8010378:	0801040b 	.word	0x0801040b
 801037c:	0801040b 	.word	0x0801040b
 8010380:	0801040b 	.word	0x0801040b
 8010384:	0801040b 	.word	0x0801040b
 8010388:	0801040b 	.word	0x0801040b
 801038c:	0801040b 	.word	0x0801040b
 8010390:	0801040b 	.word	0x0801040b
 8010394:	0801040b 	.word	0x0801040b
 8010398:	0801040b 	.word	0x0801040b
 801039c:	080103fd 	.word	0x080103fd
 80103a0:	2b40      	cmp	r3, #64	@ 0x40
 80103a2:	d02e      	beq.n	8010402 <UART_SetConfig+0xa36>
 80103a4:	e031      	b.n	801040a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103a6:	f7fc f85b 	bl	800c460 <HAL_RCC_GetPCLK1Freq>
 80103aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103ac:	e033      	b.n	8010416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80103ae:	f7fc f86d 	bl	800c48c <HAL_RCC_GetPCLK2Freq>
 80103b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103b4:	e02f      	b.n	8010416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fd fade 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103c4:	e027      	b.n	8010416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103c6:	f107 0318 	add.w	r3, r7, #24
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7fd fc2a 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80103d0:	69fb      	ldr	r3, [r7, #28]
 80103d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103d4:	e01f      	b.n	8010416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103d6:	4b2d      	ldr	r3, [pc, #180]	@ (801048c <UART_SetConfig+0xac0>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f003 0320 	and.w	r3, r3, #32
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d009      	beq.n	80103f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80103e2:	4b2a      	ldr	r3, [pc, #168]	@ (801048c <UART_SetConfig+0xac0>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	08db      	lsrs	r3, r3, #3
 80103e8:	f003 0303 	and.w	r3, r3, #3
 80103ec:	4a28      	ldr	r2, [pc, #160]	@ (8010490 <UART_SetConfig+0xac4>)
 80103ee:	fa22 f303 	lsr.w	r3, r2, r3
 80103f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80103f4:	e00f      	b.n	8010416 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80103f6:	4b26      	ldr	r3, [pc, #152]	@ (8010490 <UART_SetConfig+0xac4>)
 80103f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103fa:	e00c      	b.n	8010416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80103fc:	4b25      	ldr	r3, [pc, #148]	@ (8010494 <UART_SetConfig+0xac8>)
 80103fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010400:	e009      	b.n	8010416 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010408:	e005      	b.n	8010416 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801040a:	2300      	movs	r3, #0
 801040c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801040e:	2301      	movs	r3, #1
 8010410:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010414:	bf00      	nop
    }

    if (pclk != 0U)
 8010416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010418:	2b00      	cmp	r3, #0
 801041a:	d021      	beq.n	8010460 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010420:	4a1d      	ldr	r2, [pc, #116]	@ (8010498 <UART_SetConfig+0xacc>)
 8010422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010426:	461a      	mov	r2, r3
 8010428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801042a:	fbb3 f2f2 	udiv	r2, r3, r2
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	085b      	lsrs	r3, r3, #1
 8010434:	441a      	add	r2, r3
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	fbb2 f3f3 	udiv	r3, r2, r3
 801043e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010442:	2b0f      	cmp	r3, #15
 8010444:	d909      	bls.n	801045a <UART_SetConfig+0xa8e>
 8010446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801044c:	d205      	bcs.n	801045a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801044e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010450:	b29a      	uxth	r2, r3
 8010452:	697b      	ldr	r3, [r7, #20]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	60da      	str	r2, [r3, #12]
 8010458:	e002      	b.n	8010460 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801045a:	2301      	movs	r3, #1
 801045c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	2201      	movs	r2, #1
 8010464:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2201      	movs	r2, #1
 801046c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	2200      	movs	r2, #0
 8010474:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	2200      	movs	r2, #0
 801047a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801047c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010480:	4618      	mov	r0, r3
 8010482:	3748      	adds	r7, #72	@ 0x48
 8010484:	46bd      	mov	sp, r7
 8010486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801048a:	bf00      	nop
 801048c:	58024400 	.word	0x58024400
 8010490:	03d09000 	.word	0x03d09000
 8010494:	003d0900 	.word	0x003d0900
 8010498:	08017860 	.word	0x08017860

0801049c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801049c:	b480      	push	{r7}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104a8:	f003 0308 	and.w	r3, r3, #8
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d00a      	beq.n	80104c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	430a      	orrs	r2, r1
 80104c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ca:	f003 0301 	and.w	r3, r3, #1
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d00a      	beq.n	80104e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	430a      	orrs	r2, r1
 80104e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ec:	f003 0302 	and.w	r3, r3, #2
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00a      	beq.n	801050a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	430a      	orrs	r2, r1
 8010508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801050e:	f003 0304 	and.w	r3, r3, #4
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00a      	beq.n	801052c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	430a      	orrs	r2, r1
 801052a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010530:	f003 0310 	and.w	r3, r3, #16
 8010534:	2b00      	cmp	r3, #0
 8010536:	d00a      	beq.n	801054e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	689b      	ldr	r3, [r3, #8]
 801053e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	430a      	orrs	r2, r1
 801054c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010552:	f003 0320 	and.w	r3, r3, #32
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00a      	beq.n	8010570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	430a      	orrs	r2, r1
 801056e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010578:	2b00      	cmp	r3, #0
 801057a:	d01a      	beq.n	80105b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	430a      	orrs	r2, r1
 8010590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010596:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801059a:	d10a      	bne.n	80105b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	430a      	orrs	r2, r1
 80105b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d00a      	beq.n	80105d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	430a      	orrs	r2, r1
 80105d2:	605a      	str	r2, [r3, #4]
  }
}
 80105d4:	bf00      	nop
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b098      	sub	sp, #96	@ 0x60
 80105e4:	af02      	add	r7, sp, #8
 80105e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80105f0:	f7f4 fff4 	bl	80055dc <HAL_GetTick>
 80105f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f003 0308 	and.w	r3, r3, #8
 8010600:	2b08      	cmp	r3, #8
 8010602:	d12f      	bne.n	8010664 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010604:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801060c:	2200      	movs	r2, #0
 801060e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 f88e 	bl	8010734 <UART_WaitOnFlagUntilTimeout>
 8010618:	4603      	mov	r3, r0
 801061a:	2b00      	cmp	r3, #0
 801061c:	d022      	beq.n	8010664 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010626:	e853 3f00 	ldrex	r3, [r3]
 801062a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801062c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801062e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010632:	653b      	str	r3, [r7, #80]	@ 0x50
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	461a      	mov	r2, r3
 801063a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801063c:	647b      	str	r3, [r7, #68]	@ 0x44
 801063e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010644:	e841 2300 	strex	r3, r2, [r1]
 8010648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801064a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e6      	bne.n	801061e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2220      	movs	r2, #32
 8010654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010660:	2303      	movs	r3, #3
 8010662:	e063      	b.n	801072c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f003 0304 	and.w	r3, r3, #4
 801066e:	2b04      	cmp	r3, #4
 8010670:	d149      	bne.n	8010706 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010672:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801067a:	2200      	movs	r2, #0
 801067c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 f857 	bl	8010734 <UART_WaitOnFlagUntilTimeout>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d03c      	beq.n	8010706 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010694:	e853 3f00 	ldrex	r3, [r3]
 8010698:	623b      	str	r3, [r7, #32]
   return(result);
 801069a:	6a3b      	ldr	r3, [r7, #32]
 801069c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	461a      	mov	r2, r3
 80106a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80106ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106b2:	e841 2300 	strex	r3, r2, [r1]
 80106b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d1e6      	bne.n	801068c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3308      	adds	r3, #8
 80106c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	e853 3f00 	ldrex	r3, [r3]
 80106cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	f023 0301 	bic.w	r3, r3, #1
 80106d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	3308      	adds	r3, #8
 80106dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80106de:	61fa      	str	r2, [r7, #28]
 80106e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e2:	69b9      	ldr	r1, [r7, #24]
 80106e4:	69fa      	ldr	r2, [r7, #28]
 80106e6:	e841 2300 	strex	r3, r2, [r1]
 80106ea:	617b      	str	r3, [r7, #20]
   return(result);
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1e5      	bne.n	80106be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2220      	movs	r2, #32
 80106f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010702:	2303      	movs	r3, #3
 8010704:	e012      	b.n	801072c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2220      	movs	r2, #32
 801070a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2220      	movs	r2, #32
 8010712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	2200      	movs	r2, #0
 801071a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801072a:	2300      	movs	r3, #0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3758      	adds	r7, #88	@ 0x58
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b084      	sub	sp, #16
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	603b      	str	r3, [r7, #0]
 8010740:	4613      	mov	r3, r2
 8010742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010744:	e04f      	b.n	80107e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	f1b3 3fff 	cmp.w	r3, #4294967295
 801074c:	d04b      	beq.n	80107e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801074e:	f7f4 ff45 	bl	80055dc <HAL_GetTick>
 8010752:	4602      	mov	r2, r0
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	1ad3      	subs	r3, r2, r3
 8010758:	69ba      	ldr	r2, [r7, #24]
 801075a:	429a      	cmp	r2, r3
 801075c:	d302      	bcc.n	8010764 <UART_WaitOnFlagUntilTimeout+0x30>
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d101      	bne.n	8010768 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010764:	2303      	movs	r3, #3
 8010766:	e04e      	b.n	8010806 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f003 0304 	and.w	r3, r3, #4
 8010772:	2b00      	cmp	r3, #0
 8010774:	d037      	beq.n	80107e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	2b80      	cmp	r3, #128	@ 0x80
 801077a:	d034      	beq.n	80107e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	2b40      	cmp	r3, #64	@ 0x40
 8010780:	d031      	beq.n	80107e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	69db      	ldr	r3, [r3, #28]
 8010788:	f003 0308 	and.w	r3, r3, #8
 801078c:	2b08      	cmp	r3, #8
 801078e:	d110      	bne.n	80107b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2208      	movs	r2, #8
 8010796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010798:	68f8      	ldr	r0, [r7, #12]
 801079a:	f000 f95b 	bl	8010a54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2208      	movs	r2, #8
 80107a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2200      	movs	r2, #0
 80107aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e029      	b.n	8010806 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	69db      	ldr	r3, [r3, #28]
 80107b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107c0:	d111      	bne.n	80107e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80107ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	f000 f941 	bl	8010a54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2220      	movs	r2, #32
 80107d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2200      	movs	r2, #0
 80107de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80107e2:	2303      	movs	r3, #3
 80107e4:	e00f      	b.n	8010806 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	69da      	ldr	r2, [r3, #28]
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	4013      	ands	r3, r2
 80107f0:	68ba      	ldr	r2, [r7, #8]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	bf0c      	ite	eq
 80107f6:	2301      	moveq	r3, #1
 80107f8:	2300      	movne	r3, #0
 80107fa:	b2db      	uxtb	r3, r3
 80107fc:	461a      	mov	r2, r3
 80107fe:	79fb      	ldrb	r3, [r7, #7]
 8010800:	429a      	cmp	r2, r3
 8010802:	d0a0      	beq.n	8010746 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010804:	2300      	movs	r3, #0
}
 8010806:	4618      	mov	r0, r3
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
	...

08010810 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010810:	b480      	push	{r7}
 8010812:	b0a3      	sub	sp, #140	@ 0x8c
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	4613      	mov	r3, r2
 801081c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	88fa      	ldrh	r2, [r7, #6]
 8010828:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	88fa      	ldrh	r2, [r7, #6]
 8010830:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2200      	movs	r2, #0
 8010838:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010842:	d10e      	bne.n	8010862 <UART_Start_Receive_IT+0x52>
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d105      	bne.n	8010858 <UART_Start_Receive_IT+0x48>
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010852:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010856:	e02d      	b.n	80108b4 <UART_Start_Receive_IT+0xa4>
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	22ff      	movs	r2, #255	@ 0xff
 801085c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010860:	e028      	b.n	80108b4 <UART_Start_Receive_IT+0xa4>
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d10d      	bne.n	8010886 <UART_Start_Receive_IT+0x76>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	691b      	ldr	r3, [r3, #16]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d104      	bne.n	801087c <UART_Start_Receive_IT+0x6c>
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	22ff      	movs	r2, #255	@ 0xff
 8010876:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801087a:	e01b      	b.n	80108b4 <UART_Start_Receive_IT+0xa4>
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	227f      	movs	r2, #127	@ 0x7f
 8010880:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010884:	e016      	b.n	80108b4 <UART_Start_Receive_IT+0xa4>
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801088e:	d10d      	bne.n	80108ac <UART_Start_Receive_IT+0x9c>
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	691b      	ldr	r3, [r3, #16]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d104      	bne.n	80108a2 <UART_Start_Receive_IT+0x92>
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	227f      	movs	r2, #127	@ 0x7f
 801089c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80108a0:	e008      	b.n	80108b4 <UART_Start_Receive_IT+0xa4>
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	223f      	movs	r2, #63	@ 0x3f
 80108a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80108aa:	e003      	b.n	80108b4 <UART_Start_Receive_IT+0xa4>
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	2200      	movs	r2, #0
 80108b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2200      	movs	r2, #0
 80108b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2222      	movs	r2, #34	@ 0x22
 80108c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	3308      	adds	r3, #8
 80108ca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80108ce:	e853 3f00 	ldrex	r3, [r3]
 80108d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80108d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80108d6:	f043 0301 	orr.w	r3, r3, #1
 80108da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	3308      	adds	r3, #8
 80108e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80108e8:	673a      	str	r2, [r7, #112]	@ 0x70
 80108ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80108ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80108f0:	e841 2300 	strex	r3, r2, [r1]
 80108f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80108f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d1e3      	bne.n	80108c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010904:	d14f      	bne.n	80109a6 <UART_Start_Receive_IT+0x196>
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801090c:	88fa      	ldrh	r2, [r7, #6]
 801090e:	429a      	cmp	r2, r3
 8010910:	d349      	bcc.n	80109a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	689b      	ldr	r3, [r3, #8]
 8010916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801091a:	d107      	bne.n	801092c <UART_Start_Receive_IT+0x11c>
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	691b      	ldr	r3, [r3, #16]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d103      	bne.n	801092c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	4a47      	ldr	r2, [pc, #284]	@ (8010a44 <UART_Start_Receive_IT+0x234>)
 8010928:	675a      	str	r2, [r3, #116]	@ 0x74
 801092a:	e002      	b.n	8010932 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	4a46      	ldr	r2, [pc, #280]	@ (8010a48 <UART_Start_Receive_IT+0x238>)
 8010930:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	691b      	ldr	r3, [r3, #16]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d01a      	beq.n	8010970 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010942:	e853 3f00 	ldrex	r3, [r3]
 8010946:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801094a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801094e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	461a      	mov	r2, r3
 8010958:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801095c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801095e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010960:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010962:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010964:	e841 2300 	strex	r3, r2, [r1]
 8010968:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801096a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1e4      	bne.n	801093a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	3308      	adds	r3, #8
 8010976:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801097a:	e853 3f00 	ldrex	r3, [r3]
 801097e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010986:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	3308      	adds	r3, #8
 801098e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010990:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010992:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010994:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010998:	e841 2300 	strex	r3, r2, [r1]
 801099c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801099e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1e5      	bne.n	8010970 <UART_Start_Receive_IT+0x160>
 80109a4:	e046      	b.n	8010a34 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	689b      	ldr	r3, [r3, #8]
 80109aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109ae:	d107      	bne.n	80109c0 <UART_Start_Receive_IT+0x1b0>
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	691b      	ldr	r3, [r3, #16]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d103      	bne.n	80109c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	4a24      	ldr	r2, [pc, #144]	@ (8010a4c <UART_Start_Receive_IT+0x23c>)
 80109bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80109be:	e002      	b.n	80109c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	4a23      	ldr	r2, [pc, #140]	@ (8010a50 <UART_Start_Receive_IT+0x240>)
 80109c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	691b      	ldr	r3, [r3, #16]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d019      	beq.n	8010a02 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109d6:	e853 3f00 	ldrex	r3, [r3]
 80109da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80109dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109de:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80109e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	461a      	mov	r2, r3
 80109ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80109ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80109ee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80109f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109f4:	e841 2300 	strex	r3, r2, [r1]
 80109f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80109fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d1e6      	bne.n	80109ce <UART_Start_Receive_IT+0x1be>
 8010a00:	e018      	b.n	8010a34 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	e853 3f00 	ldrex	r3, [r3]
 8010a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	f043 0320 	orr.w	r3, r3, #32
 8010a16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010a20:	623b      	str	r3, [r7, #32]
 8010a22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a24:	69f9      	ldr	r1, [r7, #28]
 8010a26:	6a3a      	ldr	r2, [r7, #32]
 8010a28:	e841 2300 	strex	r3, r2, [r1]
 8010a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a2e:	69bb      	ldr	r3, [r7, #24]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1e6      	bne.n	8010a02 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	378c      	adds	r7, #140	@ 0x8c
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	08011275 	.word	0x08011275
 8010a48:	08010f15 	.word	0x08010f15
 8010a4c:	08010d5d 	.word	0x08010d5d
 8010a50:	08010ba5 	.word	0x08010ba5

08010a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b095      	sub	sp, #84	@ 0x54
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a64:	e853 3f00 	ldrex	r3, [r3]
 8010a68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	461a      	mov	r2, r3
 8010a78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010a80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010a82:	e841 2300 	strex	r3, r2, [r1]
 8010a86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d1e6      	bne.n	8010a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3308      	adds	r3, #8
 8010a94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	e853 3f00 	ldrex	r3, [r3]
 8010a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a9e:	69fa      	ldr	r2, [r7, #28]
 8010aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8010b1c <UART_EndRxTransfer+0xc8>)
 8010aa2:	4013      	ands	r3, r2
 8010aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	3308      	adds	r3, #8
 8010aac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ab6:	e841 2300 	strex	r3, r2, [r1]
 8010aba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1e5      	bne.n	8010a8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d118      	bne.n	8010afc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	e853 3f00 	ldrex	r3, [r3]
 8010ad6:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	f023 0310 	bic.w	r3, r3, #16
 8010ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ae8:	61bb      	str	r3, [r7, #24]
 8010aea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aec:	6979      	ldr	r1, [r7, #20]
 8010aee:	69ba      	ldr	r2, [r7, #24]
 8010af0:	e841 2300 	strex	r3, r2, [r1]
 8010af4:	613b      	str	r3, [r7, #16]
   return(result);
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d1e6      	bne.n	8010aca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2220      	movs	r2, #32
 8010b00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010b10:	bf00      	nop
 8010b12:	3754      	adds	r7, #84	@ 0x54
 8010b14:	46bd      	mov	sp, r7
 8010b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1a:	4770      	bx	lr
 8010b1c:	effffffe 	.word	0xeffffffe

08010b20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2200      	movs	r2, #0
 8010b32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f7fe ff2e 	bl	800f9a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b44:	bf00      	nop
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b088      	sub	sp, #32
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	e853 3f00 	ldrex	r3, [r3]
 8010b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b68:	61fb      	str	r3, [r7, #28]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	461a      	mov	r2, r3
 8010b70:	69fb      	ldr	r3, [r7, #28]
 8010b72:	61bb      	str	r3, [r7, #24]
 8010b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b76:	6979      	ldr	r1, [r7, #20]
 8010b78:	69ba      	ldr	r2, [r7, #24]
 8010b7a:	e841 2300 	strex	r3, r2, [r1]
 8010b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d1e6      	bne.n	8010b54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2220      	movs	r2, #32
 8010b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7fe feef 	bl	800f978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b9a:	bf00      	nop
 8010b9c:	3720      	adds	r7, #32
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
	...

08010ba4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b09c      	sub	sp, #112	@ 0x70
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010bb2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010bbc:	2b22      	cmp	r3, #34	@ 0x22
 8010bbe:	f040 80be 	bne.w	8010d3e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010bcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010bd0:	b2d9      	uxtb	r1, r3
 8010bd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010bd6:	b2da      	uxtb	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bdc:	400a      	ands	r2, r1
 8010bde:	b2d2      	uxtb	r2, r2
 8010be0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	3b01      	subs	r3, #1
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	f040 80a1 	bne.w	8010d4e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c14:	e853 3f00 	ldrex	r3, [r3]
 8010c18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	461a      	mov	r2, r3
 8010c28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010c32:	e841 2300 	strex	r3, r2, [r1]
 8010c36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1e6      	bne.n	8010c0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	3308      	adds	r3, #8
 8010c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c48:	e853 3f00 	ldrex	r3, [r3]
 8010c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c50:	f023 0301 	bic.w	r3, r3, #1
 8010c54:	667b      	str	r3, [r7, #100]	@ 0x64
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	3308      	adds	r3, #8
 8010c5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010c5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010c64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c66:	e841 2300 	strex	r3, r2, [r1]
 8010c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d1e5      	bne.n	8010c3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2220      	movs	r2, #32
 8010c76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	2200      	movs	r2, #0
 8010c84:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	4a33      	ldr	r2, [pc, #204]	@ (8010d58 <UART_RxISR_8BIT+0x1b4>)
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d01f      	beq.n	8010cd0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	685b      	ldr	r3, [r3, #4]
 8010c96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d018      	beq.n	8010cd0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca6:	e853 3f00 	ldrex	r3, [r3]
 8010caa:	623b      	str	r3, [r7, #32]
   return(result);
 8010cac:	6a3b      	ldr	r3, [r7, #32]
 8010cae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010cb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	461a      	mov	r2, r3
 8010cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8010cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010cc4:	e841 2300 	strex	r3, r2, [r1]
 8010cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d1e6      	bne.n	8010c9e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cd4:	2b01      	cmp	r3, #1
 8010cd6:	d12e      	bne.n	8010d36 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	e853 3f00 	ldrex	r3, [r3]
 8010cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f023 0310 	bic.w	r3, r3, #16
 8010cf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010cfc:	61fb      	str	r3, [r7, #28]
 8010cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d00:	69b9      	ldr	r1, [r7, #24]
 8010d02:	69fa      	ldr	r2, [r7, #28]
 8010d04:	e841 2300 	strex	r3, r2, [r1]
 8010d08:	617b      	str	r3, [r7, #20]
   return(result);
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d1e6      	bne.n	8010cde <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	69db      	ldr	r3, [r3, #28]
 8010d16:	f003 0310 	and.w	r3, r3, #16
 8010d1a:	2b10      	cmp	r3, #16
 8010d1c:	d103      	bne.n	8010d26 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2210      	movs	r2, #16
 8010d24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f7fe fe40 	bl	800f9b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d34:	e00b      	b.n	8010d4e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f7fe fe28 	bl	800f98c <HAL_UART_RxCpltCallback>
}
 8010d3c:	e007      	b.n	8010d4e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	699a      	ldr	r2, [r3, #24]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	f042 0208 	orr.w	r2, r2, #8
 8010d4c:	619a      	str	r2, [r3, #24]
}
 8010d4e:	bf00      	nop
 8010d50:	3770      	adds	r7, #112	@ 0x70
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	58000c00 	.word	0x58000c00

08010d5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b09c      	sub	sp, #112	@ 0x70
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010d6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d74:	2b22      	cmp	r3, #34	@ 0x22
 8010d76:	f040 80be 	bne.w	8010ef6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d88:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010d8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8010d8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010d92:	4013      	ands	r3, r2
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010d98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010d9e:	1c9a      	adds	r2, r3, #2
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	3b01      	subs	r3, #1
 8010dae:	b29a      	uxth	r2, r3
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f040 80a1 	bne.w	8010f06 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010dcc:	e853 3f00 	ldrex	r3, [r3]
 8010dd0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	461a      	mov	r2, r3
 8010de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010de2:	657b      	str	r3, [r7, #84]	@ 0x54
 8010de4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010de8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010dea:	e841 2300 	strex	r3, r2, [r1]
 8010dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1e6      	bne.n	8010dc4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	3308      	adds	r3, #8
 8010dfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e00:	e853 3f00 	ldrex	r3, [r3]
 8010e04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e08:	f023 0301 	bic.w	r3, r3, #1
 8010e0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	3308      	adds	r3, #8
 8010e14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010e16:	643a      	str	r2, [r7, #64]	@ 0x40
 8010e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010e1e:	e841 2300 	strex	r3, r2, [r1]
 8010e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d1e5      	bne.n	8010df6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2220      	movs	r2, #32
 8010e2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2200      	movs	r2, #0
 8010e36:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4a33      	ldr	r2, [pc, #204]	@ (8010f10 <UART_RxISR_16BIT+0x1b4>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d01f      	beq.n	8010e88 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d018      	beq.n	8010e88 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e5c:	6a3b      	ldr	r3, [r7, #32]
 8010e5e:	e853 3f00 	ldrex	r3, [r3]
 8010e62:	61fb      	str	r3, [r7, #28]
   return(result);
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8010e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	461a      	mov	r2, r3
 8010e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e76:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e7c:	e841 2300 	strex	r3, r2, [r1]
 8010e80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d1e6      	bne.n	8010e56 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d12e      	bne.n	8010eee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	e853 3f00 	ldrex	r3, [r3]
 8010ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	f023 0310 	bic.w	r3, r3, #16
 8010eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010eb4:	61bb      	str	r3, [r7, #24]
 8010eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb8:	6979      	ldr	r1, [r7, #20]
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	e841 2300 	strex	r3, r2, [r1]
 8010ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d1e6      	bne.n	8010e96 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	69db      	ldr	r3, [r3, #28]
 8010ece:	f003 0310 	and.w	r3, r3, #16
 8010ed2:	2b10      	cmp	r3, #16
 8010ed4:	d103      	bne.n	8010ede <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2210      	movs	r2, #16
 8010edc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7fe fd64 	bl	800f9b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010eec:	e00b      	b.n	8010f06 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f7fe fd4c 	bl	800f98c <HAL_UART_RxCpltCallback>
}
 8010ef4:	e007      	b.n	8010f06 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	699a      	ldr	r2, [r3, #24]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f042 0208 	orr.w	r2, r2, #8
 8010f04:	619a      	str	r2, [r3, #24]
}
 8010f06:	bf00      	nop
 8010f08:	3770      	adds	r7, #112	@ 0x70
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	58000c00 	.word	0x58000c00

08010f14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b0ac      	sub	sp, #176	@ 0xb0
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f22:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	69db      	ldr	r3, [r3, #28]
 8010f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010f4a:	2b22      	cmp	r3, #34	@ 0x22
 8010f4c:	f040 8180 	bne.w	8011250 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010f56:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010f5a:	e123      	b.n	80111a4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f62:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010f66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8010f6a:	b2d9      	uxtb	r1, r3
 8010f6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f76:	400a      	ands	r2, r1
 8010f78:	b2d2      	uxtb	r2, r2
 8010f7a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f80:	1c5a      	adds	r2, r3, #1
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	3b01      	subs	r3, #1
 8010f90:	b29a      	uxth	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	69db      	ldr	r3, [r3, #28]
 8010f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fa6:	f003 0307 	and.w	r3, r3, #7
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d053      	beq.n	8011056 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010fae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fb2:	f003 0301 	and.w	r3, r3, #1
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d011      	beq.n	8010fde <UART_RxISR_8BIT_FIFOEN+0xca>
 8010fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d00b      	beq.n	8010fde <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010fd4:	f043 0201 	orr.w	r2, r3, #1
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fe2:	f003 0302 	and.w	r3, r3, #2
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d011      	beq.n	801100e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010fee:	f003 0301 	and.w	r3, r3, #1
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d00b      	beq.n	801100e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2202      	movs	r2, #2
 8010ffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011004:	f043 0204 	orr.w	r2, r3, #4
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801100e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011012:	f003 0304 	and.w	r3, r3, #4
 8011016:	2b00      	cmp	r3, #0
 8011018:	d011      	beq.n	801103e <UART_RxISR_8BIT_FIFOEN+0x12a>
 801101a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801101e:	f003 0301 	and.w	r3, r3, #1
 8011022:	2b00      	cmp	r3, #0
 8011024:	d00b      	beq.n	801103e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2204      	movs	r2, #4
 801102c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011034:	f043 0202 	orr.w	r2, r3, #2
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011044:	2b00      	cmp	r3, #0
 8011046:	d006      	beq.n	8011056 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f7fe fca9 	bl	800f9a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801105c:	b29b      	uxth	r3, r3
 801105e:	2b00      	cmp	r3, #0
 8011060:	f040 80a0 	bne.w	80111a4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801106a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801106c:	e853 3f00 	ldrex	r3, [r3]
 8011070:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8011072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	461a      	mov	r2, r3
 8011082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011086:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011088:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801108a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801108c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801108e:	e841 2300 	strex	r3, r2, [r1]
 8011092:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8011094:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011096:	2b00      	cmp	r3, #0
 8011098:	d1e4      	bne.n	8011064 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	3308      	adds	r3, #8
 80110a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110a4:	e853 3f00 	ldrex	r3, [r3]
 80110a8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80110aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80110ac:	4b6e      	ldr	r3, [pc, #440]	@ (8011268 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80110ae:	4013      	ands	r3, r2
 80110b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	3308      	adds	r3, #8
 80110ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80110be:	66ba      	str	r2, [r7, #104]	@ 0x68
 80110c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110c2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80110c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80110c6:	e841 2300 	strex	r3, r2, [r1]
 80110ca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80110cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1e3      	bne.n	801109a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2220      	movs	r2, #32
 80110d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2200      	movs	r2, #0
 80110de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2200      	movs	r2, #0
 80110e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a60      	ldr	r2, [pc, #384]	@ (801126c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d021      	beq.n	8011134 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	685b      	ldr	r3, [r3, #4]
 80110f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d01a      	beq.n	8011134 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011106:	e853 3f00 	ldrex	r3, [r3]
 801110a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801110c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801110e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011112:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	461a      	mov	r2, r3
 801111c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011120:	657b      	str	r3, [r7, #84]	@ 0x54
 8011122:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011124:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011126:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011128:	e841 2300 	strex	r3, r2, [r1]
 801112c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801112e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1e4      	bne.n	80110fe <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011138:	2b01      	cmp	r3, #1
 801113a:	d130      	bne.n	801119e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2200      	movs	r2, #0
 8011140:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801114a:	e853 3f00 	ldrex	r3, [r3]
 801114e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011152:	f023 0310 	bic.w	r3, r3, #16
 8011156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	461a      	mov	r2, r3
 8011160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011164:	643b      	str	r3, [r7, #64]	@ 0x40
 8011166:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011168:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801116a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801116c:	e841 2300 	strex	r3, r2, [r1]
 8011170:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011174:	2b00      	cmp	r3, #0
 8011176:	d1e4      	bne.n	8011142 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	69db      	ldr	r3, [r3, #28]
 801117e:	f003 0310 	and.w	r3, r3, #16
 8011182:	2b10      	cmp	r3, #16
 8011184:	d103      	bne.n	801118e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2210      	movs	r2, #16
 801118c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f7fe fc0c 	bl	800f9b4 <HAL_UARTEx_RxEventCallback>
 801119c:	e002      	b.n	80111a4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7fe fbf4 	bl	800f98c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80111a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d006      	beq.n	80111ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80111ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111b0:	f003 0320 	and.w	r3, r3, #32
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	f47f aed1 	bne.w	8010f5c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80111c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80111c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d049      	beq.n	8011260 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80111d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d242      	bcs.n	8011260 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	3308      	adds	r3, #8
 80111e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e2:	6a3b      	ldr	r3, [r7, #32]
 80111e4:	e853 3f00 	ldrex	r3, [r3]
 80111e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	3308      	adds	r3, #8
 80111fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80111fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011206:	e841 2300 	strex	r3, r2, [r1]
 801120a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120e:	2b00      	cmp	r3, #0
 8011210:	d1e3      	bne.n	80111da <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4a16      	ldr	r2, [pc, #88]	@ (8011270 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011216:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	e853 3f00 	ldrex	r3, [r3]
 8011224:	60bb      	str	r3, [r7, #8]
   return(result);
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	f043 0320 	orr.w	r3, r3, #32
 801122c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	461a      	mov	r2, r3
 8011236:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801123a:	61bb      	str	r3, [r7, #24]
 801123c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801123e:	6979      	ldr	r1, [r7, #20]
 8011240:	69ba      	ldr	r2, [r7, #24]
 8011242:	e841 2300 	strex	r3, r2, [r1]
 8011246:	613b      	str	r3, [r7, #16]
   return(result);
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d1e4      	bne.n	8011218 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801124e:	e007      	b.n	8011260 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	699a      	ldr	r2, [r3, #24]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f042 0208 	orr.w	r2, r2, #8
 801125e:	619a      	str	r2, [r3, #24]
}
 8011260:	bf00      	nop
 8011262:	37b0      	adds	r7, #176	@ 0xb0
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	effffffe 	.word	0xeffffffe
 801126c:	58000c00 	.word	0x58000c00
 8011270:	08010ba5 	.word	0x08010ba5

08011274 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b0ae      	sub	sp, #184	@ 0xb8
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011282:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	69db      	ldr	r3, [r3, #28]
 801128c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80112aa:	2b22      	cmp	r3, #34	@ 0x22
 80112ac:	f040 8184 	bne.w	80115b8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80112b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80112ba:	e127      	b.n	801150c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80112ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80112d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80112d6:	4013      	ands	r3, r2
 80112d8:	b29a      	uxth	r2, r3
 80112da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80112de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80112e4:	1c9a      	adds	r2, r3, #2
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	3b01      	subs	r3, #1
 80112f4:	b29a      	uxth	r2, r3
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	69db      	ldr	r3, [r3, #28]
 8011302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801130a:	f003 0307 	and.w	r3, r3, #7
 801130e:	2b00      	cmp	r3, #0
 8011310:	d053      	beq.n	80113ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011316:	f003 0301 	and.w	r3, r3, #1
 801131a:	2b00      	cmp	r3, #0
 801131c:	d011      	beq.n	8011342 <UART_RxISR_16BIT_FIFOEN+0xce>
 801131e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00b      	beq.n	8011342 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	2201      	movs	r2, #1
 8011330:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011338:	f043 0201 	orr.w	r2, r3, #1
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011346:	f003 0302 	and.w	r3, r3, #2
 801134a:	2b00      	cmp	r3, #0
 801134c:	d011      	beq.n	8011372 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801134e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011352:	f003 0301 	and.w	r3, r3, #1
 8011356:	2b00      	cmp	r3, #0
 8011358:	d00b      	beq.n	8011372 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2202      	movs	r2, #2
 8011360:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011368:	f043 0204 	orr.w	r2, r3, #4
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011376:	f003 0304 	and.w	r3, r3, #4
 801137a:	2b00      	cmp	r3, #0
 801137c:	d011      	beq.n	80113a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801137e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011382:	f003 0301 	and.w	r3, r3, #1
 8011386:	2b00      	cmp	r3, #0
 8011388:	d00b      	beq.n	80113a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	2204      	movs	r2, #4
 8011390:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011398:	f043 0202 	orr.w	r2, r3, #2
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d006      	beq.n	80113ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f7fe faf7 	bl	800f9a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2200      	movs	r2, #0
 80113b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f040 80a2 	bne.w	801150c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113d0:	e853 3f00 	ldrex	r3, [r3]
 80113d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80113d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80113d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80113dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	461a      	mov	r2, r3
 80113e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80113ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80113ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80113f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80113f6:	e841 2300 	strex	r3, r2, [r1]
 80113fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80113fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1e2      	bne.n	80113c8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	3308      	adds	r3, #8
 8011408:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801140a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801140c:	e853 3f00 	ldrex	r3, [r3]
 8011410:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011412:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011414:	4b6e      	ldr	r3, [pc, #440]	@ (80115d0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011416:	4013      	ands	r3, r2
 8011418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	3308      	adds	r3, #8
 8011422:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011426:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011428:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801142a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801142c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801142e:	e841 2300 	strex	r3, r2, [r1]
 8011432:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1e3      	bne.n	8011402 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2220      	movs	r2, #32
 801143e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2200      	movs	r2, #0
 801144c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	4a60      	ldr	r2, [pc, #384]	@ (80115d4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d021      	beq.n	801149c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011462:	2b00      	cmp	r3, #0
 8011464:	d01a      	beq.n	801149c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801146c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801146e:	e853 3f00 	ldrex	r3, [r3]
 8011472:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011476:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801147a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	461a      	mov	r2, r3
 8011484:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011488:	65bb      	str	r3, [r7, #88]	@ 0x58
 801148a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801148c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801148e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011490:	e841 2300 	strex	r3, r2, [r1]
 8011494:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011498:	2b00      	cmp	r3, #0
 801149a:	d1e4      	bne.n	8011466 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d130      	bne.n	8011506 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114b2:	e853 3f00 	ldrex	r3, [r3]
 80114b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80114b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114ba:	f023 0310 	bic.w	r3, r3, #16
 80114be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	461a      	mov	r2, r3
 80114c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80114cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80114ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80114d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80114d4:	e841 2300 	strex	r3, r2, [r1]
 80114d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80114da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d1e4      	bne.n	80114aa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	69db      	ldr	r3, [r3, #28]
 80114e6:	f003 0310 	and.w	r3, r3, #16
 80114ea:	2b10      	cmp	r3, #16
 80114ec:	d103      	bne.n	80114f6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2210      	movs	r2, #16
 80114f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80114fc:	4619      	mov	r1, r3
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f7fe fa58 	bl	800f9b4 <HAL_UARTEx_RxEventCallback>
 8011504:	e002      	b.n	801150c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f7fe fa40 	bl	800f98c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801150c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011510:	2b00      	cmp	r3, #0
 8011512:	d006      	beq.n	8011522 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8011514:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011518:	f003 0320 	and.w	r3, r3, #32
 801151c:	2b00      	cmp	r3, #0
 801151e:	f47f aecd 	bne.w	80112bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011528:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801152c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011530:	2b00      	cmp	r3, #0
 8011532:	d049      	beq.n	80115c8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801153a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801153e:	429a      	cmp	r2, r3
 8011540:	d242      	bcs.n	80115c8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	3308      	adds	r3, #8
 8011548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154c:	e853 3f00 	ldrex	r3, [r3]
 8011550:	623b      	str	r3, [r7, #32]
   return(result);
 8011552:	6a3b      	ldr	r3, [r7, #32]
 8011554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	3308      	adds	r3, #8
 8011562:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011566:	633a      	str	r2, [r7, #48]	@ 0x30
 8011568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801156a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801156c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801156e:	e841 2300 	strex	r3, r2, [r1]
 8011572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011576:	2b00      	cmp	r3, #0
 8011578:	d1e3      	bne.n	8011542 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4a16      	ldr	r2, [pc, #88]	@ (80115d8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801157e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	e853 3f00 	ldrex	r3, [r3]
 801158c:	60fb      	str	r3, [r7, #12]
   return(result);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f043 0320 	orr.w	r3, r3, #32
 8011594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	461a      	mov	r2, r3
 801159e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80115a2:	61fb      	str	r3, [r7, #28]
 80115a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a6:	69b9      	ldr	r1, [r7, #24]
 80115a8:	69fa      	ldr	r2, [r7, #28]
 80115aa:	e841 2300 	strex	r3, r2, [r1]
 80115ae:	617b      	str	r3, [r7, #20]
   return(result);
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d1e4      	bne.n	8011580 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80115b6:	e007      	b.n	80115c8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	699a      	ldr	r2, [r3, #24]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	f042 0208 	orr.w	r2, r2, #8
 80115c6:	619a      	str	r2, [r3, #24]
}
 80115c8:	bf00      	nop
 80115ca:	37b8      	adds	r7, #184	@ 0xb8
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	effffffe 	.word	0xeffffffe
 80115d4:	58000c00 	.word	0x58000c00
 80115d8:	08010d5d 	.word	0x08010d5d

080115dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80115e4:	bf00      	nop
 80115e6:	370c      	adds	r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr

080115f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80115f8:	bf00      	nop
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801160c:	bf00      	nop
 801160e:	370c      	adds	r7, #12
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr

08011618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011618:	b480      	push	{r7}
 801161a:	b085      	sub	sp, #20
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011626:	2b01      	cmp	r3, #1
 8011628:	d101      	bne.n	801162e <HAL_UARTEx_DisableFifoMode+0x16>
 801162a:	2302      	movs	r3, #2
 801162c:	e027      	b.n	801167e <HAL_UARTEx_DisableFifoMode+0x66>
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2201      	movs	r2, #1
 8011632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2224      	movs	r2, #36	@ 0x24
 801163a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f022 0201 	bic.w	r2, r2, #1
 8011654:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801165c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2200      	movs	r2, #0
 8011662:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2220      	movs	r2, #32
 8011670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	2200      	movs	r2, #0
 8011678:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801167c:	2300      	movs	r3, #0
}
 801167e:	4618      	mov	r0, r3
 8011680:	3714      	adds	r7, #20
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr

0801168a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b084      	sub	sp, #16
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801169a:	2b01      	cmp	r3, #1
 801169c:	d101      	bne.n	80116a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801169e:	2302      	movs	r3, #2
 80116a0:	e02d      	b.n	80116fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2201      	movs	r2, #1
 80116a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2224      	movs	r2, #36	@ 0x24
 80116ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f022 0201 	bic.w	r2, r2, #1
 80116c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	689b      	ldr	r3, [r3, #8]
 80116d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	430a      	orrs	r2, r1
 80116dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f000 f850 	bl	8011784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2220      	movs	r2, #32
 80116f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2200      	movs	r2, #0
 80116f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80116fc:	2300      	movs	r3, #0
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3710      	adds	r7, #16
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}

08011706 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011706:	b580      	push	{r7, lr}
 8011708:	b084      	sub	sp, #16
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011716:	2b01      	cmp	r3, #1
 8011718:	d101      	bne.n	801171e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801171a:	2302      	movs	r3, #2
 801171c:	e02d      	b.n	801177a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2201      	movs	r2, #1
 8011722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2224      	movs	r2, #36	@ 0x24
 801172a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f022 0201 	bic.w	r2, r2, #1
 8011744:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	683a      	ldr	r2, [r7, #0]
 8011756:	430a      	orrs	r2, r1
 8011758:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f000 f812 	bl	8011784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	68fa      	ldr	r2, [r7, #12]
 8011766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2220      	movs	r2, #32
 801176c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2200      	movs	r2, #0
 8011774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011778:	2300      	movs	r3, #0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
	...

08011784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011784:	b480      	push	{r7}
 8011786:	b085      	sub	sp, #20
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011790:	2b00      	cmp	r3, #0
 8011792:	d108      	bne.n	80117a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2201      	movs	r2, #1
 8011798:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2201      	movs	r2, #1
 80117a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80117a4:	e031      	b.n	801180a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80117a6:	2310      	movs	r3, #16
 80117a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80117aa:	2310      	movs	r3, #16
 80117ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	689b      	ldr	r3, [r3, #8]
 80117b4:	0e5b      	lsrs	r3, r3, #25
 80117b6:	b2db      	uxtb	r3, r3
 80117b8:	f003 0307 	and.w	r3, r3, #7
 80117bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	0f5b      	lsrs	r3, r3, #29
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	f003 0307 	and.w	r3, r3, #7
 80117cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80117ce:	7bbb      	ldrb	r3, [r7, #14]
 80117d0:	7b3a      	ldrb	r2, [r7, #12]
 80117d2:	4911      	ldr	r1, [pc, #68]	@ (8011818 <UARTEx_SetNbDataToProcess+0x94>)
 80117d4:	5c8a      	ldrb	r2, [r1, r2]
 80117d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80117da:	7b3a      	ldrb	r2, [r7, #12]
 80117dc:	490f      	ldr	r1, [pc, #60]	@ (801181c <UARTEx_SetNbDataToProcess+0x98>)
 80117de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80117e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80117ec:	7bfb      	ldrb	r3, [r7, #15]
 80117ee:	7b7a      	ldrb	r2, [r7, #13]
 80117f0:	4909      	ldr	r1, [pc, #36]	@ (8011818 <UARTEx_SetNbDataToProcess+0x94>)
 80117f2:	5c8a      	ldrb	r2, [r1, r2]
 80117f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80117f8:	7b7a      	ldrb	r2, [r7, #13]
 80117fa:	4908      	ldr	r1, [pc, #32]	@ (801181c <UARTEx_SetNbDataToProcess+0x98>)
 80117fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80117fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801180a:	bf00      	nop
 801180c:	3714      	adds	r7, #20
 801180e:	46bd      	mov	sp, r7
 8011810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011814:	4770      	bx	lr
 8011816:	bf00      	nop
 8011818:	08017878 	.word	0x08017878
 801181c:	08017880 	.word	0x08017880

08011820 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	4603      	mov	r3, r0
 8011828:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801182a:	2300      	movs	r3, #0
 801182c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801182e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011832:	2b84      	cmp	r3, #132	@ 0x84
 8011834:	d005      	beq.n	8011842 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011836:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	4413      	add	r3, r2
 801183e:	3303      	adds	r3, #3
 8011840:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011842:	68fb      	ldr	r3, [r7, #12]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3714      	adds	r7, #20
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr

08011850 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011854:	f000 fefe 	bl	8012654 <vTaskStartScheduler>
  
  return osOK;
 8011858:	2300      	movs	r3, #0
}
 801185a:	4618      	mov	r0, r3
 801185c:	bd80      	pop	{r7, pc}

0801185e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801185e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011860:	b089      	sub	sp, #36	@ 0x24
 8011862:	af04      	add	r7, sp, #16
 8011864:	6078      	str	r0, [r7, #4]
 8011866:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	695b      	ldr	r3, [r3, #20]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d020      	beq.n	80118b2 <osThreadCreate+0x54>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	699b      	ldr	r3, [r3, #24]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d01c      	beq.n	80118b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685c      	ldr	r4, [r3, #4]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	691e      	ldr	r6, [r3, #16]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801188a:	4618      	mov	r0, r3
 801188c:	f7ff ffc8 	bl	8011820 <makeFreeRtosPriority>
 8011890:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	695b      	ldr	r3, [r3, #20]
 8011896:	687a      	ldr	r2, [r7, #4]
 8011898:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801189a:	9202      	str	r2, [sp, #8]
 801189c:	9301      	str	r3, [sp, #4]
 801189e:	9100      	str	r1, [sp, #0]
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	4632      	mov	r2, r6
 80118a4:	4629      	mov	r1, r5
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 fcee 	bl	8012288 <xTaskCreateStatic>
 80118ac:	4603      	mov	r3, r0
 80118ae:	60fb      	str	r3, [r7, #12]
 80118b0:	e01c      	b.n	80118ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	685c      	ldr	r4, [r3, #4]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80118be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80118c6:	4618      	mov	r0, r3
 80118c8:	f7ff ffaa 	bl	8011820 <makeFreeRtosPriority>
 80118cc:	4602      	mov	r2, r0
 80118ce:	f107 030c 	add.w	r3, r7, #12
 80118d2:	9301      	str	r3, [sp, #4]
 80118d4:	9200      	str	r2, [sp, #0]
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	4632      	mov	r2, r6
 80118da:	4629      	mov	r1, r5
 80118dc:	4620      	mov	r0, r4
 80118de:	f000 fd33 	bl	8012348 <xTaskCreate>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	d001      	beq.n	80118ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80118e8:	2300      	movs	r3, #0
 80118ea:	e000      	b.n	80118ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80118ec:	68fb      	ldr	r3, [r7, #12]
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3714      	adds	r7, #20
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b084      	sub	sp, #16
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d001      	beq.n	801190c <osDelay+0x16>
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	e000      	b.n	801190e <osDelay+0x18>
 801190c:	2301      	movs	r3, #1
 801190e:	4618      	mov	r0, r3
 8011910:	f000 fe6a 	bl	80125e8 <vTaskDelay>
  
  return osOK;
 8011914:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011916:	4618      	mov	r0, r3
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
	...

08011920 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b08a      	sub	sp, #40	@ 0x28
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011928:	2300      	movs	r3, #0
 801192a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801192c:	f000 fefc 	bl	8012728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011930:	4b5c      	ldr	r3, [pc, #368]	@ (8011aa4 <pvPortMalloc+0x184>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d101      	bne.n	801193c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011938:	f000 f924 	bl	8011b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801193c:	4b5a      	ldr	r3, [pc, #360]	@ (8011aa8 <pvPortMalloc+0x188>)
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	4013      	ands	r3, r2
 8011944:	2b00      	cmp	r3, #0
 8011946:	f040 8095 	bne.w	8011a74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d01e      	beq.n	801198e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011950:	2208      	movs	r2, #8
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	4413      	add	r3, r2
 8011956:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f003 0307 	and.w	r3, r3, #7
 801195e:	2b00      	cmp	r3, #0
 8011960:	d015      	beq.n	801198e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f023 0307 	bic.w	r3, r3, #7
 8011968:	3308      	adds	r3, #8
 801196a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f003 0307 	and.w	r3, r3, #7
 8011972:	2b00      	cmp	r3, #0
 8011974:	d00b      	beq.n	801198e <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801197a:	f383 8811 	msr	BASEPRI, r3
 801197e:	f3bf 8f6f 	isb	sy
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011988:	bf00      	nop
 801198a:	bf00      	nop
 801198c:	e7fd      	b.n	801198a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d06f      	beq.n	8011a74 <pvPortMalloc+0x154>
 8011994:	4b45      	ldr	r3, [pc, #276]	@ (8011aac <pvPortMalloc+0x18c>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	687a      	ldr	r2, [r7, #4]
 801199a:	429a      	cmp	r2, r3
 801199c:	d86a      	bhi.n	8011a74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801199e:	4b44      	ldr	r3, [pc, #272]	@ (8011ab0 <pvPortMalloc+0x190>)
 80119a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119a2:	4b43      	ldr	r3, [pc, #268]	@ (8011ab0 <pvPortMalloc+0x190>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119a8:	e004      	b.n	80119b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80119aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80119ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d903      	bls.n	80119c6 <pvPortMalloc+0xa6>
 80119be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d1f1      	bne.n	80119aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80119c6:	4b37      	ldr	r3, [pc, #220]	@ (8011aa4 <pvPortMalloc+0x184>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d051      	beq.n	8011a74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80119d0:	6a3b      	ldr	r3, [r7, #32]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2208      	movs	r2, #8
 80119d6:	4413      	add	r3, r2
 80119d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80119da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	6a3b      	ldr	r3, [r7, #32]
 80119e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80119e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e4:	685a      	ldr	r2, [r3, #4]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	1ad2      	subs	r2, r2, r3
 80119ea:	2308      	movs	r3, #8
 80119ec:	005b      	lsls	r3, r3, #1
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d920      	bls.n	8011a34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80119f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4413      	add	r3, r2
 80119f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119fa:	69bb      	ldr	r3, [r7, #24]
 80119fc:	f003 0307 	and.w	r3, r3, #7
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00b      	beq.n	8011a1c <pvPortMalloc+0xfc>
	__asm volatile
 8011a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a08:	f383 8811 	msr	BASEPRI, r3
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f3bf 8f4f 	dsb	sy
 8011a14:	613b      	str	r3, [r7, #16]
}
 8011a16:	bf00      	nop
 8011a18:	bf00      	nop
 8011a1a:	e7fd      	b.n	8011a18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a1e:	685a      	ldr	r2, [r3, #4]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	1ad2      	subs	r2, r2, r3
 8011a24:	69bb      	ldr	r3, [r7, #24]
 8011a26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a2e:	69b8      	ldr	r0, [r7, #24]
 8011a30:	f000 f90a 	bl	8011c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a34:	4b1d      	ldr	r3, [pc, #116]	@ (8011aac <pvPortMalloc+0x18c>)
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	1ad3      	subs	r3, r2, r3
 8011a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8011aac <pvPortMalloc+0x18c>)
 8011a40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a42:	4b1a      	ldr	r3, [pc, #104]	@ (8011aac <pvPortMalloc+0x18c>)
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	4b1b      	ldr	r3, [pc, #108]	@ (8011ab4 <pvPortMalloc+0x194>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d203      	bcs.n	8011a56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011a4e:	4b17      	ldr	r3, [pc, #92]	@ (8011aac <pvPortMalloc+0x18c>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	4a18      	ldr	r2, [pc, #96]	@ (8011ab4 <pvPortMalloc+0x194>)
 8011a54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a58:	685a      	ldr	r2, [r3, #4]
 8011a5a:	4b13      	ldr	r3, [pc, #76]	@ (8011aa8 <pvPortMalloc+0x188>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	431a      	orrs	r2, r3
 8011a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a66:	2200      	movs	r2, #0
 8011a68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011a6a:	4b13      	ldr	r3, [pc, #76]	@ (8011ab8 <pvPortMalloc+0x198>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	4a11      	ldr	r2, [pc, #68]	@ (8011ab8 <pvPortMalloc+0x198>)
 8011a72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011a74:	f000 fe66 	bl	8012744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	f003 0307 	and.w	r3, r3, #7
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d00b      	beq.n	8011a9a <pvPortMalloc+0x17a>
	__asm volatile
 8011a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a86:	f383 8811 	msr	BASEPRI, r3
 8011a8a:	f3bf 8f6f 	isb	sy
 8011a8e:	f3bf 8f4f 	dsb	sy
 8011a92:	60fb      	str	r3, [r7, #12]
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop
 8011a98:	e7fd      	b.n	8011a96 <pvPortMalloc+0x176>
	return pvReturn;
 8011a9a:	69fb      	ldr	r3, [r7, #28]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3728      	adds	r7, #40	@ 0x28
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	2407562c 	.word	0x2407562c
 8011aa8:	24075640 	.word	0x24075640
 8011aac:	24075630 	.word	0x24075630
 8011ab0:	24075624 	.word	0x24075624
 8011ab4:	24075634 	.word	0x24075634
 8011ab8:	24075638 	.word	0x24075638

08011abc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b086      	sub	sp, #24
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d04f      	beq.n	8011b6e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011ace:	2308      	movs	r3, #8
 8011ad0:	425b      	negs	r3, r3
 8011ad2:	697a      	ldr	r2, [r7, #20]
 8011ad4:	4413      	add	r3, r2
 8011ad6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	685a      	ldr	r2, [r3, #4]
 8011ae0:	4b25      	ldr	r3, [pc, #148]	@ (8011b78 <vPortFree+0xbc>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d10b      	bne.n	8011b02 <vPortFree+0x46>
	__asm volatile
 8011aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aee:	f383 8811 	msr	BASEPRI, r3
 8011af2:	f3bf 8f6f 	isb	sy
 8011af6:	f3bf 8f4f 	dsb	sy
 8011afa:	60fb      	str	r3, [r7, #12]
}
 8011afc:	bf00      	nop
 8011afe:	bf00      	nop
 8011b00:	e7fd      	b.n	8011afe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d00b      	beq.n	8011b22 <vPortFree+0x66>
	__asm volatile
 8011b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b0e:	f383 8811 	msr	BASEPRI, r3
 8011b12:	f3bf 8f6f 	isb	sy
 8011b16:	f3bf 8f4f 	dsb	sy
 8011b1a:	60bb      	str	r3, [r7, #8]
}
 8011b1c:	bf00      	nop
 8011b1e:	bf00      	nop
 8011b20:	e7fd      	b.n	8011b1e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	685a      	ldr	r2, [r3, #4]
 8011b26:	4b14      	ldr	r3, [pc, #80]	@ (8011b78 <vPortFree+0xbc>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d01e      	beq.n	8011b6e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d11a      	bne.n	8011b6e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	685a      	ldr	r2, [r3, #4]
 8011b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8011b78 <vPortFree+0xbc>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	43db      	mvns	r3, r3
 8011b42:	401a      	ands	r2, r3
 8011b44:	693b      	ldr	r3, [r7, #16]
 8011b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b48:	f000 fdee 	bl	8012728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	685a      	ldr	r2, [r3, #4]
 8011b50:	4b0a      	ldr	r3, [pc, #40]	@ (8011b7c <vPortFree+0xc0>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4413      	add	r3, r2
 8011b56:	4a09      	ldr	r2, [pc, #36]	@ (8011b7c <vPortFree+0xc0>)
 8011b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011b5a:	6938      	ldr	r0, [r7, #16]
 8011b5c:	f000 f874 	bl	8011c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011b60:	4b07      	ldr	r3, [pc, #28]	@ (8011b80 <vPortFree+0xc4>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	3301      	adds	r3, #1
 8011b66:	4a06      	ldr	r2, [pc, #24]	@ (8011b80 <vPortFree+0xc4>)
 8011b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011b6a:	f000 fdeb 	bl	8012744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011b6e:	bf00      	nop
 8011b70:	3718      	adds	r7, #24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	24075640 	.word	0x24075640
 8011b7c:	24075630 	.word	0x24075630
 8011b80:	2407563c 	.word	0x2407563c

08011b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011b84:	b480      	push	{r7}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011b8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8011b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011b90:	4b27      	ldr	r3, [pc, #156]	@ (8011c30 <prvHeapInit+0xac>)
 8011b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f003 0307 	and.w	r3, r3, #7
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00c      	beq.n	8011bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	3307      	adds	r3, #7
 8011ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	f023 0307 	bic.w	r3, r3, #7
 8011baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bac:	68ba      	ldr	r2, [r7, #8]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8011c30 <prvHeapInit+0xac>)
 8011bb4:	4413      	add	r3, r2
 8011bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8011c34 <prvHeapInit+0xb0>)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8011c34 <prvHeapInit+0xb0>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	4413      	add	r3, r2
 8011bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011bd0:	2208      	movs	r2, #8
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	1a9b      	subs	r3, r3, r2
 8011bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	f023 0307 	bic.w	r3, r3, #7
 8011bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	4a15      	ldr	r2, [pc, #84]	@ (8011c38 <prvHeapInit+0xb4>)
 8011be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011be6:	4b14      	ldr	r3, [pc, #80]	@ (8011c38 <prvHeapInit+0xb4>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2200      	movs	r2, #0
 8011bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011bee:	4b12      	ldr	r3, [pc, #72]	@ (8011c38 <prvHeapInit+0xb4>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	1ad2      	subs	r2, r2, r3
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c04:	4b0c      	ldr	r3, [pc, #48]	@ (8011c38 <prvHeapInit+0xb4>)
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	4a0a      	ldr	r2, [pc, #40]	@ (8011c3c <prvHeapInit+0xb8>)
 8011c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	4a09      	ldr	r2, [pc, #36]	@ (8011c40 <prvHeapInit+0xbc>)
 8011c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c1c:	4b09      	ldr	r3, [pc, #36]	@ (8011c44 <prvHeapInit+0xc0>)
 8011c1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011c22:	601a      	str	r2, [r3, #0]
}
 8011c24:	bf00      	nop
 8011c26:	3714      	adds	r7, #20
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	24071a24 	.word	0x24071a24
 8011c34:	24075624 	.word	0x24075624
 8011c38:	2407562c 	.word	0x2407562c
 8011c3c:	24075634 	.word	0x24075634
 8011c40:	24075630 	.word	0x24075630
 8011c44:	24075640 	.word	0x24075640

08011c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011c50:	4b28      	ldr	r3, [pc, #160]	@ (8011cf4 <prvInsertBlockIntoFreeList+0xac>)
 8011c52:	60fb      	str	r3, [r7, #12]
 8011c54:	e002      	b.n	8011c5c <prvInsertBlockIntoFreeList+0x14>
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d8f7      	bhi.n	8011c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	4413      	add	r3, r2
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d108      	bne.n	8011c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	685a      	ldr	r2, [r3, #4]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	441a      	add	r2, r3
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	68ba      	ldr	r2, [r7, #8]
 8011c94:	441a      	add	r2, r3
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d118      	bne.n	8011cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	4b15      	ldr	r3, [pc, #84]	@ (8011cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d00d      	beq.n	8011cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685a      	ldr	r2, [r3, #4]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	441a      	add	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	e008      	b.n	8011cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	e003      	b.n	8011cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011cd8:	68fa      	ldr	r2, [r7, #12]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d002      	beq.n	8011ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ce6:	bf00      	nop
 8011ce8:	3714      	adds	r7, #20
 8011cea:	46bd      	mov	sp, r7
 8011cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf0:	4770      	bx	lr
 8011cf2:	bf00      	nop
 8011cf4:	24075624 	.word	0x24075624
 8011cf8:	2407562c 	.word	0x2407562c

08011cfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b083      	sub	sp, #12
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f103 0208 	add.w	r2, r3, #8
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f04f 32ff 	mov.w	r2, #4294967295
 8011d14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f103 0208 	add.w	r2, r3, #8
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f103 0208 	add.w	r2, r3, #8
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011d30:	bf00      	nop
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011d4a:	bf00      	nop
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d54:	4770      	bx	lr

08011d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d56:	b480      	push	{r7}
 8011d58:	b085      	sub	sp, #20
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
 8011d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	689a      	ldr	r2, [r3, #8]
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	689b      	ldr	r3, [r3, #8]
 8011d78:	683a      	ldr	r2, [r7, #0]
 8011d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	683a      	ldr	r2, [r7, #0]
 8011d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	1c5a      	adds	r2, r3, #1
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	601a      	str	r2, [r3, #0]
}
 8011d92:	bf00      	nop
 8011d94:	3714      	adds	r7, #20
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr

08011d9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011d9e:	b480      	push	{r7}
 8011da0:	b085      	sub	sp, #20
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	6078      	str	r0, [r7, #4]
 8011da6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011db4:	d103      	bne.n	8011dbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	691b      	ldr	r3, [r3, #16]
 8011dba:	60fb      	str	r3, [r7, #12]
 8011dbc:	e00c      	b.n	8011dd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	3308      	adds	r3, #8
 8011dc2:	60fb      	str	r3, [r7, #12]
 8011dc4:	e002      	b.n	8011dcc <vListInsert+0x2e>
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	60fb      	str	r3, [r7, #12]
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	68ba      	ldr	r2, [r7, #8]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d2f6      	bcs.n	8011dc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	685a      	ldr	r2, [r3, #4]
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	683a      	ldr	r2, [r7, #0]
 8011df2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	687a      	ldr	r2, [r7, #4]
 8011df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	1c5a      	adds	r2, r3, #1
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	601a      	str	r2, [r3, #0]
}
 8011e04:	bf00      	nop
 8011e06:	3714      	adds	r7, #20
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011e10:	b480      	push	{r7}
 8011e12:	b085      	sub	sp, #20
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	691b      	ldr	r3, [r3, #16]
 8011e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	6892      	ldr	r2, [r2, #8]
 8011e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	687a      	ldr	r2, [r7, #4]
 8011e2e:	6852      	ldr	r2, [r2, #4]
 8011e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d103      	bne.n	8011e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	689a      	ldr	r2, [r3, #8]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2200      	movs	r2, #0
 8011e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	1e5a      	subs	r2, r3, #1
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681b      	ldr	r3, [r3, #0]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3714      	adds	r7, #20
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr

08011e64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011e64:	b480      	push	{r7}
 8011e66:	b085      	sub	sp, #20
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	60f8      	str	r0, [r7, #12]
 8011e6c:	60b9      	str	r1, [r7, #8]
 8011e6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	3b04      	subs	r3, #4
 8011e74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	3b04      	subs	r3, #4
 8011e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	f023 0201 	bic.w	r2, r3, #1
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	3b04      	subs	r3, #4
 8011e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011e94:	4a0c      	ldr	r2, [pc, #48]	@ (8011ec8 <pxPortInitialiseStack+0x64>)
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	3b14      	subs	r3, #20
 8011e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	3b04      	subs	r3, #4
 8011eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	f06f 0202 	mvn.w	r2, #2
 8011eb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	3b20      	subs	r3, #32
 8011eb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011eba:	68fb      	ldr	r3, [r7, #12]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3714      	adds	r7, #20
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec6:	4770      	bx	lr
 8011ec8:	08011ecd 	.word	0x08011ecd

08011ecc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011ed6:	4b13      	ldr	r3, [pc, #76]	@ (8011f24 <prvTaskExitError+0x58>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ede:	d00b      	beq.n	8011ef8 <prvTaskExitError+0x2c>
	__asm volatile
 8011ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	60fb      	str	r3, [r7, #12]
}
 8011ef2:	bf00      	nop
 8011ef4:	bf00      	nop
 8011ef6:	e7fd      	b.n	8011ef4 <prvTaskExitError+0x28>
	__asm volatile
 8011ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011efc:	f383 8811 	msr	BASEPRI, r3
 8011f00:	f3bf 8f6f 	isb	sy
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	60bb      	str	r3, [r7, #8]
}
 8011f0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f0c:	bf00      	nop
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d0fc      	beq.n	8011f0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f14:	bf00      	nop
 8011f16:	bf00      	nop
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	2400003c 	.word	0x2400003c
	...

08011f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f30:	4b07      	ldr	r3, [pc, #28]	@ (8011f50 <pxCurrentTCBConst2>)
 8011f32:	6819      	ldr	r1, [r3, #0]
 8011f34:	6808      	ldr	r0, [r1, #0]
 8011f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3a:	f380 8809 	msr	PSP, r0
 8011f3e:	f3bf 8f6f 	isb	sy
 8011f42:	f04f 0000 	mov.w	r0, #0
 8011f46:	f380 8811 	msr	BASEPRI, r0
 8011f4a:	4770      	bx	lr
 8011f4c:	f3af 8000 	nop.w

08011f50 <pxCurrentTCBConst2>:
 8011f50:	2407564c 	.word	0x2407564c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011f54:	bf00      	nop
 8011f56:	bf00      	nop

08011f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011f58:	4808      	ldr	r0, [pc, #32]	@ (8011f7c <prvPortStartFirstTask+0x24>)
 8011f5a:	6800      	ldr	r0, [r0, #0]
 8011f5c:	6800      	ldr	r0, [r0, #0]
 8011f5e:	f380 8808 	msr	MSP, r0
 8011f62:	f04f 0000 	mov.w	r0, #0
 8011f66:	f380 8814 	msr	CONTROL, r0
 8011f6a:	b662      	cpsie	i
 8011f6c:	b661      	cpsie	f
 8011f6e:	f3bf 8f4f 	dsb	sy
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	df00      	svc	0
 8011f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011f7a:	bf00      	nop
 8011f7c:	e000ed08 	.word	0xe000ed08

08011f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b086      	sub	sp, #24
 8011f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011f86:	4b47      	ldr	r3, [pc, #284]	@ (80120a4 <xPortStartScheduler+0x124>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4a47      	ldr	r2, [pc, #284]	@ (80120a8 <xPortStartScheduler+0x128>)
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	d10b      	bne.n	8011fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8011f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f94:	f383 8811 	msr	BASEPRI, r3
 8011f98:	f3bf 8f6f 	isb	sy
 8011f9c:	f3bf 8f4f 	dsb	sy
 8011fa0:	613b      	str	r3, [r7, #16]
}
 8011fa2:	bf00      	nop
 8011fa4:	bf00      	nop
 8011fa6:	e7fd      	b.n	8011fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80120a4 <xPortStartScheduler+0x124>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	4a3f      	ldr	r2, [pc, #252]	@ (80120ac <xPortStartScheduler+0x12c>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d10b      	bne.n	8011fca <xPortStartScheduler+0x4a>
	__asm volatile
 8011fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb6:	f383 8811 	msr	BASEPRI, r3
 8011fba:	f3bf 8f6f 	isb	sy
 8011fbe:	f3bf 8f4f 	dsb	sy
 8011fc2:	60fb      	str	r3, [r7, #12]
}
 8011fc4:	bf00      	nop
 8011fc6:	bf00      	nop
 8011fc8:	e7fd      	b.n	8011fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011fca:	4b39      	ldr	r3, [pc, #228]	@ (80120b0 <xPortStartScheduler+0x130>)
 8011fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	22ff      	movs	r2, #255	@ 0xff
 8011fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011fe4:	78fb      	ldrb	r3, [r7, #3]
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011fec:	b2da      	uxtb	r2, r3
 8011fee:	4b31      	ldr	r3, [pc, #196]	@ (80120b4 <xPortStartScheduler+0x134>)
 8011ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011ff2:	4b31      	ldr	r3, [pc, #196]	@ (80120b8 <xPortStartScheduler+0x138>)
 8011ff4:	2207      	movs	r2, #7
 8011ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011ff8:	e009      	b.n	801200e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80120b8 <xPortStartScheduler+0x138>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	3b01      	subs	r3, #1
 8012000:	4a2d      	ldr	r2, [pc, #180]	@ (80120b8 <xPortStartScheduler+0x138>)
 8012002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012004:	78fb      	ldrb	r3, [r7, #3]
 8012006:	b2db      	uxtb	r3, r3
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	b2db      	uxtb	r3, r3
 801200c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801200e:	78fb      	ldrb	r3, [r7, #3]
 8012010:	b2db      	uxtb	r3, r3
 8012012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012016:	2b80      	cmp	r3, #128	@ 0x80
 8012018:	d0ef      	beq.n	8011ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801201a:	4b27      	ldr	r3, [pc, #156]	@ (80120b8 <xPortStartScheduler+0x138>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f1c3 0307 	rsb	r3, r3, #7
 8012022:	2b04      	cmp	r3, #4
 8012024:	d00b      	beq.n	801203e <xPortStartScheduler+0xbe>
	__asm volatile
 8012026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801202a:	f383 8811 	msr	BASEPRI, r3
 801202e:	f3bf 8f6f 	isb	sy
 8012032:	f3bf 8f4f 	dsb	sy
 8012036:	60bb      	str	r3, [r7, #8]
}
 8012038:	bf00      	nop
 801203a:	bf00      	nop
 801203c:	e7fd      	b.n	801203a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801203e:	4b1e      	ldr	r3, [pc, #120]	@ (80120b8 <xPortStartScheduler+0x138>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	021b      	lsls	r3, r3, #8
 8012044:	4a1c      	ldr	r2, [pc, #112]	@ (80120b8 <xPortStartScheduler+0x138>)
 8012046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012048:	4b1b      	ldr	r3, [pc, #108]	@ (80120b8 <xPortStartScheduler+0x138>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012050:	4a19      	ldr	r2, [pc, #100]	@ (80120b8 <xPortStartScheduler+0x138>)
 8012052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	b2da      	uxtb	r2, r3
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801205c:	4b17      	ldr	r3, [pc, #92]	@ (80120bc <xPortStartScheduler+0x13c>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4a16      	ldr	r2, [pc, #88]	@ (80120bc <xPortStartScheduler+0x13c>)
 8012062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012068:	4b14      	ldr	r3, [pc, #80]	@ (80120bc <xPortStartScheduler+0x13c>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	4a13      	ldr	r2, [pc, #76]	@ (80120bc <xPortStartScheduler+0x13c>)
 801206e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012074:	f000 f8da 	bl	801222c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012078:	4b11      	ldr	r3, [pc, #68]	@ (80120c0 <xPortStartScheduler+0x140>)
 801207a:	2200      	movs	r2, #0
 801207c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801207e:	f000 f8f9 	bl	8012274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012082:	4b10      	ldr	r3, [pc, #64]	@ (80120c4 <xPortStartScheduler+0x144>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4a0f      	ldr	r2, [pc, #60]	@ (80120c4 <xPortStartScheduler+0x144>)
 8012088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801208c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801208e:	f7ff ff63 	bl	8011f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012092:	f000 fcaf 	bl	80129f4 <vTaskSwitchContext>
	prvTaskExitError();
 8012096:	f7ff ff19 	bl	8011ecc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	e000ed00 	.word	0xe000ed00
 80120a8:	410fc271 	.word	0x410fc271
 80120ac:	410fc270 	.word	0x410fc270
 80120b0:	e000e400 	.word	0xe000e400
 80120b4:	24075644 	.word	0x24075644
 80120b8:	24075648 	.word	0x24075648
 80120bc:	e000ed20 	.word	0xe000ed20
 80120c0:	2400003c 	.word	0x2400003c
 80120c4:	e000ef34 	.word	0xe000ef34

080120c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
	__asm volatile
 80120ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	607b      	str	r3, [r7, #4]
}
 80120e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80120e2:	4b10      	ldr	r3, [pc, #64]	@ (8012124 <vPortEnterCritical+0x5c>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	3301      	adds	r3, #1
 80120e8:	4a0e      	ldr	r2, [pc, #56]	@ (8012124 <vPortEnterCritical+0x5c>)
 80120ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80120ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012124 <vPortEnterCritical+0x5c>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d110      	bne.n	8012116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80120f4:	4b0c      	ldr	r3, [pc, #48]	@ (8012128 <vPortEnterCritical+0x60>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d00b      	beq.n	8012116 <vPortEnterCritical+0x4e>
	__asm volatile
 80120fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012102:	f383 8811 	msr	BASEPRI, r3
 8012106:	f3bf 8f6f 	isb	sy
 801210a:	f3bf 8f4f 	dsb	sy
 801210e:	603b      	str	r3, [r7, #0]
}
 8012110:	bf00      	nop
 8012112:	bf00      	nop
 8012114:	e7fd      	b.n	8012112 <vPortEnterCritical+0x4a>
	}
}
 8012116:	bf00      	nop
 8012118:	370c      	adds	r7, #12
 801211a:	46bd      	mov	sp, r7
 801211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012120:	4770      	bx	lr
 8012122:	bf00      	nop
 8012124:	2400003c 	.word	0x2400003c
 8012128:	e000ed04 	.word	0xe000ed04

0801212c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801212c:	b480      	push	{r7}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012132:	4b12      	ldr	r3, [pc, #72]	@ (801217c <vPortExitCritical+0x50>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d10b      	bne.n	8012152 <vPortExitCritical+0x26>
	__asm volatile
 801213a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801213e:	f383 8811 	msr	BASEPRI, r3
 8012142:	f3bf 8f6f 	isb	sy
 8012146:	f3bf 8f4f 	dsb	sy
 801214a:	607b      	str	r3, [r7, #4]
}
 801214c:	bf00      	nop
 801214e:	bf00      	nop
 8012150:	e7fd      	b.n	801214e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012152:	4b0a      	ldr	r3, [pc, #40]	@ (801217c <vPortExitCritical+0x50>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	3b01      	subs	r3, #1
 8012158:	4a08      	ldr	r2, [pc, #32]	@ (801217c <vPortExitCritical+0x50>)
 801215a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801215c:	4b07      	ldr	r3, [pc, #28]	@ (801217c <vPortExitCritical+0x50>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d105      	bne.n	8012170 <vPortExitCritical+0x44>
 8012164:	2300      	movs	r3, #0
 8012166:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801216e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr
 801217c:	2400003c 	.word	0x2400003c

08012180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012180:	f3ef 8009 	mrs	r0, PSP
 8012184:	f3bf 8f6f 	isb	sy
 8012188:	4b15      	ldr	r3, [pc, #84]	@ (80121e0 <pxCurrentTCBConst>)
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	f01e 0f10 	tst.w	lr, #16
 8012190:	bf08      	it	eq
 8012192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219a:	6010      	str	r0, [r2, #0]
 801219c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80121a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80121a4:	f380 8811 	msr	BASEPRI, r0
 80121a8:	f3bf 8f4f 	dsb	sy
 80121ac:	f3bf 8f6f 	isb	sy
 80121b0:	f000 fc20 	bl	80129f4 <vTaskSwitchContext>
 80121b4:	f04f 0000 	mov.w	r0, #0
 80121b8:	f380 8811 	msr	BASEPRI, r0
 80121bc:	bc09      	pop	{r0, r3}
 80121be:	6819      	ldr	r1, [r3, #0]
 80121c0:	6808      	ldr	r0, [r1, #0]
 80121c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c6:	f01e 0f10 	tst.w	lr, #16
 80121ca:	bf08      	it	eq
 80121cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80121d0:	f380 8809 	msr	PSP, r0
 80121d4:	f3bf 8f6f 	isb	sy
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	f3af 8000 	nop.w

080121e0 <pxCurrentTCBConst>:
 80121e0:	2407564c 	.word	0x2407564c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80121e4:	bf00      	nop
 80121e6:	bf00      	nop

080121e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
	__asm volatile
 80121ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f2:	f383 8811 	msr	BASEPRI, r3
 80121f6:	f3bf 8f6f 	isb	sy
 80121fa:	f3bf 8f4f 	dsb	sy
 80121fe:	607b      	str	r3, [r7, #4]
}
 8012200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012202:	f000 fb3d 	bl	8012880 <xTaskIncrementTick>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d003      	beq.n	8012214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801220c:	4b06      	ldr	r3, [pc, #24]	@ (8012228 <SysTick_Handler+0x40>)
 801220e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	2300      	movs	r3, #0
 8012216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	f383 8811 	msr	BASEPRI, r3
}
 801221e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012220:	bf00      	nop
 8012222:	3708      	adds	r7, #8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	e000ed04 	.word	0xe000ed04

0801222c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801222c:	b480      	push	{r7}
 801222e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012230:	4b0b      	ldr	r3, [pc, #44]	@ (8012260 <vPortSetupTimerInterrupt+0x34>)
 8012232:	2200      	movs	r2, #0
 8012234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012236:	4b0b      	ldr	r3, [pc, #44]	@ (8012264 <vPortSetupTimerInterrupt+0x38>)
 8012238:	2200      	movs	r2, #0
 801223a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801223c:	4b0a      	ldr	r3, [pc, #40]	@ (8012268 <vPortSetupTimerInterrupt+0x3c>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4a0a      	ldr	r2, [pc, #40]	@ (801226c <vPortSetupTimerInterrupt+0x40>)
 8012242:	fba2 2303 	umull	r2, r3, r2, r3
 8012246:	099b      	lsrs	r3, r3, #6
 8012248:	4a09      	ldr	r2, [pc, #36]	@ (8012270 <vPortSetupTimerInterrupt+0x44>)
 801224a:	3b01      	subs	r3, #1
 801224c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801224e:	4b04      	ldr	r3, [pc, #16]	@ (8012260 <vPortSetupTimerInterrupt+0x34>)
 8012250:	2207      	movs	r2, #7
 8012252:	601a      	str	r2, [r3, #0]
}
 8012254:	bf00      	nop
 8012256:	46bd      	mov	sp, r7
 8012258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop
 8012260:	e000e010 	.word	0xe000e010
 8012264:	e000e018 	.word	0xe000e018
 8012268:	24000000 	.word	0x24000000
 801226c:	10624dd3 	.word	0x10624dd3
 8012270:	e000e014 	.word	0xe000e014

08012274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012284 <vPortEnableVFP+0x10>
 8012278:	6801      	ldr	r1, [r0, #0]
 801227a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801227e:	6001      	str	r1, [r0, #0]
 8012280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012282:	bf00      	nop
 8012284:	e000ed88 	.word	0xe000ed88

08012288 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012288:	b580      	push	{r7, lr}
 801228a:	b08e      	sub	sp, #56	@ 0x38
 801228c:	af04      	add	r7, sp, #16
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	607a      	str	r2, [r7, #4]
 8012294:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012298:	2b00      	cmp	r3, #0
 801229a:	d10b      	bne.n	80122b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 801229c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122a0:	f383 8811 	msr	BASEPRI, r3
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	f3bf 8f4f 	dsb	sy
 80122ac:	623b      	str	r3, [r7, #32]
}
 80122ae:	bf00      	nop
 80122b0:	bf00      	nop
 80122b2:	e7fd      	b.n	80122b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80122b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d10b      	bne.n	80122d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80122ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122be:	f383 8811 	msr	BASEPRI, r3
 80122c2:	f3bf 8f6f 	isb	sy
 80122c6:	f3bf 8f4f 	dsb	sy
 80122ca:	61fb      	str	r3, [r7, #28]
}
 80122cc:	bf00      	nop
 80122ce:	bf00      	nop
 80122d0:	e7fd      	b.n	80122ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80122d2:	23a0      	movs	r3, #160	@ 0xa0
 80122d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80122da:	d00b      	beq.n	80122f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80122dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e0:	f383 8811 	msr	BASEPRI, r3
 80122e4:	f3bf 8f6f 	isb	sy
 80122e8:	f3bf 8f4f 	dsb	sy
 80122ec:	61bb      	str	r3, [r7, #24]
}
 80122ee:	bf00      	nop
 80122f0:	bf00      	nop
 80122f2:	e7fd      	b.n	80122f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80122f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80122f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d01e      	beq.n	801233a <xTaskCreateStatic+0xb2>
 80122fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d01b      	beq.n	801233a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012304:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801230a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230e:	2202      	movs	r2, #2
 8012310:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012314:	2300      	movs	r3, #0
 8012316:	9303      	str	r3, [sp, #12]
 8012318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801231a:	9302      	str	r3, [sp, #8]
 801231c:	f107 0314 	add.w	r3, r7, #20
 8012320:	9301      	str	r3, [sp, #4]
 8012322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	68b9      	ldr	r1, [r7, #8]
 801232c:	68f8      	ldr	r0, [r7, #12]
 801232e:	f000 f851 	bl	80123d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012334:	f000 f8ee 	bl	8012514 <prvAddNewTaskToReadyList>
 8012338:	e001      	b.n	801233e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801233a:	2300      	movs	r3, #0
 801233c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801233e:	697b      	ldr	r3, [r7, #20]
	}
 8012340:	4618      	mov	r0, r3
 8012342:	3728      	adds	r7, #40	@ 0x28
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012348:	b580      	push	{r7, lr}
 801234a:	b08c      	sub	sp, #48	@ 0x30
 801234c:	af04      	add	r7, sp, #16
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	603b      	str	r3, [r7, #0]
 8012354:	4613      	mov	r3, r2
 8012356:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012358:	88fb      	ldrh	r3, [r7, #6]
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4618      	mov	r0, r3
 801235e:	f7ff fadf 	bl	8011920 <pvPortMalloc>
 8012362:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00e      	beq.n	8012388 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801236a:	20a0      	movs	r0, #160	@ 0xa0
 801236c:	f7ff fad8 	bl	8011920 <pvPortMalloc>
 8012370:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d003      	beq.n	8012380 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012378:	69fb      	ldr	r3, [r7, #28]
 801237a:	697a      	ldr	r2, [r7, #20]
 801237c:	631a      	str	r2, [r3, #48]	@ 0x30
 801237e:	e005      	b.n	801238c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012380:	6978      	ldr	r0, [r7, #20]
 8012382:	f7ff fb9b 	bl	8011abc <vPortFree>
 8012386:	e001      	b.n	801238c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012388:	2300      	movs	r3, #0
 801238a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d017      	beq.n	80123c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	2200      	movs	r2, #0
 8012396:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801239a:	88fa      	ldrh	r2, [r7, #6]
 801239c:	2300      	movs	r3, #0
 801239e:	9303      	str	r3, [sp, #12]
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	9302      	str	r3, [sp, #8]
 80123a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123a6:	9301      	str	r3, [sp, #4]
 80123a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	68b9      	ldr	r1, [r7, #8]
 80123b0:	68f8      	ldr	r0, [r7, #12]
 80123b2:	f000 f80f 	bl	80123d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80123b6:	69f8      	ldr	r0, [r7, #28]
 80123b8:	f000 f8ac 	bl	8012514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80123bc:	2301      	movs	r3, #1
 80123be:	61bb      	str	r3, [r7, #24]
 80123c0:	e002      	b.n	80123c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80123c2:	f04f 33ff 	mov.w	r3, #4294967295
 80123c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80123c8:	69bb      	ldr	r3, [r7, #24]
	}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3720      	adds	r7, #32
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
	...

080123d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b088      	sub	sp, #32
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]
 80123e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80123e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80123e6:	6879      	ldr	r1, [r7, #4]
 80123e8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80123ec:	440b      	add	r3, r1
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	4413      	add	r3, r2
 80123f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	f023 0307 	bic.w	r3, r3, #7
 80123fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80123fc:	69bb      	ldr	r3, [r7, #24]
 80123fe:	f003 0307 	and.w	r3, r3, #7
 8012402:	2b00      	cmp	r3, #0
 8012404:	d00b      	beq.n	801241e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8012406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801240a:	f383 8811 	msr	BASEPRI, r3
 801240e:	f3bf 8f6f 	isb	sy
 8012412:	f3bf 8f4f 	dsb	sy
 8012416:	617b      	str	r3, [r7, #20]
}
 8012418:	bf00      	nop
 801241a:	bf00      	nop
 801241c:	e7fd      	b.n	801241a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d01f      	beq.n	8012464 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012424:	2300      	movs	r3, #0
 8012426:	61fb      	str	r3, [r7, #28]
 8012428:	e012      	b.n	8012450 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801242a:	68ba      	ldr	r2, [r7, #8]
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	4413      	add	r3, r2
 8012430:	7819      	ldrb	r1, [r3, #0]
 8012432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	4413      	add	r3, r2
 8012438:	3334      	adds	r3, #52	@ 0x34
 801243a:	460a      	mov	r2, r1
 801243c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801243e:	68ba      	ldr	r2, [r7, #8]
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	4413      	add	r3, r2
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d006      	beq.n	8012458 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	3301      	adds	r3, #1
 801244e:	61fb      	str	r3, [r7, #28]
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	2b0f      	cmp	r3, #15
 8012454:	d9e9      	bls.n	801242a <prvInitialiseNewTask+0x56>
 8012456:	e000      	b.n	801245a <prvInitialiseNewTask+0x86>
			{
				break;
 8012458:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801245c:	2200      	movs	r2, #0
 801245e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012462:	e003      	b.n	801246c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012466:	2200      	movs	r2, #0
 8012468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801246e:	2b06      	cmp	r3, #6
 8012470:	d901      	bls.n	8012476 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012472:	2306      	movs	r3, #6
 8012474:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801247a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801247e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012480:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012484:	2200      	movs	r2, #0
 8012486:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801248a:	3304      	adds	r3, #4
 801248c:	4618      	mov	r0, r3
 801248e:	f7ff fc55 	bl	8011d3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012494:	3318      	adds	r3, #24
 8012496:	4618      	mov	r0, r3
 8012498:	f7ff fc50 	bl	8011d3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801249c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801249e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124a4:	f1c3 0207 	rsb	r2, r3, #7
 80124a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80124ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80124b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124b4:	2200      	movs	r2, #0
 80124b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80124ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124bc:	2200      	movs	r2, #0
 80124be:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80124c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124c4:	334c      	adds	r3, #76	@ 0x4c
 80124c6:	224c      	movs	r2, #76	@ 0x4c
 80124c8:	2100      	movs	r1, #0
 80124ca:	4618      	mov	r0, r3
 80124cc:	f001 f9a7 	bl	801381e <memset>
 80124d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124d2:	4a0d      	ldr	r2, [pc, #52]	@ (8012508 <prvInitialiseNewTask+0x134>)
 80124d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80124d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124d8:	4a0c      	ldr	r2, [pc, #48]	@ (801250c <prvInitialiseNewTask+0x138>)
 80124da:	655a      	str	r2, [r3, #84]	@ 0x54
 80124dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124de:	4a0c      	ldr	r2, [pc, #48]	@ (8012510 <prvInitialiseNewTask+0x13c>)
 80124e0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80124e2:	683a      	ldr	r2, [r7, #0]
 80124e4:	68f9      	ldr	r1, [r7, #12]
 80124e6:	69b8      	ldr	r0, [r7, #24]
 80124e8:	f7ff fcbc 	bl	8011e64 <pxPortInitialiseStack>
 80124ec:	4602      	mov	r2, r0
 80124ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80124f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d002      	beq.n	80124fe <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80124f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124fe:	bf00      	nop
 8012500:	3720      	adds	r7, #32
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	24075778 	.word	0x24075778
 801250c:	240757e0 	.word	0x240757e0
 8012510:	24075848 	.word	0x24075848

08012514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801251c:	f7ff fdd4 	bl	80120c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012520:	4b2a      	ldr	r3, [pc, #168]	@ (80125cc <prvAddNewTaskToReadyList+0xb8>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	3301      	adds	r3, #1
 8012526:	4a29      	ldr	r2, [pc, #164]	@ (80125cc <prvAddNewTaskToReadyList+0xb8>)
 8012528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801252a:	4b29      	ldr	r3, [pc, #164]	@ (80125d0 <prvAddNewTaskToReadyList+0xbc>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d109      	bne.n	8012546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012532:	4a27      	ldr	r2, [pc, #156]	@ (80125d0 <prvAddNewTaskToReadyList+0xbc>)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012538:	4b24      	ldr	r3, [pc, #144]	@ (80125cc <prvAddNewTaskToReadyList+0xb8>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d110      	bne.n	8012562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012540:	f000 fad4 	bl	8012aec <prvInitialiseTaskLists>
 8012544:	e00d      	b.n	8012562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012546:	4b23      	ldr	r3, [pc, #140]	@ (80125d4 <prvAddNewTaskToReadyList+0xc0>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d109      	bne.n	8012562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801254e:	4b20      	ldr	r3, [pc, #128]	@ (80125d0 <prvAddNewTaskToReadyList+0xbc>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012558:	429a      	cmp	r2, r3
 801255a:	d802      	bhi.n	8012562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801255c:	4a1c      	ldr	r2, [pc, #112]	@ (80125d0 <prvAddNewTaskToReadyList+0xbc>)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012562:	4b1d      	ldr	r3, [pc, #116]	@ (80125d8 <prvAddNewTaskToReadyList+0xc4>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	3301      	adds	r3, #1
 8012568:	4a1b      	ldr	r2, [pc, #108]	@ (80125d8 <prvAddNewTaskToReadyList+0xc4>)
 801256a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012570:	2201      	movs	r2, #1
 8012572:	409a      	lsls	r2, r3
 8012574:	4b19      	ldr	r3, [pc, #100]	@ (80125dc <prvAddNewTaskToReadyList+0xc8>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4313      	orrs	r3, r2
 801257a:	4a18      	ldr	r2, [pc, #96]	@ (80125dc <prvAddNewTaskToReadyList+0xc8>)
 801257c:	6013      	str	r3, [r2, #0]
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012582:	4613      	mov	r3, r2
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	4413      	add	r3, r2
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	4a15      	ldr	r2, [pc, #84]	@ (80125e0 <prvAddNewTaskToReadyList+0xcc>)
 801258c:	441a      	add	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	3304      	adds	r3, #4
 8012592:	4619      	mov	r1, r3
 8012594:	4610      	mov	r0, r2
 8012596:	f7ff fbde 	bl	8011d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801259a:	f7ff fdc7 	bl	801212c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801259e:	4b0d      	ldr	r3, [pc, #52]	@ (80125d4 <prvAddNewTaskToReadyList+0xc0>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d00e      	beq.n	80125c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80125a6:	4b0a      	ldr	r3, [pc, #40]	@ (80125d0 <prvAddNewTaskToReadyList+0xbc>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d207      	bcs.n	80125c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80125b4:	4b0b      	ldr	r3, [pc, #44]	@ (80125e4 <prvAddNewTaskToReadyList+0xd0>)
 80125b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80125ba:	601a      	str	r2, [r3, #0]
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125c4:	bf00      	nop
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	2407574c 	.word	0x2407574c
 80125d0:	2407564c 	.word	0x2407564c
 80125d4:	24075758 	.word	0x24075758
 80125d8:	24075768 	.word	0x24075768
 80125dc:	24075754 	.word	0x24075754
 80125e0:	24075650 	.word	0x24075650
 80125e4:	e000ed04 	.word	0xe000ed04

080125e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80125f0:	2300      	movs	r3, #0
 80125f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d018      	beq.n	801262c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80125fa:	4b14      	ldr	r3, [pc, #80]	@ (801264c <vTaskDelay+0x64>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00b      	beq.n	801261a <vTaskDelay+0x32>
	__asm volatile
 8012602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012606:	f383 8811 	msr	BASEPRI, r3
 801260a:	f3bf 8f6f 	isb	sy
 801260e:	f3bf 8f4f 	dsb	sy
 8012612:	60bb      	str	r3, [r7, #8]
}
 8012614:	bf00      	nop
 8012616:	bf00      	nop
 8012618:	e7fd      	b.n	8012616 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801261a:	f000 f885 	bl	8012728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801261e:	2100      	movs	r1, #0
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 fb27 	bl	8012c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012626:	f000 f88d 	bl	8012744 <xTaskResumeAll>
 801262a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d107      	bne.n	8012642 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8012632:	4b07      	ldr	r3, [pc, #28]	@ (8012650 <vTaskDelay+0x68>)
 8012634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012638:	601a      	str	r2, [r3, #0]
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012642:	bf00      	nop
 8012644:	3710      	adds	r7, #16
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	24075774 	.word	0x24075774
 8012650:	e000ed04 	.word	0xe000ed04

08012654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08a      	sub	sp, #40	@ 0x28
 8012658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801265a:	2300      	movs	r3, #0
 801265c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801265e:	2300      	movs	r3, #0
 8012660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012662:	463a      	mov	r2, r7
 8012664:	1d39      	adds	r1, r7, #4
 8012666:	f107 0308 	add.w	r3, r7, #8
 801266a:	4618      	mov	r0, r3
 801266c:	f7ee fcb2 	bl	8000fd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012670:	6839      	ldr	r1, [r7, #0]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	68ba      	ldr	r2, [r7, #8]
 8012676:	9202      	str	r2, [sp, #8]
 8012678:	9301      	str	r3, [sp, #4]
 801267a:	2300      	movs	r3, #0
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	2300      	movs	r3, #0
 8012680:	460a      	mov	r2, r1
 8012682:	4921      	ldr	r1, [pc, #132]	@ (8012708 <vTaskStartScheduler+0xb4>)
 8012684:	4821      	ldr	r0, [pc, #132]	@ (801270c <vTaskStartScheduler+0xb8>)
 8012686:	f7ff fdff 	bl	8012288 <xTaskCreateStatic>
 801268a:	4603      	mov	r3, r0
 801268c:	4a20      	ldr	r2, [pc, #128]	@ (8012710 <vTaskStartScheduler+0xbc>)
 801268e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012690:	4b1f      	ldr	r3, [pc, #124]	@ (8012710 <vTaskStartScheduler+0xbc>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012698:	2301      	movs	r3, #1
 801269a:	617b      	str	r3, [r7, #20]
 801269c:	e001      	b.n	80126a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801269e:	2300      	movs	r3, #0
 80126a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	2b01      	cmp	r3, #1
 80126a6:	d11b      	bne.n	80126e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 80126a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ac:	f383 8811 	msr	BASEPRI, r3
 80126b0:	f3bf 8f6f 	isb	sy
 80126b4:	f3bf 8f4f 	dsb	sy
 80126b8:	613b      	str	r3, [r7, #16]
}
 80126ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80126bc:	4b15      	ldr	r3, [pc, #84]	@ (8012714 <vTaskStartScheduler+0xc0>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	334c      	adds	r3, #76	@ 0x4c
 80126c2:	4a15      	ldr	r2, [pc, #84]	@ (8012718 <vTaskStartScheduler+0xc4>)
 80126c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80126c6:	4b15      	ldr	r3, [pc, #84]	@ (801271c <vTaskStartScheduler+0xc8>)
 80126c8:	f04f 32ff 	mov.w	r2, #4294967295
 80126cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80126ce:	4b14      	ldr	r3, [pc, #80]	@ (8012720 <vTaskStartScheduler+0xcc>)
 80126d0:	2201      	movs	r2, #1
 80126d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80126d4:	4b13      	ldr	r3, [pc, #76]	@ (8012724 <vTaskStartScheduler+0xd0>)
 80126d6:	2200      	movs	r2, #0
 80126d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80126da:	f7ff fc51 	bl	8011f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80126de:	e00f      	b.n	8012700 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126e6:	d10b      	bne.n	8012700 <vTaskStartScheduler+0xac>
	__asm volatile
 80126e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126ec:	f383 8811 	msr	BASEPRI, r3
 80126f0:	f3bf 8f6f 	isb	sy
 80126f4:	f3bf 8f4f 	dsb	sy
 80126f8:	60fb      	str	r3, [r7, #12]
}
 80126fa:	bf00      	nop
 80126fc:	bf00      	nop
 80126fe:	e7fd      	b.n	80126fc <vTaskStartScheduler+0xa8>
}
 8012700:	bf00      	nop
 8012702:	3718      	adds	r7, #24
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	080168d4 	.word	0x080168d4
 801270c:	08012abd 	.word	0x08012abd
 8012710:	24075770 	.word	0x24075770
 8012714:	2407564c 	.word	0x2407564c
 8012718:	2400004c 	.word	0x2400004c
 801271c:	2407576c 	.word	0x2407576c
 8012720:	24075758 	.word	0x24075758
 8012724:	24075750 	.word	0x24075750

08012728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012728:	b480      	push	{r7}
 801272a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801272c:	4b04      	ldr	r3, [pc, #16]	@ (8012740 <vTaskSuspendAll+0x18>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	3301      	adds	r3, #1
 8012732:	4a03      	ldr	r2, [pc, #12]	@ (8012740 <vTaskSuspendAll+0x18>)
 8012734:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012736:	bf00      	nop
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr
 8012740:	24075774 	.word	0x24075774

08012744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b084      	sub	sp, #16
 8012748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801274a:	2300      	movs	r3, #0
 801274c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801274e:	2300      	movs	r3, #0
 8012750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012752:	4b42      	ldr	r3, [pc, #264]	@ (801285c <xTaskResumeAll+0x118>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d10b      	bne.n	8012772 <xTaskResumeAll+0x2e>
	__asm volatile
 801275a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801275e:	f383 8811 	msr	BASEPRI, r3
 8012762:	f3bf 8f6f 	isb	sy
 8012766:	f3bf 8f4f 	dsb	sy
 801276a:	603b      	str	r3, [r7, #0]
}
 801276c:	bf00      	nop
 801276e:	bf00      	nop
 8012770:	e7fd      	b.n	801276e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012772:	f7ff fca9 	bl	80120c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012776:	4b39      	ldr	r3, [pc, #228]	@ (801285c <xTaskResumeAll+0x118>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	3b01      	subs	r3, #1
 801277c:	4a37      	ldr	r2, [pc, #220]	@ (801285c <xTaskResumeAll+0x118>)
 801277e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012780:	4b36      	ldr	r3, [pc, #216]	@ (801285c <xTaskResumeAll+0x118>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d161      	bne.n	801284c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012788:	4b35      	ldr	r3, [pc, #212]	@ (8012860 <xTaskResumeAll+0x11c>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d05d      	beq.n	801284c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012790:	e02e      	b.n	80127f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012792:	4b34      	ldr	r3, [pc, #208]	@ (8012864 <xTaskResumeAll+0x120>)
 8012794:	68db      	ldr	r3, [r3, #12]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	3318      	adds	r3, #24
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff fb36 	bl	8011e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	3304      	adds	r3, #4
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7ff fb31 	bl	8011e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b2:	2201      	movs	r2, #1
 80127b4:	409a      	lsls	r2, r3
 80127b6:	4b2c      	ldr	r3, [pc, #176]	@ (8012868 <xTaskResumeAll+0x124>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	4313      	orrs	r3, r2
 80127bc:	4a2a      	ldr	r2, [pc, #168]	@ (8012868 <xTaskResumeAll+0x124>)
 80127be:	6013      	str	r3, [r2, #0]
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127c4:	4613      	mov	r3, r2
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	4413      	add	r3, r2
 80127ca:	009b      	lsls	r3, r3, #2
 80127cc:	4a27      	ldr	r2, [pc, #156]	@ (801286c <xTaskResumeAll+0x128>)
 80127ce:	441a      	add	r2, r3
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	3304      	adds	r3, #4
 80127d4:	4619      	mov	r1, r3
 80127d6:	4610      	mov	r0, r2
 80127d8:	f7ff fabd 	bl	8011d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127e0:	4b23      	ldr	r3, [pc, #140]	@ (8012870 <xTaskResumeAll+0x12c>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d302      	bcc.n	80127f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80127ea:	4b22      	ldr	r3, [pc, #136]	@ (8012874 <xTaskResumeAll+0x130>)
 80127ec:	2201      	movs	r2, #1
 80127ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80127f0:	4b1c      	ldr	r3, [pc, #112]	@ (8012864 <xTaskResumeAll+0x120>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d1cc      	bne.n	8012792 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d001      	beq.n	8012802 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80127fe:	f000 fa19 	bl	8012c34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012802:	4b1d      	ldr	r3, [pc, #116]	@ (8012878 <xTaskResumeAll+0x134>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d010      	beq.n	8012830 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801280e:	f000 f837 	bl	8012880 <xTaskIncrementTick>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012818:	4b16      	ldr	r3, [pc, #88]	@ (8012874 <xTaskResumeAll+0x130>)
 801281a:	2201      	movs	r2, #1
 801281c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3b01      	subs	r3, #1
 8012822:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d1f1      	bne.n	801280e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801282a:	4b13      	ldr	r3, [pc, #76]	@ (8012878 <xTaskResumeAll+0x134>)
 801282c:	2200      	movs	r2, #0
 801282e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012830:	4b10      	ldr	r3, [pc, #64]	@ (8012874 <xTaskResumeAll+0x130>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d009      	beq.n	801284c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012838:	2301      	movs	r3, #1
 801283a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801283c:	4b0f      	ldr	r3, [pc, #60]	@ (801287c <xTaskResumeAll+0x138>)
 801283e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012842:	601a      	str	r2, [r3, #0]
 8012844:	f3bf 8f4f 	dsb	sy
 8012848:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801284c:	f7ff fc6e 	bl	801212c <vPortExitCritical>

	return xAlreadyYielded;
 8012850:	68bb      	ldr	r3, [r7, #8]
}
 8012852:	4618      	mov	r0, r3
 8012854:	3710      	adds	r7, #16
 8012856:	46bd      	mov	sp, r7
 8012858:	bd80      	pop	{r7, pc}
 801285a:	bf00      	nop
 801285c:	24075774 	.word	0x24075774
 8012860:	2407574c 	.word	0x2407574c
 8012864:	2407570c 	.word	0x2407570c
 8012868:	24075754 	.word	0x24075754
 801286c:	24075650 	.word	0x24075650
 8012870:	2407564c 	.word	0x2407564c
 8012874:	24075760 	.word	0x24075760
 8012878:	2407575c 	.word	0x2407575c
 801287c:	e000ed04 	.word	0xe000ed04

08012880 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b086      	sub	sp, #24
 8012884:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012886:	2300      	movs	r3, #0
 8012888:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801288a:	4b4f      	ldr	r3, [pc, #316]	@ (80129c8 <xTaskIncrementTick+0x148>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	f040 808f 	bne.w	80129b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012894:	4b4d      	ldr	r3, [pc, #308]	@ (80129cc <xTaskIncrementTick+0x14c>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	3301      	adds	r3, #1
 801289a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801289c:	4a4b      	ldr	r2, [pc, #300]	@ (80129cc <xTaskIncrementTick+0x14c>)
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d121      	bne.n	80128ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80128a8:	4b49      	ldr	r3, [pc, #292]	@ (80129d0 <xTaskIncrementTick+0x150>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00b      	beq.n	80128ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80128b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128b6:	f383 8811 	msr	BASEPRI, r3
 80128ba:	f3bf 8f6f 	isb	sy
 80128be:	f3bf 8f4f 	dsb	sy
 80128c2:	603b      	str	r3, [r7, #0]
}
 80128c4:	bf00      	nop
 80128c6:	bf00      	nop
 80128c8:	e7fd      	b.n	80128c6 <xTaskIncrementTick+0x46>
 80128ca:	4b41      	ldr	r3, [pc, #260]	@ (80129d0 <xTaskIncrementTick+0x150>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	60fb      	str	r3, [r7, #12]
 80128d0:	4b40      	ldr	r3, [pc, #256]	@ (80129d4 <xTaskIncrementTick+0x154>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4a3e      	ldr	r2, [pc, #248]	@ (80129d0 <xTaskIncrementTick+0x150>)
 80128d6:	6013      	str	r3, [r2, #0]
 80128d8:	4a3e      	ldr	r2, [pc, #248]	@ (80129d4 <xTaskIncrementTick+0x154>)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	6013      	str	r3, [r2, #0]
 80128de:	4b3e      	ldr	r3, [pc, #248]	@ (80129d8 <xTaskIncrementTick+0x158>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3301      	adds	r3, #1
 80128e4:	4a3c      	ldr	r2, [pc, #240]	@ (80129d8 <xTaskIncrementTick+0x158>)
 80128e6:	6013      	str	r3, [r2, #0]
 80128e8:	f000 f9a4 	bl	8012c34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80128ec:	4b3b      	ldr	r3, [pc, #236]	@ (80129dc <xTaskIncrementTick+0x15c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	693a      	ldr	r2, [r7, #16]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d348      	bcc.n	8012988 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128f6:	4b36      	ldr	r3, [pc, #216]	@ (80129d0 <xTaskIncrementTick+0x150>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d104      	bne.n	801290a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012900:	4b36      	ldr	r3, [pc, #216]	@ (80129dc <xTaskIncrementTick+0x15c>)
 8012902:	f04f 32ff 	mov.w	r2, #4294967295
 8012906:	601a      	str	r2, [r3, #0]
					break;
 8012908:	e03e      	b.n	8012988 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801290a:	4b31      	ldr	r3, [pc, #196]	@ (80129d0 <xTaskIncrementTick+0x150>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	68db      	ldr	r3, [r3, #12]
 8012912:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801291a:	693a      	ldr	r2, [r7, #16]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	429a      	cmp	r2, r3
 8012920:	d203      	bcs.n	801292a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012922:	4a2e      	ldr	r2, [pc, #184]	@ (80129dc <xTaskIncrementTick+0x15c>)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012928:	e02e      	b.n	8012988 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	3304      	adds	r3, #4
 801292e:	4618      	mov	r0, r3
 8012930:	f7ff fa6e 	bl	8011e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012938:	2b00      	cmp	r3, #0
 801293a:	d004      	beq.n	8012946 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	3318      	adds	r3, #24
 8012940:	4618      	mov	r0, r3
 8012942:	f7ff fa65 	bl	8011e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801294a:	2201      	movs	r2, #1
 801294c:	409a      	lsls	r2, r3
 801294e:	4b24      	ldr	r3, [pc, #144]	@ (80129e0 <xTaskIncrementTick+0x160>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	4313      	orrs	r3, r2
 8012954:	4a22      	ldr	r2, [pc, #136]	@ (80129e0 <xTaskIncrementTick+0x160>)
 8012956:	6013      	str	r3, [r2, #0]
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801295c:	4613      	mov	r3, r2
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	4413      	add	r3, r2
 8012962:	009b      	lsls	r3, r3, #2
 8012964:	4a1f      	ldr	r2, [pc, #124]	@ (80129e4 <xTaskIncrementTick+0x164>)
 8012966:	441a      	add	r2, r3
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	3304      	adds	r3, #4
 801296c:	4619      	mov	r1, r3
 801296e:	4610      	mov	r0, r2
 8012970:	f7ff f9f1 	bl	8011d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012974:	68bb      	ldr	r3, [r7, #8]
 8012976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012978:	4b1b      	ldr	r3, [pc, #108]	@ (80129e8 <xTaskIncrementTick+0x168>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801297e:	429a      	cmp	r2, r3
 8012980:	d3b9      	bcc.n	80128f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012982:	2301      	movs	r3, #1
 8012984:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012986:	e7b6      	b.n	80128f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012988:	4b17      	ldr	r3, [pc, #92]	@ (80129e8 <xTaskIncrementTick+0x168>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801298e:	4915      	ldr	r1, [pc, #84]	@ (80129e4 <xTaskIncrementTick+0x164>)
 8012990:	4613      	mov	r3, r2
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	440b      	add	r3, r1
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d901      	bls.n	80129a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80129a0:	2301      	movs	r3, #1
 80129a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80129a4:	4b11      	ldr	r3, [pc, #68]	@ (80129ec <xTaskIncrementTick+0x16c>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d007      	beq.n	80129bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80129ac:	2301      	movs	r3, #1
 80129ae:	617b      	str	r3, [r7, #20]
 80129b0:	e004      	b.n	80129bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80129b2:	4b0f      	ldr	r3, [pc, #60]	@ (80129f0 <xTaskIncrementTick+0x170>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	3301      	adds	r3, #1
 80129b8:	4a0d      	ldr	r2, [pc, #52]	@ (80129f0 <xTaskIncrementTick+0x170>)
 80129ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80129bc:	697b      	ldr	r3, [r7, #20]
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3718      	adds	r7, #24
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	24075774 	.word	0x24075774
 80129cc:	24075750 	.word	0x24075750
 80129d0:	24075704 	.word	0x24075704
 80129d4:	24075708 	.word	0x24075708
 80129d8:	24075764 	.word	0x24075764
 80129dc:	2407576c 	.word	0x2407576c
 80129e0:	24075754 	.word	0x24075754
 80129e4:	24075650 	.word	0x24075650
 80129e8:	2407564c 	.word	0x2407564c
 80129ec:	24075760 	.word	0x24075760
 80129f0:	2407575c 	.word	0x2407575c

080129f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80129f4:	b480      	push	{r7}
 80129f6:	b087      	sub	sp, #28
 80129f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80129fa:	4b2a      	ldr	r3, [pc, #168]	@ (8012aa4 <vTaskSwitchContext+0xb0>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d003      	beq.n	8012a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012a02:	4b29      	ldr	r3, [pc, #164]	@ (8012aa8 <vTaskSwitchContext+0xb4>)
 8012a04:	2201      	movs	r2, #1
 8012a06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012a08:	e045      	b.n	8012a96 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8012a0a:	4b27      	ldr	r3, [pc, #156]	@ (8012aa8 <vTaskSwitchContext+0xb4>)
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a10:	4b26      	ldr	r3, [pc, #152]	@ (8012aac <vTaskSwitchContext+0xb8>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	fab3 f383 	clz	r3, r3
 8012a1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012a1e:	7afb      	ldrb	r3, [r7, #11]
 8012a20:	f1c3 031f 	rsb	r3, r3, #31
 8012a24:	617b      	str	r3, [r7, #20]
 8012a26:	4922      	ldr	r1, [pc, #136]	@ (8012ab0 <vTaskSwitchContext+0xbc>)
 8012a28:	697a      	ldr	r2, [r7, #20]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	009b      	lsls	r3, r3, #2
 8012a2e:	4413      	add	r3, r2
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	440b      	add	r3, r1
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d10b      	bne.n	8012a52 <vTaskSwitchContext+0x5e>
	__asm volatile
 8012a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a3e:	f383 8811 	msr	BASEPRI, r3
 8012a42:	f3bf 8f6f 	isb	sy
 8012a46:	f3bf 8f4f 	dsb	sy
 8012a4a:	607b      	str	r3, [r7, #4]
}
 8012a4c:	bf00      	nop
 8012a4e:	bf00      	nop
 8012a50:	e7fd      	b.n	8012a4e <vTaskSwitchContext+0x5a>
 8012a52:	697a      	ldr	r2, [r7, #20]
 8012a54:	4613      	mov	r3, r2
 8012a56:	009b      	lsls	r3, r3, #2
 8012a58:	4413      	add	r3, r2
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	4a14      	ldr	r2, [pc, #80]	@ (8012ab0 <vTaskSwitchContext+0xbc>)
 8012a5e:	4413      	add	r3, r2
 8012a60:	613b      	str	r3, [r7, #16]
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	685b      	ldr	r3, [r3, #4]
 8012a66:	685a      	ldr	r2, [r3, #4]
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	605a      	str	r2, [r3, #4]
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	685a      	ldr	r2, [r3, #4]
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	3308      	adds	r3, #8
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d104      	bne.n	8012a82 <vTaskSwitchContext+0x8e>
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	685b      	ldr	r3, [r3, #4]
 8012a7c:	685a      	ldr	r2, [r3, #4]
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	605a      	str	r2, [r3, #4]
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	4a0a      	ldr	r2, [pc, #40]	@ (8012ab4 <vTaskSwitchContext+0xc0>)
 8012a8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012a8c:	4b09      	ldr	r3, [pc, #36]	@ (8012ab4 <vTaskSwitchContext+0xc0>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	334c      	adds	r3, #76	@ 0x4c
 8012a92:	4a09      	ldr	r2, [pc, #36]	@ (8012ab8 <vTaskSwitchContext+0xc4>)
 8012a94:	6013      	str	r3, [r2, #0]
}
 8012a96:	bf00      	nop
 8012a98:	371c      	adds	r7, #28
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop
 8012aa4:	24075774 	.word	0x24075774
 8012aa8:	24075760 	.word	0x24075760
 8012aac:	24075754 	.word	0x24075754
 8012ab0:	24075650 	.word	0x24075650
 8012ab4:	2407564c 	.word	0x2407564c
 8012ab8:	2400004c 	.word	0x2400004c

08012abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012ac4:	f000 f852 	bl	8012b6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012ac8:	4b06      	ldr	r3, [pc, #24]	@ (8012ae4 <prvIdleTask+0x28>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	d9f9      	bls.n	8012ac4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012ad0:	4b05      	ldr	r3, [pc, #20]	@ (8012ae8 <prvIdleTask+0x2c>)
 8012ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ad6:	601a      	str	r2, [r3, #0]
 8012ad8:	f3bf 8f4f 	dsb	sy
 8012adc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012ae0:	e7f0      	b.n	8012ac4 <prvIdleTask+0x8>
 8012ae2:	bf00      	nop
 8012ae4:	24075650 	.word	0x24075650
 8012ae8:	e000ed04 	.word	0xe000ed04

08012aec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012af2:	2300      	movs	r3, #0
 8012af4:	607b      	str	r3, [r7, #4]
 8012af6:	e00c      	b.n	8012b12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	4613      	mov	r3, r2
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	4413      	add	r3, r2
 8012b00:	009b      	lsls	r3, r3, #2
 8012b02:	4a12      	ldr	r2, [pc, #72]	@ (8012b4c <prvInitialiseTaskLists+0x60>)
 8012b04:	4413      	add	r3, r2
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7ff f8f8 	bl	8011cfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	607b      	str	r3, [r7, #4]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2b06      	cmp	r3, #6
 8012b16:	d9ef      	bls.n	8012af8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012b18:	480d      	ldr	r0, [pc, #52]	@ (8012b50 <prvInitialiseTaskLists+0x64>)
 8012b1a:	f7ff f8ef 	bl	8011cfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012b1e:	480d      	ldr	r0, [pc, #52]	@ (8012b54 <prvInitialiseTaskLists+0x68>)
 8012b20:	f7ff f8ec 	bl	8011cfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012b24:	480c      	ldr	r0, [pc, #48]	@ (8012b58 <prvInitialiseTaskLists+0x6c>)
 8012b26:	f7ff f8e9 	bl	8011cfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012b2a:	480c      	ldr	r0, [pc, #48]	@ (8012b5c <prvInitialiseTaskLists+0x70>)
 8012b2c:	f7ff f8e6 	bl	8011cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012b30:	480b      	ldr	r0, [pc, #44]	@ (8012b60 <prvInitialiseTaskLists+0x74>)
 8012b32:	f7ff f8e3 	bl	8011cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012b36:	4b0b      	ldr	r3, [pc, #44]	@ (8012b64 <prvInitialiseTaskLists+0x78>)
 8012b38:	4a05      	ldr	r2, [pc, #20]	@ (8012b50 <prvInitialiseTaskLists+0x64>)
 8012b3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8012b68 <prvInitialiseTaskLists+0x7c>)
 8012b3e:	4a05      	ldr	r2, [pc, #20]	@ (8012b54 <prvInitialiseTaskLists+0x68>)
 8012b40:	601a      	str	r2, [r3, #0]
}
 8012b42:	bf00      	nop
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	24075650 	.word	0x24075650
 8012b50:	240756dc 	.word	0x240756dc
 8012b54:	240756f0 	.word	0x240756f0
 8012b58:	2407570c 	.word	0x2407570c
 8012b5c:	24075720 	.word	0x24075720
 8012b60:	24075738 	.word	0x24075738
 8012b64:	24075704 	.word	0x24075704
 8012b68:	24075708 	.word	0x24075708

08012b6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012b72:	e019      	b.n	8012ba8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012b74:	f7ff faa8 	bl	80120c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b78:	4b10      	ldr	r3, [pc, #64]	@ (8012bbc <prvCheckTasksWaitingTermination+0x50>)
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	3304      	adds	r3, #4
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7ff f943 	bl	8011e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8012bc0 <prvCheckTasksWaitingTermination+0x54>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	4a0b      	ldr	r2, [pc, #44]	@ (8012bc0 <prvCheckTasksWaitingTermination+0x54>)
 8012b92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012b94:	4b0b      	ldr	r3, [pc, #44]	@ (8012bc4 <prvCheckTasksWaitingTermination+0x58>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3b01      	subs	r3, #1
 8012b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8012bc4 <prvCheckTasksWaitingTermination+0x58>)
 8012b9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012b9e:	f7ff fac5 	bl	801212c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 f810 	bl	8012bc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ba8:	4b06      	ldr	r3, [pc, #24]	@ (8012bc4 <prvCheckTasksWaitingTermination+0x58>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1e1      	bne.n	8012b74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012bb0:	bf00      	nop
 8012bb2:	bf00      	nop
 8012bb4:	3708      	adds	r7, #8
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	24075720 	.word	0x24075720
 8012bc0:	2407574c 	.word	0x2407574c
 8012bc4:	24075734 	.word	0x24075734

08012bc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	334c      	adds	r3, #76	@ 0x4c
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f000 fe3f 	bl	8013858 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d108      	bne.n	8012bf6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7fe ff67 	bl	8011abc <vPortFree>
				vPortFree( pxTCB );
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f7fe ff64 	bl	8011abc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012bf4:	e019      	b.n	8012c2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d103      	bne.n	8012c08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f7fe ff5b 	bl	8011abc <vPortFree>
	}
 8012c06:	e010      	b.n	8012c2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	d00b      	beq.n	8012c2a <prvDeleteTCB+0x62>
	__asm volatile
 8012c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c16:	f383 8811 	msr	BASEPRI, r3
 8012c1a:	f3bf 8f6f 	isb	sy
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	60fb      	str	r3, [r7, #12]
}
 8012c24:	bf00      	nop
 8012c26:	bf00      	nop
 8012c28:	e7fd      	b.n	8012c26 <prvDeleteTCB+0x5e>
	}
 8012c2a:	bf00      	nop
 8012c2c:	3710      	adds	r7, #16
 8012c2e:	46bd      	mov	sp, r7
 8012c30:	bd80      	pop	{r7, pc}
	...

08012c34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8012c6c <prvResetNextTaskUnblockTime+0x38>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d104      	bne.n	8012c4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012c44:	4b0a      	ldr	r3, [pc, #40]	@ (8012c70 <prvResetNextTaskUnblockTime+0x3c>)
 8012c46:	f04f 32ff 	mov.w	r2, #4294967295
 8012c4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012c4c:	e008      	b.n	8012c60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c4e:	4b07      	ldr	r3, [pc, #28]	@ (8012c6c <prvResetNextTaskUnblockTime+0x38>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	68db      	ldr	r3, [r3, #12]
 8012c56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	4a04      	ldr	r2, [pc, #16]	@ (8012c70 <prvResetNextTaskUnblockTime+0x3c>)
 8012c5e:	6013      	str	r3, [r2, #0]
}
 8012c60:	bf00      	nop
 8012c62:	370c      	adds	r7, #12
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr
 8012c6c:	24075704 	.word	0x24075704
 8012c70:	2407576c 	.word	0x2407576c

08012c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c7e:	4b29      	ldr	r3, [pc, #164]	@ (8012d24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c84:	4b28      	ldr	r3, [pc, #160]	@ (8012d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	3304      	adds	r3, #4
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7ff f8c0 	bl	8011e10 <uxListRemove>
 8012c90:	4603      	mov	r3, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d10b      	bne.n	8012cae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012c96:	4b24      	ldr	r3, [pc, #144]	@ (8012d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8012ca2:	43da      	mvns	r2, r3
 8012ca4:	4b21      	ldr	r3, [pc, #132]	@ (8012d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4013      	ands	r3, r2
 8012caa:	4a20      	ldr	r2, [pc, #128]	@ (8012d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012cac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cb4:	d10a      	bne.n	8012ccc <prvAddCurrentTaskToDelayedList+0x58>
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d007      	beq.n	8012ccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8012d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	3304      	adds	r3, #4
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	481a      	ldr	r0, [pc, #104]	@ (8012d30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012cc6:	f7ff f846 	bl	8011d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012cca:	e026      	b.n	8012d1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	4413      	add	r3, r2
 8012cd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012cd4:	4b14      	ldr	r3, [pc, #80]	@ (8012d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	68ba      	ldr	r2, [r7, #8]
 8012cda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012cdc:	68ba      	ldr	r2, [r7, #8]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d209      	bcs.n	8012cf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ce4:	4b13      	ldr	r3, [pc, #76]	@ (8012d34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012ce6:	681a      	ldr	r2, [r3, #0]
 8012ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8012d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	3304      	adds	r3, #4
 8012cee:	4619      	mov	r1, r3
 8012cf0:	4610      	mov	r0, r2
 8012cf2:	f7ff f854 	bl	8011d9e <vListInsert>
}
 8012cf6:	e010      	b.n	8012d1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8012d38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8012d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	3304      	adds	r3, #4
 8012d02:	4619      	mov	r1, r3
 8012d04:	4610      	mov	r0, r2
 8012d06:	f7ff f84a 	bl	8011d9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8012d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	68ba      	ldr	r2, [r7, #8]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d202      	bcs.n	8012d1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012d14:	4a09      	ldr	r2, [pc, #36]	@ (8012d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	6013      	str	r3, [r2, #0]
}
 8012d1a:	bf00      	nop
 8012d1c:	3710      	adds	r7, #16
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	24075750 	.word	0x24075750
 8012d28:	2407564c 	.word	0x2407564c
 8012d2c:	24075754 	.word	0x24075754
 8012d30:	24075738 	.word	0x24075738
 8012d34:	24075708 	.word	0x24075708
 8012d38:	24075704 	.word	0x24075704
 8012d3c:	2407576c 	.word	0x2407576c

08012d40 <__cvt>:
 8012d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d42:	ed2d 8b02 	vpush	{d8}
 8012d46:	eeb0 8b40 	vmov.f64	d8, d0
 8012d4a:	b085      	sub	sp, #20
 8012d4c:	4617      	mov	r7, r2
 8012d4e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012d50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012d52:	ee18 2a90 	vmov	r2, s17
 8012d56:	f025 0520 	bic.w	r5, r5, #32
 8012d5a:	2a00      	cmp	r2, #0
 8012d5c:	bfb6      	itet	lt
 8012d5e:	222d      	movlt	r2, #45	@ 0x2d
 8012d60:	2200      	movge	r2, #0
 8012d62:	eeb1 8b40 	vneglt.f64	d8, d0
 8012d66:	2d46      	cmp	r5, #70	@ 0x46
 8012d68:	460c      	mov	r4, r1
 8012d6a:	701a      	strb	r2, [r3, #0]
 8012d6c:	d004      	beq.n	8012d78 <__cvt+0x38>
 8012d6e:	2d45      	cmp	r5, #69	@ 0x45
 8012d70:	d100      	bne.n	8012d74 <__cvt+0x34>
 8012d72:	3401      	adds	r4, #1
 8012d74:	2102      	movs	r1, #2
 8012d76:	e000      	b.n	8012d7a <__cvt+0x3a>
 8012d78:	2103      	movs	r1, #3
 8012d7a:	ab03      	add	r3, sp, #12
 8012d7c:	9301      	str	r3, [sp, #4]
 8012d7e:	ab02      	add	r3, sp, #8
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	4622      	mov	r2, r4
 8012d84:	4633      	mov	r3, r6
 8012d86:	eeb0 0b48 	vmov.f64	d0, d8
 8012d8a:	f000 feb5 	bl	8013af8 <_dtoa_r>
 8012d8e:	2d47      	cmp	r5, #71	@ 0x47
 8012d90:	d114      	bne.n	8012dbc <__cvt+0x7c>
 8012d92:	07fb      	lsls	r3, r7, #31
 8012d94:	d50a      	bpl.n	8012dac <__cvt+0x6c>
 8012d96:	1902      	adds	r2, r0, r4
 8012d98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da0:	bf08      	it	eq
 8012da2:	9203      	streq	r2, [sp, #12]
 8012da4:	2130      	movs	r1, #48	@ 0x30
 8012da6:	9b03      	ldr	r3, [sp, #12]
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d319      	bcc.n	8012de0 <__cvt+0xa0>
 8012dac:	9b03      	ldr	r3, [sp, #12]
 8012dae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012db0:	1a1b      	subs	r3, r3, r0
 8012db2:	6013      	str	r3, [r2, #0]
 8012db4:	b005      	add	sp, #20
 8012db6:	ecbd 8b02 	vpop	{d8}
 8012dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dbc:	2d46      	cmp	r5, #70	@ 0x46
 8012dbe:	eb00 0204 	add.w	r2, r0, r4
 8012dc2:	d1e9      	bne.n	8012d98 <__cvt+0x58>
 8012dc4:	7803      	ldrb	r3, [r0, #0]
 8012dc6:	2b30      	cmp	r3, #48	@ 0x30
 8012dc8:	d107      	bne.n	8012dda <__cvt+0x9a>
 8012dca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd2:	bf1c      	itt	ne
 8012dd4:	f1c4 0401 	rsbne	r4, r4, #1
 8012dd8:	6034      	strne	r4, [r6, #0]
 8012dda:	6833      	ldr	r3, [r6, #0]
 8012ddc:	441a      	add	r2, r3
 8012dde:	e7db      	b.n	8012d98 <__cvt+0x58>
 8012de0:	1c5c      	adds	r4, r3, #1
 8012de2:	9403      	str	r4, [sp, #12]
 8012de4:	7019      	strb	r1, [r3, #0]
 8012de6:	e7de      	b.n	8012da6 <__cvt+0x66>

08012de8 <__exponent>:
 8012de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dea:	2900      	cmp	r1, #0
 8012dec:	bfba      	itte	lt
 8012dee:	4249      	neglt	r1, r1
 8012df0:	232d      	movlt	r3, #45	@ 0x2d
 8012df2:	232b      	movge	r3, #43	@ 0x2b
 8012df4:	2909      	cmp	r1, #9
 8012df6:	7002      	strb	r2, [r0, #0]
 8012df8:	7043      	strb	r3, [r0, #1]
 8012dfa:	dd29      	ble.n	8012e50 <__exponent+0x68>
 8012dfc:	f10d 0307 	add.w	r3, sp, #7
 8012e00:	461d      	mov	r5, r3
 8012e02:	270a      	movs	r7, #10
 8012e04:	461a      	mov	r2, r3
 8012e06:	fbb1 f6f7 	udiv	r6, r1, r7
 8012e0a:	fb07 1416 	mls	r4, r7, r6, r1
 8012e0e:	3430      	adds	r4, #48	@ 0x30
 8012e10:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012e14:	460c      	mov	r4, r1
 8012e16:	2c63      	cmp	r4, #99	@ 0x63
 8012e18:	f103 33ff 	add.w	r3, r3, #4294967295
 8012e1c:	4631      	mov	r1, r6
 8012e1e:	dcf1      	bgt.n	8012e04 <__exponent+0x1c>
 8012e20:	3130      	adds	r1, #48	@ 0x30
 8012e22:	1e94      	subs	r4, r2, #2
 8012e24:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012e28:	1c41      	adds	r1, r0, #1
 8012e2a:	4623      	mov	r3, r4
 8012e2c:	42ab      	cmp	r3, r5
 8012e2e:	d30a      	bcc.n	8012e46 <__exponent+0x5e>
 8012e30:	f10d 0309 	add.w	r3, sp, #9
 8012e34:	1a9b      	subs	r3, r3, r2
 8012e36:	42ac      	cmp	r4, r5
 8012e38:	bf88      	it	hi
 8012e3a:	2300      	movhi	r3, #0
 8012e3c:	3302      	adds	r3, #2
 8012e3e:	4403      	add	r3, r0
 8012e40:	1a18      	subs	r0, r3, r0
 8012e42:	b003      	add	sp, #12
 8012e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012e4a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012e4e:	e7ed      	b.n	8012e2c <__exponent+0x44>
 8012e50:	2330      	movs	r3, #48	@ 0x30
 8012e52:	3130      	adds	r1, #48	@ 0x30
 8012e54:	7083      	strb	r3, [r0, #2]
 8012e56:	70c1      	strb	r1, [r0, #3]
 8012e58:	1d03      	adds	r3, r0, #4
 8012e5a:	e7f1      	b.n	8012e40 <__exponent+0x58>
 8012e5c:	0000      	movs	r0, r0
	...

08012e60 <_printf_float>:
 8012e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	b08d      	sub	sp, #52	@ 0x34
 8012e66:	460c      	mov	r4, r1
 8012e68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012e6c:	4616      	mov	r6, r2
 8012e6e:	461f      	mov	r7, r3
 8012e70:	4605      	mov	r5, r0
 8012e72:	f000 fcdd 	bl	8013830 <_localeconv_r>
 8012e76:	f8d0 b000 	ldr.w	fp, [r0]
 8012e7a:	4658      	mov	r0, fp
 8012e7c:	f7ed fa80 	bl	8000380 <strlen>
 8012e80:	2300      	movs	r3, #0
 8012e82:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e84:	f8d8 3000 	ldr.w	r3, [r8]
 8012e88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012e8c:	6822      	ldr	r2, [r4, #0]
 8012e8e:	9005      	str	r0, [sp, #20]
 8012e90:	3307      	adds	r3, #7
 8012e92:	f023 0307 	bic.w	r3, r3, #7
 8012e96:	f103 0108 	add.w	r1, r3, #8
 8012e9a:	f8c8 1000 	str.w	r1, [r8]
 8012e9e:	ed93 0b00 	vldr	d0, [r3]
 8012ea2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013100 <_printf_float+0x2a0>
 8012ea6:	eeb0 7bc0 	vabs.f64	d7, d0
 8012eaa:	eeb4 7b46 	vcmp.f64	d7, d6
 8012eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8012eb6:	dd24      	ble.n	8012f02 <_printf_float+0xa2>
 8012eb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec0:	d502      	bpl.n	8012ec8 <_printf_float+0x68>
 8012ec2:	232d      	movs	r3, #45	@ 0x2d
 8012ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ec8:	498f      	ldr	r1, [pc, #572]	@ (8013108 <_printf_float+0x2a8>)
 8012eca:	4b90      	ldr	r3, [pc, #576]	@ (801310c <_printf_float+0x2ac>)
 8012ecc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012ed0:	bf94      	ite	ls
 8012ed2:	4688      	movls	r8, r1
 8012ed4:	4698      	movhi	r8, r3
 8012ed6:	f022 0204 	bic.w	r2, r2, #4
 8012eda:	2303      	movs	r3, #3
 8012edc:	6123      	str	r3, [r4, #16]
 8012ede:	6022      	str	r2, [r4, #0]
 8012ee0:	f04f 0a00 	mov.w	sl, #0
 8012ee4:	9700      	str	r7, [sp, #0]
 8012ee6:	4633      	mov	r3, r6
 8012ee8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012eea:	4621      	mov	r1, r4
 8012eec:	4628      	mov	r0, r5
 8012eee:	f000 f9d1 	bl	8013294 <_printf_common>
 8012ef2:	3001      	adds	r0, #1
 8012ef4:	f040 8089 	bne.w	801300a <_printf_float+0x1aa>
 8012ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8012efc:	b00d      	add	sp, #52	@ 0x34
 8012efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f02:	eeb4 0b40 	vcmp.f64	d0, d0
 8012f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0a:	d709      	bvc.n	8012f20 <_printf_float+0xc0>
 8012f0c:	ee10 3a90 	vmov	r3, s1
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	bfbc      	itt	lt
 8012f14:	232d      	movlt	r3, #45	@ 0x2d
 8012f16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012f1a:	497d      	ldr	r1, [pc, #500]	@ (8013110 <_printf_float+0x2b0>)
 8012f1c:	4b7d      	ldr	r3, [pc, #500]	@ (8013114 <_printf_float+0x2b4>)
 8012f1e:	e7d5      	b.n	8012ecc <_printf_float+0x6c>
 8012f20:	6863      	ldr	r3, [r4, #4]
 8012f22:	1c59      	adds	r1, r3, #1
 8012f24:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012f28:	d139      	bne.n	8012f9e <_printf_float+0x13e>
 8012f2a:	2306      	movs	r3, #6
 8012f2c:	6063      	str	r3, [r4, #4]
 8012f2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012f32:	2300      	movs	r3, #0
 8012f34:	6022      	str	r2, [r4, #0]
 8012f36:	9303      	str	r3, [sp, #12]
 8012f38:	ab0a      	add	r3, sp, #40	@ 0x28
 8012f3a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012f3e:	ab09      	add	r3, sp, #36	@ 0x24
 8012f40:	9300      	str	r3, [sp, #0]
 8012f42:	6861      	ldr	r1, [r4, #4]
 8012f44:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f7ff fef9 	bl	8012d40 <__cvt>
 8012f4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012f52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012f54:	4680      	mov	r8, r0
 8012f56:	d129      	bne.n	8012fac <_printf_float+0x14c>
 8012f58:	1cc8      	adds	r0, r1, #3
 8012f5a:	db02      	blt.n	8012f62 <_printf_float+0x102>
 8012f5c:	6863      	ldr	r3, [r4, #4]
 8012f5e:	4299      	cmp	r1, r3
 8012f60:	dd41      	ble.n	8012fe6 <_printf_float+0x186>
 8012f62:	f1a9 0902 	sub.w	r9, r9, #2
 8012f66:	fa5f f989 	uxtb.w	r9, r9
 8012f6a:	3901      	subs	r1, #1
 8012f6c:	464a      	mov	r2, r9
 8012f6e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012f72:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f74:	f7ff ff38 	bl	8012de8 <__exponent>
 8012f78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012f7a:	1813      	adds	r3, r2, r0
 8012f7c:	2a01      	cmp	r2, #1
 8012f7e:	4682      	mov	sl, r0
 8012f80:	6123      	str	r3, [r4, #16]
 8012f82:	dc02      	bgt.n	8012f8a <_printf_float+0x12a>
 8012f84:	6822      	ldr	r2, [r4, #0]
 8012f86:	07d2      	lsls	r2, r2, #31
 8012f88:	d501      	bpl.n	8012f8e <_printf_float+0x12e>
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	6123      	str	r3, [r4, #16]
 8012f8e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d0a6      	beq.n	8012ee4 <_printf_float+0x84>
 8012f96:	232d      	movs	r3, #45	@ 0x2d
 8012f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f9c:	e7a2      	b.n	8012ee4 <_printf_float+0x84>
 8012f9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012fa2:	d1c4      	bne.n	8012f2e <_printf_float+0xce>
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d1c2      	bne.n	8012f2e <_printf_float+0xce>
 8012fa8:	2301      	movs	r3, #1
 8012faa:	e7bf      	b.n	8012f2c <_printf_float+0xcc>
 8012fac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012fb0:	d9db      	bls.n	8012f6a <_printf_float+0x10a>
 8012fb2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012fb6:	d118      	bne.n	8012fea <_printf_float+0x18a>
 8012fb8:	2900      	cmp	r1, #0
 8012fba:	6863      	ldr	r3, [r4, #4]
 8012fbc:	dd0b      	ble.n	8012fd6 <_printf_float+0x176>
 8012fbe:	6121      	str	r1, [r4, #16]
 8012fc0:	b913      	cbnz	r3, 8012fc8 <_printf_float+0x168>
 8012fc2:	6822      	ldr	r2, [r4, #0]
 8012fc4:	07d0      	lsls	r0, r2, #31
 8012fc6:	d502      	bpl.n	8012fce <_printf_float+0x16e>
 8012fc8:	3301      	adds	r3, #1
 8012fca:	440b      	add	r3, r1
 8012fcc:	6123      	str	r3, [r4, #16]
 8012fce:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012fd0:	f04f 0a00 	mov.w	sl, #0
 8012fd4:	e7db      	b.n	8012f8e <_printf_float+0x12e>
 8012fd6:	b913      	cbnz	r3, 8012fde <_printf_float+0x17e>
 8012fd8:	6822      	ldr	r2, [r4, #0]
 8012fda:	07d2      	lsls	r2, r2, #31
 8012fdc:	d501      	bpl.n	8012fe2 <_printf_float+0x182>
 8012fde:	3302      	adds	r3, #2
 8012fe0:	e7f4      	b.n	8012fcc <_printf_float+0x16c>
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	e7f2      	b.n	8012fcc <_printf_float+0x16c>
 8012fe6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fec:	4299      	cmp	r1, r3
 8012fee:	db05      	blt.n	8012ffc <_printf_float+0x19c>
 8012ff0:	6823      	ldr	r3, [r4, #0]
 8012ff2:	6121      	str	r1, [r4, #16]
 8012ff4:	07d8      	lsls	r0, r3, #31
 8012ff6:	d5ea      	bpl.n	8012fce <_printf_float+0x16e>
 8012ff8:	1c4b      	adds	r3, r1, #1
 8012ffa:	e7e7      	b.n	8012fcc <_printf_float+0x16c>
 8012ffc:	2900      	cmp	r1, #0
 8012ffe:	bfd4      	ite	le
 8013000:	f1c1 0202 	rsble	r2, r1, #2
 8013004:	2201      	movgt	r2, #1
 8013006:	4413      	add	r3, r2
 8013008:	e7e0      	b.n	8012fcc <_printf_float+0x16c>
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	055a      	lsls	r2, r3, #21
 801300e:	d407      	bmi.n	8013020 <_printf_float+0x1c0>
 8013010:	6923      	ldr	r3, [r4, #16]
 8013012:	4642      	mov	r2, r8
 8013014:	4631      	mov	r1, r6
 8013016:	4628      	mov	r0, r5
 8013018:	47b8      	blx	r7
 801301a:	3001      	adds	r0, #1
 801301c:	d12a      	bne.n	8013074 <_printf_float+0x214>
 801301e:	e76b      	b.n	8012ef8 <_printf_float+0x98>
 8013020:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013024:	f240 80e0 	bls.w	80131e8 <_printf_float+0x388>
 8013028:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801302c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013034:	d133      	bne.n	801309e <_printf_float+0x23e>
 8013036:	4a38      	ldr	r2, [pc, #224]	@ (8013118 <_printf_float+0x2b8>)
 8013038:	2301      	movs	r3, #1
 801303a:	4631      	mov	r1, r6
 801303c:	4628      	mov	r0, r5
 801303e:	47b8      	blx	r7
 8013040:	3001      	adds	r0, #1
 8013042:	f43f af59 	beq.w	8012ef8 <_printf_float+0x98>
 8013046:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801304a:	4543      	cmp	r3, r8
 801304c:	db02      	blt.n	8013054 <_printf_float+0x1f4>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	07d8      	lsls	r0, r3, #31
 8013052:	d50f      	bpl.n	8013074 <_printf_float+0x214>
 8013054:	9b05      	ldr	r3, [sp, #20]
 8013056:	465a      	mov	r2, fp
 8013058:	4631      	mov	r1, r6
 801305a:	4628      	mov	r0, r5
 801305c:	47b8      	blx	r7
 801305e:	3001      	adds	r0, #1
 8013060:	f43f af4a 	beq.w	8012ef8 <_printf_float+0x98>
 8013064:	f04f 0900 	mov.w	r9, #0
 8013068:	f108 38ff 	add.w	r8, r8, #4294967295
 801306c:	f104 0a1a 	add.w	sl, r4, #26
 8013070:	45c8      	cmp	r8, r9
 8013072:	dc09      	bgt.n	8013088 <_printf_float+0x228>
 8013074:	6823      	ldr	r3, [r4, #0]
 8013076:	079b      	lsls	r3, r3, #30
 8013078:	f100 8107 	bmi.w	801328a <_printf_float+0x42a>
 801307c:	68e0      	ldr	r0, [r4, #12]
 801307e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013080:	4298      	cmp	r0, r3
 8013082:	bfb8      	it	lt
 8013084:	4618      	movlt	r0, r3
 8013086:	e739      	b.n	8012efc <_printf_float+0x9c>
 8013088:	2301      	movs	r3, #1
 801308a:	4652      	mov	r2, sl
 801308c:	4631      	mov	r1, r6
 801308e:	4628      	mov	r0, r5
 8013090:	47b8      	blx	r7
 8013092:	3001      	adds	r0, #1
 8013094:	f43f af30 	beq.w	8012ef8 <_printf_float+0x98>
 8013098:	f109 0901 	add.w	r9, r9, #1
 801309c:	e7e8      	b.n	8013070 <_printf_float+0x210>
 801309e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	dc3b      	bgt.n	801311c <_printf_float+0x2bc>
 80130a4:	4a1c      	ldr	r2, [pc, #112]	@ (8013118 <_printf_float+0x2b8>)
 80130a6:	2301      	movs	r3, #1
 80130a8:	4631      	mov	r1, r6
 80130aa:	4628      	mov	r0, r5
 80130ac:	47b8      	blx	r7
 80130ae:	3001      	adds	r0, #1
 80130b0:	f43f af22 	beq.w	8012ef8 <_printf_float+0x98>
 80130b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80130b8:	ea59 0303 	orrs.w	r3, r9, r3
 80130bc:	d102      	bne.n	80130c4 <_printf_float+0x264>
 80130be:	6823      	ldr	r3, [r4, #0]
 80130c0:	07d9      	lsls	r1, r3, #31
 80130c2:	d5d7      	bpl.n	8013074 <_printf_float+0x214>
 80130c4:	9b05      	ldr	r3, [sp, #20]
 80130c6:	465a      	mov	r2, fp
 80130c8:	4631      	mov	r1, r6
 80130ca:	4628      	mov	r0, r5
 80130cc:	47b8      	blx	r7
 80130ce:	3001      	adds	r0, #1
 80130d0:	f43f af12 	beq.w	8012ef8 <_printf_float+0x98>
 80130d4:	f04f 0a00 	mov.w	sl, #0
 80130d8:	f104 0b1a 	add.w	fp, r4, #26
 80130dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80130de:	425b      	negs	r3, r3
 80130e0:	4553      	cmp	r3, sl
 80130e2:	dc01      	bgt.n	80130e8 <_printf_float+0x288>
 80130e4:	464b      	mov	r3, r9
 80130e6:	e794      	b.n	8013012 <_printf_float+0x1b2>
 80130e8:	2301      	movs	r3, #1
 80130ea:	465a      	mov	r2, fp
 80130ec:	4631      	mov	r1, r6
 80130ee:	4628      	mov	r0, r5
 80130f0:	47b8      	blx	r7
 80130f2:	3001      	adds	r0, #1
 80130f4:	f43f af00 	beq.w	8012ef8 <_printf_float+0x98>
 80130f8:	f10a 0a01 	add.w	sl, sl, #1
 80130fc:	e7ee      	b.n	80130dc <_printf_float+0x27c>
 80130fe:	bf00      	nop
 8013100:	ffffffff 	.word	0xffffffff
 8013104:	7fefffff 	.word	0x7fefffff
 8013108:	08017888 	.word	0x08017888
 801310c:	0801788c 	.word	0x0801788c
 8013110:	08017890 	.word	0x08017890
 8013114:	08017894 	.word	0x08017894
 8013118:	08017898 	.word	0x08017898
 801311c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801311e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013122:	4553      	cmp	r3, sl
 8013124:	bfa8      	it	ge
 8013126:	4653      	movge	r3, sl
 8013128:	2b00      	cmp	r3, #0
 801312a:	4699      	mov	r9, r3
 801312c:	dc37      	bgt.n	801319e <_printf_float+0x33e>
 801312e:	2300      	movs	r3, #0
 8013130:	9307      	str	r3, [sp, #28]
 8013132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013136:	f104 021a 	add.w	r2, r4, #26
 801313a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801313c:	9907      	ldr	r1, [sp, #28]
 801313e:	9306      	str	r3, [sp, #24]
 8013140:	eba3 0309 	sub.w	r3, r3, r9
 8013144:	428b      	cmp	r3, r1
 8013146:	dc31      	bgt.n	80131ac <_printf_float+0x34c>
 8013148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801314a:	459a      	cmp	sl, r3
 801314c:	dc3b      	bgt.n	80131c6 <_printf_float+0x366>
 801314e:	6823      	ldr	r3, [r4, #0]
 8013150:	07da      	lsls	r2, r3, #31
 8013152:	d438      	bmi.n	80131c6 <_printf_float+0x366>
 8013154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013156:	ebaa 0903 	sub.w	r9, sl, r3
 801315a:	9b06      	ldr	r3, [sp, #24]
 801315c:	ebaa 0303 	sub.w	r3, sl, r3
 8013160:	4599      	cmp	r9, r3
 8013162:	bfa8      	it	ge
 8013164:	4699      	movge	r9, r3
 8013166:	f1b9 0f00 	cmp.w	r9, #0
 801316a:	dc34      	bgt.n	80131d6 <_printf_float+0x376>
 801316c:	f04f 0800 	mov.w	r8, #0
 8013170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013174:	f104 0b1a 	add.w	fp, r4, #26
 8013178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801317a:	ebaa 0303 	sub.w	r3, sl, r3
 801317e:	eba3 0309 	sub.w	r3, r3, r9
 8013182:	4543      	cmp	r3, r8
 8013184:	f77f af76 	ble.w	8013074 <_printf_float+0x214>
 8013188:	2301      	movs	r3, #1
 801318a:	465a      	mov	r2, fp
 801318c:	4631      	mov	r1, r6
 801318e:	4628      	mov	r0, r5
 8013190:	47b8      	blx	r7
 8013192:	3001      	adds	r0, #1
 8013194:	f43f aeb0 	beq.w	8012ef8 <_printf_float+0x98>
 8013198:	f108 0801 	add.w	r8, r8, #1
 801319c:	e7ec      	b.n	8013178 <_printf_float+0x318>
 801319e:	4642      	mov	r2, r8
 80131a0:	4631      	mov	r1, r6
 80131a2:	4628      	mov	r0, r5
 80131a4:	47b8      	blx	r7
 80131a6:	3001      	adds	r0, #1
 80131a8:	d1c1      	bne.n	801312e <_printf_float+0x2ce>
 80131aa:	e6a5      	b.n	8012ef8 <_printf_float+0x98>
 80131ac:	2301      	movs	r3, #1
 80131ae:	4631      	mov	r1, r6
 80131b0:	4628      	mov	r0, r5
 80131b2:	9206      	str	r2, [sp, #24]
 80131b4:	47b8      	blx	r7
 80131b6:	3001      	adds	r0, #1
 80131b8:	f43f ae9e 	beq.w	8012ef8 <_printf_float+0x98>
 80131bc:	9b07      	ldr	r3, [sp, #28]
 80131be:	9a06      	ldr	r2, [sp, #24]
 80131c0:	3301      	adds	r3, #1
 80131c2:	9307      	str	r3, [sp, #28]
 80131c4:	e7b9      	b.n	801313a <_printf_float+0x2da>
 80131c6:	9b05      	ldr	r3, [sp, #20]
 80131c8:	465a      	mov	r2, fp
 80131ca:	4631      	mov	r1, r6
 80131cc:	4628      	mov	r0, r5
 80131ce:	47b8      	blx	r7
 80131d0:	3001      	adds	r0, #1
 80131d2:	d1bf      	bne.n	8013154 <_printf_float+0x2f4>
 80131d4:	e690      	b.n	8012ef8 <_printf_float+0x98>
 80131d6:	9a06      	ldr	r2, [sp, #24]
 80131d8:	464b      	mov	r3, r9
 80131da:	4442      	add	r2, r8
 80131dc:	4631      	mov	r1, r6
 80131de:	4628      	mov	r0, r5
 80131e0:	47b8      	blx	r7
 80131e2:	3001      	adds	r0, #1
 80131e4:	d1c2      	bne.n	801316c <_printf_float+0x30c>
 80131e6:	e687      	b.n	8012ef8 <_printf_float+0x98>
 80131e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80131ec:	f1b9 0f01 	cmp.w	r9, #1
 80131f0:	dc01      	bgt.n	80131f6 <_printf_float+0x396>
 80131f2:	07db      	lsls	r3, r3, #31
 80131f4:	d536      	bpl.n	8013264 <_printf_float+0x404>
 80131f6:	2301      	movs	r3, #1
 80131f8:	4642      	mov	r2, r8
 80131fa:	4631      	mov	r1, r6
 80131fc:	4628      	mov	r0, r5
 80131fe:	47b8      	blx	r7
 8013200:	3001      	adds	r0, #1
 8013202:	f43f ae79 	beq.w	8012ef8 <_printf_float+0x98>
 8013206:	9b05      	ldr	r3, [sp, #20]
 8013208:	465a      	mov	r2, fp
 801320a:	4631      	mov	r1, r6
 801320c:	4628      	mov	r0, r5
 801320e:	47b8      	blx	r7
 8013210:	3001      	adds	r0, #1
 8013212:	f43f ae71 	beq.w	8012ef8 <_printf_float+0x98>
 8013216:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801321a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013222:	f109 39ff 	add.w	r9, r9, #4294967295
 8013226:	d018      	beq.n	801325a <_printf_float+0x3fa>
 8013228:	464b      	mov	r3, r9
 801322a:	f108 0201 	add.w	r2, r8, #1
 801322e:	4631      	mov	r1, r6
 8013230:	4628      	mov	r0, r5
 8013232:	47b8      	blx	r7
 8013234:	3001      	adds	r0, #1
 8013236:	d10c      	bne.n	8013252 <_printf_float+0x3f2>
 8013238:	e65e      	b.n	8012ef8 <_printf_float+0x98>
 801323a:	2301      	movs	r3, #1
 801323c:	465a      	mov	r2, fp
 801323e:	4631      	mov	r1, r6
 8013240:	4628      	mov	r0, r5
 8013242:	47b8      	blx	r7
 8013244:	3001      	adds	r0, #1
 8013246:	f43f ae57 	beq.w	8012ef8 <_printf_float+0x98>
 801324a:	f108 0801 	add.w	r8, r8, #1
 801324e:	45c8      	cmp	r8, r9
 8013250:	dbf3      	blt.n	801323a <_printf_float+0x3da>
 8013252:	4653      	mov	r3, sl
 8013254:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013258:	e6dc      	b.n	8013014 <_printf_float+0x1b4>
 801325a:	f04f 0800 	mov.w	r8, #0
 801325e:	f104 0b1a 	add.w	fp, r4, #26
 8013262:	e7f4      	b.n	801324e <_printf_float+0x3ee>
 8013264:	2301      	movs	r3, #1
 8013266:	4642      	mov	r2, r8
 8013268:	e7e1      	b.n	801322e <_printf_float+0x3ce>
 801326a:	2301      	movs	r3, #1
 801326c:	464a      	mov	r2, r9
 801326e:	4631      	mov	r1, r6
 8013270:	4628      	mov	r0, r5
 8013272:	47b8      	blx	r7
 8013274:	3001      	adds	r0, #1
 8013276:	f43f ae3f 	beq.w	8012ef8 <_printf_float+0x98>
 801327a:	f108 0801 	add.w	r8, r8, #1
 801327e:	68e3      	ldr	r3, [r4, #12]
 8013280:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013282:	1a5b      	subs	r3, r3, r1
 8013284:	4543      	cmp	r3, r8
 8013286:	dcf0      	bgt.n	801326a <_printf_float+0x40a>
 8013288:	e6f8      	b.n	801307c <_printf_float+0x21c>
 801328a:	f04f 0800 	mov.w	r8, #0
 801328e:	f104 0919 	add.w	r9, r4, #25
 8013292:	e7f4      	b.n	801327e <_printf_float+0x41e>

08013294 <_printf_common>:
 8013294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013298:	4616      	mov	r6, r2
 801329a:	4698      	mov	r8, r3
 801329c:	688a      	ldr	r2, [r1, #8]
 801329e:	690b      	ldr	r3, [r1, #16]
 80132a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80132a4:	4293      	cmp	r3, r2
 80132a6:	bfb8      	it	lt
 80132a8:	4613      	movlt	r3, r2
 80132aa:	6033      	str	r3, [r6, #0]
 80132ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80132b0:	4607      	mov	r7, r0
 80132b2:	460c      	mov	r4, r1
 80132b4:	b10a      	cbz	r2, 80132ba <_printf_common+0x26>
 80132b6:	3301      	adds	r3, #1
 80132b8:	6033      	str	r3, [r6, #0]
 80132ba:	6823      	ldr	r3, [r4, #0]
 80132bc:	0699      	lsls	r1, r3, #26
 80132be:	bf42      	ittt	mi
 80132c0:	6833      	ldrmi	r3, [r6, #0]
 80132c2:	3302      	addmi	r3, #2
 80132c4:	6033      	strmi	r3, [r6, #0]
 80132c6:	6825      	ldr	r5, [r4, #0]
 80132c8:	f015 0506 	ands.w	r5, r5, #6
 80132cc:	d106      	bne.n	80132dc <_printf_common+0x48>
 80132ce:	f104 0a19 	add.w	sl, r4, #25
 80132d2:	68e3      	ldr	r3, [r4, #12]
 80132d4:	6832      	ldr	r2, [r6, #0]
 80132d6:	1a9b      	subs	r3, r3, r2
 80132d8:	42ab      	cmp	r3, r5
 80132da:	dc26      	bgt.n	801332a <_printf_common+0x96>
 80132dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80132e0:	6822      	ldr	r2, [r4, #0]
 80132e2:	3b00      	subs	r3, #0
 80132e4:	bf18      	it	ne
 80132e6:	2301      	movne	r3, #1
 80132e8:	0692      	lsls	r2, r2, #26
 80132ea:	d42b      	bmi.n	8013344 <_printf_common+0xb0>
 80132ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80132f0:	4641      	mov	r1, r8
 80132f2:	4638      	mov	r0, r7
 80132f4:	47c8      	blx	r9
 80132f6:	3001      	adds	r0, #1
 80132f8:	d01e      	beq.n	8013338 <_printf_common+0xa4>
 80132fa:	6823      	ldr	r3, [r4, #0]
 80132fc:	6922      	ldr	r2, [r4, #16]
 80132fe:	f003 0306 	and.w	r3, r3, #6
 8013302:	2b04      	cmp	r3, #4
 8013304:	bf02      	ittt	eq
 8013306:	68e5      	ldreq	r5, [r4, #12]
 8013308:	6833      	ldreq	r3, [r6, #0]
 801330a:	1aed      	subeq	r5, r5, r3
 801330c:	68a3      	ldr	r3, [r4, #8]
 801330e:	bf0c      	ite	eq
 8013310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013314:	2500      	movne	r5, #0
 8013316:	4293      	cmp	r3, r2
 8013318:	bfc4      	itt	gt
 801331a:	1a9b      	subgt	r3, r3, r2
 801331c:	18ed      	addgt	r5, r5, r3
 801331e:	2600      	movs	r6, #0
 8013320:	341a      	adds	r4, #26
 8013322:	42b5      	cmp	r5, r6
 8013324:	d11a      	bne.n	801335c <_printf_common+0xc8>
 8013326:	2000      	movs	r0, #0
 8013328:	e008      	b.n	801333c <_printf_common+0xa8>
 801332a:	2301      	movs	r3, #1
 801332c:	4652      	mov	r2, sl
 801332e:	4641      	mov	r1, r8
 8013330:	4638      	mov	r0, r7
 8013332:	47c8      	blx	r9
 8013334:	3001      	adds	r0, #1
 8013336:	d103      	bne.n	8013340 <_printf_common+0xac>
 8013338:	f04f 30ff 	mov.w	r0, #4294967295
 801333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013340:	3501      	adds	r5, #1
 8013342:	e7c6      	b.n	80132d2 <_printf_common+0x3e>
 8013344:	18e1      	adds	r1, r4, r3
 8013346:	1c5a      	adds	r2, r3, #1
 8013348:	2030      	movs	r0, #48	@ 0x30
 801334a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801334e:	4422      	add	r2, r4
 8013350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013354:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013358:	3302      	adds	r3, #2
 801335a:	e7c7      	b.n	80132ec <_printf_common+0x58>
 801335c:	2301      	movs	r3, #1
 801335e:	4622      	mov	r2, r4
 8013360:	4641      	mov	r1, r8
 8013362:	4638      	mov	r0, r7
 8013364:	47c8      	blx	r9
 8013366:	3001      	adds	r0, #1
 8013368:	d0e6      	beq.n	8013338 <_printf_common+0xa4>
 801336a:	3601      	adds	r6, #1
 801336c:	e7d9      	b.n	8013322 <_printf_common+0x8e>
	...

08013370 <_printf_i>:
 8013370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013374:	7e0f      	ldrb	r7, [r1, #24]
 8013376:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013378:	2f78      	cmp	r7, #120	@ 0x78
 801337a:	4691      	mov	r9, r2
 801337c:	4680      	mov	r8, r0
 801337e:	460c      	mov	r4, r1
 8013380:	469a      	mov	sl, r3
 8013382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013386:	d807      	bhi.n	8013398 <_printf_i+0x28>
 8013388:	2f62      	cmp	r7, #98	@ 0x62
 801338a:	d80a      	bhi.n	80133a2 <_printf_i+0x32>
 801338c:	2f00      	cmp	r7, #0
 801338e:	f000 80d2 	beq.w	8013536 <_printf_i+0x1c6>
 8013392:	2f58      	cmp	r7, #88	@ 0x58
 8013394:	f000 80b9 	beq.w	801350a <_printf_i+0x19a>
 8013398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801339c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80133a0:	e03a      	b.n	8013418 <_printf_i+0xa8>
 80133a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80133a6:	2b15      	cmp	r3, #21
 80133a8:	d8f6      	bhi.n	8013398 <_printf_i+0x28>
 80133aa:	a101      	add	r1, pc, #4	@ (adr r1, 80133b0 <_printf_i+0x40>)
 80133ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80133b0:	08013409 	.word	0x08013409
 80133b4:	0801341d 	.word	0x0801341d
 80133b8:	08013399 	.word	0x08013399
 80133bc:	08013399 	.word	0x08013399
 80133c0:	08013399 	.word	0x08013399
 80133c4:	08013399 	.word	0x08013399
 80133c8:	0801341d 	.word	0x0801341d
 80133cc:	08013399 	.word	0x08013399
 80133d0:	08013399 	.word	0x08013399
 80133d4:	08013399 	.word	0x08013399
 80133d8:	08013399 	.word	0x08013399
 80133dc:	0801351d 	.word	0x0801351d
 80133e0:	08013447 	.word	0x08013447
 80133e4:	080134d7 	.word	0x080134d7
 80133e8:	08013399 	.word	0x08013399
 80133ec:	08013399 	.word	0x08013399
 80133f0:	0801353f 	.word	0x0801353f
 80133f4:	08013399 	.word	0x08013399
 80133f8:	08013447 	.word	0x08013447
 80133fc:	08013399 	.word	0x08013399
 8013400:	08013399 	.word	0x08013399
 8013404:	080134df 	.word	0x080134df
 8013408:	6833      	ldr	r3, [r6, #0]
 801340a:	1d1a      	adds	r2, r3, #4
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	6032      	str	r2, [r6, #0]
 8013410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013418:	2301      	movs	r3, #1
 801341a:	e09d      	b.n	8013558 <_printf_i+0x1e8>
 801341c:	6833      	ldr	r3, [r6, #0]
 801341e:	6820      	ldr	r0, [r4, #0]
 8013420:	1d19      	adds	r1, r3, #4
 8013422:	6031      	str	r1, [r6, #0]
 8013424:	0606      	lsls	r6, r0, #24
 8013426:	d501      	bpl.n	801342c <_printf_i+0xbc>
 8013428:	681d      	ldr	r5, [r3, #0]
 801342a:	e003      	b.n	8013434 <_printf_i+0xc4>
 801342c:	0645      	lsls	r5, r0, #25
 801342e:	d5fb      	bpl.n	8013428 <_printf_i+0xb8>
 8013430:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013434:	2d00      	cmp	r5, #0
 8013436:	da03      	bge.n	8013440 <_printf_i+0xd0>
 8013438:	232d      	movs	r3, #45	@ 0x2d
 801343a:	426d      	negs	r5, r5
 801343c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013440:	4859      	ldr	r0, [pc, #356]	@ (80135a8 <_printf_i+0x238>)
 8013442:	230a      	movs	r3, #10
 8013444:	e011      	b.n	801346a <_printf_i+0xfa>
 8013446:	6821      	ldr	r1, [r4, #0]
 8013448:	6833      	ldr	r3, [r6, #0]
 801344a:	0608      	lsls	r0, r1, #24
 801344c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013450:	d402      	bmi.n	8013458 <_printf_i+0xe8>
 8013452:	0649      	lsls	r1, r1, #25
 8013454:	bf48      	it	mi
 8013456:	b2ad      	uxthmi	r5, r5
 8013458:	2f6f      	cmp	r7, #111	@ 0x6f
 801345a:	4853      	ldr	r0, [pc, #332]	@ (80135a8 <_printf_i+0x238>)
 801345c:	6033      	str	r3, [r6, #0]
 801345e:	bf14      	ite	ne
 8013460:	230a      	movne	r3, #10
 8013462:	2308      	moveq	r3, #8
 8013464:	2100      	movs	r1, #0
 8013466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801346a:	6866      	ldr	r6, [r4, #4]
 801346c:	60a6      	str	r6, [r4, #8]
 801346e:	2e00      	cmp	r6, #0
 8013470:	bfa2      	ittt	ge
 8013472:	6821      	ldrge	r1, [r4, #0]
 8013474:	f021 0104 	bicge.w	r1, r1, #4
 8013478:	6021      	strge	r1, [r4, #0]
 801347a:	b90d      	cbnz	r5, 8013480 <_printf_i+0x110>
 801347c:	2e00      	cmp	r6, #0
 801347e:	d04b      	beq.n	8013518 <_printf_i+0x1a8>
 8013480:	4616      	mov	r6, r2
 8013482:	fbb5 f1f3 	udiv	r1, r5, r3
 8013486:	fb03 5711 	mls	r7, r3, r1, r5
 801348a:	5dc7      	ldrb	r7, [r0, r7]
 801348c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013490:	462f      	mov	r7, r5
 8013492:	42bb      	cmp	r3, r7
 8013494:	460d      	mov	r5, r1
 8013496:	d9f4      	bls.n	8013482 <_printf_i+0x112>
 8013498:	2b08      	cmp	r3, #8
 801349a:	d10b      	bne.n	80134b4 <_printf_i+0x144>
 801349c:	6823      	ldr	r3, [r4, #0]
 801349e:	07df      	lsls	r7, r3, #31
 80134a0:	d508      	bpl.n	80134b4 <_printf_i+0x144>
 80134a2:	6923      	ldr	r3, [r4, #16]
 80134a4:	6861      	ldr	r1, [r4, #4]
 80134a6:	4299      	cmp	r1, r3
 80134a8:	bfde      	ittt	le
 80134aa:	2330      	movle	r3, #48	@ 0x30
 80134ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80134b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80134b4:	1b92      	subs	r2, r2, r6
 80134b6:	6122      	str	r2, [r4, #16]
 80134b8:	f8cd a000 	str.w	sl, [sp]
 80134bc:	464b      	mov	r3, r9
 80134be:	aa03      	add	r2, sp, #12
 80134c0:	4621      	mov	r1, r4
 80134c2:	4640      	mov	r0, r8
 80134c4:	f7ff fee6 	bl	8013294 <_printf_common>
 80134c8:	3001      	adds	r0, #1
 80134ca:	d14a      	bne.n	8013562 <_printf_i+0x1f2>
 80134cc:	f04f 30ff 	mov.w	r0, #4294967295
 80134d0:	b004      	add	sp, #16
 80134d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d6:	6823      	ldr	r3, [r4, #0]
 80134d8:	f043 0320 	orr.w	r3, r3, #32
 80134dc:	6023      	str	r3, [r4, #0]
 80134de:	4833      	ldr	r0, [pc, #204]	@ (80135ac <_printf_i+0x23c>)
 80134e0:	2778      	movs	r7, #120	@ 0x78
 80134e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	6831      	ldr	r1, [r6, #0]
 80134ea:	061f      	lsls	r7, r3, #24
 80134ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80134f0:	d402      	bmi.n	80134f8 <_printf_i+0x188>
 80134f2:	065f      	lsls	r7, r3, #25
 80134f4:	bf48      	it	mi
 80134f6:	b2ad      	uxthmi	r5, r5
 80134f8:	6031      	str	r1, [r6, #0]
 80134fa:	07d9      	lsls	r1, r3, #31
 80134fc:	bf44      	itt	mi
 80134fe:	f043 0320 	orrmi.w	r3, r3, #32
 8013502:	6023      	strmi	r3, [r4, #0]
 8013504:	b11d      	cbz	r5, 801350e <_printf_i+0x19e>
 8013506:	2310      	movs	r3, #16
 8013508:	e7ac      	b.n	8013464 <_printf_i+0xf4>
 801350a:	4827      	ldr	r0, [pc, #156]	@ (80135a8 <_printf_i+0x238>)
 801350c:	e7e9      	b.n	80134e2 <_printf_i+0x172>
 801350e:	6823      	ldr	r3, [r4, #0]
 8013510:	f023 0320 	bic.w	r3, r3, #32
 8013514:	6023      	str	r3, [r4, #0]
 8013516:	e7f6      	b.n	8013506 <_printf_i+0x196>
 8013518:	4616      	mov	r6, r2
 801351a:	e7bd      	b.n	8013498 <_printf_i+0x128>
 801351c:	6833      	ldr	r3, [r6, #0]
 801351e:	6825      	ldr	r5, [r4, #0]
 8013520:	6961      	ldr	r1, [r4, #20]
 8013522:	1d18      	adds	r0, r3, #4
 8013524:	6030      	str	r0, [r6, #0]
 8013526:	062e      	lsls	r6, r5, #24
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	d501      	bpl.n	8013530 <_printf_i+0x1c0>
 801352c:	6019      	str	r1, [r3, #0]
 801352e:	e002      	b.n	8013536 <_printf_i+0x1c6>
 8013530:	0668      	lsls	r0, r5, #25
 8013532:	d5fb      	bpl.n	801352c <_printf_i+0x1bc>
 8013534:	8019      	strh	r1, [r3, #0]
 8013536:	2300      	movs	r3, #0
 8013538:	6123      	str	r3, [r4, #16]
 801353a:	4616      	mov	r6, r2
 801353c:	e7bc      	b.n	80134b8 <_printf_i+0x148>
 801353e:	6833      	ldr	r3, [r6, #0]
 8013540:	1d1a      	adds	r2, r3, #4
 8013542:	6032      	str	r2, [r6, #0]
 8013544:	681e      	ldr	r6, [r3, #0]
 8013546:	6862      	ldr	r2, [r4, #4]
 8013548:	2100      	movs	r1, #0
 801354a:	4630      	mov	r0, r6
 801354c:	f7ec fec8 	bl	80002e0 <memchr>
 8013550:	b108      	cbz	r0, 8013556 <_printf_i+0x1e6>
 8013552:	1b80      	subs	r0, r0, r6
 8013554:	6060      	str	r0, [r4, #4]
 8013556:	6863      	ldr	r3, [r4, #4]
 8013558:	6123      	str	r3, [r4, #16]
 801355a:	2300      	movs	r3, #0
 801355c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013560:	e7aa      	b.n	80134b8 <_printf_i+0x148>
 8013562:	6923      	ldr	r3, [r4, #16]
 8013564:	4632      	mov	r2, r6
 8013566:	4649      	mov	r1, r9
 8013568:	4640      	mov	r0, r8
 801356a:	47d0      	blx	sl
 801356c:	3001      	adds	r0, #1
 801356e:	d0ad      	beq.n	80134cc <_printf_i+0x15c>
 8013570:	6823      	ldr	r3, [r4, #0]
 8013572:	079b      	lsls	r3, r3, #30
 8013574:	d413      	bmi.n	801359e <_printf_i+0x22e>
 8013576:	68e0      	ldr	r0, [r4, #12]
 8013578:	9b03      	ldr	r3, [sp, #12]
 801357a:	4298      	cmp	r0, r3
 801357c:	bfb8      	it	lt
 801357e:	4618      	movlt	r0, r3
 8013580:	e7a6      	b.n	80134d0 <_printf_i+0x160>
 8013582:	2301      	movs	r3, #1
 8013584:	4632      	mov	r2, r6
 8013586:	4649      	mov	r1, r9
 8013588:	4640      	mov	r0, r8
 801358a:	47d0      	blx	sl
 801358c:	3001      	adds	r0, #1
 801358e:	d09d      	beq.n	80134cc <_printf_i+0x15c>
 8013590:	3501      	adds	r5, #1
 8013592:	68e3      	ldr	r3, [r4, #12]
 8013594:	9903      	ldr	r1, [sp, #12]
 8013596:	1a5b      	subs	r3, r3, r1
 8013598:	42ab      	cmp	r3, r5
 801359a:	dcf2      	bgt.n	8013582 <_printf_i+0x212>
 801359c:	e7eb      	b.n	8013576 <_printf_i+0x206>
 801359e:	2500      	movs	r5, #0
 80135a0:	f104 0619 	add.w	r6, r4, #25
 80135a4:	e7f5      	b.n	8013592 <_printf_i+0x222>
 80135a6:	bf00      	nop
 80135a8:	0801789a 	.word	0x0801789a
 80135ac:	080178ab 	.word	0x080178ab

080135b0 <std>:
 80135b0:	2300      	movs	r3, #0
 80135b2:	b510      	push	{r4, lr}
 80135b4:	4604      	mov	r4, r0
 80135b6:	e9c0 3300 	strd	r3, r3, [r0]
 80135ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135be:	6083      	str	r3, [r0, #8]
 80135c0:	8181      	strh	r1, [r0, #12]
 80135c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80135c4:	81c2      	strh	r2, [r0, #14]
 80135c6:	6183      	str	r3, [r0, #24]
 80135c8:	4619      	mov	r1, r3
 80135ca:	2208      	movs	r2, #8
 80135cc:	305c      	adds	r0, #92	@ 0x5c
 80135ce:	f000 f926 	bl	801381e <memset>
 80135d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013608 <std+0x58>)
 80135d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80135d6:	4b0d      	ldr	r3, [pc, #52]	@ (801360c <std+0x5c>)
 80135d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80135da:	4b0d      	ldr	r3, [pc, #52]	@ (8013610 <std+0x60>)
 80135dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80135de:	4b0d      	ldr	r3, [pc, #52]	@ (8013614 <std+0x64>)
 80135e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80135e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013618 <std+0x68>)
 80135e4:	6224      	str	r4, [r4, #32]
 80135e6:	429c      	cmp	r4, r3
 80135e8:	d006      	beq.n	80135f8 <std+0x48>
 80135ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80135ee:	4294      	cmp	r4, r2
 80135f0:	d002      	beq.n	80135f8 <std+0x48>
 80135f2:	33d0      	adds	r3, #208	@ 0xd0
 80135f4:	429c      	cmp	r4, r3
 80135f6:	d105      	bne.n	8013604 <std+0x54>
 80135f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80135fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013600:	f000 b9e0 	b.w	80139c4 <__retarget_lock_init_recursive>
 8013604:	bd10      	pop	{r4, pc}
 8013606:	bf00      	nop
 8013608:	08013799 	.word	0x08013799
 801360c:	080137bb 	.word	0x080137bb
 8013610:	080137f3 	.word	0x080137f3
 8013614:	08013817 	.word	0x08013817
 8013618:	24075778 	.word	0x24075778

0801361c <stdio_exit_handler>:
 801361c:	4a02      	ldr	r2, [pc, #8]	@ (8013628 <stdio_exit_handler+0xc>)
 801361e:	4903      	ldr	r1, [pc, #12]	@ (801362c <stdio_exit_handler+0x10>)
 8013620:	4803      	ldr	r0, [pc, #12]	@ (8013630 <stdio_exit_handler+0x14>)
 8013622:	f000 b869 	b.w	80136f8 <_fwalk_sglue>
 8013626:	bf00      	nop
 8013628:	24000040 	.word	0x24000040
 801362c:	080154e5 	.word	0x080154e5
 8013630:	24000050 	.word	0x24000050

08013634 <cleanup_stdio>:
 8013634:	6841      	ldr	r1, [r0, #4]
 8013636:	4b0c      	ldr	r3, [pc, #48]	@ (8013668 <cleanup_stdio+0x34>)
 8013638:	4299      	cmp	r1, r3
 801363a:	b510      	push	{r4, lr}
 801363c:	4604      	mov	r4, r0
 801363e:	d001      	beq.n	8013644 <cleanup_stdio+0x10>
 8013640:	f001 ff50 	bl	80154e4 <_fflush_r>
 8013644:	68a1      	ldr	r1, [r4, #8]
 8013646:	4b09      	ldr	r3, [pc, #36]	@ (801366c <cleanup_stdio+0x38>)
 8013648:	4299      	cmp	r1, r3
 801364a:	d002      	beq.n	8013652 <cleanup_stdio+0x1e>
 801364c:	4620      	mov	r0, r4
 801364e:	f001 ff49 	bl	80154e4 <_fflush_r>
 8013652:	68e1      	ldr	r1, [r4, #12]
 8013654:	4b06      	ldr	r3, [pc, #24]	@ (8013670 <cleanup_stdio+0x3c>)
 8013656:	4299      	cmp	r1, r3
 8013658:	d004      	beq.n	8013664 <cleanup_stdio+0x30>
 801365a:	4620      	mov	r0, r4
 801365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013660:	f001 bf40 	b.w	80154e4 <_fflush_r>
 8013664:	bd10      	pop	{r4, pc}
 8013666:	bf00      	nop
 8013668:	24075778 	.word	0x24075778
 801366c:	240757e0 	.word	0x240757e0
 8013670:	24075848 	.word	0x24075848

08013674 <global_stdio_init.part.0>:
 8013674:	b510      	push	{r4, lr}
 8013676:	4b0b      	ldr	r3, [pc, #44]	@ (80136a4 <global_stdio_init.part.0+0x30>)
 8013678:	4c0b      	ldr	r4, [pc, #44]	@ (80136a8 <global_stdio_init.part.0+0x34>)
 801367a:	4a0c      	ldr	r2, [pc, #48]	@ (80136ac <global_stdio_init.part.0+0x38>)
 801367c:	601a      	str	r2, [r3, #0]
 801367e:	4620      	mov	r0, r4
 8013680:	2200      	movs	r2, #0
 8013682:	2104      	movs	r1, #4
 8013684:	f7ff ff94 	bl	80135b0 <std>
 8013688:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801368c:	2201      	movs	r2, #1
 801368e:	2109      	movs	r1, #9
 8013690:	f7ff ff8e 	bl	80135b0 <std>
 8013694:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013698:	2202      	movs	r2, #2
 801369a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801369e:	2112      	movs	r1, #18
 80136a0:	f7ff bf86 	b.w	80135b0 <std>
 80136a4:	240758b0 	.word	0x240758b0
 80136a8:	24075778 	.word	0x24075778
 80136ac:	0801361d 	.word	0x0801361d

080136b0 <__sfp_lock_acquire>:
 80136b0:	4801      	ldr	r0, [pc, #4]	@ (80136b8 <__sfp_lock_acquire+0x8>)
 80136b2:	f000 b988 	b.w	80139c6 <__retarget_lock_acquire_recursive>
 80136b6:	bf00      	nop
 80136b8:	240758b9 	.word	0x240758b9

080136bc <__sfp_lock_release>:
 80136bc:	4801      	ldr	r0, [pc, #4]	@ (80136c4 <__sfp_lock_release+0x8>)
 80136be:	f000 b983 	b.w	80139c8 <__retarget_lock_release_recursive>
 80136c2:	bf00      	nop
 80136c4:	240758b9 	.word	0x240758b9

080136c8 <__sinit>:
 80136c8:	b510      	push	{r4, lr}
 80136ca:	4604      	mov	r4, r0
 80136cc:	f7ff fff0 	bl	80136b0 <__sfp_lock_acquire>
 80136d0:	6a23      	ldr	r3, [r4, #32]
 80136d2:	b11b      	cbz	r3, 80136dc <__sinit+0x14>
 80136d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136d8:	f7ff bff0 	b.w	80136bc <__sfp_lock_release>
 80136dc:	4b04      	ldr	r3, [pc, #16]	@ (80136f0 <__sinit+0x28>)
 80136de:	6223      	str	r3, [r4, #32]
 80136e0:	4b04      	ldr	r3, [pc, #16]	@ (80136f4 <__sinit+0x2c>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d1f5      	bne.n	80136d4 <__sinit+0xc>
 80136e8:	f7ff ffc4 	bl	8013674 <global_stdio_init.part.0>
 80136ec:	e7f2      	b.n	80136d4 <__sinit+0xc>
 80136ee:	bf00      	nop
 80136f0:	08013635 	.word	0x08013635
 80136f4:	240758b0 	.word	0x240758b0

080136f8 <_fwalk_sglue>:
 80136f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136fc:	4607      	mov	r7, r0
 80136fe:	4688      	mov	r8, r1
 8013700:	4614      	mov	r4, r2
 8013702:	2600      	movs	r6, #0
 8013704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013708:	f1b9 0901 	subs.w	r9, r9, #1
 801370c:	d505      	bpl.n	801371a <_fwalk_sglue+0x22>
 801370e:	6824      	ldr	r4, [r4, #0]
 8013710:	2c00      	cmp	r4, #0
 8013712:	d1f7      	bne.n	8013704 <_fwalk_sglue+0xc>
 8013714:	4630      	mov	r0, r6
 8013716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801371a:	89ab      	ldrh	r3, [r5, #12]
 801371c:	2b01      	cmp	r3, #1
 801371e:	d907      	bls.n	8013730 <_fwalk_sglue+0x38>
 8013720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013724:	3301      	adds	r3, #1
 8013726:	d003      	beq.n	8013730 <_fwalk_sglue+0x38>
 8013728:	4629      	mov	r1, r5
 801372a:	4638      	mov	r0, r7
 801372c:	47c0      	blx	r8
 801372e:	4306      	orrs	r6, r0
 8013730:	3568      	adds	r5, #104	@ 0x68
 8013732:	e7e9      	b.n	8013708 <_fwalk_sglue+0x10>

08013734 <iprintf>:
 8013734:	b40f      	push	{r0, r1, r2, r3}
 8013736:	b507      	push	{r0, r1, r2, lr}
 8013738:	4906      	ldr	r1, [pc, #24]	@ (8013754 <iprintf+0x20>)
 801373a:	ab04      	add	r3, sp, #16
 801373c:	6808      	ldr	r0, [r1, #0]
 801373e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013742:	6881      	ldr	r1, [r0, #8]
 8013744:	9301      	str	r3, [sp, #4]
 8013746:	f001 fd31 	bl	80151ac <_vfiprintf_r>
 801374a:	b003      	add	sp, #12
 801374c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013750:	b004      	add	sp, #16
 8013752:	4770      	bx	lr
 8013754:	2400004c 	.word	0x2400004c

08013758 <siprintf>:
 8013758:	b40e      	push	{r1, r2, r3}
 801375a:	b500      	push	{lr}
 801375c:	b09c      	sub	sp, #112	@ 0x70
 801375e:	ab1d      	add	r3, sp, #116	@ 0x74
 8013760:	9002      	str	r0, [sp, #8]
 8013762:	9006      	str	r0, [sp, #24]
 8013764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013768:	4809      	ldr	r0, [pc, #36]	@ (8013790 <siprintf+0x38>)
 801376a:	9107      	str	r1, [sp, #28]
 801376c:	9104      	str	r1, [sp, #16]
 801376e:	4909      	ldr	r1, [pc, #36]	@ (8013794 <siprintf+0x3c>)
 8013770:	f853 2b04 	ldr.w	r2, [r3], #4
 8013774:	9105      	str	r1, [sp, #20]
 8013776:	6800      	ldr	r0, [r0, #0]
 8013778:	9301      	str	r3, [sp, #4]
 801377a:	a902      	add	r1, sp, #8
 801377c:	f001 fbf0 	bl	8014f60 <_svfiprintf_r>
 8013780:	9b02      	ldr	r3, [sp, #8]
 8013782:	2200      	movs	r2, #0
 8013784:	701a      	strb	r2, [r3, #0]
 8013786:	b01c      	add	sp, #112	@ 0x70
 8013788:	f85d eb04 	ldr.w	lr, [sp], #4
 801378c:	b003      	add	sp, #12
 801378e:	4770      	bx	lr
 8013790:	2400004c 	.word	0x2400004c
 8013794:	ffff0208 	.word	0xffff0208

08013798 <__sread>:
 8013798:	b510      	push	{r4, lr}
 801379a:	460c      	mov	r4, r1
 801379c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137a0:	f000 f8c2 	bl	8013928 <_read_r>
 80137a4:	2800      	cmp	r0, #0
 80137a6:	bfab      	itete	ge
 80137a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80137aa:	89a3      	ldrhlt	r3, [r4, #12]
 80137ac:	181b      	addge	r3, r3, r0
 80137ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80137b2:	bfac      	ite	ge
 80137b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80137b6:	81a3      	strhlt	r3, [r4, #12]
 80137b8:	bd10      	pop	{r4, pc}

080137ba <__swrite>:
 80137ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137be:	461f      	mov	r7, r3
 80137c0:	898b      	ldrh	r3, [r1, #12]
 80137c2:	05db      	lsls	r3, r3, #23
 80137c4:	4605      	mov	r5, r0
 80137c6:	460c      	mov	r4, r1
 80137c8:	4616      	mov	r6, r2
 80137ca:	d505      	bpl.n	80137d8 <__swrite+0x1e>
 80137cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137d0:	2302      	movs	r3, #2
 80137d2:	2200      	movs	r2, #0
 80137d4:	f000 f896 	bl	8013904 <_lseek_r>
 80137d8:	89a3      	ldrh	r3, [r4, #12]
 80137da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80137e2:	81a3      	strh	r3, [r4, #12]
 80137e4:	4632      	mov	r2, r6
 80137e6:	463b      	mov	r3, r7
 80137e8:	4628      	mov	r0, r5
 80137ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137ee:	f000 b8ad 	b.w	801394c <_write_r>

080137f2 <__sseek>:
 80137f2:	b510      	push	{r4, lr}
 80137f4:	460c      	mov	r4, r1
 80137f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137fa:	f000 f883 	bl	8013904 <_lseek_r>
 80137fe:	1c43      	adds	r3, r0, #1
 8013800:	89a3      	ldrh	r3, [r4, #12]
 8013802:	bf15      	itete	ne
 8013804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801380a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801380e:	81a3      	strheq	r3, [r4, #12]
 8013810:	bf18      	it	ne
 8013812:	81a3      	strhne	r3, [r4, #12]
 8013814:	bd10      	pop	{r4, pc}

08013816 <__sclose>:
 8013816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801381a:	f000 b80d 	b.w	8013838 <_close_r>

0801381e <memset>:
 801381e:	4402      	add	r2, r0
 8013820:	4603      	mov	r3, r0
 8013822:	4293      	cmp	r3, r2
 8013824:	d100      	bne.n	8013828 <memset+0xa>
 8013826:	4770      	bx	lr
 8013828:	f803 1b01 	strb.w	r1, [r3], #1
 801382c:	e7f9      	b.n	8013822 <memset+0x4>
	...

08013830 <_localeconv_r>:
 8013830:	4800      	ldr	r0, [pc, #0]	@ (8013834 <_localeconv_r+0x4>)
 8013832:	4770      	bx	lr
 8013834:	2400018c 	.word	0x2400018c

08013838 <_close_r>:
 8013838:	b538      	push	{r3, r4, r5, lr}
 801383a:	4d06      	ldr	r5, [pc, #24]	@ (8013854 <_close_r+0x1c>)
 801383c:	2300      	movs	r3, #0
 801383e:	4604      	mov	r4, r0
 8013840:	4608      	mov	r0, r1
 8013842:	602b      	str	r3, [r5, #0]
 8013844:	f7ef fc20 	bl	8003088 <_close>
 8013848:	1c43      	adds	r3, r0, #1
 801384a:	d102      	bne.n	8013852 <_close_r+0x1a>
 801384c:	682b      	ldr	r3, [r5, #0]
 801384e:	b103      	cbz	r3, 8013852 <_close_r+0x1a>
 8013850:	6023      	str	r3, [r4, #0]
 8013852:	bd38      	pop	{r3, r4, r5, pc}
 8013854:	240758b4 	.word	0x240758b4

08013858 <_reclaim_reent>:
 8013858:	4b29      	ldr	r3, [pc, #164]	@ (8013900 <_reclaim_reent+0xa8>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4283      	cmp	r3, r0
 801385e:	b570      	push	{r4, r5, r6, lr}
 8013860:	4604      	mov	r4, r0
 8013862:	d04b      	beq.n	80138fc <_reclaim_reent+0xa4>
 8013864:	69c3      	ldr	r3, [r0, #28]
 8013866:	b1ab      	cbz	r3, 8013894 <_reclaim_reent+0x3c>
 8013868:	68db      	ldr	r3, [r3, #12]
 801386a:	b16b      	cbz	r3, 8013888 <_reclaim_reent+0x30>
 801386c:	2500      	movs	r5, #0
 801386e:	69e3      	ldr	r3, [r4, #28]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	5959      	ldr	r1, [r3, r5]
 8013874:	2900      	cmp	r1, #0
 8013876:	d13b      	bne.n	80138f0 <_reclaim_reent+0x98>
 8013878:	3504      	adds	r5, #4
 801387a:	2d80      	cmp	r5, #128	@ 0x80
 801387c:	d1f7      	bne.n	801386e <_reclaim_reent+0x16>
 801387e:	69e3      	ldr	r3, [r4, #28]
 8013880:	4620      	mov	r0, r4
 8013882:	68d9      	ldr	r1, [r3, #12]
 8013884:	f000 fe8e 	bl	80145a4 <_free_r>
 8013888:	69e3      	ldr	r3, [r4, #28]
 801388a:	6819      	ldr	r1, [r3, #0]
 801388c:	b111      	cbz	r1, 8013894 <_reclaim_reent+0x3c>
 801388e:	4620      	mov	r0, r4
 8013890:	f000 fe88 	bl	80145a4 <_free_r>
 8013894:	6961      	ldr	r1, [r4, #20]
 8013896:	b111      	cbz	r1, 801389e <_reclaim_reent+0x46>
 8013898:	4620      	mov	r0, r4
 801389a:	f000 fe83 	bl	80145a4 <_free_r>
 801389e:	69e1      	ldr	r1, [r4, #28]
 80138a0:	b111      	cbz	r1, 80138a8 <_reclaim_reent+0x50>
 80138a2:	4620      	mov	r0, r4
 80138a4:	f000 fe7e 	bl	80145a4 <_free_r>
 80138a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80138aa:	b111      	cbz	r1, 80138b2 <_reclaim_reent+0x5a>
 80138ac:	4620      	mov	r0, r4
 80138ae:	f000 fe79 	bl	80145a4 <_free_r>
 80138b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80138b4:	b111      	cbz	r1, 80138bc <_reclaim_reent+0x64>
 80138b6:	4620      	mov	r0, r4
 80138b8:	f000 fe74 	bl	80145a4 <_free_r>
 80138bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80138be:	b111      	cbz	r1, 80138c6 <_reclaim_reent+0x6e>
 80138c0:	4620      	mov	r0, r4
 80138c2:	f000 fe6f 	bl	80145a4 <_free_r>
 80138c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80138c8:	b111      	cbz	r1, 80138d0 <_reclaim_reent+0x78>
 80138ca:	4620      	mov	r0, r4
 80138cc:	f000 fe6a 	bl	80145a4 <_free_r>
 80138d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80138d2:	b111      	cbz	r1, 80138da <_reclaim_reent+0x82>
 80138d4:	4620      	mov	r0, r4
 80138d6:	f000 fe65 	bl	80145a4 <_free_r>
 80138da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80138dc:	b111      	cbz	r1, 80138e4 <_reclaim_reent+0x8c>
 80138de:	4620      	mov	r0, r4
 80138e0:	f000 fe60 	bl	80145a4 <_free_r>
 80138e4:	6a23      	ldr	r3, [r4, #32]
 80138e6:	b14b      	cbz	r3, 80138fc <_reclaim_reent+0xa4>
 80138e8:	4620      	mov	r0, r4
 80138ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138ee:	4718      	bx	r3
 80138f0:	680e      	ldr	r6, [r1, #0]
 80138f2:	4620      	mov	r0, r4
 80138f4:	f000 fe56 	bl	80145a4 <_free_r>
 80138f8:	4631      	mov	r1, r6
 80138fa:	e7bb      	b.n	8013874 <_reclaim_reent+0x1c>
 80138fc:	bd70      	pop	{r4, r5, r6, pc}
 80138fe:	bf00      	nop
 8013900:	2400004c 	.word	0x2400004c

08013904 <_lseek_r>:
 8013904:	b538      	push	{r3, r4, r5, lr}
 8013906:	4d07      	ldr	r5, [pc, #28]	@ (8013924 <_lseek_r+0x20>)
 8013908:	4604      	mov	r4, r0
 801390a:	4608      	mov	r0, r1
 801390c:	4611      	mov	r1, r2
 801390e:	2200      	movs	r2, #0
 8013910:	602a      	str	r2, [r5, #0]
 8013912:	461a      	mov	r2, r3
 8013914:	f7ef fbdf 	bl	80030d6 <_lseek>
 8013918:	1c43      	adds	r3, r0, #1
 801391a:	d102      	bne.n	8013922 <_lseek_r+0x1e>
 801391c:	682b      	ldr	r3, [r5, #0]
 801391e:	b103      	cbz	r3, 8013922 <_lseek_r+0x1e>
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	bd38      	pop	{r3, r4, r5, pc}
 8013924:	240758b4 	.word	0x240758b4

08013928 <_read_r>:
 8013928:	b538      	push	{r3, r4, r5, lr}
 801392a:	4d07      	ldr	r5, [pc, #28]	@ (8013948 <_read_r+0x20>)
 801392c:	4604      	mov	r4, r0
 801392e:	4608      	mov	r0, r1
 8013930:	4611      	mov	r1, r2
 8013932:	2200      	movs	r2, #0
 8013934:	602a      	str	r2, [r5, #0]
 8013936:	461a      	mov	r2, r3
 8013938:	f7ef fb6d 	bl	8003016 <_read>
 801393c:	1c43      	adds	r3, r0, #1
 801393e:	d102      	bne.n	8013946 <_read_r+0x1e>
 8013940:	682b      	ldr	r3, [r5, #0]
 8013942:	b103      	cbz	r3, 8013946 <_read_r+0x1e>
 8013944:	6023      	str	r3, [r4, #0]
 8013946:	bd38      	pop	{r3, r4, r5, pc}
 8013948:	240758b4 	.word	0x240758b4

0801394c <_write_r>:
 801394c:	b538      	push	{r3, r4, r5, lr}
 801394e:	4d07      	ldr	r5, [pc, #28]	@ (801396c <_write_r+0x20>)
 8013950:	4604      	mov	r4, r0
 8013952:	4608      	mov	r0, r1
 8013954:	4611      	mov	r1, r2
 8013956:	2200      	movs	r2, #0
 8013958:	602a      	str	r2, [r5, #0]
 801395a:	461a      	mov	r2, r3
 801395c:	f7ef fb78 	bl	8003050 <_write>
 8013960:	1c43      	adds	r3, r0, #1
 8013962:	d102      	bne.n	801396a <_write_r+0x1e>
 8013964:	682b      	ldr	r3, [r5, #0]
 8013966:	b103      	cbz	r3, 801396a <_write_r+0x1e>
 8013968:	6023      	str	r3, [r4, #0]
 801396a:	bd38      	pop	{r3, r4, r5, pc}
 801396c:	240758b4 	.word	0x240758b4

08013970 <__errno>:
 8013970:	4b01      	ldr	r3, [pc, #4]	@ (8013978 <__errno+0x8>)
 8013972:	6818      	ldr	r0, [r3, #0]
 8013974:	4770      	bx	lr
 8013976:	bf00      	nop
 8013978:	2400004c 	.word	0x2400004c

0801397c <__libc_init_array>:
 801397c:	b570      	push	{r4, r5, r6, lr}
 801397e:	4d0d      	ldr	r5, [pc, #52]	@ (80139b4 <__libc_init_array+0x38>)
 8013980:	4c0d      	ldr	r4, [pc, #52]	@ (80139b8 <__libc_init_array+0x3c>)
 8013982:	1b64      	subs	r4, r4, r5
 8013984:	10a4      	asrs	r4, r4, #2
 8013986:	2600      	movs	r6, #0
 8013988:	42a6      	cmp	r6, r4
 801398a:	d109      	bne.n	80139a0 <__libc_init_array+0x24>
 801398c:	4d0b      	ldr	r5, [pc, #44]	@ (80139bc <__libc_init_array+0x40>)
 801398e:	4c0c      	ldr	r4, [pc, #48]	@ (80139c0 <__libc_init_array+0x44>)
 8013990:	f002 fe10 	bl	80165b4 <_init>
 8013994:	1b64      	subs	r4, r4, r5
 8013996:	10a4      	asrs	r4, r4, #2
 8013998:	2600      	movs	r6, #0
 801399a:	42a6      	cmp	r6, r4
 801399c:	d105      	bne.n	80139aa <__libc_init_array+0x2e>
 801399e:	bd70      	pop	{r4, r5, r6, pc}
 80139a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80139a4:	4798      	blx	r3
 80139a6:	3601      	adds	r6, #1
 80139a8:	e7ee      	b.n	8013988 <__libc_init_array+0xc>
 80139aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80139ae:	4798      	blx	r3
 80139b0:	3601      	adds	r6, #1
 80139b2:	e7f2      	b.n	801399a <__libc_init_array+0x1e>
 80139b4:	08017dd8 	.word	0x08017dd8
 80139b8:	08017dd8 	.word	0x08017dd8
 80139bc:	08017dd8 	.word	0x08017dd8
 80139c0:	08017ddc 	.word	0x08017ddc

080139c4 <__retarget_lock_init_recursive>:
 80139c4:	4770      	bx	lr

080139c6 <__retarget_lock_acquire_recursive>:
 80139c6:	4770      	bx	lr

080139c8 <__retarget_lock_release_recursive>:
 80139c8:	4770      	bx	lr

080139ca <memcpy>:
 80139ca:	440a      	add	r2, r1
 80139cc:	4291      	cmp	r1, r2
 80139ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80139d2:	d100      	bne.n	80139d6 <memcpy+0xc>
 80139d4:	4770      	bx	lr
 80139d6:	b510      	push	{r4, lr}
 80139d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80139e0:	4291      	cmp	r1, r2
 80139e2:	d1f9      	bne.n	80139d8 <memcpy+0xe>
 80139e4:	bd10      	pop	{r4, pc}

080139e6 <quorem>:
 80139e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ea:	6903      	ldr	r3, [r0, #16]
 80139ec:	690c      	ldr	r4, [r1, #16]
 80139ee:	42a3      	cmp	r3, r4
 80139f0:	4607      	mov	r7, r0
 80139f2:	db7e      	blt.n	8013af2 <quorem+0x10c>
 80139f4:	3c01      	subs	r4, #1
 80139f6:	f101 0814 	add.w	r8, r1, #20
 80139fa:	00a3      	lsls	r3, r4, #2
 80139fc:	f100 0514 	add.w	r5, r0, #20
 8013a00:	9300      	str	r3, [sp, #0]
 8013a02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013a06:	9301      	str	r3, [sp, #4]
 8013a08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013a0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013a10:	3301      	adds	r3, #1
 8013a12:	429a      	cmp	r2, r3
 8013a14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013a18:	fbb2 f6f3 	udiv	r6, r2, r3
 8013a1c:	d32e      	bcc.n	8013a7c <quorem+0x96>
 8013a1e:	f04f 0a00 	mov.w	sl, #0
 8013a22:	46c4      	mov	ip, r8
 8013a24:	46ae      	mov	lr, r5
 8013a26:	46d3      	mov	fp, sl
 8013a28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013a2c:	b298      	uxth	r0, r3
 8013a2e:	fb06 a000 	mla	r0, r6, r0, sl
 8013a32:	0c02      	lsrs	r2, r0, #16
 8013a34:	0c1b      	lsrs	r3, r3, #16
 8013a36:	fb06 2303 	mla	r3, r6, r3, r2
 8013a3a:	f8de 2000 	ldr.w	r2, [lr]
 8013a3e:	b280      	uxth	r0, r0
 8013a40:	b292      	uxth	r2, r2
 8013a42:	1a12      	subs	r2, r2, r0
 8013a44:	445a      	add	r2, fp
 8013a46:	f8de 0000 	ldr.w	r0, [lr]
 8013a4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a4e:	b29b      	uxth	r3, r3
 8013a50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013a54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013a58:	b292      	uxth	r2, r2
 8013a5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013a5e:	45e1      	cmp	r9, ip
 8013a60:	f84e 2b04 	str.w	r2, [lr], #4
 8013a64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013a68:	d2de      	bcs.n	8013a28 <quorem+0x42>
 8013a6a:	9b00      	ldr	r3, [sp, #0]
 8013a6c:	58eb      	ldr	r3, [r5, r3]
 8013a6e:	b92b      	cbnz	r3, 8013a7c <quorem+0x96>
 8013a70:	9b01      	ldr	r3, [sp, #4]
 8013a72:	3b04      	subs	r3, #4
 8013a74:	429d      	cmp	r5, r3
 8013a76:	461a      	mov	r2, r3
 8013a78:	d32f      	bcc.n	8013ada <quorem+0xf4>
 8013a7a:	613c      	str	r4, [r7, #16]
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	f001 f90b 	bl	8014c98 <__mcmp>
 8013a82:	2800      	cmp	r0, #0
 8013a84:	db25      	blt.n	8013ad2 <quorem+0xec>
 8013a86:	4629      	mov	r1, r5
 8013a88:	2000      	movs	r0, #0
 8013a8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8013a8e:	f8d1 c000 	ldr.w	ip, [r1]
 8013a92:	fa1f fe82 	uxth.w	lr, r2
 8013a96:	fa1f f38c 	uxth.w	r3, ip
 8013a9a:	eba3 030e 	sub.w	r3, r3, lr
 8013a9e:	4403      	add	r3, r0
 8013aa0:	0c12      	lsrs	r2, r2, #16
 8013aa2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013aa6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ab0:	45c1      	cmp	r9, r8
 8013ab2:	f841 3b04 	str.w	r3, [r1], #4
 8013ab6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013aba:	d2e6      	bcs.n	8013a8a <quorem+0xa4>
 8013abc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013ac4:	b922      	cbnz	r2, 8013ad0 <quorem+0xea>
 8013ac6:	3b04      	subs	r3, #4
 8013ac8:	429d      	cmp	r5, r3
 8013aca:	461a      	mov	r2, r3
 8013acc:	d30b      	bcc.n	8013ae6 <quorem+0x100>
 8013ace:	613c      	str	r4, [r7, #16]
 8013ad0:	3601      	adds	r6, #1
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	b003      	add	sp, #12
 8013ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ada:	6812      	ldr	r2, [r2, #0]
 8013adc:	3b04      	subs	r3, #4
 8013ade:	2a00      	cmp	r2, #0
 8013ae0:	d1cb      	bne.n	8013a7a <quorem+0x94>
 8013ae2:	3c01      	subs	r4, #1
 8013ae4:	e7c6      	b.n	8013a74 <quorem+0x8e>
 8013ae6:	6812      	ldr	r2, [r2, #0]
 8013ae8:	3b04      	subs	r3, #4
 8013aea:	2a00      	cmp	r2, #0
 8013aec:	d1ef      	bne.n	8013ace <quorem+0xe8>
 8013aee:	3c01      	subs	r4, #1
 8013af0:	e7ea      	b.n	8013ac8 <quorem+0xe2>
 8013af2:	2000      	movs	r0, #0
 8013af4:	e7ee      	b.n	8013ad4 <quorem+0xee>
	...

08013af8 <_dtoa_r>:
 8013af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013afc:	ed2d 8b02 	vpush	{d8}
 8013b00:	69c7      	ldr	r7, [r0, #28]
 8013b02:	b091      	sub	sp, #68	@ 0x44
 8013b04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013b08:	ec55 4b10 	vmov	r4, r5, d0
 8013b0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8013b0e:	9107      	str	r1, [sp, #28]
 8013b10:	4681      	mov	r9, r0
 8013b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b14:	930d      	str	r3, [sp, #52]	@ 0x34
 8013b16:	b97f      	cbnz	r7, 8013b38 <_dtoa_r+0x40>
 8013b18:	2010      	movs	r0, #16
 8013b1a:	f000 fd8d 	bl	8014638 <malloc>
 8013b1e:	4602      	mov	r2, r0
 8013b20:	f8c9 001c 	str.w	r0, [r9, #28]
 8013b24:	b920      	cbnz	r0, 8013b30 <_dtoa_r+0x38>
 8013b26:	4ba0      	ldr	r3, [pc, #640]	@ (8013da8 <_dtoa_r+0x2b0>)
 8013b28:	21ef      	movs	r1, #239	@ 0xef
 8013b2a:	48a0      	ldr	r0, [pc, #640]	@ (8013dac <_dtoa_r+0x2b4>)
 8013b2c:	f001 fdc0 	bl	80156b0 <__assert_func>
 8013b30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013b34:	6007      	str	r7, [r0, #0]
 8013b36:	60c7      	str	r7, [r0, #12]
 8013b38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013b3c:	6819      	ldr	r1, [r3, #0]
 8013b3e:	b159      	cbz	r1, 8013b58 <_dtoa_r+0x60>
 8013b40:	685a      	ldr	r2, [r3, #4]
 8013b42:	604a      	str	r2, [r1, #4]
 8013b44:	2301      	movs	r3, #1
 8013b46:	4093      	lsls	r3, r2
 8013b48:	608b      	str	r3, [r1, #8]
 8013b4a:	4648      	mov	r0, r9
 8013b4c:	f000 fe6a 	bl	8014824 <_Bfree>
 8013b50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013b54:	2200      	movs	r2, #0
 8013b56:	601a      	str	r2, [r3, #0]
 8013b58:	1e2b      	subs	r3, r5, #0
 8013b5a:	bfbb      	ittet	lt
 8013b5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013b60:	9303      	strlt	r3, [sp, #12]
 8013b62:	2300      	movge	r3, #0
 8013b64:	2201      	movlt	r2, #1
 8013b66:	bfac      	ite	ge
 8013b68:	6033      	strge	r3, [r6, #0]
 8013b6a:	6032      	strlt	r2, [r6, #0]
 8013b6c:	4b90      	ldr	r3, [pc, #576]	@ (8013db0 <_dtoa_r+0x2b8>)
 8013b6e:	9e03      	ldr	r6, [sp, #12]
 8013b70:	43b3      	bics	r3, r6
 8013b72:	d110      	bne.n	8013b96 <_dtoa_r+0x9e>
 8013b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013b76:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013b7a:	6013      	str	r3, [r2, #0]
 8013b7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013b80:	4323      	orrs	r3, r4
 8013b82:	f000 84de 	beq.w	8014542 <_dtoa_r+0xa4a>
 8013b86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013b88:	4f8a      	ldr	r7, [pc, #552]	@ (8013db4 <_dtoa_r+0x2bc>)
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	f000 84e0 	beq.w	8014550 <_dtoa_r+0xa58>
 8013b90:	1cfb      	adds	r3, r7, #3
 8013b92:	f000 bcdb 	b.w	801454c <_dtoa_r+0xa54>
 8013b96:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013b9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ba2:	d10a      	bne.n	8013bba <_dtoa_r+0xc2>
 8013ba4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	6013      	str	r3, [r2, #0]
 8013baa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013bac:	b113      	cbz	r3, 8013bb4 <_dtoa_r+0xbc>
 8013bae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013bb0:	4b81      	ldr	r3, [pc, #516]	@ (8013db8 <_dtoa_r+0x2c0>)
 8013bb2:	6013      	str	r3, [r2, #0]
 8013bb4:	4f81      	ldr	r7, [pc, #516]	@ (8013dbc <_dtoa_r+0x2c4>)
 8013bb6:	f000 bccb 	b.w	8014550 <_dtoa_r+0xa58>
 8013bba:	aa0e      	add	r2, sp, #56	@ 0x38
 8013bbc:	a90f      	add	r1, sp, #60	@ 0x3c
 8013bbe:	4648      	mov	r0, r9
 8013bc0:	eeb0 0b48 	vmov.f64	d0, d8
 8013bc4:	f001 f918 	bl	8014df8 <__d2b>
 8013bc8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8013bcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bce:	9001      	str	r0, [sp, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d045      	beq.n	8013c60 <_dtoa_r+0x168>
 8013bd4:	eeb0 7b48 	vmov.f64	d7, d8
 8013bd8:	ee18 1a90 	vmov	r1, s17
 8013bdc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013be0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8013be4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8013be8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013bec:	2500      	movs	r5, #0
 8013bee:	ee07 1a90 	vmov	s15, r1
 8013bf2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8013bf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013d90 <_dtoa_r+0x298>
 8013bfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013bfe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013d98 <_dtoa_r+0x2a0>
 8013c02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013c06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013da0 <_dtoa_r+0x2a8>
 8013c0a:	ee07 3a90 	vmov	s15, r3
 8013c0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013c12:	eeb0 7b46 	vmov.f64	d7, d6
 8013c16:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013c1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013c1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c26:	ee16 8a90 	vmov	r8, s13
 8013c2a:	d508      	bpl.n	8013c3e <_dtoa_r+0x146>
 8013c2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013c30:	eeb4 6b47 	vcmp.f64	d6, d7
 8013c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c38:	bf18      	it	ne
 8013c3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8013c3e:	f1b8 0f16 	cmp.w	r8, #22
 8013c42:	d82b      	bhi.n	8013c9c <_dtoa_r+0x1a4>
 8013c44:	495e      	ldr	r1, [pc, #376]	@ (8013dc0 <_dtoa_r+0x2c8>)
 8013c46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013c4a:	ed91 7b00 	vldr	d7, [r1]
 8013c4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c56:	d501      	bpl.n	8013c5c <_dtoa_r+0x164>
 8013c58:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	e01e      	b.n	8013c9e <_dtoa_r+0x1a6>
 8013c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c62:	4413      	add	r3, r2
 8013c64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013c68:	2920      	cmp	r1, #32
 8013c6a:	bfc1      	itttt	gt
 8013c6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013c70:	408e      	lslgt	r6, r1
 8013c72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8013c76:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013c7a:	bfd6      	itet	le
 8013c7c:	f1c1 0120 	rsble	r1, r1, #32
 8013c80:	4331      	orrgt	r1, r6
 8013c82:	fa04 f101 	lslle.w	r1, r4, r1
 8013c86:	ee07 1a90 	vmov	s15, r1
 8013c8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013c8e:	3b01      	subs	r3, #1
 8013c90:	ee17 1a90 	vmov	r1, s15
 8013c94:	2501      	movs	r5, #1
 8013c96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013c9a:	e7a8      	b.n	8013bee <_dtoa_r+0xf6>
 8013c9c:	2101      	movs	r1, #1
 8013c9e:	1ad2      	subs	r2, r2, r3
 8013ca0:	1e53      	subs	r3, r2, #1
 8013ca2:	9306      	str	r3, [sp, #24]
 8013ca4:	bf45      	ittet	mi
 8013ca6:	f1c2 0301 	rsbmi	r3, r2, #1
 8013caa:	9305      	strmi	r3, [sp, #20]
 8013cac:	2300      	movpl	r3, #0
 8013cae:	2300      	movmi	r3, #0
 8013cb0:	bf4c      	ite	mi
 8013cb2:	9306      	strmi	r3, [sp, #24]
 8013cb4:	9305      	strpl	r3, [sp, #20]
 8013cb6:	f1b8 0f00 	cmp.w	r8, #0
 8013cba:	910c      	str	r1, [sp, #48]	@ 0x30
 8013cbc:	db18      	blt.n	8013cf0 <_dtoa_r+0x1f8>
 8013cbe:	9b06      	ldr	r3, [sp, #24]
 8013cc0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013cc4:	4443      	add	r3, r8
 8013cc6:	9306      	str	r3, [sp, #24]
 8013cc8:	2300      	movs	r3, #0
 8013cca:	9a07      	ldr	r2, [sp, #28]
 8013ccc:	2a09      	cmp	r2, #9
 8013cce:	d849      	bhi.n	8013d64 <_dtoa_r+0x26c>
 8013cd0:	2a05      	cmp	r2, #5
 8013cd2:	bfc4      	itt	gt
 8013cd4:	3a04      	subgt	r2, #4
 8013cd6:	9207      	strgt	r2, [sp, #28]
 8013cd8:	9a07      	ldr	r2, [sp, #28]
 8013cda:	f1a2 0202 	sub.w	r2, r2, #2
 8013cde:	bfcc      	ite	gt
 8013ce0:	2400      	movgt	r4, #0
 8013ce2:	2401      	movle	r4, #1
 8013ce4:	2a03      	cmp	r2, #3
 8013ce6:	d848      	bhi.n	8013d7a <_dtoa_r+0x282>
 8013ce8:	e8df f002 	tbb	[pc, r2]
 8013cec:	3a2c2e0b 	.word	0x3a2c2e0b
 8013cf0:	9b05      	ldr	r3, [sp, #20]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	eba3 0308 	sub.w	r3, r3, r8
 8013cf8:	9305      	str	r3, [sp, #20]
 8013cfa:	920a      	str	r2, [sp, #40]	@ 0x28
 8013cfc:	f1c8 0300 	rsb	r3, r8, #0
 8013d00:	e7e3      	b.n	8013cca <_dtoa_r+0x1d2>
 8013d02:	2200      	movs	r2, #0
 8013d04:	9208      	str	r2, [sp, #32]
 8013d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d08:	2a00      	cmp	r2, #0
 8013d0a:	dc39      	bgt.n	8013d80 <_dtoa_r+0x288>
 8013d0c:	f04f 0b01 	mov.w	fp, #1
 8013d10:	46da      	mov	sl, fp
 8013d12:	465a      	mov	r2, fp
 8013d14:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013d18:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013d1c:	2100      	movs	r1, #0
 8013d1e:	2004      	movs	r0, #4
 8013d20:	f100 0614 	add.w	r6, r0, #20
 8013d24:	4296      	cmp	r6, r2
 8013d26:	d930      	bls.n	8013d8a <_dtoa_r+0x292>
 8013d28:	6079      	str	r1, [r7, #4]
 8013d2a:	4648      	mov	r0, r9
 8013d2c:	9304      	str	r3, [sp, #16]
 8013d2e:	f000 fd39 	bl	80147a4 <_Balloc>
 8013d32:	9b04      	ldr	r3, [sp, #16]
 8013d34:	4607      	mov	r7, r0
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d146      	bne.n	8013dc8 <_dtoa_r+0x2d0>
 8013d3a:	4b22      	ldr	r3, [pc, #136]	@ (8013dc4 <_dtoa_r+0x2cc>)
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013d42:	e6f2      	b.n	8013b2a <_dtoa_r+0x32>
 8013d44:	2201      	movs	r2, #1
 8013d46:	e7dd      	b.n	8013d04 <_dtoa_r+0x20c>
 8013d48:	2200      	movs	r2, #0
 8013d4a:	9208      	str	r2, [sp, #32]
 8013d4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d4e:	eb08 0b02 	add.w	fp, r8, r2
 8013d52:	f10b 0a01 	add.w	sl, fp, #1
 8013d56:	4652      	mov	r2, sl
 8013d58:	2a01      	cmp	r2, #1
 8013d5a:	bfb8      	it	lt
 8013d5c:	2201      	movlt	r2, #1
 8013d5e:	e7db      	b.n	8013d18 <_dtoa_r+0x220>
 8013d60:	2201      	movs	r2, #1
 8013d62:	e7f2      	b.n	8013d4a <_dtoa_r+0x252>
 8013d64:	2401      	movs	r4, #1
 8013d66:	2200      	movs	r2, #0
 8013d68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013d6c:	f04f 3bff 	mov.w	fp, #4294967295
 8013d70:	2100      	movs	r1, #0
 8013d72:	46da      	mov	sl, fp
 8013d74:	2212      	movs	r2, #18
 8013d76:	9109      	str	r1, [sp, #36]	@ 0x24
 8013d78:	e7ce      	b.n	8013d18 <_dtoa_r+0x220>
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	9208      	str	r2, [sp, #32]
 8013d7e:	e7f5      	b.n	8013d6c <_dtoa_r+0x274>
 8013d80:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8013d84:	46da      	mov	sl, fp
 8013d86:	465a      	mov	r2, fp
 8013d88:	e7c6      	b.n	8013d18 <_dtoa_r+0x220>
 8013d8a:	3101      	adds	r1, #1
 8013d8c:	0040      	lsls	r0, r0, #1
 8013d8e:	e7c7      	b.n	8013d20 <_dtoa_r+0x228>
 8013d90:	636f4361 	.word	0x636f4361
 8013d94:	3fd287a7 	.word	0x3fd287a7
 8013d98:	8b60c8b3 	.word	0x8b60c8b3
 8013d9c:	3fc68a28 	.word	0x3fc68a28
 8013da0:	509f79fb 	.word	0x509f79fb
 8013da4:	3fd34413 	.word	0x3fd34413
 8013da8:	080178c9 	.word	0x080178c9
 8013dac:	080178e0 	.word	0x080178e0
 8013db0:	7ff00000 	.word	0x7ff00000
 8013db4:	080178c5 	.word	0x080178c5
 8013db8:	08017899 	.word	0x08017899
 8013dbc:	08017898 	.word	0x08017898
 8013dc0:	080179d8 	.word	0x080179d8
 8013dc4:	08017938 	.word	0x08017938
 8013dc8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8013dcc:	f1ba 0f0e 	cmp.w	sl, #14
 8013dd0:	6010      	str	r0, [r2, #0]
 8013dd2:	d86f      	bhi.n	8013eb4 <_dtoa_r+0x3bc>
 8013dd4:	2c00      	cmp	r4, #0
 8013dd6:	d06d      	beq.n	8013eb4 <_dtoa_r+0x3bc>
 8013dd8:	f1b8 0f00 	cmp.w	r8, #0
 8013ddc:	f340 80c2 	ble.w	8013f64 <_dtoa_r+0x46c>
 8013de0:	4aca      	ldr	r2, [pc, #808]	@ (801410c <_dtoa_r+0x614>)
 8013de2:	f008 010f 	and.w	r1, r8, #15
 8013de6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013dea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8013dee:	ed92 7b00 	vldr	d7, [r2]
 8013df2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013df6:	f000 80a9 	beq.w	8013f4c <_dtoa_r+0x454>
 8013dfa:	4ac5      	ldr	r2, [pc, #788]	@ (8014110 <_dtoa_r+0x618>)
 8013dfc:	ed92 6b08 	vldr	d6, [r2, #32]
 8013e00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013e04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013e08:	f001 010f 	and.w	r1, r1, #15
 8013e0c:	2203      	movs	r2, #3
 8013e0e:	48c0      	ldr	r0, [pc, #768]	@ (8014110 <_dtoa_r+0x618>)
 8013e10:	2900      	cmp	r1, #0
 8013e12:	f040 809d 	bne.w	8013f50 <_dtoa_r+0x458>
 8013e16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013e1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013e1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013e24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013e28:	2900      	cmp	r1, #0
 8013e2a:	f000 80c1 	beq.w	8013fb0 <_dtoa_r+0x4b8>
 8013e2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3a:	f140 80b9 	bpl.w	8013fb0 <_dtoa_r+0x4b8>
 8013e3e:	f1ba 0f00 	cmp.w	sl, #0
 8013e42:	f000 80b5 	beq.w	8013fb0 <_dtoa_r+0x4b8>
 8013e46:	f1bb 0f00 	cmp.w	fp, #0
 8013e4a:	dd31      	ble.n	8013eb0 <_dtoa_r+0x3b8>
 8013e4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013e58:	f108 31ff 	add.w	r1, r8, #4294967295
 8013e5c:	9104      	str	r1, [sp, #16]
 8013e5e:	3201      	adds	r2, #1
 8013e60:	465c      	mov	r4, fp
 8013e62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013e66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013e6a:	ee07 2a90 	vmov	s15, r2
 8013e6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013e72:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013e76:	ee15 2a90 	vmov	r2, s11
 8013e7a:	ec51 0b15 	vmov	r0, r1, d5
 8013e7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8013e82:	2c00      	cmp	r4, #0
 8013e84:	f040 8098 	bne.w	8013fb8 <_dtoa_r+0x4c0>
 8013e88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013e8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013e90:	ec41 0b17 	vmov	d7, r0, r1
 8013e94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e9c:	f300 8261 	bgt.w	8014362 <_dtoa_r+0x86a>
 8013ea0:	eeb1 7b47 	vneg.f64	d7, d7
 8013ea4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eac:	f100 80f5 	bmi.w	801409a <_dtoa_r+0x5a2>
 8013eb0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013eb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013eb6:	2a00      	cmp	r2, #0
 8013eb8:	f2c0 812c 	blt.w	8014114 <_dtoa_r+0x61c>
 8013ebc:	f1b8 0f0e 	cmp.w	r8, #14
 8013ec0:	f300 8128 	bgt.w	8014114 <_dtoa_r+0x61c>
 8013ec4:	4b91      	ldr	r3, [pc, #580]	@ (801410c <_dtoa_r+0x614>)
 8013ec6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013eca:	ed93 6b00 	vldr	d6, [r3]
 8013ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	da03      	bge.n	8013edc <_dtoa_r+0x3e4>
 8013ed4:	f1ba 0f00 	cmp.w	sl, #0
 8013ed8:	f340 80d2 	ble.w	8014080 <_dtoa_r+0x588>
 8013edc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013ee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ee4:	463e      	mov	r6, r7
 8013ee6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013eea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013eee:	ee15 3a10 	vmov	r3, s10
 8013ef2:	3330      	adds	r3, #48	@ 0x30
 8013ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8013ef8:	1bf3      	subs	r3, r6, r7
 8013efa:	459a      	cmp	sl, r3
 8013efc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013f00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013f04:	f040 80f8 	bne.w	80140f8 <_dtoa_r+0x600>
 8013f08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013f0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f14:	f300 80dd 	bgt.w	80140d2 <_dtoa_r+0x5da>
 8013f18:	eeb4 7b46 	vcmp.f64	d7, d6
 8013f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f20:	d104      	bne.n	8013f2c <_dtoa_r+0x434>
 8013f22:	ee15 3a10 	vmov	r3, s10
 8013f26:	07db      	lsls	r3, r3, #31
 8013f28:	f100 80d3 	bmi.w	80140d2 <_dtoa_r+0x5da>
 8013f2c:	9901      	ldr	r1, [sp, #4]
 8013f2e:	4648      	mov	r0, r9
 8013f30:	f000 fc78 	bl	8014824 <_Bfree>
 8013f34:	2300      	movs	r3, #0
 8013f36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013f38:	7033      	strb	r3, [r6, #0]
 8013f3a:	f108 0301 	add.w	r3, r8, #1
 8013f3e:	6013      	str	r3, [r2, #0]
 8013f40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 8304 	beq.w	8014550 <_dtoa_r+0xa58>
 8013f48:	601e      	str	r6, [r3, #0]
 8013f4a:	e301      	b.n	8014550 <_dtoa_r+0xa58>
 8013f4c:	2202      	movs	r2, #2
 8013f4e:	e75e      	b.n	8013e0e <_dtoa_r+0x316>
 8013f50:	07cc      	lsls	r4, r1, #31
 8013f52:	d504      	bpl.n	8013f5e <_dtoa_r+0x466>
 8013f54:	ed90 6b00 	vldr	d6, [r0]
 8013f58:	3201      	adds	r2, #1
 8013f5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013f5e:	1049      	asrs	r1, r1, #1
 8013f60:	3008      	adds	r0, #8
 8013f62:	e755      	b.n	8013e10 <_dtoa_r+0x318>
 8013f64:	d022      	beq.n	8013fac <_dtoa_r+0x4b4>
 8013f66:	f1c8 0100 	rsb	r1, r8, #0
 8013f6a:	4a68      	ldr	r2, [pc, #416]	@ (801410c <_dtoa_r+0x614>)
 8013f6c:	f001 000f 	and.w	r0, r1, #15
 8013f70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013f74:	ed92 7b00 	vldr	d7, [r2]
 8013f78:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013f7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f80:	4863      	ldr	r0, [pc, #396]	@ (8014110 <_dtoa_r+0x618>)
 8013f82:	1109      	asrs	r1, r1, #4
 8013f84:	2400      	movs	r4, #0
 8013f86:	2202      	movs	r2, #2
 8013f88:	b929      	cbnz	r1, 8013f96 <_dtoa_r+0x49e>
 8013f8a:	2c00      	cmp	r4, #0
 8013f8c:	f43f af49 	beq.w	8013e22 <_dtoa_r+0x32a>
 8013f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f94:	e745      	b.n	8013e22 <_dtoa_r+0x32a>
 8013f96:	07ce      	lsls	r6, r1, #31
 8013f98:	d505      	bpl.n	8013fa6 <_dtoa_r+0x4ae>
 8013f9a:	ed90 6b00 	vldr	d6, [r0]
 8013f9e:	3201      	adds	r2, #1
 8013fa0:	2401      	movs	r4, #1
 8013fa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013fa6:	1049      	asrs	r1, r1, #1
 8013fa8:	3008      	adds	r0, #8
 8013faa:	e7ed      	b.n	8013f88 <_dtoa_r+0x490>
 8013fac:	2202      	movs	r2, #2
 8013fae:	e738      	b.n	8013e22 <_dtoa_r+0x32a>
 8013fb0:	f8cd 8010 	str.w	r8, [sp, #16]
 8013fb4:	4654      	mov	r4, sl
 8013fb6:	e754      	b.n	8013e62 <_dtoa_r+0x36a>
 8013fb8:	4a54      	ldr	r2, [pc, #336]	@ (801410c <_dtoa_r+0x614>)
 8013fba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8013fbe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013fc2:	9a08      	ldr	r2, [sp, #32]
 8013fc4:	ec41 0b17 	vmov	d7, r0, r1
 8013fc8:	443c      	add	r4, r7
 8013fca:	b34a      	cbz	r2, 8014020 <_dtoa_r+0x528>
 8013fcc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013fd0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013fd4:	463e      	mov	r6, r7
 8013fd6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013fda:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013fde:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013fe2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013fe6:	ee14 2a90 	vmov	r2, s9
 8013fea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013fee:	3230      	adds	r2, #48	@ 0x30
 8013ff0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013ff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffc:	f806 2b01 	strb.w	r2, [r6], #1
 8014000:	d438      	bmi.n	8014074 <_dtoa_r+0x57c>
 8014002:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014006:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801400e:	d462      	bmi.n	80140d6 <_dtoa_r+0x5de>
 8014010:	42a6      	cmp	r6, r4
 8014012:	f43f af4d 	beq.w	8013eb0 <_dtoa_r+0x3b8>
 8014016:	ee27 7b03 	vmul.f64	d7, d7, d3
 801401a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801401e:	e7e0      	b.n	8013fe2 <_dtoa_r+0x4ea>
 8014020:	4621      	mov	r1, r4
 8014022:	463e      	mov	r6, r7
 8014024:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014028:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801402c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014030:	ee14 2a90 	vmov	r2, s9
 8014034:	3230      	adds	r2, #48	@ 0x30
 8014036:	f806 2b01 	strb.w	r2, [r6], #1
 801403a:	42a6      	cmp	r6, r4
 801403c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014040:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014044:	d119      	bne.n	801407a <_dtoa_r+0x582>
 8014046:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801404a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801404e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014056:	dc3e      	bgt.n	80140d6 <_dtoa_r+0x5de>
 8014058:	ee35 5b47 	vsub.f64	d5, d5, d7
 801405c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014064:	f57f af24 	bpl.w	8013eb0 <_dtoa_r+0x3b8>
 8014068:	460e      	mov	r6, r1
 801406a:	3901      	subs	r1, #1
 801406c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014070:	2b30      	cmp	r3, #48	@ 0x30
 8014072:	d0f9      	beq.n	8014068 <_dtoa_r+0x570>
 8014074:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014078:	e758      	b.n	8013f2c <_dtoa_r+0x434>
 801407a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801407e:	e7d5      	b.n	801402c <_dtoa_r+0x534>
 8014080:	d10b      	bne.n	801409a <_dtoa_r+0x5a2>
 8014082:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014086:	ee26 6b07 	vmul.f64	d6, d6, d7
 801408a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801408e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014096:	f2c0 8161 	blt.w	801435c <_dtoa_r+0x864>
 801409a:	2400      	movs	r4, #0
 801409c:	4625      	mov	r5, r4
 801409e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140a0:	43db      	mvns	r3, r3
 80140a2:	9304      	str	r3, [sp, #16]
 80140a4:	463e      	mov	r6, r7
 80140a6:	f04f 0800 	mov.w	r8, #0
 80140aa:	4621      	mov	r1, r4
 80140ac:	4648      	mov	r0, r9
 80140ae:	f000 fbb9 	bl	8014824 <_Bfree>
 80140b2:	2d00      	cmp	r5, #0
 80140b4:	d0de      	beq.n	8014074 <_dtoa_r+0x57c>
 80140b6:	f1b8 0f00 	cmp.w	r8, #0
 80140ba:	d005      	beq.n	80140c8 <_dtoa_r+0x5d0>
 80140bc:	45a8      	cmp	r8, r5
 80140be:	d003      	beq.n	80140c8 <_dtoa_r+0x5d0>
 80140c0:	4641      	mov	r1, r8
 80140c2:	4648      	mov	r0, r9
 80140c4:	f000 fbae 	bl	8014824 <_Bfree>
 80140c8:	4629      	mov	r1, r5
 80140ca:	4648      	mov	r0, r9
 80140cc:	f000 fbaa 	bl	8014824 <_Bfree>
 80140d0:	e7d0      	b.n	8014074 <_dtoa_r+0x57c>
 80140d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80140d6:	4633      	mov	r3, r6
 80140d8:	461e      	mov	r6, r3
 80140da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80140de:	2a39      	cmp	r2, #57	@ 0x39
 80140e0:	d106      	bne.n	80140f0 <_dtoa_r+0x5f8>
 80140e2:	429f      	cmp	r7, r3
 80140e4:	d1f8      	bne.n	80140d8 <_dtoa_r+0x5e0>
 80140e6:	9a04      	ldr	r2, [sp, #16]
 80140e8:	3201      	adds	r2, #1
 80140ea:	9204      	str	r2, [sp, #16]
 80140ec:	2230      	movs	r2, #48	@ 0x30
 80140ee:	703a      	strb	r2, [r7, #0]
 80140f0:	781a      	ldrb	r2, [r3, #0]
 80140f2:	3201      	adds	r2, #1
 80140f4:	701a      	strb	r2, [r3, #0]
 80140f6:	e7bd      	b.n	8014074 <_dtoa_r+0x57c>
 80140f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80140fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014104:	f47f aeef 	bne.w	8013ee6 <_dtoa_r+0x3ee>
 8014108:	e710      	b.n	8013f2c <_dtoa_r+0x434>
 801410a:	bf00      	nop
 801410c:	080179d8 	.word	0x080179d8
 8014110:	080179b0 	.word	0x080179b0
 8014114:	9908      	ldr	r1, [sp, #32]
 8014116:	2900      	cmp	r1, #0
 8014118:	f000 80e3 	beq.w	80142e2 <_dtoa_r+0x7ea>
 801411c:	9907      	ldr	r1, [sp, #28]
 801411e:	2901      	cmp	r1, #1
 8014120:	f300 80c8 	bgt.w	80142b4 <_dtoa_r+0x7bc>
 8014124:	2d00      	cmp	r5, #0
 8014126:	f000 80c1 	beq.w	80142ac <_dtoa_r+0x7b4>
 801412a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801412e:	9e05      	ldr	r6, [sp, #20]
 8014130:	461c      	mov	r4, r3
 8014132:	9304      	str	r3, [sp, #16]
 8014134:	9b05      	ldr	r3, [sp, #20]
 8014136:	4413      	add	r3, r2
 8014138:	9305      	str	r3, [sp, #20]
 801413a:	9b06      	ldr	r3, [sp, #24]
 801413c:	2101      	movs	r1, #1
 801413e:	4413      	add	r3, r2
 8014140:	4648      	mov	r0, r9
 8014142:	9306      	str	r3, [sp, #24]
 8014144:	f000 fc22 	bl	801498c <__i2b>
 8014148:	9b04      	ldr	r3, [sp, #16]
 801414a:	4605      	mov	r5, r0
 801414c:	b166      	cbz	r6, 8014168 <_dtoa_r+0x670>
 801414e:	9a06      	ldr	r2, [sp, #24]
 8014150:	2a00      	cmp	r2, #0
 8014152:	dd09      	ble.n	8014168 <_dtoa_r+0x670>
 8014154:	42b2      	cmp	r2, r6
 8014156:	9905      	ldr	r1, [sp, #20]
 8014158:	bfa8      	it	ge
 801415a:	4632      	movge	r2, r6
 801415c:	1a89      	subs	r1, r1, r2
 801415e:	9105      	str	r1, [sp, #20]
 8014160:	9906      	ldr	r1, [sp, #24]
 8014162:	1ab6      	subs	r6, r6, r2
 8014164:	1a8a      	subs	r2, r1, r2
 8014166:	9206      	str	r2, [sp, #24]
 8014168:	b1fb      	cbz	r3, 80141aa <_dtoa_r+0x6b2>
 801416a:	9a08      	ldr	r2, [sp, #32]
 801416c:	2a00      	cmp	r2, #0
 801416e:	f000 80bc 	beq.w	80142ea <_dtoa_r+0x7f2>
 8014172:	b19c      	cbz	r4, 801419c <_dtoa_r+0x6a4>
 8014174:	4629      	mov	r1, r5
 8014176:	4622      	mov	r2, r4
 8014178:	4648      	mov	r0, r9
 801417a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801417c:	f000 fcc6 	bl	8014b0c <__pow5mult>
 8014180:	9a01      	ldr	r2, [sp, #4]
 8014182:	4601      	mov	r1, r0
 8014184:	4605      	mov	r5, r0
 8014186:	4648      	mov	r0, r9
 8014188:	f000 fc16 	bl	80149b8 <__multiply>
 801418c:	9901      	ldr	r1, [sp, #4]
 801418e:	9004      	str	r0, [sp, #16]
 8014190:	4648      	mov	r0, r9
 8014192:	f000 fb47 	bl	8014824 <_Bfree>
 8014196:	9a04      	ldr	r2, [sp, #16]
 8014198:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801419a:	9201      	str	r2, [sp, #4]
 801419c:	1b1a      	subs	r2, r3, r4
 801419e:	d004      	beq.n	80141aa <_dtoa_r+0x6b2>
 80141a0:	9901      	ldr	r1, [sp, #4]
 80141a2:	4648      	mov	r0, r9
 80141a4:	f000 fcb2 	bl	8014b0c <__pow5mult>
 80141a8:	9001      	str	r0, [sp, #4]
 80141aa:	2101      	movs	r1, #1
 80141ac:	4648      	mov	r0, r9
 80141ae:	f000 fbed 	bl	801498c <__i2b>
 80141b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141b4:	4604      	mov	r4, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	f000 81d0 	beq.w	801455c <_dtoa_r+0xa64>
 80141bc:	461a      	mov	r2, r3
 80141be:	4601      	mov	r1, r0
 80141c0:	4648      	mov	r0, r9
 80141c2:	f000 fca3 	bl	8014b0c <__pow5mult>
 80141c6:	9b07      	ldr	r3, [sp, #28]
 80141c8:	2b01      	cmp	r3, #1
 80141ca:	4604      	mov	r4, r0
 80141cc:	f300 8095 	bgt.w	80142fa <_dtoa_r+0x802>
 80141d0:	9b02      	ldr	r3, [sp, #8]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	f040 808b 	bne.w	80142ee <_dtoa_r+0x7f6>
 80141d8:	9b03      	ldr	r3, [sp, #12]
 80141da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80141de:	2a00      	cmp	r2, #0
 80141e0:	f040 8087 	bne.w	80142f2 <_dtoa_r+0x7fa>
 80141e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80141e8:	0d12      	lsrs	r2, r2, #20
 80141ea:	0512      	lsls	r2, r2, #20
 80141ec:	2a00      	cmp	r2, #0
 80141ee:	f000 8082 	beq.w	80142f6 <_dtoa_r+0x7fe>
 80141f2:	9b05      	ldr	r3, [sp, #20]
 80141f4:	3301      	adds	r3, #1
 80141f6:	9305      	str	r3, [sp, #20]
 80141f8:	9b06      	ldr	r3, [sp, #24]
 80141fa:	3301      	adds	r3, #1
 80141fc:	9306      	str	r3, [sp, #24]
 80141fe:	2301      	movs	r3, #1
 8014200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014204:	2b00      	cmp	r3, #0
 8014206:	f000 81af 	beq.w	8014568 <_dtoa_r+0xa70>
 801420a:	6922      	ldr	r2, [r4, #16]
 801420c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014210:	6910      	ldr	r0, [r2, #16]
 8014212:	f000 fb6f 	bl	80148f4 <__hi0bits>
 8014216:	f1c0 0020 	rsb	r0, r0, #32
 801421a:	9b06      	ldr	r3, [sp, #24]
 801421c:	4418      	add	r0, r3
 801421e:	f010 001f 	ands.w	r0, r0, #31
 8014222:	d076      	beq.n	8014312 <_dtoa_r+0x81a>
 8014224:	f1c0 0220 	rsb	r2, r0, #32
 8014228:	2a04      	cmp	r2, #4
 801422a:	dd69      	ble.n	8014300 <_dtoa_r+0x808>
 801422c:	9b05      	ldr	r3, [sp, #20]
 801422e:	f1c0 001c 	rsb	r0, r0, #28
 8014232:	4403      	add	r3, r0
 8014234:	9305      	str	r3, [sp, #20]
 8014236:	9b06      	ldr	r3, [sp, #24]
 8014238:	4406      	add	r6, r0
 801423a:	4403      	add	r3, r0
 801423c:	9306      	str	r3, [sp, #24]
 801423e:	9b05      	ldr	r3, [sp, #20]
 8014240:	2b00      	cmp	r3, #0
 8014242:	dd05      	ble.n	8014250 <_dtoa_r+0x758>
 8014244:	9901      	ldr	r1, [sp, #4]
 8014246:	461a      	mov	r2, r3
 8014248:	4648      	mov	r0, r9
 801424a:	f000 fcb9 	bl	8014bc0 <__lshift>
 801424e:	9001      	str	r0, [sp, #4]
 8014250:	9b06      	ldr	r3, [sp, #24]
 8014252:	2b00      	cmp	r3, #0
 8014254:	dd05      	ble.n	8014262 <_dtoa_r+0x76a>
 8014256:	4621      	mov	r1, r4
 8014258:	461a      	mov	r2, r3
 801425a:	4648      	mov	r0, r9
 801425c:	f000 fcb0 	bl	8014bc0 <__lshift>
 8014260:	4604      	mov	r4, r0
 8014262:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014264:	2b00      	cmp	r3, #0
 8014266:	d056      	beq.n	8014316 <_dtoa_r+0x81e>
 8014268:	9801      	ldr	r0, [sp, #4]
 801426a:	4621      	mov	r1, r4
 801426c:	f000 fd14 	bl	8014c98 <__mcmp>
 8014270:	2800      	cmp	r0, #0
 8014272:	da50      	bge.n	8014316 <_dtoa_r+0x81e>
 8014274:	f108 33ff 	add.w	r3, r8, #4294967295
 8014278:	9304      	str	r3, [sp, #16]
 801427a:	9901      	ldr	r1, [sp, #4]
 801427c:	2300      	movs	r3, #0
 801427e:	220a      	movs	r2, #10
 8014280:	4648      	mov	r0, r9
 8014282:	f000 faf1 	bl	8014868 <__multadd>
 8014286:	9b08      	ldr	r3, [sp, #32]
 8014288:	9001      	str	r0, [sp, #4]
 801428a:	2b00      	cmp	r3, #0
 801428c:	f000 816e 	beq.w	801456c <_dtoa_r+0xa74>
 8014290:	4629      	mov	r1, r5
 8014292:	2300      	movs	r3, #0
 8014294:	220a      	movs	r2, #10
 8014296:	4648      	mov	r0, r9
 8014298:	f000 fae6 	bl	8014868 <__multadd>
 801429c:	f1bb 0f00 	cmp.w	fp, #0
 80142a0:	4605      	mov	r5, r0
 80142a2:	dc64      	bgt.n	801436e <_dtoa_r+0x876>
 80142a4:	9b07      	ldr	r3, [sp, #28]
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	dc3e      	bgt.n	8014328 <_dtoa_r+0x830>
 80142aa:	e060      	b.n	801436e <_dtoa_r+0x876>
 80142ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80142b2:	e73c      	b.n	801412e <_dtoa_r+0x636>
 80142b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80142b8:	42a3      	cmp	r3, r4
 80142ba:	bfbf      	itttt	lt
 80142bc:	1ae2      	sublt	r2, r4, r3
 80142be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80142c0:	189b      	addlt	r3, r3, r2
 80142c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80142c4:	bfae      	itee	ge
 80142c6:	1b1c      	subge	r4, r3, r4
 80142c8:	4623      	movlt	r3, r4
 80142ca:	2400      	movlt	r4, #0
 80142cc:	f1ba 0f00 	cmp.w	sl, #0
 80142d0:	bfb5      	itete	lt
 80142d2:	9a05      	ldrlt	r2, [sp, #20]
 80142d4:	9e05      	ldrge	r6, [sp, #20]
 80142d6:	eba2 060a 	sublt.w	r6, r2, sl
 80142da:	4652      	movge	r2, sl
 80142dc:	bfb8      	it	lt
 80142de:	2200      	movlt	r2, #0
 80142e0:	e727      	b.n	8014132 <_dtoa_r+0x63a>
 80142e2:	9e05      	ldr	r6, [sp, #20]
 80142e4:	9d08      	ldr	r5, [sp, #32]
 80142e6:	461c      	mov	r4, r3
 80142e8:	e730      	b.n	801414c <_dtoa_r+0x654>
 80142ea:	461a      	mov	r2, r3
 80142ec:	e758      	b.n	80141a0 <_dtoa_r+0x6a8>
 80142ee:	2300      	movs	r3, #0
 80142f0:	e786      	b.n	8014200 <_dtoa_r+0x708>
 80142f2:	9b02      	ldr	r3, [sp, #8]
 80142f4:	e784      	b.n	8014200 <_dtoa_r+0x708>
 80142f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80142f8:	e783      	b.n	8014202 <_dtoa_r+0x70a>
 80142fa:	2300      	movs	r3, #0
 80142fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80142fe:	e784      	b.n	801420a <_dtoa_r+0x712>
 8014300:	d09d      	beq.n	801423e <_dtoa_r+0x746>
 8014302:	9b05      	ldr	r3, [sp, #20]
 8014304:	321c      	adds	r2, #28
 8014306:	4413      	add	r3, r2
 8014308:	9305      	str	r3, [sp, #20]
 801430a:	9b06      	ldr	r3, [sp, #24]
 801430c:	4416      	add	r6, r2
 801430e:	4413      	add	r3, r2
 8014310:	e794      	b.n	801423c <_dtoa_r+0x744>
 8014312:	4602      	mov	r2, r0
 8014314:	e7f5      	b.n	8014302 <_dtoa_r+0x80a>
 8014316:	f1ba 0f00 	cmp.w	sl, #0
 801431a:	f8cd 8010 	str.w	r8, [sp, #16]
 801431e:	46d3      	mov	fp, sl
 8014320:	dc21      	bgt.n	8014366 <_dtoa_r+0x86e>
 8014322:	9b07      	ldr	r3, [sp, #28]
 8014324:	2b02      	cmp	r3, #2
 8014326:	dd1e      	ble.n	8014366 <_dtoa_r+0x86e>
 8014328:	f1bb 0f00 	cmp.w	fp, #0
 801432c:	f47f aeb7 	bne.w	801409e <_dtoa_r+0x5a6>
 8014330:	4621      	mov	r1, r4
 8014332:	465b      	mov	r3, fp
 8014334:	2205      	movs	r2, #5
 8014336:	4648      	mov	r0, r9
 8014338:	f000 fa96 	bl	8014868 <__multadd>
 801433c:	4601      	mov	r1, r0
 801433e:	4604      	mov	r4, r0
 8014340:	9801      	ldr	r0, [sp, #4]
 8014342:	f000 fca9 	bl	8014c98 <__mcmp>
 8014346:	2800      	cmp	r0, #0
 8014348:	f77f aea9 	ble.w	801409e <_dtoa_r+0x5a6>
 801434c:	463e      	mov	r6, r7
 801434e:	2331      	movs	r3, #49	@ 0x31
 8014350:	f806 3b01 	strb.w	r3, [r6], #1
 8014354:	9b04      	ldr	r3, [sp, #16]
 8014356:	3301      	adds	r3, #1
 8014358:	9304      	str	r3, [sp, #16]
 801435a:	e6a4      	b.n	80140a6 <_dtoa_r+0x5ae>
 801435c:	f8cd 8010 	str.w	r8, [sp, #16]
 8014360:	4654      	mov	r4, sl
 8014362:	4625      	mov	r5, r4
 8014364:	e7f2      	b.n	801434c <_dtoa_r+0x854>
 8014366:	9b08      	ldr	r3, [sp, #32]
 8014368:	2b00      	cmp	r3, #0
 801436a:	f000 8103 	beq.w	8014574 <_dtoa_r+0xa7c>
 801436e:	2e00      	cmp	r6, #0
 8014370:	dd05      	ble.n	801437e <_dtoa_r+0x886>
 8014372:	4629      	mov	r1, r5
 8014374:	4632      	mov	r2, r6
 8014376:	4648      	mov	r0, r9
 8014378:	f000 fc22 	bl	8014bc0 <__lshift>
 801437c:	4605      	mov	r5, r0
 801437e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014380:	2b00      	cmp	r3, #0
 8014382:	d058      	beq.n	8014436 <_dtoa_r+0x93e>
 8014384:	6869      	ldr	r1, [r5, #4]
 8014386:	4648      	mov	r0, r9
 8014388:	f000 fa0c 	bl	80147a4 <_Balloc>
 801438c:	4606      	mov	r6, r0
 801438e:	b928      	cbnz	r0, 801439c <_dtoa_r+0x8a4>
 8014390:	4b82      	ldr	r3, [pc, #520]	@ (801459c <_dtoa_r+0xaa4>)
 8014392:	4602      	mov	r2, r0
 8014394:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014398:	f7ff bbc7 	b.w	8013b2a <_dtoa_r+0x32>
 801439c:	692a      	ldr	r2, [r5, #16]
 801439e:	3202      	adds	r2, #2
 80143a0:	0092      	lsls	r2, r2, #2
 80143a2:	f105 010c 	add.w	r1, r5, #12
 80143a6:	300c      	adds	r0, #12
 80143a8:	f7ff fb0f 	bl	80139ca <memcpy>
 80143ac:	2201      	movs	r2, #1
 80143ae:	4631      	mov	r1, r6
 80143b0:	4648      	mov	r0, r9
 80143b2:	f000 fc05 	bl	8014bc0 <__lshift>
 80143b6:	1c7b      	adds	r3, r7, #1
 80143b8:	9305      	str	r3, [sp, #20]
 80143ba:	eb07 030b 	add.w	r3, r7, fp
 80143be:	9309      	str	r3, [sp, #36]	@ 0x24
 80143c0:	9b02      	ldr	r3, [sp, #8]
 80143c2:	f003 0301 	and.w	r3, r3, #1
 80143c6:	46a8      	mov	r8, r5
 80143c8:	9308      	str	r3, [sp, #32]
 80143ca:	4605      	mov	r5, r0
 80143cc:	9b05      	ldr	r3, [sp, #20]
 80143ce:	9801      	ldr	r0, [sp, #4]
 80143d0:	4621      	mov	r1, r4
 80143d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80143d6:	f7ff fb06 	bl	80139e6 <quorem>
 80143da:	4641      	mov	r1, r8
 80143dc:	9002      	str	r0, [sp, #8]
 80143de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80143e2:	9801      	ldr	r0, [sp, #4]
 80143e4:	f000 fc58 	bl	8014c98 <__mcmp>
 80143e8:	462a      	mov	r2, r5
 80143ea:	9006      	str	r0, [sp, #24]
 80143ec:	4621      	mov	r1, r4
 80143ee:	4648      	mov	r0, r9
 80143f0:	f000 fc6e 	bl	8014cd0 <__mdiff>
 80143f4:	68c2      	ldr	r2, [r0, #12]
 80143f6:	4606      	mov	r6, r0
 80143f8:	b9fa      	cbnz	r2, 801443a <_dtoa_r+0x942>
 80143fa:	4601      	mov	r1, r0
 80143fc:	9801      	ldr	r0, [sp, #4]
 80143fe:	f000 fc4b 	bl	8014c98 <__mcmp>
 8014402:	4602      	mov	r2, r0
 8014404:	4631      	mov	r1, r6
 8014406:	4648      	mov	r0, r9
 8014408:	920a      	str	r2, [sp, #40]	@ 0x28
 801440a:	f000 fa0b 	bl	8014824 <_Bfree>
 801440e:	9b07      	ldr	r3, [sp, #28]
 8014410:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014412:	9e05      	ldr	r6, [sp, #20]
 8014414:	ea43 0102 	orr.w	r1, r3, r2
 8014418:	9b08      	ldr	r3, [sp, #32]
 801441a:	4319      	orrs	r1, r3
 801441c:	d10f      	bne.n	801443e <_dtoa_r+0x946>
 801441e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014422:	d028      	beq.n	8014476 <_dtoa_r+0x97e>
 8014424:	9b06      	ldr	r3, [sp, #24]
 8014426:	2b00      	cmp	r3, #0
 8014428:	dd02      	ble.n	8014430 <_dtoa_r+0x938>
 801442a:	9b02      	ldr	r3, [sp, #8]
 801442c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8014430:	f88b a000 	strb.w	sl, [fp]
 8014434:	e639      	b.n	80140aa <_dtoa_r+0x5b2>
 8014436:	4628      	mov	r0, r5
 8014438:	e7bd      	b.n	80143b6 <_dtoa_r+0x8be>
 801443a:	2201      	movs	r2, #1
 801443c:	e7e2      	b.n	8014404 <_dtoa_r+0x90c>
 801443e:	9b06      	ldr	r3, [sp, #24]
 8014440:	2b00      	cmp	r3, #0
 8014442:	db04      	blt.n	801444e <_dtoa_r+0x956>
 8014444:	9907      	ldr	r1, [sp, #28]
 8014446:	430b      	orrs	r3, r1
 8014448:	9908      	ldr	r1, [sp, #32]
 801444a:	430b      	orrs	r3, r1
 801444c:	d120      	bne.n	8014490 <_dtoa_r+0x998>
 801444e:	2a00      	cmp	r2, #0
 8014450:	ddee      	ble.n	8014430 <_dtoa_r+0x938>
 8014452:	9901      	ldr	r1, [sp, #4]
 8014454:	2201      	movs	r2, #1
 8014456:	4648      	mov	r0, r9
 8014458:	f000 fbb2 	bl	8014bc0 <__lshift>
 801445c:	4621      	mov	r1, r4
 801445e:	9001      	str	r0, [sp, #4]
 8014460:	f000 fc1a 	bl	8014c98 <__mcmp>
 8014464:	2800      	cmp	r0, #0
 8014466:	dc03      	bgt.n	8014470 <_dtoa_r+0x978>
 8014468:	d1e2      	bne.n	8014430 <_dtoa_r+0x938>
 801446a:	f01a 0f01 	tst.w	sl, #1
 801446e:	d0df      	beq.n	8014430 <_dtoa_r+0x938>
 8014470:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014474:	d1d9      	bne.n	801442a <_dtoa_r+0x932>
 8014476:	2339      	movs	r3, #57	@ 0x39
 8014478:	f88b 3000 	strb.w	r3, [fp]
 801447c:	4633      	mov	r3, r6
 801447e:	461e      	mov	r6, r3
 8014480:	3b01      	subs	r3, #1
 8014482:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014486:	2a39      	cmp	r2, #57	@ 0x39
 8014488:	d053      	beq.n	8014532 <_dtoa_r+0xa3a>
 801448a:	3201      	adds	r2, #1
 801448c:	701a      	strb	r2, [r3, #0]
 801448e:	e60c      	b.n	80140aa <_dtoa_r+0x5b2>
 8014490:	2a00      	cmp	r2, #0
 8014492:	dd07      	ble.n	80144a4 <_dtoa_r+0x9ac>
 8014494:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8014498:	d0ed      	beq.n	8014476 <_dtoa_r+0x97e>
 801449a:	f10a 0301 	add.w	r3, sl, #1
 801449e:	f88b 3000 	strb.w	r3, [fp]
 80144a2:	e602      	b.n	80140aa <_dtoa_r+0x5b2>
 80144a4:	9b05      	ldr	r3, [sp, #20]
 80144a6:	9a05      	ldr	r2, [sp, #20]
 80144a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80144ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d029      	beq.n	8014506 <_dtoa_r+0xa0e>
 80144b2:	9901      	ldr	r1, [sp, #4]
 80144b4:	2300      	movs	r3, #0
 80144b6:	220a      	movs	r2, #10
 80144b8:	4648      	mov	r0, r9
 80144ba:	f000 f9d5 	bl	8014868 <__multadd>
 80144be:	45a8      	cmp	r8, r5
 80144c0:	9001      	str	r0, [sp, #4]
 80144c2:	f04f 0300 	mov.w	r3, #0
 80144c6:	f04f 020a 	mov.w	r2, #10
 80144ca:	4641      	mov	r1, r8
 80144cc:	4648      	mov	r0, r9
 80144ce:	d107      	bne.n	80144e0 <_dtoa_r+0x9e8>
 80144d0:	f000 f9ca 	bl	8014868 <__multadd>
 80144d4:	4680      	mov	r8, r0
 80144d6:	4605      	mov	r5, r0
 80144d8:	9b05      	ldr	r3, [sp, #20]
 80144da:	3301      	adds	r3, #1
 80144dc:	9305      	str	r3, [sp, #20]
 80144de:	e775      	b.n	80143cc <_dtoa_r+0x8d4>
 80144e0:	f000 f9c2 	bl	8014868 <__multadd>
 80144e4:	4629      	mov	r1, r5
 80144e6:	4680      	mov	r8, r0
 80144e8:	2300      	movs	r3, #0
 80144ea:	220a      	movs	r2, #10
 80144ec:	4648      	mov	r0, r9
 80144ee:	f000 f9bb 	bl	8014868 <__multadd>
 80144f2:	4605      	mov	r5, r0
 80144f4:	e7f0      	b.n	80144d8 <_dtoa_r+0x9e0>
 80144f6:	f1bb 0f00 	cmp.w	fp, #0
 80144fa:	bfcc      	ite	gt
 80144fc:	465e      	movgt	r6, fp
 80144fe:	2601      	movle	r6, #1
 8014500:	443e      	add	r6, r7
 8014502:	f04f 0800 	mov.w	r8, #0
 8014506:	9901      	ldr	r1, [sp, #4]
 8014508:	2201      	movs	r2, #1
 801450a:	4648      	mov	r0, r9
 801450c:	f000 fb58 	bl	8014bc0 <__lshift>
 8014510:	4621      	mov	r1, r4
 8014512:	9001      	str	r0, [sp, #4]
 8014514:	f000 fbc0 	bl	8014c98 <__mcmp>
 8014518:	2800      	cmp	r0, #0
 801451a:	dcaf      	bgt.n	801447c <_dtoa_r+0x984>
 801451c:	d102      	bne.n	8014524 <_dtoa_r+0xa2c>
 801451e:	f01a 0f01 	tst.w	sl, #1
 8014522:	d1ab      	bne.n	801447c <_dtoa_r+0x984>
 8014524:	4633      	mov	r3, r6
 8014526:	461e      	mov	r6, r3
 8014528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801452c:	2a30      	cmp	r2, #48	@ 0x30
 801452e:	d0fa      	beq.n	8014526 <_dtoa_r+0xa2e>
 8014530:	e5bb      	b.n	80140aa <_dtoa_r+0x5b2>
 8014532:	429f      	cmp	r7, r3
 8014534:	d1a3      	bne.n	801447e <_dtoa_r+0x986>
 8014536:	9b04      	ldr	r3, [sp, #16]
 8014538:	3301      	adds	r3, #1
 801453a:	9304      	str	r3, [sp, #16]
 801453c:	2331      	movs	r3, #49	@ 0x31
 801453e:	703b      	strb	r3, [r7, #0]
 8014540:	e5b3      	b.n	80140aa <_dtoa_r+0x5b2>
 8014542:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014544:	4f16      	ldr	r7, [pc, #88]	@ (80145a0 <_dtoa_r+0xaa8>)
 8014546:	b11b      	cbz	r3, 8014550 <_dtoa_r+0xa58>
 8014548:	f107 0308 	add.w	r3, r7, #8
 801454c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801454e:	6013      	str	r3, [r2, #0]
 8014550:	4638      	mov	r0, r7
 8014552:	b011      	add	sp, #68	@ 0x44
 8014554:	ecbd 8b02 	vpop	{d8}
 8014558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801455c:	9b07      	ldr	r3, [sp, #28]
 801455e:	2b01      	cmp	r3, #1
 8014560:	f77f ae36 	ble.w	80141d0 <_dtoa_r+0x6d8>
 8014564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014566:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014568:	2001      	movs	r0, #1
 801456a:	e656      	b.n	801421a <_dtoa_r+0x722>
 801456c:	f1bb 0f00 	cmp.w	fp, #0
 8014570:	f77f aed7 	ble.w	8014322 <_dtoa_r+0x82a>
 8014574:	463e      	mov	r6, r7
 8014576:	9801      	ldr	r0, [sp, #4]
 8014578:	4621      	mov	r1, r4
 801457a:	f7ff fa34 	bl	80139e6 <quorem>
 801457e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8014582:	f806 ab01 	strb.w	sl, [r6], #1
 8014586:	1bf2      	subs	r2, r6, r7
 8014588:	4593      	cmp	fp, r2
 801458a:	ddb4      	ble.n	80144f6 <_dtoa_r+0x9fe>
 801458c:	9901      	ldr	r1, [sp, #4]
 801458e:	2300      	movs	r3, #0
 8014590:	220a      	movs	r2, #10
 8014592:	4648      	mov	r0, r9
 8014594:	f000 f968 	bl	8014868 <__multadd>
 8014598:	9001      	str	r0, [sp, #4]
 801459a:	e7ec      	b.n	8014576 <_dtoa_r+0xa7e>
 801459c:	08017938 	.word	0x08017938
 80145a0:	080178bc 	.word	0x080178bc

080145a4 <_free_r>:
 80145a4:	b538      	push	{r3, r4, r5, lr}
 80145a6:	4605      	mov	r5, r0
 80145a8:	2900      	cmp	r1, #0
 80145aa:	d041      	beq.n	8014630 <_free_r+0x8c>
 80145ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145b0:	1f0c      	subs	r4, r1, #4
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	bfb8      	it	lt
 80145b6:	18e4      	addlt	r4, r4, r3
 80145b8:	f000 f8e8 	bl	801478c <__malloc_lock>
 80145bc:	4a1d      	ldr	r2, [pc, #116]	@ (8014634 <_free_r+0x90>)
 80145be:	6813      	ldr	r3, [r2, #0]
 80145c0:	b933      	cbnz	r3, 80145d0 <_free_r+0x2c>
 80145c2:	6063      	str	r3, [r4, #4]
 80145c4:	6014      	str	r4, [r2, #0]
 80145c6:	4628      	mov	r0, r5
 80145c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145cc:	f000 b8e4 	b.w	8014798 <__malloc_unlock>
 80145d0:	42a3      	cmp	r3, r4
 80145d2:	d908      	bls.n	80145e6 <_free_r+0x42>
 80145d4:	6820      	ldr	r0, [r4, #0]
 80145d6:	1821      	adds	r1, r4, r0
 80145d8:	428b      	cmp	r3, r1
 80145da:	bf01      	itttt	eq
 80145dc:	6819      	ldreq	r1, [r3, #0]
 80145de:	685b      	ldreq	r3, [r3, #4]
 80145e0:	1809      	addeq	r1, r1, r0
 80145e2:	6021      	streq	r1, [r4, #0]
 80145e4:	e7ed      	b.n	80145c2 <_free_r+0x1e>
 80145e6:	461a      	mov	r2, r3
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	b10b      	cbz	r3, 80145f0 <_free_r+0x4c>
 80145ec:	42a3      	cmp	r3, r4
 80145ee:	d9fa      	bls.n	80145e6 <_free_r+0x42>
 80145f0:	6811      	ldr	r1, [r2, #0]
 80145f2:	1850      	adds	r0, r2, r1
 80145f4:	42a0      	cmp	r0, r4
 80145f6:	d10b      	bne.n	8014610 <_free_r+0x6c>
 80145f8:	6820      	ldr	r0, [r4, #0]
 80145fa:	4401      	add	r1, r0
 80145fc:	1850      	adds	r0, r2, r1
 80145fe:	4283      	cmp	r3, r0
 8014600:	6011      	str	r1, [r2, #0]
 8014602:	d1e0      	bne.n	80145c6 <_free_r+0x22>
 8014604:	6818      	ldr	r0, [r3, #0]
 8014606:	685b      	ldr	r3, [r3, #4]
 8014608:	6053      	str	r3, [r2, #4]
 801460a:	4408      	add	r0, r1
 801460c:	6010      	str	r0, [r2, #0]
 801460e:	e7da      	b.n	80145c6 <_free_r+0x22>
 8014610:	d902      	bls.n	8014618 <_free_r+0x74>
 8014612:	230c      	movs	r3, #12
 8014614:	602b      	str	r3, [r5, #0]
 8014616:	e7d6      	b.n	80145c6 <_free_r+0x22>
 8014618:	6820      	ldr	r0, [r4, #0]
 801461a:	1821      	adds	r1, r4, r0
 801461c:	428b      	cmp	r3, r1
 801461e:	bf04      	itt	eq
 8014620:	6819      	ldreq	r1, [r3, #0]
 8014622:	685b      	ldreq	r3, [r3, #4]
 8014624:	6063      	str	r3, [r4, #4]
 8014626:	bf04      	itt	eq
 8014628:	1809      	addeq	r1, r1, r0
 801462a:	6021      	streq	r1, [r4, #0]
 801462c:	6054      	str	r4, [r2, #4]
 801462e:	e7ca      	b.n	80145c6 <_free_r+0x22>
 8014630:	bd38      	pop	{r3, r4, r5, pc}
 8014632:	bf00      	nop
 8014634:	240758c0 	.word	0x240758c0

08014638 <malloc>:
 8014638:	4b02      	ldr	r3, [pc, #8]	@ (8014644 <malloc+0xc>)
 801463a:	4601      	mov	r1, r0
 801463c:	6818      	ldr	r0, [r3, #0]
 801463e:	f000 b825 	b.w	801468c <_malloc_r>
 8014642:	bf00      	nop
 8014644:	2400004c 	.word	0x2400004c

08014648 <sbrk_aligned>:
 8014648:	b570      	push	{r4, r5, r6, lr}
 801464a:	4e0f      	ldr	r6, [pc, #60]	@ (8014688 <sbrk_aligned+0x40>)
 801464c:	460c      	mov	r4, r1
 801464e:	6831      	ldr	r1, [r6, #0]
 8014650:	4605      	mov	r5, r0
 8014652:	b911      	cbnz	r1, 801465a <sbrk_aligned+0x12>
 8014654:	f001 f81c 	bl	8015690 <_sbrk_r>
 8014658:	6030      	str	r0, [r6, #0]
 801465a:	4621      	mov	r1, r4
 801465c:	4628      	mov	r0, r5
 801465e:	f001 f817 	bl	8015690 <_sbrk_r>
 8014662:	1c43      	adds	r3, r0, #1
 8014664:	d103      	bne.n	801466e <sbrk_aligned+0x26>
 8014666:	f04f 34ff 	mov.w	r4, #4294967295
 801466a:	4620      	mov	r0, r4
 801466c:	bd70      	pop	{r4, r5, r6, pc}
 801466e:	1cc4      	adds	r4, r0, #3
 8014670:	f024 0403 	bic.w	r4, r4, #3
 8014674:	42a0      	cmp	r0, r4
 8014676:	d0f8      	beq.n	801466a <sbrk_aligned+0x22>
 8014678:	1a21      	subs	r1, r4, r0
 801467a:	4628      	mov	r0, r5
 801467c:	f001 f808 	bl	8015690 <_sbrk_r>
 8014680:	3001      	adds	r0, #1
 8014682:	d1f2      	bne.n	801466a <sbrk_aligned+0x22>
 8014684:	e7ef      	b.n	8014666 <sbrk_aligned+0x1e>
 8014686:	bf00      	nop
 8014688:	240758bc 	.word	0x240758bc

0801468c <_malloc_r>:
 801468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014690:	1ccd      	adds	r5, r1, #3
 8014692:	f025 0503 	bic.w	r5, r5, #3
 8014696:	3508      	adds	r5, #8
 8014698:	2d0c      	cmp	r5, #12
 801469a:	bf38      	it	cc
 801469c:	250c      	movcc	r5, #12
 801469e:	2d00      	cmp	r5, #0
 80146a0:	4606      	mov	r6, r0
 80146a2:	db01      	blt.n	80146a8 <_malloc_r+0x1c>
 80146a4:	42a9      	cmp	r1, r5
 80146a6:	d904      	bls.n	80146b2 <_malloc_r+0x26>
 80146a8:	230c      	movs	r3, #12
 80146aa:	6033      	str	r3, [r6, #0]
 80146ac:	2000      	movs	r0, #0
 80146ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014788 <_malloc_r+0xfc>
 80146b6:	f000 f869 	bl	801478c <__malloc_lock>
 80146ba:	f8d8 3000 	ldr.w	r3, [r8]
 80146be:	461c      	mov	r4, r3
 80146c0:	bb44      	cbnz	r4, 8014714 <_malloc_r+0x88>
 80146c2:	4629      	mov	r1, r5
 80146c4:	4630      	mov	r0, r6
 80146c6:	f7ff ffbf 	bl	8014648 <sbrk_aligned>
 80146ca:	1c43      	adds	r3, r0, #1
 80146cc:	4604      	mov	r4, r0
 80146ce:	d158      	bne.n	8014782 <_malloc_r+0xf6>
 80146d0:	f8d8 4000 	ldr.w	r4, [r8]
 80146d4:	4627      	mov	r7, r4
 80146d6:	2f00      	cmp	r7, #0
 80146d8:	d143      	bne.n	8014762 <_malloc_r+0xd6>
 80146da:	2c00      	cmp	r4, #0
 80146dc:	d04b      	beq.n	8014776 <_malloc_r+0xea>
 80146de:	6823      	ldr	r3, [r4, #0]
 80146e0:	4639      	mov	r1, r7
 80146e2:	4630      	mov	r0, r6
 80146e4:	eb04 0903 	add.w	r9, r4, r3
 80146e8:	f000 ffd2 	bl	8015690 <_sbrk_r>
 80146ec:	4581      	cmp	r9, r0
 80146ee:	d142      	bne.n	8014776 <_malloc_r+0xea>
 80146f0:	6821      	ldr	r1, [r4, #0]
 80146f2:	1a6d      	subs	r5, r5, r1
 80146f4:	4629      	mov	r1, r5
 80146f6:	4630      	mov	r0, r6
 80146f8:	f7ff ffa6 	bl	8014648 <sbrk_aligned>
 80146fc:	3001      	adds	r0, #1
 80146fe:	d03a      	beq.n	8014776 <_malloc_r+0xea>
 8014700:	6823      	ldr	r3, [r4, #0]
 8014702:	442b      	add	r3, r5
 8014704:	6023      	str	r3, [r4, #0]
 8014706:	f8d8 3000 	ldr.w	r3, [r8]
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	bb62      	cbnz	r2, 8014768 <_malloc_r+0xdc>
 801470e:	f8c8 7000 	str.w	r7, [r8]
 8014712:	e00f      	b.n	8014734 <_malloc_r+0xa8>
 8014714:	6822      	ldr	r2, [r4, #0]
 8014716:	1b52      	subs	r2, r2, r5
 8014718:	d420      	bmi.n	801475c <_malloc_r+0xd0>
 801471a:	2a0b      	cmp	r2, #11
 801471c:	d917      	bls.n	801474e <_malloc_r+0xc2>
 801471e:	1961      	adds	r1, r4, r5
 8014720:	42a3      	cmp	r3, r4
 8014722:	6025      	str	r5, [r4, #0]
 8014724:	bf18      	it	ne
 8014726:	6059      	strne	r1, [r3, #4]
 8014728:	6863      	ldr	r3, [r4, #4]
 801472a:	bf08      	it	eq
 801472c:	f8c8 1000 	streq.w	r1, [r8]
 8014730:	5162      	str	r2, [r4, r5]
 8014732:	604b      	str	r3, [r1, #4]
 8014734:	4630      	mov	r0, r6
 8014736:	f000 f82f 	bl	8014798 <__malloc_unlock>
 801473a:	f104 000b 	add.w	r0, r4, #11
 801473e:	1d23      	adds	r3, r4, #4
 8014740:	f020 0007 	bic.w	r0, r0, #7
 8014744:	1ac2      	subs	r2, r0, r3
 8014746:	bf1c      	itt	ne
 8014748:	1a1b      	subne	r3, r3, r0
 801474a:	50a3      	strne	r3, [r4, r2]
 801474c:	e7af      	b.n	80146ae <_malloc_r+0x22>
 801474e:	6862      	ldr	r2, [r4, #4]
 8014750:	42a3      	cmp	r3, r4
 8014752:	bf0c      	ite	eq
 8014754:	f8c8 2000 	streq.w	r2, [r8]
 8014758:	605a      	strne	r2, [r3, #4]
 801475a:	e7eb      	b.n	8014734 <_malloc_r+0xa8>
 801475c:	4623      	mov	r3, r4
 801475e:	6864      	ldr	r4, [r4, #4]
 8014760:	e7ae      	b.n	80146c0 <_malloc_r+0x34>
 8014762:	463c      	mov	r4, r7
 8014764:	687f      	ldr	r7, [r7, #4]
 8014766:	e7b6      	b.n	80146d6 <_malloc_r+0x4a>
 8014768:	461a      	mov	r2, r3
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	42a3      	cmp	r3, r4
 801476e:	d1fb      	bne.n	8014768 <_malloc_r+0xdc>
 8014770:	2300      	movs	r3, #0
 8014772:	6053      	str	r3, [r2, #4]
 8014774:	e7de      	b.n	8014734 <_malloc_r+0xa8>
 8014776:	230c      	movs	r3, #12
 8014778:	6033      	str	r3, [r6, #0]
 801477a:	4630      	mov	r0, r6
 801477c:	f000 f80c 	bl	8014798 <__malloc_unlock>
 8014780:	e794      	b.n	80146ac <_malloc_r+0x20>
 8014782:	6005      	str	r5, [r0, #0]
 8014784:	e7d6      	b.n	8014734 <_malloc_r+0xa8>
 8014786:	bf00      	nop
 8014788:	240758c0 	.word	0x240758c0

0801478c <__malloc_lock>:
 801478c:	4801      	ldr	r0, [pc, #4]	@ (8014794 <__malloc_lock+0x8>)
 801478e:	f7ff b91a 	b.w	80139c6 <__retarget_lock_acquire_recursive>
 8014792:	bf00      	nop
 8014794:	240758b8 	.word	0x240758b8

08014798 <__malloc_unlock>:
 8014798:	4801      	ldr	r0, [pc, #4]	@ (80147a0 <__malloc_unlock+0x8>)
 801479a:	f7ff b915 	b.w	80139c8 <__retarget_lock_release_recursive>
 801479e:	bf00      	nop
 80147a0:	240758b8 	.word	0x240758b8

080147a4 <_Balloc>:
 80147a4:	b570      	push	{r4, r5, r6, lr}
 80147a6:	69c6      	ldr	r6, [r0, #28]
 80147a8:	4604      	mov	r4, r0
 80147aa:	460d      	mov	r5, r1
 80147ac:	b976      	cbnz	r6, 80147cc <_Balloc+0x28>
 80147ae:	2010      	movs	r0, #16
 80147b0:	f7ff ff42 	bl	8014638 <malloc>
 80147b4:	4602      	mov	r2, r0
 80147b6:	61e0      	str	r0, [r4, #28]
 80147b8:	b920      	cbnz	r0, 80147c4 <_Balloc+0x20>
 80147ba:	4b18      	ldr	r3, [pc, #96]	@ (801481c <_Balloc+0x78>)
 80147bc:	4818      	ldr	r0, [pc, #96]	@ (8014820 <_Balloc+0x7c>)
 80147be:	216b      	movs	r1, #107	@ 0x6b
 80147c0:	f000 ff76 	bl	80156b0 <__assert_func>
 80147c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80147c8:	6006      	str	r6, [r0, #0]
 80147ca:	60c6      	str	r6, [r0, #12]
 80147cc:	69e6      	ldr	r6, [r4, #28]
 80147ce:	68f3      	ldr	r3, [r6, #12]
 80147d0:	b183      	cbz	r3, 80147f4 <_Balloc+0x50>
 80147d2:	69e3      	ldr	r3, [r4, #28]
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80147da:	b9b8      	cbnz	r0, 801480c <_Balloc+0x68>
 80147dc:	2101      	movs	r1, #1
 80147de:	fa01 f605 	lsl.w	r6, r1, r5
 80147e2:	1d72      	adds	r2, r6, #5
 80147e4:	0092      	lsls	r2, r2, #2
 80147e6:	4620      	mov	r0, r4
 80147e8:	f000 ff80 	bl	80156ec <_calloc_r>
 80147ec:	b160      	cbz	r0, 8014808 <_Balloc+0x64>
 80147ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80147f2:	e00e      	b.n	8014812 <_Balloc+0x6e>
 80147f4:	2221      	movs	r2, #33	@ 0x21
 80147f6:	2104      	movs	r1, #4
 80147f8:	4620      	mov	r0, r4
 80147fa:	f000 ff77 	bl	80156ec <_calloc_r>
 80147fe:	69e3      	ldr	r3, [r4, #28]
 8014800:	60f0      	str	r0, [r6, #12]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d1e4      	bne.n	80147d2 <_Balloc+0x2e>
 8014808:	2000      	movs	r0, #0
 801480a:	bd70      	pop	{r4, r5, r6, pc}
 801480c:	6802      	ldr	r2, [r0, #0]
 801480e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014812:	2300      	movs	r3, #0
 8014814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014818:	e7f7      	b.n	801480a <_Balloc+0x66>
 801481a:	bf00      	nop
 801481c:	080178c9 	.word	0x080178c9
 8014820:	08017949 	.word	0x08017949

08014824 <_Bfree>:
 8014824:	b570      	push	{r4, r5, r6, lr}
 8014826:	69c6      	ldr	r6, [r0, #28]
 8014828:	4605      	mov	r5, r0
 801482a:	460c      	mov	r4, r1
 801482c:	b976      	cbnz	r6, 801484c <_Bfree+0x28>
 801482e:	2010      	movs	r0, #16
 8014830:	f7ff ff02 	bl	8014638 <malloc>
 8014834:	4602      	mov	r2, r0
 8014836:	61e8      	str	r0, [r5, #28]
 8014838:	b920      	cbnz	r0, 8014844 <_Bfree+0x20>
 801483a:	4b09      	ldr	r3, [pc, #36]	@ (8014860 <_Bfree+0x3c>)
 801483c:	4809      	ldr	r0, [pc, #36]	@ (8014864 <_Bfree+0x40>)
 801483e:	218f      	movs	r1, #143	@ 0x8f
 8014840:	f000 ff36 	bl	80156b0 <__assert_func>
 8014844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014848:	6006      	str	r6, [r0, #0]
 801484a:	60c6      	str	r6, [r0, #12]
 801484c:	b13c      	cbz	r4, 801485e <_Bfree+0x3a>
 801484e:	69eb      	ldr	r3, [r5, #28]
 8014850:	6862      	ldr	r2, [r4, #4]
 8014852:	68db      	ldr	r3, [r3, #12]
 8014854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014858:	6021      	str	r1, [r4, #0]
 801485a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801485e:	bd70      	pop	{r4, r5, r6, pc}
 8014860:	080178c9 	.word	0x080178c9
 8014864:	08017949 	.word	0x08017949

08014868 <__multadd>:
 8014868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801486c:	690d      	ldr	r5, [r1, #16]
 801486e:	4607      	mov	r7, r0
 8014870:	460c      	mov	r4, r1
 8014872:	461e      	mov	r6, r3
 8014874:	f101 0c14 	add.w	ip, r1, #20
 8014878:	2000      	movs	r0, #0
 801487a:	f8dc 3000 	ldr.w	r3, [ip]
 801487e:	b299      	uxth	r1, r3
 8014880:	fb02 6101 	mla	r1, r2, r1, r6
 8014884:	0c1e      	lsrs	r6, r3, #16
 8014886:	0c0b      	lsrs	r3, r1, #16
 8014888:	fb02 3306 	mla	r3, r2, r6, r3
 801488c:	b289      	uxth	r1, r1
 801488e:	3001      	adds	r0, #1
 8014890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014894:	4285      	cmp	r5, r0
 8014896:	f84c 1b04 	str.w	r1, [ip], #4
 801489a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801489e:	dcec      	bgt.n	801487a <__multadd+0x12>
 80148a0:	b30e      	cbz	r6, 80148e6 <__multadd+0x7e>
 80148a2:	68a3      	ldr	r3, [r4, #8]
 80148a4:	42ab      	cmp	r3, r5
 80148a6:	dc19      	bgt.n	80148dc <__multadd+0x74>
 80148a8:	6861      	ldr	r1, [r4, #4]
 80148aa:	4638      	mov	r0, r7
 80148ac:	3101      	adds	r1, #1
 80148ae:	f7ff ff79 	bl	80147a4 <_Balloc>
 80148b2:	4680      	mov	r8, r0
 80148b4:	b928      	cbnz	r0, 80148c2 <__multadd+0x5a>
 80148b6:	4602      	mov	r2, r0
 80148b8:	4b0c      	ldr	r3, [pc, #48]	@ (80148ec <__multadd+0x84>)
 80148ba:	480d      	ldr	r0, [pc, #52]	@ (80148f0 <__multadd+0x88>)
 80148bc:	21ba      	movs	r1, #186	@ 0xba
 80148be:	f000 fef7 	bl	80156b0 <__assert_func>
 80148c2:	6922      	ldr	r2, [r4, #16]
 80148c4:	3202      	adds	r2, #2
 80148c6:	f104 010c 	add.w	r1, r4, #12
 80148ca:	0092      	lsls	r2, r2, #2
 80148cc:	300c      	adds	r0, #12
 80148ce:	f7ff f87c 	bl	80139ca <memcpy>
 80148d2:	4621      	mov	r1, r4
 80148d4:	4638      	mov	r0, r7
 80148d6:	f7ff ffa5 	bl	8014824 <_Bfree>
 80148da:	4644      	mov	r4, r8
 80148dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80148e0:	3501      	adds	r5, #1
 80148e2:	615e      	str	r6, [r3, #20]
 80148e4:	6125      	str	r5, [r4, #16]
 80148e6:	4620      	mov	r0, r4
 80148e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148ec:	08017938 	.word	0x08017938
 80148f0:	08017949 	.word	0x08017949

080148f4 <__hi0bits>:
 80148f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80148f8:	4603      	mov	r3, r0
 80148fa:	bf36      	itet	cc
 80148fc:	0403      	lslcc	r3, r0, #16
 80148fe:	2000      	movcs	r0, #0
 8014900:	2010      	movcc	r0, #16
 8014902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014906:	bf3c      	itt	cc
 8014908:	021b      	lslcc	r3, r3, #8
 801490a:	3008      	addcc	r0, #8
 801490c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014910:	bf3c      	itt	cc
 8014912:	011b      	lslcc	r3, r3, #4
 8014914:	3004      	addcc	r0, #4
 8014916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801491a:	bf3c      	itt	cc
 801491c:	009b      	lslcc	r3, r3, #2
 801491e:	3002      	addcc	r0, #2
 8014920:	2b00      	cmp	r3, #0
 8014922:	db05      	blt.n	8014930 <__hi0bits+0x3c>
 8014924:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014928:	f100 0001 	add.w	r0, r0, #1
 801492c:	bf08      	it	eq
 801492e:	2020      	moveq	r0, #32
 8014930:	4770      	bx	lr

08014932 <__lo0bits>:
 8014932:	6803      	ldr	r3, [r0, #0]
 8014934:	4602      	mov	r2, r0
 8014936:	f013 0007 	ands.w	r0, r3, #7
 801493a:	d00b      	beq.n	8014954 <__lo0bits+0x22>
 801493c:	07d9      	lsls	r1, r3, #31
 801493e:	d421      	bmi.n	8014984 <__lo0bits+0x52>
 8014940:	0798      	lsls	r0, r3, #30
 8014942:	bf49      	itett	mi
 8014944:	085b      	lsrmi	r3, r3, #1
 8014946:	089b      	lsrpl	r3, r3, #2
 8014948:	2001      	movmi	r0, #1
 801494a:	6013      	strmi	r3, [r2, #0]
 801494c:	bf5c      	itt	pl
 801494e:	6013      	strpl	r3, [r2, #0]
 8014950:	2002      	movpl	r0, #2
 8014952:	4770      	bx	lr
 8014954:	b299      	uxth	r1, r3
 8014956:	b909      	cbnz	r1, 801495c <__lo0bits+0x2a>
 8014958:	0c1b      	lsrs	r3, r3, #16
 801495a:	2010      	movs	r0, #16
 801495c:	b2d9      	uxtb	r1, r3
 801495e:	b909      	cbnz	r1, 8014964 <__lo0bits+0x32>
 8014960:	3008      	adds	r0, #8
 8014962:	0a1b      	lsrs	r3, r3, #8
 8014964:	0719      	lsls	r1, r3, #28
 8014966:	bf04      	itt	eq
 8014968:	091b      	lsreq	r3, r3, #4
 801496a:	3004      	addeq	r0, #4
 801496c:	0799      	lsls	r1, r3, #30
 801496e:	bf04      	itt	eq
 8014970:	089b      	lsreq	r3, r3, #2
 8014972:	3002      	addeq	r0, #2
 8014974:	07d9      	lsls	r1, r3, #31
 8014976:	d403      	bmi.n	8014980 <__lo0bits+0x4e>
 8014978:	085b      	lsrs	r3, r3, #1
 801497a:	f100 0001 	add.w	r0, r0, #1
 801497e:	d003      	beq.n	8014988 <__lo0bits+0x56>
 8014980:	6013      	str	r3, [r2, #0]
 8014982:	4770      	bx	lr
 8014984:	2000      	movs	r0, #0
 8014986:	4770      	bx	lr
 8014988:	2020      	movs	r0, #32
 801498a:	4770      	bx	lr

0801498c <__i2b>:
 801498c:	b510      	push	{r4, lr}
 801498e:	460c      	mov	r4, r1
 8014990:	2101      	movs	r1, #1
 8014992:	f7ff ff07 	bl	80147a4 <_Balloc>
 8014996:	4602      	mov	r2, r0
 8014998:	b928      	cbnz	r0, 80149a6 <__i2b+0x1a>
 801499a:	4b05      	ldr	r3, [pc, #20]	@ (80149b0 <__i2b+0x24>)
 801499c:	4805      	ldr	r0, [pc, #20]	@ (80149b4 <__i2b+0x28>)
 801499e:	f240 1145 	movw	r1, #325	@ 0x145
 80149a2:	f000 fe85 	bl	80156b0 <__assert_func>
 80149a6:	2301      	movs	r3, #1
 80149a8:	6144      	str	r4, [r0, #20]
 80149aa:	6103      	str	r3, [r0, #16]
 80149ac:	bd10      	pop	{r4, pc}
 80149ae:	bf00      	nop
 80149b0:	08017938 	.word	0x08017938
 80149b4:	08017949 	.word	0x08017949

080149b8 <__multiply>:
 80149b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149bc:	4614      	mov	r4, r2
 80149be:	690a      	ldr	r2, [r1, #16]
 80149c0:	6923      	ldr	r3, [r4, #16]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	bfa8      	it	ge
 80149c6:	4623      	movge	r3, r4
 80149c8:	460f      	mov	r7, r1
 80149ca:	bfa4      	itt	ge
 80149cc:	460c      	movge	r4, r1
 80149ce:	461f      	movge	r7, r3
 80149d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80149d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80149d8:	68a3      	ldr	r3, [r4, #8]
 80149da:	6861      	ldr	r1, [r4, #4]
 80149dc:	eb0a 0609 	add.w	r6, sl, r9
 80149e0:	42b3      	cmp	r3, r6
 80149e2:	b085      	sub	sp, #20
 80149e4:	bfb8      	it	lt
 80149e6:	3101      	addlt	r1, #1
 80149e8:	f7ff fedc 	bl	80147a4 <_Balloc>
 80149ec:	b930      	cbnz	r0, 80149fc <__multiply+0x44>
 80149ee:	4602      	mov	r2, r0
 80149f0:	4b44      	ldr	r3, [pc, #272]	@ (8014b04 <__multiply+0x14c>)
 80149f2:	4845      	ldr	r0, [pc, #276]	@ (8014b08 <__multiply+0x150>)
 80149f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80149f8:	f000 fe5a 	bl	80156b0 <__assert_func>
 80149fc:	f100 0514 	add.w	r5, r0, #20
 8014a00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014a04:	462b      	mov	r3, r5
 8014a06:	2200      	movs	r2, #0
 8014a08:	4543      	cmp	r3, r8
 8014a0a:	d321      	bcc.n	8014a50 <__multiply+0x98>
 8014a0c:	f107 0114 	add.w	r1, r7, #20
 8014a10:	f104 0214 	add.w	r2, r4, #20
 8014a14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014a18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014a1c:	9302      	str	r3, [sp, #8]
 8014a1e:	1b13      	subs	r3, r2, r4
 8014a20:	3b15      	subs	r3, #21
 8014a22:	f023 0303 	bic.w	r3, r3, #3
 8014a26:	3304      	adds	r3, #4
 8014a28:	f104 0715 	add.w	r7, r4, #21
 8014a2c:	42ba      	cmp	r2, r7
 8014a2e:	bf38      	it	cc
 8014a30:	2304      	movcc	r3, #4
 8014a32:	9301      	str	r3, [sp, #4]
 8014a34:	9b02      	ldr	r3, [sp, #8]
 8014a36:	9103      	str	r1, [sp, #12]
 8014a38:	428b      	cmp	r3, r1
 8014a3a:	d80c      	bhi.n	8014a56 <__multiply+0x9e>
 8014a3c:	2e00      	cmp	r6, #0
 8014a3e:	dd03      	ble.n	8014a48 <__multiply+0x90>
 8014a40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d05b      	beq.n	8014b00 <__multiply+0x148>
 8014a48:	6106      	str	r6, [r0, #16]
 8014a4a:	b005      	add	sp, #20
 8014a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a50:	f843 2b04 	str.w	r2, [r3], #4
 8014a54:	e7d8      	b.n	8014a08 <__multiply+0x50>
 8014a56:	f8b1 a000 	ldrh.w	sl, [r1]
 8014a5a:	f1ba 0f00 	cmp.w	sl, #0
 8014a5e:	d024      	beq.n	8014aaa <__multiply+0xf2>
 8014a60:	f104 0e14 	add.w	lr, r4, #20
 8014a64:	46a9      	mov	r9, r5
 8014a66:	f04f 0c00 	mov.w	ip, #0
 8014a6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014a6e:	f8d9 3000 	ldr.w	r3, [r9]
 8014a72:	fa1f fb87 	uxth.w	fp, r7
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	fb0a 330b 	mla	r3, sl, fp, r3
 8014a7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014a80:	f8d9 7000 	ldr.w	r7, [r9]
 8014a84:	4463      	add	r3, ip
 8014a86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014a8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8014a8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014a98:	4572      	cmp	r2, lr
 8014a9a:	f849 3b04 	str.w	r3, [r9], #4
 8014a9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014aa2:	d8e2      	bhi.n	8014a6a <__multiply+0xb2>
 8014aa4:	9b01      	ldr	r3, [sp, #4]
 8014aa6:	f845 c003 	str.w	ip, [r5, r3]
 8014aaa:	9b03      	ldr	r3, [sp, #12]
 8014aac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014ab0:	3104      	adds	r1, #4
 8014ab2:	f1b9 0f00 	cmp.w	r9, #0
 8014ab6:	d021      	beq.n	8014afc <__multiply+0x144>
 8014ab8:	682b      	ldr	r3, [r5, #0]
 8014aba:	f104 0c14 	add.w	ip, r4, #20
 8014abe:	46ae      	mov	lr, r5
 8014ac0:	f04f 0a00 	mov.w	sl, #0
 8014ac4:	f8bc b000 	ldrh.w	fp, [ip]
 8014ac8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014acc:	fb09 770b 	mla	r7, r9, fp, r7
 8014ad0:	4457      	add	r7, sl
 8014ad2:	b29b      	uxth	r3, r3
 8014ad4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014ad8:	f84e 3b04 	str.w	r3, [lr], #4
 8014adc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014ae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014ae4:	f8be 3000 	ldrh.w	r3, [lr]
 8014ae8:	fb09 330a 	mla	r3, r9, sl, r3
 8014aec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014af0:	4562      	cmp	r2, ip
 8014af2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014af6:	d8e5      	bhi.n	8014ac4 <__multiply+0x10c>
 8014af8:	9f01      	ldr	r7, [sp, #4]
 8014afa:	51eb      	str	r3, [r5, r7]
 8014afc:	3504      	adds	r5, #4
 8014afe:	e799      	b.n	8014a34 <__multiply+0x7c>
 8014b00:	3e01      	subs	r6, #1
 8014b02:	e79b      	b.n	8014a3c <__multiply+0x84>
 8014b04:	08017938 	.word	0x08017938
 8014b08:	08017949 	.word	0x08017949

08014b0c <__pow5mult>:
 8014b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b10:	4615      	mov	r5, r2
 8014b12:	f012 0203 	ands.w	r2, r2, #3
 8014b16:	4607      	mov	r7, r0
 8014b18:	460e      	mov	r6, r1
 8014b1a:	d007      	beq.n	8014b2c <__pow5mult+0x20>
 8014b1c:	4c25      	ldr	r4, [pc, #148]	@ (8014bb4 <__pow5mult+0xa8>)
 8014b1e:	3a01      	subs	r2, #1
 8014b20:	2300      	movs	r3, #0
 8014b22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014b26:	f7ff fe9f 	bl	8014868 <__multadd>
 8014b2a:	4606      	mov	r6, r0
 8014b2c:	10ad      	asrs	r5, r5, #2
 8014b2e:	d03d      	beq.n	8014bac <__pow5mult+0xa0>
 8014b30:	69fc      	ldr	r4, [r7, #28]
 8014b32:	b97c      	cbnz	r4, 8014b54 <__pow5mult+0x48>
 8014b34:	2010      	movs	r0, #16
 8014b36:	f7ff fd7f 	bl	8014638 <malloc>
 8014b3a:	4602      	mov	r2, r0
 8014b3c:	61f8      	str	r0, [r7, #28]
 8014b3e:	b928      	cbnz	r0, 8014b4c <__pow5mult+0x40>
 8014b40:	4b1d      	ldr	r3, [pc, #116]	@ (8014bb8 <__pow5mult+0xac>)
 8014b42:	481e      	ldr	r0, [pc, #120]	@ (8014bbc <__pow5mult+0xb0>)
 8014b44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014b48:	f000 fdb2 	bl	80156b0 <__assert_func>
 8014b4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014b50:	6004      	str	r4, [r0, #0]
 8014b52:	60c4      	str	r4, [r0, #12]
 8014b54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014b58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014b5c:	b94c      	cbnz	r4, 8014b72 <__pow5mult+0x66>
 8014b5e:	f240 2171 	movw	r1, #625	@ 0x271
 8014b62:	4638      	mov	r0, r7
 8014b64:	f7ff ff12 	bl	801498c <__i2b>
 8014b68:	2300      	movs	r3, #0
 8014b6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8014b6e:	4604      	mov	r4, r0
 8014b70:	6003      	str	r3, [r0, #0]
 8014b72:	f04f 0900 	mov.w	r9, #0
 8014b76:	07eb      	lsls	r3, r5, #31
 8014b78:	d50a      	bpl.n	8014b90 <__pow5mult+0x84>
 8014b7a:	4631      	mov	r1, r6
 8014b7c:	4622      	mov	r2, r4
 8014b7e:	4638      	mov	r0, r7
 8014b80:	f7ff ff1a 	bl	80149b8 <__multiply>
 8014b84:	4631      	mov	r1, r6
 8014b86:	4680      	mov	r8, r0
 8014b88:	4638      	mov	r0, r7
 8014b8a:	f7ff fe4b 	bl	8014824 <_Bfree>
 8014b8e:	4646      	mov	r6, r8
 8014b90:	106d      	asrs	r5, r5, #1
 8014b92:	d00b      	beq.n	8014bac <__pow5mult+0xa0>
 8014b94:	6820      	ldr	r0, [r4, #0]
 8014b96:	b938      	cbnz	r0, 8014ba8 <__pow5mult+0x9c>
 8014b98:	4622      	mov	r2, r4
 8014b9a:	4621      	mov	r1, r4
 8014b9c:	4638      	mov	r0, r7
 8014b9e:	f7ff ff0b 	bl	80149b8 <__multiply>
 8014ba2:	6020      	str	r0, [r4, #0]
 8014ba4:	f8c0 9000 	str.w	r9, [r0]
 8014ba8:	4604      	mov	r4, r0
 8014baa:	e7e4      	b.n	8014b76 <__pow5mult+0x6a>
 8014bac:	4630      	mov	r0, r6
 8014bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bb2:	bf00      	nop
 8014bb4:	080179a4 	.word	0x080179a4
 8014bb8:	080178c9 	.word	0x080178c9
 8014bbc:	08017949 	.word	0x08017949

08014bc0 <__lshift>:
 8014bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bc4:	460c      	mov	r4, r1
 8014bc6:	6849      	ldr	r1, [r1, #4]
 8014bc8:	6923      	ldr	r3, [r4, #16]
 8014bca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014bce:	68a3      	ldr	r3, [r4, #8]
 8014bd0:	4607      	mov	r7, r0
 8014bd2:	4691      	mov	r9, r2
 8014bd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014bd8:	f108 0601 	add.w	r6, r8, #1
 8014bdc:	42b3      	cmp	r3, r6
 8014bde:	db0b      	blt.n	8014bf8 <__lshift+0x38>
 8014be0:	4638      	mov	r0, r7
 8014be2:	f7ff fddf 	bl	80147a4 <_Balloc>
 8014be6:	4605      	mov	r5, r0
 8014be8:	b948      	cbnz	r0, 8014bfe <__lshift+0x3e>
 8014bea:	4602      	mov	r2, r0
 8014bec:	4b28      	ldr	r3, [pc, #160]	@ (8014c90 <__lshift+0xd0>)
 8014bee:	4829      	ldr	r0, [pc, #164]	@ (8014c94 <__lshift+0xd4>)
 8014bf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014bf4:	f000 fd5c 	bl	80156b0 <__assert_func>
 8014bf8:	3101      	adds	r1, #1
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	e7ee      	b.n	8014bdc <__lshift+0x1c>
 8014bfe:	2300      	movs	r3, #0
 8014c00:	f100 0114 	add.w	r1, r0, #20
 8014c04:	f100 0210 	add.w	r2, r0, #16
 8014c08:	4618      	mov	r0, r3
 8014c0a:	4553      	cmp	r3, sl
 8014c0c:	db33      	blt.n	8014c76 <__lshift+0xb6>
 8014c0e:	6920      	ldr	r0, [r4, #16]
 8014c10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014c14:	f104 0314 	add.w	r3, r4, #20
 8014c18:	f019 091f 	ands.w	r9, r9, #31
 8014c1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014c20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014c24:	d02b      	beq.n	8014c7e <__lshift+0xbe>
 8014c26:	f1c9 0e20 	rsb	lr, r9, #32
 8014c2a:	468a      	mov	sl, r1
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	6818      	ldr	r0, [r3, #0]
 8014c30:	fa00 f009 	lsl.w	r0, r0, r9
 8014c34:	4310      	orrs	r0, r2
 8014c36:	f84a 0b04 	str.w	r0, [sl], #4
 8014c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c3e:	459c      	cmp	ip, r3
 8014c40:	fa22 f20e 	lsr.w	r2, r2, lr
 8014c44:	d8f3      	bhi.n	8014c2e <__lshift+0x6e>
 8014c46:	ebac 0304 	sub.w	r3, ip, r4
 8014c4a:	3b15      	subs	r3, #21
 8014c4c:	f023 0303 	bic.w	r3, r3, #3
 8014c50:	3304      	adds	r3, #4
 8014c52:	f104 0015 	add.w	r0, r4, #21
 8014c56:	4584      	cmp	ip, r0
 8014c58:	bf38      	it	cc
 8014c5a:	2304      	movcc	r3, #4
 8014c5c:	50ca      	str	r2, [r1, r3]
 8014c5e:	b10a      	cbz	r2, 8014c64 <__lshift+0xa4>
 8014c60:	f108 0602 	add.w	r6, r8, #2
 8014c64:	3e01      	subs	r6, #1
 8014c66:	4638      	mov	r0, r7
 8014c68:	612e      	str	r6, [r5, #16]
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	f7ff fdda 	bl	8014824 <_Bfree>
 8014c70:	4628      	mov	r0, r5
 8014c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c76:	f842 0f04 	str.w	r0, [r2, #4]!
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	e7c5      	b.n	8014c0a <__lshift+0x4a>
 8014c7e:	3904      	subs	r1, #4
 8014c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c84:	f841 2f04 	str.w	r2, [r1, #4]!
 8014c88:	459c      	cmp	ip, r3
 8014c8a:	d8f9      	bhi.n	8014c80 <__lshift+0xc0>
 8014c8c:	e7ea      	b.n	8014c64 <__lshift+0xa4>
 8014c8e:	bf00      	nop
 8014c90:	08017938 	.word	0x08017938
 8014c94:	08017949 	.word	0x08017949

08014c98 <__mcmp>:
 8014c98:	690a      	ldr	r2, [r1, #16]
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	6900      	ldr	r0, [r0, #16]
 8014c9e:	1a80      	subs	r0, r0, r2
 8014ca0:	b530      	push	{r4, r5, lr}
 8014ca2:	d10e      	bne.n	8014cc2 <__mcmp+0x2a>
 8014ca4:	3314      	adds	r3, #20
 8014ca6:	3114      	adds	r1, #20
 8014ca8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014cac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014cb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014cb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014cb8:	4295      	cmp	r5, r2
 8014cba:	d003      	beq.n	8014cc4 <__mcmp+0x2c>
 8014cbc:	d205      	bcs.n	8014cca <__mcmp+0x32>
 8014cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8014cc2:	bd30      	pop	{r4, r5, pc}
 8014cc4:	42a3      	cmp	r3, r4
 8014cc6:	d3f3      	bcc.n	8014cb0 <__mcmp+0x18>
 8014cc8:	e7fb      	b.n	8014cc2 <__mcmp+0x2a>
 8014cca:	2001      	movs	r0, #1
 8014ccc:	e7f9      	b.n	8014cc2 <__mcmp+0x2a>
	...

08014cd0 <__mdiff>:
 8014cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd4:	4689      	mov	r9, r1
 8014cd6:	4606      	mov	r6, r0
 8014cd8:	4611      	mov	r1, r2
 8014cda:	4648      	mov	r0, r9
 8014cdc:	4614      	mov	r4, r2
 8014cde:	f7ff ffdb 	bl	8014c98 <__mcmp>
 8014ce2:	1e05      	subs	r5, r0, #0
 8014ce4:	d112      	bne.n	8014d0c <__mdiff+0x3c>
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4630      	mov	r0, r6
 8014cea:	f7ff fd5b 	bl	80147a4 <_Balloc>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	b928      	cbnz	r0, 8014cfe <__mdiff+0x2e>
 8014cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8014df0 <__mdiff+0x120>)
 8014cf4:	f240 2137 	movw	r1, #567	@ 0x237
 8014cf8:	483e      	ldr	r0, [pc, #248]	@ (8014df4 <__mdiff+0x124>)
 8014cfa:	f000 fcd9 	bl	80156b0 <__assert_func>
 8014cfe:	2301      	movs	r3, #1
 8014d00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014d04:	4610      	mov	r0, r2
 8014d06:	b003      	add	sp, #12
 8014d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0c:	bfbc      	itt	lt
 8014d0e:	464b      	movlt	r3, r9
 8014d10:	46a1      	movlt	r9, r4
 8014d12:	4630      	mov	r0, r6
 8014d14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014d18:	bfba      	itte	lt
 8014d1a:	461c      	movlt	r4, r3
 8014d1c:	2501      	movlt	r5, #1
 8014d1e:	2500      	movge	r5, #0
 8014d20:	f7ff fd40 	bl	80147a4 <_Balloc>
 8014d24:	4602      	mov	r2, r0
 8014d26:	b918      	cbnz	r0, 8014d30 <__mdiff+0x60>
 8014d28:	4b31      	ldr	r3, [pc, #196]	@ (8014df0 <__mdiff+0x120>)
 8014d2a:	f240 2145 	movw	r1, #581	@ 0x245
 8014d2e:	e7e3      	b.n	8014cf8 <__mdiff+0x28>
 8014d30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014d34:	6926      	ldr	r6, [r4, #16]
 8014d36:	60c5      	str	r5, [r0, #12]
 8014d38:	f109 0310 	add.w	r3, r9, #16
 8014d3c:	f109 0514 	add.w	r5, r9, #20
 8014d40:	f104 0e14 	add.w	lr, r4, #20
 8014d44:	f100 0b14 	add.w	fp, r0, #20
 8014d48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014d4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014d50:	9301      	str	r3, [sp, #4]
 8014d52:	46d9      	mov	r9, fp
 8014d54:	f04f 0c00 	mov.w	ip, #0
 8014d58:	9b01      	ldr	r3, [sp, #4]
 8014d5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014d5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014d62:	9301      	str	r3, [sp, #4]
 8014d64:	fa1f f38a 	uxth.w	r3, sl
 8014d68:	4619      	mov	r1, r3
 8014d6a:	b283      	uxth	r3, r0
 8014d6c:	1acb      	subs	r3, r1, r3
 8014d6e:	0c00      	lsrs	r0, r0, #16
 8014d70:	4463      	add	r3, ip
 8014d72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014d76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014d80:	4576      	cmp	r6, lr
 8014d82:	f849 3b04 	str.w	r3, [r9], #4
 8014d86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014d8a:	d8e5      	bhi.n	8014d58 <__mdiff+0x88>
 8014d8c:	1b33      	subs	r3, r6, r4
 8014d8e:	3b15      	subs	r3, #21
 8014d90:	f023 0303 	bic.w	r3, r3, #3
 8014d94:	3415      	adds	r4, #21
 8014d96:	3304      	adds	r3, #4
 8014d98:	42a6      	cmp	r6, r4
 8014d9a:	bf38      	it	cc
 8014d9c:	2304      	movcc	r3, #4
 8014d9e:	441d      	add	r5, r3
 8014da0:	445b      	add	r3, fp
 8014da2:	461e      	mov	r6, r3
 8014da4:	462c      	mov	r4, r5
 8014da6:	4544      	cmp	r4, r8
 8014da8:	d30e      	bcc.n	8014dc8 <__mdiff+0xf8>
 8014daa:	f108 0103 	add.w	r1, r8, #3
 8014dae:	1b49      	subs	r1, r1, r5
 8014db0:	f021 0103 	bic.w	r1, r1, #3
 8014db4:	3d03      	subs	r5, #3
 8014db6:	45a8      	cmp	r8, r5
 8014db8:	bf38      	it	cc
 8014dba:	2100      	movcc	r1, #0
 8014dbc:	440b      	add	r3, r1
 8014dbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014dc2:	b191      	cbz	r1, 8014dea <__mdiff+0x11a>
 8014dc4:	6117      	str	r7, [r2, #16]
 8014dc6:	e79d      	b.n	8014d04 <__mdiff+0x34>
 8014dc8:	f854 1b04 	ldr.w	r1, [r4], #4
 8014dcc:	46e6      	mov	lr, ip
 8014dce:	0c08      	lsrs	r0, r1, #16
 8014dd0:	fa1c fc81 	uxtah	ip, ip, r1
 8014dd4:	4471      	add	r1, lr
 8014dd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014dda:	b289      	uxth	r1, r1
 8014ddc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014de0:	f846 1b04 	str.w	r1, [r6], #4
 8014de4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014de8:	e7dd      	b.n	8014da6 <__mdiff+0xd6>
 8014dea:	3f01      	subs	r7, #1
 8014dec:	e7e7      	b.n	8014dbe <__mdiff+0xee>
 8014dee:	bf00      	nop
 8014df0:	08017938 	.word	0x08017938
 8014df4:	08017949 	.word	0x08017949

08014df8 <__d2b>:
 8014df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014dfc:	460f      	mov	r7, r1
 8014dfe:	2101      	movs	r1, #1
 8014e00:	ec59 8b10 	vmov	r8, r9, d0
 8014e04:	4616      	mov	r6, r2
 8014e06:	f7ff fccd 	bl	80147a4 <_Balloc>
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	b930      	cbnz	r0, 8014e1c <__d2b+0x24>
 8014e0e:	4602      	mov	r2, r0
 8014e10:	4b23      	ldr	r3, [pc, #140]	@ (8014ea0 <__d2b+0xa8>)
 8014e12:	4824      	ldr	r0, [pc, #144]	@ (8014ea4 <__d2b+0xac>)
 8014e14:	f240 310f 	movw	r1, #783	@ 0x30f
 8014e18:	f000 fc4a 	bl	80156b0 <__assert_func>
 8014e1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014e24:	b10d      	cbz	r5, 8014e2a <__d2b+0x32>
 8014e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014e2a:	9301      	str	r3, [sp, #4]
 8014e2c:	f1b8 0300 	subs.w	r3, r8, #0
 8014e30:	d023      	beq.n	8014e7a <__d2b+0x82>
 8014e32:	4668      	mov	r0, sp
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	f7ff fd7c 	bl	8014932 <__lo0bits>
 8014e3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014e3e:	b1d0      	cbz	r0, 8014e76 <__d2b+0x7e>
 8014e40:	f1c0 0320 	rsb	r3, r0, #32
 8014e44:	fa02 f303 	lsl.w	r3, r2, r3
 8014e48:	430b      	orrs	r3, r1
 8014e4a:	40c2      	lsrs	r2, r0
 8014e4c:	6163      	str	r3, [r4, #20]
 8014e4e:	9201      	str	r2, [sp, #4]
 8014e50:	9b01      	ldr	r3, [sp, #4]
 8014e52:	61a3      	str	r3, [r4, #24]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	bf0c      	ite	eq
 8014e58:	2201      	moveq	r2, #1
 8014e5a:	2202      	movne	r2, #2
 8014e5c:	6122      	str	r2, [r4, #16]
 8014e5e:	b1a5      	cbz	r5, 8014e8a <__d2b+0x92>
 8014e60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014e64:	4405      	add	r5, r0
 8014e66:	603d      	str	r5, [r7, #0]
 8014e68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014e6c:	6030      	str	r0, [r6, #0]
 8014e6e:	4620      	mov	r0, r4
 8014e70:	b003      	add	sp, #12
 8014e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e76:	6161      	str	r1, [r4, #20]
 8014e78:	e7ea      	b.n	8014e50 <__d2b+0x58>
 8014e7a:	a801      	add	r0, sp, #4
 8014e7c:	f7ff fd59 	bl	8014932 <__lo0bits>
 8014e80:	9b01      	ldr	r3, [sp, #4]
 8014e82:	6163      	str	r3, [r4, #20]
 8014e84:	3020      	adds	r0, #32
 8014e86:	2201      	movs	r2, #1
 8014e88:	e7e8      	b.n	8014e5c <__d2b+0x64>
 8014e8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014e8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8014e92:	6038      	str	r0, [r7, #0]
 8014e94:	6918      	ldr	r0, [r3, #16]
 8014e96:	f7ff fd2d 	bl	80148f4 <__hi0bits>
 8014e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014e9e:	e7e5      	b.n	8014e6c <__d2b+0x74>
 8014ea0:	08017938 	.word	0x08017938
 8014ea4:	08017949 	.word	0x08017949

08014ea8 <__ssputs_r>:
 8014ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eac:	688e      	ldr	r6, [r1, #8]
 8014eae:	461f      	mov	r7, r3
 8014eb0:	42be      	cmp	r6, r7
 8014eb2:	680b      	ldr	r3, [r1, #0]
 8014eb4:	4682      	mov	sl, r0
 8014eb6:	460c      	mov	r4, r1
 8014eb8:	4690      	mov	r8, r2
 8014eba:	d82d      	bhi.n	8014f18 <__ssputs_r+0x70>
 8014ebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014ec0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014ec4:	d026      	beq.n	8014f14 <__ssputs_r+0x6c>
 8014ec6:	6965      	ldr	r5, [r4, #20]
 8014ec8:	6909      	ldr	r1, [r1, #16]
 8014eca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ece:	eba3 0901 	sub.w	r9, r3, r1
 8014ed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014ed6:	1c7b      	adds	r3, r7, #1
 8014ed8:	444b      	add	r3, r9
 8014eda:	106d      	asrs	r5, r5, #1
 8014edc:	429d      	cmp	r5, r3
 8014ede:	bf38      	it	cc
 8014ee0:	461d      	movcc	r5, r3
 8014ee2:	0553      	lsls	r3, r2, #21
 8014ee4:	d527      	bpl.n	8014f36 <__ssputs_r+0x8e>
 8014ee6:	4629      	mov	r1, r5
 8014ee8:	f7ff fbd0 	bl	801468c <_malloc_r>
 8014eec:	4606      	mov	r6, r0
 8014eee:	b360      	cbz	r0, 8014f4a <__ssputs_r+0xa2>
 8014ef0:	6921      	ldr	r1, [r4, #16]
 8014ef2:	464a      	mov	r2, r9
 8014ef4:	f7fe fd69 	bl	80139ca <memcpy>
 8014ef8:	89a3      	ldrh	r3, [r4, #12]
 8014efa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f02:	81a3      	strh	r3, [r4, #12]
 8014f04:	6126      	str	r6, [r4, #16]
 8014f06:	6165      	str	r5, [r4, #20]
 8014f08:	444e      	add	r6, r9
 8014f0a:	eba5 0509 	sub.w	r5, r5, r9
 8014f0e:	6026      	str	r6, [r4, #0]
 8014f10:	60a5      	str	r5, [r4, #8]
 8014f12:	463e      	mov	r6, r7
 8014f14:	42be      	cmp	r6, r7
 8014f16:	d900      	bls.n	8014f1a <__ssputs_r+0x72>
 8014f18:	463e      	mov	r6, r7
 8014f1a:	6820      	ldr	r0, [r4, #0]
 8014f1c:	4632      	mov	r2, r6
 8014f1e:	4641      	mov	r1, r8
 8014f20:	f000 fb9c 	bl	801565c <memmove>
 8014f24:	68a3      	ldr	r3, [r4, #8]
 8014f26:	1b9b      	subs	r3, r3, r6
 8014f28:	60a3      	str	r3, [r4, #8]
 8014f2a:	6823      	ldr	r3, [r4, #0]
 8014f2c:	4433      	add	r3, r6
 8014f2e:	6023      	str	r3, [r4, #0]
 8014f30:	2000      	movs	r0, #0
 8014f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f36:	462a      	mov	r2, r5
 8014f38:	f000 fbfe 	bl	8015738 <_realloc_r>
 8014f3c:	4606      	mov	r6, r0
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	d1e0      	bne.n	8014f04 <__ssputs_r+0x5c>
 8014f42:	6921      	ldr	r1, [r4, #16]
 8014f44:	4650      	mov	r0, sl
 8014f46:	f7ff fb2d 	bl	80145a4 <_free_r>
 8014f4a:	230c      	movs	r3, #12
 8014f4c:	f8ca 3000 	str.w	r3, [sl]
 8014f50:	89a3      	ldrh	r3, [r4, #12]
 8014f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f56:	81a3      	strh	r3, [r4, #12]
 8014f58:	f04f 30ff 	mov.w	r0, #4294967295
 8014f5c:	e7e9      	b.n	8014f32 <__ssputs_r+0x8a>
	...

08014f60 <_svfiprintf_r>:
 8014f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f64:	4698      	mov	r8, r3
 8014f66:	898b      	ldrh	r3, [r1, #12]
 8014f68:	061b      	lsls	r3, r3, #24
 8014f6a:	b09d      	sub	sp, #116	@ 0x74
 8014f6c:	4607      	mov	r7, r0
 8014f6e:	460d      	mov	r5, r1
 8014f70:	4614      	mov	r4, r2
 8014f72:	d510      	bpl.n	8014f96 <_svfiprintf_r+0x36>
 8014f74:	690b      	ldr	r3, [r1, #16]
 8014f76:	b973      	cbnz	r3, 8014f96 <_svfiprintf_r+0x36>
 8014f78:	2140      	movs	r1, #64	@ 0x40
 8014f7a:	f7ff fb87 	bl	801468c <_malloc_r>
 8014f7e:	6028      	str	r0, [r5, #0]
 8014f80:	6128      	str	r0, [r5, #16]
 8014f82:	b930      	cbnz	r0, 8014f92 <_svfiprintf_r+0x32>
 8014f84:	230c      	movs	r3, #12
 8014f86:	603b      	str	r3, [r7, #0]
 8014f88:	f04f 30ff 	mov.w	r0, #4294967295
 8014f8c:	b01d      	add	sp, #116	@ 0x74
 8014f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f92:	2340      	movs	r3, #64	@ 0x40
 8014f94:	616b      	str	r3, [r5, #20]
 8014f96:	2300      	movs	r3, #0
 8014f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f9a:	2320      	movs	r3, #32
 8014f9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8014fa4:	2330      	movs	r3, #48	@ 0x30
 8014fa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015144 <_svfiprintf_r+0x1e4>
 8014faa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014fae:	f04f 0901 	mov.w	r9, #1
 8014fb2:	4623      	mov	r3, r4
 8014fb4:	469a      	mov	sl, r3
 8014fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fba:	b10a      	cbz	r2, 8014fc0 <_svfiprintf_r+0x60>
 8014fbc:	2a25      	cmp	r2, #37	@ 0x25
 8014fbe:	d1f9      	bne.n	8014fb4 <_svfiprintf_r+0x54>
 8014fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8014fc4:	d00b      	beq.n	8014fde <_svfiprintf_r+0x7e>
 8014fc6:	465b      	mov	r3, fp
 8014fc8:	4622      	mov	r2, r4
 8014fca:	4629      	mov	r1, r5
 8014fcc:	4638      	mov	r0, r7
 8014fce:	f7ff ff6b 	bl	8014ea8 <__ssputs_r>
 8014fd2:	3001      	adds	r0, #1
 8014fd4:	f000 80a7 	beq.w	8015126 <_svfiprintf_r+0x1c6>
 8014fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014fda:	445a      	add	r2, fp
 8014fdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8014fde:	f89a 3000 	ldrb.w	r3, [sl]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	f000 809f 	beq.w	8015126 <_svfiprintf_r+0x1c6>
 8014fe8:	2300      	movs	r3, #0
 8014fea:	f04f 32ff 	mov.w	r2, #4294967295
 8014fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ff2:	f10a 0a01 	add.w	sl, sl, #1
 8014ff6:	9304      	str	r3, [sp, #16]
 8014ff8:	9307      	str	r3, [sp, #28]
 8014ffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 8015000:	4654      	mov	r4, sl
 8015002:	2205      	movs	r2, #5
 8015004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015008:	484e      	ldr	r0, [pc, #312]	@ (8015144 <_svfiprintf_r+0x1e4>)
 801500a:	f7eb f969 	bl	80002e0 <memchr>
 801500e:	9a04      	ldr	r2, [sp, #16]
 8015010:	b9d8      	cbnz	r0, 801504a <_svfiprintf_r+0xea>
 8015012:	06d0      	lsls	r0, r2, #27
 8015014:	bf44      	itt	mi
 8015016:	2320      	movmi	r3, #32
 8015018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801501c:	0711      	lsls	r1, r2, #28
 801501e:	bf44      	itt	mi
 8015020:	232b      	movmi	r3, #43	@ 0x2b
 8015022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015026:	f89a 3000 	ldrb.w	r3, [sl]
 801502a:	2b2a      	cmp	r3, #42	@ 0x2a
 801502c:	d015      	beq.n	801505a <_svfiprintf_r+0xfa>
 801502e:	9a07      	ldr	r2, [sp, #28]
 8015030:	4654      	mov	r4, sl
 8015032:	2000      	movs	r0, #0
 8015034:	f04f 0c0a 	mov.w	ip, #10
 8015038:	4621      	mov	r1, r4
 801503a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801503e:	3b30      	subs	r3, #48	@ 0x30
 8015040:	2b09      	cmp	r3, #9
 8015042:	d94b      	bls.n	80150dc <_svfiprintf_r+0x17c>
 8015044:	b1b0      	cbz	r0, 8015074 <_svfiprintf_r+0x114>
 8015046:	9207      	str	r2, [sp, #28]
 8015048:	e014      	b.n	8015074 <_svfiprintf_r+0x114>
 801504a:	eba0 0308 	sub.w	r3, r0, r8
 801504e:	fa09 f303 	lsl.w	r3, r9, r3
 8015052:	4313      	orrs	r3, r2
 8015054:	9304      	str	r3, [sp, #16]
 8015056:	46a2      	mov	sl, r4
 8015058:	e7d2      	b.n	8015000 <_svfiprintf_r+0xa0>
 801505a:	9b03      	ldr	r3, [sp, #12]
 801505c:	1d19      	adds	r1, r3, #4
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	9103      	str	r1, [sp, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	bfbb      	ittet	lt
 8015066:	425b      	neglt	r3, r3
 8015068:	f042 0202 	orrlt.w	r2, r2, #2
 801506c:	9307      	strge	r3, [sp, #28]
 801506e:	9307      	strlt	r3, [sp, #28]
 8015070:	bfb8      	it	lt
 8015072:	9204      	strlt	r2, [sp, #16]
 8015074:	7823      	ldrb	r3, [r4, #0]
 8015076:	2b2e      	cmp	r3, #46	@ 0x2e
 8015078:	d10a      	bne.n	8015090 <_svfiprintf_r+0x130>
 801507a:	7863      	ldrb	r3, [r4, #1]
 801507c:	2b2a      	cmp	r3, #42	@ 0x2a
 801507e:	d132      	bne.n	80150e6 <_svfiprintf_r+0x186>
 8015080:	9b03      	ldr	r3, [sp, #12]
 8015082:	1d1a      	adds	r2, r3, #4
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	9203      	str	r2, [sp, #12]
 8015088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801508c:	3402      	adds	r4, #2
 801508e:	9305      	str	r3, [sp, #20]
 8015090:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015154 <_svfiprintf_r+0x1f4>
 8015094:	7821      	ldrb	r1, [r4, #0]
 8015096:	2203      	movs	r2, #3
 8015098:	4650      	mov	r0, sl
 801509a:	f7eb f921 	bl	80002e0 <memchr>
 801509e:	b138      	cbz	r0, 80150b0 <_svfiprintf_r+0x150>
 80150a0:	9b04      	ldr	r3, [sp, #16]
 80150a2:	eba0 000a 	sub.w	r0, r0, sl
 80150a6:	2240      	movs	r2, #64	@ 0x40
 80150a8:	4082      	lsls	r2, r0
 80150aa:	4313      	orrs	r3, r2
 80150ac:	3401      	adds	r4, #1
 80150ae:	9304      	str	r3, [sp, #16]
 80150b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150b4:	4824      	ldr	r0, [pc, #144]	@ (8015148 <_svfiprintf_r+0x1e8>)
 80150b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80150ba:	2206      	movs	r2, #6
 80150bc:	f7eb f910 	bl	80002e0 <memchr>
 80150c0:	2800      	cmp	r0, #0
 80150c2:	d036      	beq.n	8015132 <_svfiprintf_r+0x1d2>
 80150c4:	4b21      	ldr	r3, [pc, #132]	@ (801514c <_svfiprintf_r+0x1ec>)
 80150c6:	bb1b      	cbnz	r3, 8015110 <_svfiprintf_r+0x1b0>
 80150c8:	9b03      	ldr	r3, [sp, #12]
 80150ca:	3307      	adds	r3, #7
 80150cc:	f023 0307 	bic.w	r3, r3, #7
 80150d0:	3308      	adds	r3, #8
 80150d2:	9303      	str	r3, [sp, #12]
 80150d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150d6:	4433      	add	r3, r6
 80150d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80150da:	e76a      	b.n	8014fb2 <_svfiprintf_r+0x52>
 80150dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80150e0:	460c      	mov	r4, r1
 80150e2:	2001      	movs	r0, #1
 80150e4:	e7a8      	b.n	8015038 <_svfiprintf_r+0xd8>
 80150e6:	2300      	movs	r3, #0
 80150e8:	3401      	adds	r4, #1
 80150ea:	9305      	str	r3, [sp, #20]
 80150ec:	4619      	mov	r1, r3
 80150ee:	f04f 0c0a 	mov.w	ip, #10
 80150f2:	4620      	mov	r0, r4
 80150f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150f8:	3a30      	subs	r2, #48	@ 0x30
 80150fa:	2a09      	cmp	r2, #9
 80150fc:	d903      	bls.n	8015106 <_svfiprintf_r+0x1a6>
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d0c6      	beq.n	8015090 <_svfiprintf_r+0x130>
 8015102:	9105      	str	r1, [sp, #20]
 8015104:	e7c4      	b.n	8015090 <_svfiprintf_r+0x130>
 8015106:	fb0c 2101 	mla	r1, ip, r1, r2
 801510a:	4604      	mov	r4, r0
 801510c:	2301      	movs	r3, #1
 801510e:	e7f0      	b.n	80150f2 <_svfiprintf_r+0x192>
 8015110:	ab03      	add	r3, sp, #12
 8015112:	9300      	str	r3, [sp, #0]
 8015114:	462a      	mov	r2, r5
 8015116:	4b0e      	ldr	r3, [pc, #56]	@ (8015150 <_svfiprintf_r+0x1f0>)
 8015118:	a904      	add	r1, sp, #16
 801511a:	4638      	mov	r0, r7
 801511c:	f7fd fea0 	bl	8012e60 <_printf_float>
 8015120:	1c42      	adds	r2, r0, #1
 8015122:	4606      	mov	r6, r0
 8015124:	d1d6      	bne.n	80150d4 <_svfiprintf_r+0x174>
 8015126:	89ab      	ldrh	r3, [r5, #12]
 8015128:	065b      	lsls	r3, r3, #25
 801512a:	f53f af2d 	bmi.w	8014f88 <_svfiprintf_r+0x28>
 801512e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015130:	e72c      	b.n	8014f8c <_svfiprintf_r+0x2c>
 8015132:	ab03      	add	r3, sp, #12
 8015134:	9300      	str	r3, [sp, #0]
 8015136:	462a      	mov	r2, r5
 8015138:	4b05      	ldr	r3, [pc, #20]	@ (8015150 <_svfiprintf_r+0x1f0>)
 801513a:	a904      	add	r1, sp, #16
 801513c:	4638      	mov	r0, r7
 801513e:	f7fe f917 	bl	8013370 <_printf_i>
 8015142:	e7ed      	b.n	8015120 <_svfiprintf_r+0x1c0>
 8015144:	08017aa0 	.word	0x08017aa0
 8015148:	08017aaa 	.word	0x08017aaa
 801514c:	08012e61 	.word	0x08012e61
 8015150:	08014ea9 	.word	0x08014ea9
 8015154:	08017aa6 	.word	0x08017aa6

08015158 <__sfputc_r>:
 8015158:	6893      	ldr	r3, [r2, #8]
 801515a:	3b01      	subs	r3, #1
 801515c:	2b00      	cmp	r3, #0
 801515e:	b410      	push	{r4}
 8015160:	6093      	str	r3, [r2, #8]
 8015162:	da08      	bge.n	8015176 <__sfputc_r+0x1e>
 8015164:	6994      	ldr	r4, [r2, #24]
 8015166:	42a3      	cmp	r3, r4
 8015168:	db01      	blt.n	801516e <__sfputc_r+0x16>
 801516a:	290a      	cmp	r1, #10
 801516c:	d103      	bne.n	8015176 <__sfputc_r+0x1e>
 801516e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015172:	f000 b9df 	b.w	8015534 <__swbuf_r>
 8015176:	6813      	ldr	r3, [r2, #0]
 8015178:	1c58      	adds	r0, r3, #1
 801517a:	6010      	str	r0, [r2, #0]
 801517c:	7019      	strb	r1, [r3, #0]
 801517e:	4608      	mov	r0, r1
 8015180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015184:	4770      	bx	lr

08015186 <__sfputs_r>:
 8015186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015188:	4606      	mov	r6, r0
 801518a:	460f      	mov	r7, r1
 801518c:	4614      	mov	r4, r2
 801518e:	18d5      	adds	r5, r2, r3
 8015190:	42ac      	cmp	r4, r5
 8015192:	d101      	bne.n	8015198 <__sfputs_r+0x12>
 8015194:	2000      	movs	r0, #0
 8015196:	e007      	b.n	80151a8 <__sfputs_r+0x22>
 8015198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801519c:	463a      	mov	r2, r7
 801519e:	4630      	mov	r0, r6
 80151a0:	f7ff ffda 	bl	8015158 <__sfputc_r>
 80151a4:	1c43      	adds	r3, r0, #1
 80151a6:	d1f3      	bne.n	8015190 <__sfputs_r+0xa>
 80151a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080151ac <_vfiprintf_r>:
 80151ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b0:	460d      	mov	r5, r1
 80151b2:	b09d      	sub	sp, #116	@ 0x74
 80151b4:	4614      	mov	r4, r2
 80151b6:	4698      	mov	r8, r3
 80151b8:	4606      	mov	r6, r0
 80151ba:	b118      	cbz	r0, 80151c4 <_vfiprintf_r+0x18>
 80151bc:	6a03      	ldr	r3, [r0, #32]
 80151be:	b90b      	cbnz	r3, 80151c4 <_vfiprintf_r+0x18>
 80151c0:	f7fe fa82 	bl	80136c8 <__sinit>
 80151c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151c6:	07d9      	lsls	r1, r3, #31
 80151c8:	d405      	bmi.n	80151d6 <_vfiprintf_r+0x2a>
 80151ca:	89ab      	ldrh	r3, [r5, #12]
 80151cc:	059a      	lsls	r2, r3, #22
 80151ce:	d402      	bmi.n	80151d6 <_vfiprintf_r+0x2a>
 80151d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151d2:	f7fe fbf8 	bl	80139c6 <__retarget_lock_acquire_recursive>
 80151d6:	89ab      	ldrh	r3, [r5, #12]
 80151d8:	071b      	lsls	r3, r3, #28
 80151da:	d501      	bpl.n	80151e0 <_vfiprintf_r+0x34>
 80151dc:	692b      	ldr	r3, [r5, #16]
 80151de:	b99b      	cbnz	r3, 8015208 <_vfiprintf_r+0x5c>
 80151e0:	4629      	mov	r1, r5
 80151e2:	4630      	mov	r0, r6
 80151e4:	f000 f9e4 	bl	80155b0 <__swsetup_r>
 80151e8:	b170      	cbz	r0, 8015208 <_vfiprintf_r+0x5c>
 80151ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151ec:	07dc      	lsls	r4, r3, #31
 80151ee:	d504      	bpl.n	80151fa <_vfiprintf_r+0x4e>
 80151f0:	f04f 30ff 	mov.w	r0, #4294967295
 80151f4:	b01d      	add	sp, #116	@ 0x74
 80151f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151fa:	89ab      	ldrh	r3, [r5, #12]
 80151fc:	0598      	lsls	r0, r3, #22
 80151fe:	d4f7      	bmi.n	80151f0 <_vfiprintf_r+0x44>
 8015200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015202:	f7fe fbe1 	bl	80139c8 <__retarget_lock_release_recursive>
 8015206:	e7f3      	b.n	80151f0 <_vfiprintf_r+0x44>
 8015208:	2300      	movs	r3, #0
 801520a:	9309      	str	r3, [sp, #36]	@ 0x24
 801520c:	2320      	movs	r3, #32
 801520e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015212:	f8cd 800c 	str.w	r8, [sp, #12]
 8015216:	2330      	movs	r3, #48	@ 0x30
 8015218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80153c8 <_vfiprintf_r+0x21c>
 801521c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015220:	f04f 0901 	mov.w	r9, #1
 8015224:	4623      	mov	r3, r4
 8015226:	469a      	mov	sl, r3
 8015228:	f813 2b01 	ldrb.w	r2, [r3], #1
 801522c:	b10a      	cbz	r2, 8015232 <_vfiprintf_r+0x86>
 801522e:	2a25      	cmp	r2, #37	@ 0x25
 8015230:	d1f9      	bne.n	8015226 <_vfiprintf_r+0x7a>
 8015232:	ebba 0b04 	subs.w	fp, sl, r4
 8015236:	d00b      	beq.n	8015250 <_vfiprintf_r+0xa4>
 8015238:	465b      	mov	r3, fp
 801523a:	4622      	mov	r2, r4
 801523c:	4629      	mov	r1, r5
 801523e:	4630      	mov	r0, r6
 8015240:	f7ff ffa1 	bl	8015186 <__sfputs_r>
 8015244:	3001      	adds	r0, #1
 8015246:	f000 80a7 	beq.w	8015398 <_vfiprintf_r+0x1ec>
 801524a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801524c:	445a      	add	r2, fp
 801524e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015250:	f89a 3000 	ldrb.w	r3, [sl]
 8015254:	2b00      	cmp	r3, #0
 8015256:	f000 809f 	beq.w	8015398 <_vfiprintf_r+0x1ec>
 801525a:	2300      	movs	r3, #0
 801525c:	f04f 32ff 	mov.w	r2, #4294967295
 8015260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015264:	f10a 0a01 	add.w	sl, sl, #1
 8015268:	9304      	str	r3, [sp, #16]
 801526a:	9307      	str	r3, [sp, #28]
 801526c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015270:	931a      	str	r3, [sp, #104]	@ 0x68
 8015272:	4654      	mov	r4, sl
 8015274:	2205      	movs	r2, #5
 8015276:	f814 1b01 	ldrb.w	r1, [r4], #1
 801527a:	4853      	ldr	r0, [pc, #332]	@ (80153c8 <_vfiprintf_r+0x21c>)
 801527c:	f7eb f830 	bl	80002e0 <memchr>
 8015280:	9a04      	ldr	r2, [sp, #16]
 8015282:	b9d8      	cbnz	r0, 80152bc <_vfiprintf_r+0x110>
 8015284:	06d1      	lsls	r1, r2, #27
 8015286:	bf44      	itt	mi
 8015288:	2320      	movmi	r3, #32
 801528a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801528e:	0713      	lsls	r3, r2, #28
 8015290:	bf44      	itt	mi
 8015292:	232b      	movmi	r3, #43	@ 0x2b
 8015294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015298:	f89a 3000 	ldrb.w	r3, [sl]
 801529c:	2b2a      	cmp	r3, #42	@ 0x2a
 801529e:	d015      	beq.n	80152cc <_vfiprintf_r+0x120>
 80152a0:	9a07      	ldr	r2, [sp, #28]
 80152a2:	4654      	mov	r4, sl
 80152a4:	2000      	movs	r0, #0
 80152a6:	f04f 0c0a 	mov.w	ip, #10
 80152aa:	4621      	mov	r1, r4
 80152ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152b0:	3b30      	subs	r3, #48	@ 0x30
 80152b2:	2b09      	cmp	r3, #9
 80152b4:	d94b      	bls.n	801534e <_vfiprintf_r+0x1a2>
 80152b6:	b1b0      	cbz	r0, 80152e6 <_vfiprintf_r+0x13a>
 80152b8:	9207      	str	r2, [sp, #28]
 80152ba:	e014      	b.n	80152e6 <_vfiprintf_r+0x13a>
 80152bc:	eba0 0308 	sub.w	r3, r0, r8
 80152c0:	fa09 f303 	lsl.w	r3, r9, r3
 80152c4:	4313      	orrs	r3, r2
 80152c6:	9304      	str	r3, [sp, #16]
 80152c8:	46a2      	mov	sl, r4
 80152ca:	e7d2      	b.n	8015272 <_vfiprintf_r+0xc6>
 80152cc:	9b03      	ldr	r3, [sp, #12]
 80152ce:	1d19      	adds	r1, r3, #4
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	9103      	str	r1, [sp, #12]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	bfbb      	ittet	lt
 80152d8:	425b      	neglt	r3, r3
 80152da:	f042 0202 	orrlt.w	r2, r2, #2
 80152de:	9307      	strge	r3, [sp, #28]
 80152e0:	9307      	strlt	r3, [sp, #28]
 80152e2:	bfb8      	it	lt
 80152e4:	9204      	strlt	r2, [sp, #16]
 80152e6:	7823      	ldrb	r3, [r4, #0]
 80152e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80152ea:	d10a      	bne.n	8015302 <_vfiprintf_r+0x156>
 80152ec:	7863      	ldrb	r3, [r4, #1]
 80152ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80152f0:	d132      	bne.n	8015358 <_vfiprintf_r+0x1ac>
 80152f2:	9b03      	ldr	r3, [sp, #12]
 80152f4:	1d1a      	adds	r2, r3, #4
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	9203      	str	r2, [sp, #12]
 80152fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80152fe:	3402      	adds	r4, #2
 8015300:	9305      	str	r3, [sp, #20]
 8015302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80153d8 <_vfiprintf_r+0x22c>
 8015306:	7821      	ldrb	r1, [r4, #0]
 8015308:	2203      	movs	r2, #3
 801530a:	4650      	mov	r0, sl
 801530c:	f7ea ffe8 	bl	80002e0 <memchr>
 8015310:	b138      	cbz	r0, 8015322 <_vfiprintf_r+0x176>
 8015312:	9b04      	ldr	r3, [sp, #16]
 8015314:	eba0 000a 	sub.w	r0, r0, sl
 8015318:	2240      	movs	r2, #64	@ 0x40
 801531a:	4082      	lsls	r2, r0
 801531c:	4313      	orrs	r3, r2
 801531e:	3401      	adds	r4, #1
 8015320:	9304      	str	r3, [sp, #16]
 8015322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015326:	4829      	ldr	r0, [pc, #164]	@ (80153cc <_vfiprintf_r+0x220>)
 8015328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801532c:	2206      	movs	r2, #6
 801532e:	f7ea ffd7 	bl	80002e0 <memchr>
 8015332:	2800      	cmp	r0, #0
 8015334:	d03f      	beq.n	80153b6 <_vfiprintf_r+0x20a>
 8015336:	4b26      	ldr	r3, [pc, #152]	@ (80153d0 <_vfiprintf_r+0x224>)
 8015338:	bb1b      	cbnz	r3, 8015382 <_vfiprintf_r+0x1d6>
 801533a:	9b03      	ldr	r3, [sp, #12]
 801533c:	3307      	adds	r3, #7
 801533e:	f023 0307 	bic.w	r3, r3, #7
 8015342:	3308      	adds	r3, #8
 8015344:	9303      	str	r3, [sp, #12]
 8015346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015348:	443b      	add	r3, r7
 801534a:	9309      	str	r3, [sp, #36]	@ 0x24
 801534c:	e76a      	b.n	8015224 <_vfiprintf_r+0x78>
 801534e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015352:	460c      	mov	r4, r1
 8015354:	2001      	movs	r0, #1
 8015356:	e7a8      	b.n	80152aa <_vfiprintf_r+0xfe>
 8015358:	2300      	movs	r3, #0
 801535a:	3401      	adds	r4, #1
 801535c:	9305      	str	r3, [sp, #20]
 801535e:	4619      	mov	r1, r3
 8015360:	f04f 0c0a 	mov.w	ip, #10
 8015364:	4620      	mov	r0, r4
 8015366:	f810 2b01 	ldrb.w	r2, [r0], #1
 801536a:	3a30      	subs	r2, #48	@ 0x30
 801536c:	2a09      	cmp	r2, #9
 801536e:	d903      	bls.n	8015378 <_vfiprintf_r+0x1cc>
 8015370:	2b00      	cmp	r3, #0
 8015372:	d0c6      	beq.n	8015302 <_vfiprintf_r+0x156>
 8015374:	9105      	str	r1, [sp, #20]
 8015376:	e7c4      	b.n	8015302 <_vfiprintf_r+0x156>
 8015378:	fb0c 2101 	mla	r1, ip, r1, r2
 801537c:	4604      	mov	r4, r0
 801537e:	2301      	movs	r3, #1
 8015380:	e7f0      	b.n	8015364 <_vfiprintf_r+0x1b8>
 8015382:	ab03      	add	r3, sp, #12
 8015384:	9300      	str	r3, [sp, #0]
 8015386:	462a      	mov	r2, r5
 8015388:	4b12      	ldr	r3, [pc, #72]	@ (80153d4 <_vfiprintf_r+0x228>)
 801538a:	a904      	add	r1, sp, #16
 801538c:	4630      	mov	r0, r6
 801538e:	f7fd fd67 	bl	8012e60 <_printf_float>
 8015392:	4607      	mov	r7, r0
 8015394:	1c78      	adds	r0, r7, #1
 8015396:	d1d6      	bne.n	8015346 <_vfiprintf_r+0x19a>
 8015398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801539a:	07d9      	lsls	r1, r3, #31
 801539c:	d405      	bmi.n	80153aa <_vfiprintf_r+0x1fe>
 801539e:	89ab      	ldrh	r3, [r5, #12]
 80153a0:	059a      	lsls	r2, r3, #22
 80153a2:	d402      	bmi.n	80153aa <_vfiprintf_r+0x1fe>
 80153a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80153a6:	f7fe fb0f 	bl	80139c8 <__retarget_lock_release_recursive>
 80153aa:	89ab      	ldrh	r3, [r5, #12]
 80153ac:	065b      	lsls	r3, r3, #25
 80153ae:	f53f af1f 	bmi.w	80151f0 <_vfiprintf_r+0x44>
 80153b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80153b4:	e71e      	b.n	80151f4 <_vfiprintf_r+0x48>
 80153b6:	ab03      	add	r3, sp, #12
 80153b8:	9300      	str	r3, [sp, #0]
 80153ba:	462a      	mov	r2, r5
 80153bc:	4b05      	ldr	r3, [pc, #20]	@ (80153d4 <_vfiprintf_r+0x228>)
 80153be:	a904      	add	r1, sp, #16
 80153c0:	4630      	mov	r0, r6
 80153c2:	f7fd ffd5 	bl	8013370 <_printf_i>
 80153c6:	e7e4      	b.n	8015392 <_vfiprintf_r+0x1e6>
 80153c8:	08017aa0 	.word	0x08017aa0
 80153cc:	08017aaa 	.word	0x08017aaa
 80153d0:	08012e61 	.word	0x08012e61
 80153d4:	08015187 	.word	0x08015187
 80153d8:	08017aa6 	.word	0x08017aa6

080153dc <__sflush_r>:
 80153dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80153e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e4:	0716      	lsls	r6, r2, #28
 80153e6:	4605      	mov	r5, r0
 80153e8:	460c      	mov	r4, r1
 80153ea:	d454      	bmi.n	8015496 <__sflush_r+0xba>
 80153ec:	684b      	ldr	r3, [r1, #4]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	dc02      	bgt.n	80153f8 <__sflush_r+0x1c>
 80153f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	dd48      	ble.n	801548a <__sflush_r+0xae>
 80153f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80153fa:	2e00      	cmp	r6, #0
 80153fc:	d045      	beq.n	801548a <__sflush_r+0xae>
 80153fe:	2300      	movs	r3, #0
 8015400:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015404:	682f      	ldr	r7, [r5, #0]
 8015406:	6a21      	ldr	r1, [r4, #32]
 8015408:	602b      	str	r3, [r5, #0]
 801540a:	d030      	beq.n	801546e <__sflush_r+0x92>
 801540c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801540e:	89a3      	ldrh	r3, [r4, #12]
 8015410:	0759      	lsls	r1, r3, #29
 8015412:	d505      	bpl.n	8015420 <__sflush_r+0x44>
 8015414:	6863      	ldr	r3, [r4, #4]
 8015416:	1ad2      	subs	r2, r2, r3
 8015418:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801541a:	b10b      	cbz	r3, 8015420 <__sflush_r+0x44>
 801541c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801541e:	1ad2      	subs	r2, r2, r3
 8015420:	2300      	movs	r3, #0
 8015422:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015424:	6a21      	ldr	r1, [r4, #32]
 8015426:	4628      	mov	r0, r5
 8015428:	47b0      	blx	r6
 801542a:	1c43      	adds	r3, r0, #1
 801542c:	89a3      	ldrh	r3, [r4, #12]
 801542e:	d106      	bne.n	801543e <__sflush_r+0x62>
 8015430:	6829      	ldr	r1, [r5, #0]
 8015432:	291d      	cmp	r1, #29
 8015434:	d82b      	bhi.n	801548e <__sflush_r+0xb2>
 8015436:	4a2a      	ldr	r2, [pc, #168]	@ (80154e0 <__sflush_r+0x104>)
 8015438:	410a      	asrs	r2, r1
 801543a:	07d6      	lsls	r6, r2, #31
 801543c:	d427      	bmi.n	801548e <__sflush_r+0xb2>
 801543e:	2200      	movs	r2, #0
 8015440:	6062      	str	r2, [r4, #4]
 8015442:	04d9      	lsls	r1, r3, #19
 8015444:	6922      	ldr	r2, [r4, #16]
 8015446:	6022      	str	r2, [r4, #0]
 8015448:	d504      	bpl.n	8015454 <__sflush_r+0x78>
 801544a:	1c42      	adds	r2, r0, #1
 801544c:	d101      	bne.n	8015452 <__sflush_r+0x76>
 801544e:	682b      	ldr	r3, [r5, #0]
 8015450:	b903      	cbnz	r3, 8015454 <__sflush_r+0x78>
 8015452:	6560      	str	r0, [r4, #84]	@ 0x54
 8015454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015456:	602f      	str	r7, [r5, #0]
 8015458:	b1b9      	cbz	r1, 801548a <__sflush_r+0xae>
 801545a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801545e:	4299      	cmp	r1, r3
 8015460:	d002      	beq.n	8015468 <__sflush_r+0x8c>
 8015462:	4628      	mov	r0, r5
 8015464:	f7ff f89e 	bl	80145a4 <_free_r>
 8015468:	2300      	movs	r3, #0
 801546a:	6363      	str	r3, [r4, #52]	@ 0x34
 801546c:	e00d      	b.n	801548a <__sflush_r+0xae>
 801546e:	2301      	movs	r3, #1
 8015470:	4628      	mov	r0, r5
 8015472:	47b0      	blx	r6
 8015474:	4602      	mov	r2, r0
 8015476:	1c50      	adds	r0, r2, #1
 8015478:	d1c9      	bne.n	801540e <__sflush_r+0x32>
 801547a:	682b      	ldr	r3, [r5, #0]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d0c6      	beq.n	801540e <__sflush_r+0x32>
 8015480:	2b1d      	cmp	r3, #29
 8015482:	d001      	beq.n	8015488 <__sflush_r+0xac>
 8015484:	2b16      	cmp	r3, #22
 8015486:	d11e      	bne.n	80154c6 <__sflush_r+0xea>
 8015488:	602f      	str	r7, [r5, #0]
 801548a:	2000      	movs	r0, #0
 801548c:	e022      	b.n	80154d4 <__sflush_r+0xf8>
 801548e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015492:	b21b      	sxth	r3, r3
 8015494:	e01b      	b.n	80154ce <__sflush_r+0xf2>
 8015496:	690f      	ldr	r7, [r1, #16]
 8015498:	2f00      	cmp	r7, #0
 801549a:	d0f6      	beq.n	801548a <__sflush_r+0xae>
 801549c:	0793      	lsls	r3, r2, #30
 801549e:	680e      	ldr	r6, [r1, #0]
 80154a0:	bf08      	it	eq
 80154a2:	694b      	ldreq	r3, [r1, #20]
 80154a4:	600f      	str	r7, [r1, #0]
 80154a6:	bf18      	it	ne
 80154a8:	2300      	movne	r3, #0
 80154aa:	eba6 0807 	sub.w	r8, r6, r7
 80154ae:	608b      	str	r3, [r1, #8]
 80154b0:	f1b8 0f00 	cmp.w	r8, #0
 80154b4:	dde9      	ble.n	801548a <__sflush_r+0xae>
 80154b6:	6a21      	ldr	r1, [r4, #32]
 80154b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80154ba:	4643      	mov	r3, r8
 80154bc:	463a      	mov	r2, r7
 80154be:	4628      	mov	r0, r5
 80154c0:	47b0      	blx	r6
 80154c2:	2800      	cmp	r0, #0
 80154c4:	dc08      	bgt.n	80154d8 <__sflush_r+0xfc>
 80154c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154ce:	81a3      	strh	r3, [r4, #12]
 80154d0:	f04f 30ff 	mov.w	r0, #4294967295
 80154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d8:	4407      	add	r7, r0
 80154da:	eba8 0800 	sub.w	r8, r8, r0
 80154de:	e7e7      	b.n	80154b0 <__sflush_r+0xd4>
 80154e0:	dfbffffe 	.word	0xdfbffffe

080154e4 <_fflush_r>:
 80154e4:	b538      	push	{r3, r4, r5, lr}
 80154e6:	690b      	ldr	r3, [r1, #16]
 80154e8:	4605      	mov	r5, r0
 80154ea:	460c      	mov	r4, r1
 80154ec:	b913      	cbnz	r3, 80154f4 <_fflush_r+0x10>
 80154ee:	2500      	movs	r5, #0
 80154f0:	4628      	mov	r0, r5
 80154f2:	bd38      	pop	{r3, r4, r5, pc}
 80154f4:	b118      	cbz	r0, 80154fe <_fflush_r+0x1a>
 80154f6:	6a03      	ldr	r3, [r0, #32]
 80154f8:	b90b      	cbnz	r3, 80154fe <_fflush_r+0x1a>
 80154fa:	f7fe f8e5 	bl	80136c8 <__sinit>
 80154fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d0f3      	beq.n	80154ee <_fflush_r+0xa>
 8015506:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015508:	07d0      	lsls	r0, r2, #31
 801550a:	d404      	bmi.n	8015516 <_fflush_r+0x32>
 801550c:	0599      	lsls	r1, r3, #22
 801550e:	d402      	bmi.n	8015516 <_fflush_r+0x32>
 8015510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015512:	f7fe fa58 	bl	80139c6 <__retarget_lock_acquire_recursive>
 8015516:	4628      	mov	r0, r5
 8015518:	4621      	mov	r1, r4
 801551a:	f7ff ff5f 	bl	80153dc <__sflush_r>
 801551e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015520:	07da      	lsls	r2, r3, #31
 8015522:	4605      	mov	r5, r0
 8015524:	d4e4      	bmi.n	80154f0 <_fflush_r+0xc>
 8015526:	89a3      	ldrh	r3, [r4, #12]
 8015528:	059b      	lsls	r3, r3, #22
 801552a:	d4e1      	bmi.n	80154f0 <_fflush_r+0xc>
 801552c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801552e:	f7fe fa4b 	bl	80139c8 <__retarget_lock_release_recursive>
 8015532:	e7dd      	b.n	80154f0 <_fflush_r+0xc>

08015534 <__swbuf_r>:
 8015534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015536:	460e      	mov	r6, r1
 8015538:	4614      	mov	r4, r2
 801553a:	4605      	mov	r5, r0
 801553c:	b118      	cbz	r0, 8015546 <__swbuf_r+0x12>
 801553e:	6a03      	ldr	r3, [r0, #32]
 8015540:	b90b      	cbnz	r3, 8015546 <__swbuf_r+0x12>
 8015542:	f7fe f8c1 	bl	80136c8 <__sinit>
 8015546:	69a3      	ldr	r3, [r4, #24]
 8015548:	60a3      	str	r3, [r4, #8]
 801554a:	89a3      	ldrh	r3, [r4, #12]
 801554c:	071a      	lsls	r2, r3, #28
 801554e:	d501      	bpl.n	8015554 <__swbuf_r+0x20>
 8015550:	6923      	ldr	r3, [r4, #16]
 8015552:	b943      	cbnz	r3, 8015566 <__swbuf_r+0x32>
 8015554:	4621      	mov	r1, r4
 8015556:	4628      	mov	r0, r5
 8015558:	f000 f82a 	bl	80155b0 <__swsetup_r>
 801555c:	b118      	cbz	r0, 8015566 <__swbuf_r+0x32>
 801555e:	f04f 37ff 	mov.w	r7, #4294967295
 8015562:	4638      	mov	r0, r7
 8015564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015566:	6823      	ldr	r3, [r4, #0]
 8015568:	6922      	ldr	r2, [r4, #16]
 801556a:	1a98      	subs	r0, r3, r2
 801556c:	6963      	ldr	r3, [r4, #20]
 801556e:	b2f6      	uxtb	r6, r6
 8015570:	4283      	cmp	r3, r0
 8015572:	4637      	mov	r7, r6
 8015574:	dc05      	bgt.n	8015582 <__swbuf_r+0x4e>
 8015576:	4621      	mov	r1, r4
 8015578:	4628      	mov	r0, r5
 801557a:	f7ff ffb3 	bl	80154e4 <_fflush_r>
 801557e:	2800      	cmp	r0, #0
 8015580:	d1ed      	bne.n	801555e <__swbuf_r+0x2a>
 8015582:	68a3      	ldr	r3, [r4, #8]
 8015584:	3b01      	subs	r3, #1
 8015586:	60a3      	str	r3, [r4, #8]
 8015588:	6823      	ldr	r3, [r4, #0]
 801558a:	1c5a      	adds	r2, r3, #1
 801558c:	6022      	str	r2, [r4, #0]
 801558e:	701e      	strb	r6, [r3, #0]
 8015590:	6962      	ldr	r2, [r4, #20]
 8015592:	1c43      	adds	r3, r0, #1
 8015594:	429a      	cmp	r2, r3
 8015596:	d004      	beq.n	80155a2 <__swbuf_r+0x6e>
 8015598:	89a3      	ldrh	r3, [r4, #12]
 801559a:	07db      	lsls	r3, r3, #31
 801559c:	d5e1      	bpl.n	8015562 <__swbuf_r+0x2e>
 801559e:	2e0a      	cmp	r6, #10
 80155a0:	d1df      	bne.n	8015562 <__swbuf_r+0x2e>
 80155a2:	4621      	mov	r1, r4
 80155a4:	4628      	mov	r0, r5
 80155a6:	f7ff ff9d 	bl	80154e4 <_fflush_r>
 80155aa:	2800      	cmp	r0, #0
 80155ac:	d0d9      	beq.n	8015562 <__swbuf_r+0x2e>
 80155ae:	e7d6      	b.n	801555e <__swbuf_r+0x2a>

080155b0 <__swsetup_r>:
 80155b0:	b538      	push	{r3, r4, r5, lr}
 80155b2:	4b29      	ldr	r3, [pc, #164]	@ (8015658 <__swsetup_r+0xa8>)
 80155b4:	4605      	mov	r5, r0
 80155b6:	6818      	ldr	r0, [r3, #0]
 80155b8:	460c      	mov	r4, r1
 80155ba:	b118      	cbz	r0, 80155c4 <__swsetup_r+0x14>
 80155bc:	6a03      	ldr	r3, [r0, #32]
 80155be:	b90b      	cbnz	r3, 80155c4 <__swsetup_r+0x14>
 80155c0:	f7fe f882 	bl	80136c8 <__sinit>
 80155c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155c8:	0719      	lsls	r1, r3, #28
 80155ca:	d422      	bmi.n	8015612 <__swsetup_r+0x62>
 80155cc:	06da      	lsls	r2, r3, #27
 80155ce:	d407      	bmi.n	80155e0 <__swsetup_r+0x30>
 80155d0:	2209      	movs	r2, #9
 80155d2:	602a      	str	r2, [r5, #0]
 80155d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80155d8:	81a3      	strh	r3, [r4, #12]
 80155da:	f04f 30ff 	mov.w	r0, #4294967295
 80155de:	e033      	b.n	8015648 <__swsetup_r+0x98>
 80155e0:	0758      	lsls	r0, r3, #29
 80155e2:	d512      	bpl.n	801560a <__swsetup_r+0x5a>
 80155e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80155e6:	b141      	cbz	r1, 80155fa <__swsetup_r+0x4a>
 80155e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80155ec:	4299      	cmp	r1, r3
 80155ee:	d002      	beq.n	80155f6 <__swsetup_r+0x46>
 80155f0:	4628      	mov	r0, r5
 80155f2:	f7fe ffd7 	bl	80145a4 <_free_r>
 80155f6:	2300      	movs	r3, #0
 80155f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80155fa:	89a3      	ldrh	r3, [r4, #12]
 80155fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015600:	81a3      	strh	r3, [r4, #12]
 8015602:	2300      	movs	r3, #0
 8015604:	6063      	str	r3, [r4, #4]
 8015606:	6923      	ldr	r3, [r4, #16]
 8015608:	6023      	str	r3, [r4, #0]
 801560a:	89a3      	ldrh	r3, [r4, #12]
 801560c:	f043 0308 	orr.w	r3, r3, #8
 8015610:	81a3      	strh	r3, [r4, #12]
 8015612:	6923      	ldr	r3, [r4, #16]
 8015614:	b94b      	cbnz	r3, 801562a <__swsetup_r+0x7a>
 8015616:	89a3      	ldrh	r3, [r4, #12]
 8015618:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801561c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015620:	d003      	beq.n	801562a <__swsetup_r+0x7a>
 8015622:	4621      	mov	r1, r4
 8015624:	4628      	mov	r0, r5
 8015626:	f000 f8fb 	bl	8015820 <__smakebuf_r>
 801562a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801562e:	f013 0201 	ands.w	r2, r3, #1
 8015632:	d00a      	beq.n	801564a <__swsetup_r+0x9a>
 8015634:	2200      	movs	r2, #0
 8015636:	60a2      	str	r2, [r4, #8]
 8015638:	6962      	ldr	r2, [r4, #20]
 801563a:	4252      	negs	r2, r2
 801563c:	61a2      	str	r2, [r4, #24]
 801563e:	6922      	ldr	r2, [r4, #16]
 8015640:	b942      	cbnz	r2, 8015654 <__swsetup_r+0xa4>
 8015642:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015646:	d1c5      	bne.n	80155d4 <__swsetup_r+0x24>
 8015648:	bd38      	pop	{r3, r4, r5, pc}
 801564a:	0799      	lsls	r1, r3, #30
 801564c:	bf58      	it	pl
 801564e:	6962      	ldrpl	r2, [r4, #20]
 8015650:	60a2      	str	r2, [r4, #8]
 8015652:	e7f4      	b.n	801563e <__swsetup_r+0x8e>
 8015654:	2000      	movs	r0, #0
 8015656:	e7f7      	b.n	8015648 <__swsetup_r+0x98>
 8015658:	2400004c 	.word	0x2400004c

0801565c <memmove>:
 801565c:	4288      	cmp	r0, r1
 801565e:	b510      	push	{r4, lr}
 8015660:	eb01 0402 	add.w	r4, r1, r2
 8015664:	d902      	bls.n	801566c <memmove+0x10>
 8015666:	4284      	cmp	r4, r0
 8015668:	4623      	mov	r3, r4
 801566a:	d807      	bhi.n	801567c <memmove+0x20>
 801566c:	1e43      	subs	r3, r0, #1
 801566e:	42a1      	cmp	r1, r4
 8015670:	d008      	beq.n	8015684 <memmove+0x28>
 8015672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015676:	f803 2f01 	strb.w	r2, [r3, #1]!
 801567a:	e7f8      	b.n	801566e <memmove+0x12>
 801567c:	4402      	add	r2, r0
 801567e:	4601      	mov	r1, r0
 8015680:	428a      	cmp	r2, r1
 8015682:	d100      	bne.n	8015686 <memmove+0x2a>
 8015684:	bd10      	pop	{r4, pc}
 8015686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801568a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801568e:	e7f7      	b.n	8015680 <memmove+0x24>

08015690 <_sbrk_r>:
 8015690:	b538      	push	{r3, r4, r5, lr}
 8015692:	4d06      	ldr	r5, [pc, #24]	@ (80156ac <_sbrk_r+0x1c>)
 8015694:	2300      	movs	r3, #0
 8015696:	4604      	mov	r4, r0
 8015698:	4608      	mov	r0, r1
 801569a:	602b      	str	r3, [r5, #0]
 801569c:	f7ed fd28 	bl	80030f0 <_sbrk>
 80156a0:	1c43      	adds	r3, r0, #1
 80156a2:	d102      	bne.n	80156aa <_sbrk_r+0x1a>
 80156a4:	682b      	ldr	r3, [r5, #0]
 80156a6:	b103      	cbz	r3, 80156aa <_sbrk_r+0x1a>
 80156a8:	6023      	str	r3, [r4, #0]
 80156aa:	bd38      	pop	{r3, r4, r5, pc}
 80156ac:	240758b4 	.word	0x240758b4

080156b0 <__assert_func>:
 80156b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80156b2:	4614      	mov	r4, r2
 80156b4:	461a      	mov	r2, r3
 80156b6:	4b09      	ldr	r3, [pc, #36]	@ (80156dc <__assert_func+0x2c>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	4605      	mov	r5, r0
 80156bc:	68d8      	ldr	r0, [r3, #12]
 80156be:	b954      	cbnz	r4, 80156d6 <__assert_func+0x26>
 80156c0:	4b07      	ldr	r3, [pc, #28]	@ (80156e0 <__assert_func+0x30>)
 80156c2:	461c      	mov	r4, r3
 80156c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80156c8:	9100      	str	r1, [sp, #0]
 80156ca:	462b      	mov	r3, r5
 80156cc:	4905      	ldr	r1, [pc, #20]	@ (80156e4 <__assert_func+0x34>)
 80156ce:	f000 f86f 	bl	80157b0 <fiprintf>
 80156d2:	f000 f903 	bl	80158dc <abort>
 80156d6:	4b04      	ldr	r3, [pc, #16]	@ (80156e8 <__assert_func+0x38>)
 80156d8:	e7f4      	b.n	80156c4 <__assert_func+0x14>
 80156da:	bf00      	nop
 80156dc:	2400004c 	.word	0x2400004c
 80156e0:	08017af6 	.word	0x08017af6
 80156e4:	08017ac8 	.word	0x08017ac8
 80156e8:	08017abb 	.word	0x08017abb

080156ec <_calloc_r>:
 80156ec:	b570      	push	{r4, r5, r6, lr}
 80156ee:	fba1 5402 	umull	r5, r4, r1, r2
 80156f2:	b93c      	cbnz	r4, 8015704 <_calloc_r+0x18>
 80156f4:	4629      	mov	r1, r5
 80156f6:	f7fe ffc9 	bl	801468c <_malloc_r>
 80156fa:	4606      	mov	r6, r0
 80156fc:	b928      	cbnz	r0, 801570a <_calloc_r+0x1e>
 80156fe:	2600      	movs	r6, #0
 8015700:	4630      	mov	r0, r6
 8015702:	bd70      	pop	{r4, r5, r6, pc}
 8015704:	220c      	movs	r2, #12
 8015706:	6002      	str	r2, [r0, #0]
 8015708:	e7f9      	b.n	80156fe <_calloc_r+0x12>
 801570a:	462a      	mov	r2, r5
 801570c:	4621      	mov	r1, r4
 801570e:	f7fe f886 	bl	801381e <memset>
 8015712:	e7f5      	b.n	8015700 <_calloc_r+0x14>

08015714 <__ascii_mbtowc>:
 8015714:	b082      	sub	sp, #8
 8015716:	b901      	cbnz	r1, 801571a <__ascii_mbtowc+0x6>
 8015718:	a901      	add	r1, sp, #4
 801571a:	b142      	cbz	r2, 801572e <__ascii_mbtowc+0x1a>
 801571c:	b14b      	cbz	r3, 8015732 <__ascii_mbtowc+0x1e>
 801571e:	7813      	ldrb	r3, [r2, #0]
 8015720:	600b      	str	r3, [r1, #0]
 8015722:	7812      	ldrb	r2, [r2, #0]
 8015724:	1e10      	subs	r0, r2, #0
 8015726:	bf18      	it	ne
 8015728:	2001      	movne	r0, #1
 801572a:	b002      	add	sp, #8
 801572c:	4770      	bx	lr
 801572e:	4610      	mov	r0, r2
 8015730:	e7fb      	b.n	801572a <__ascii_mbtowc+0x16>
 8015732:	f06f 0001 	mvn.w	r0, #1
 8015736:	e7f8      	b.n	801572a <__ascii_mbtowc+0x16>

08015738 <_realloc_r>:
 8015738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801573c:	4680      	mov	r8, r0
 801573e:	4615      	mov	r5, r2
 8015740:	460c      	mov	r4, r1
 8015742:	b921      	cbnz	r1, 801574e <_realloc_r+0x16>
 8015744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015748:	4611      	mov	r1, r2
 801574a:	f7fe bf9f 	b.w	801468c <_malloc_r>
 801574e:	b92a      	cbnz	r2, 801575c <_realloc_r+0x24>
 8015750:	f7fe ff28 	bl	80145a4 <_free_r>
 8015754:	2400      	movs	r4, #0
 8015756:	4620      	mov	r0, r4
 8015758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575c:	f000 f8c5 	bl	80158ea <_malloc_usable_size_r>
 8015760:	4285      	cmp	r5, r0
 8015762:	4606      	mov	r6, r0
 8015764:	d802      	bhi.n	801576c <_realloc_r+0x34>
 8015766:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801576a:	d8f4      	bhi.n	8015756 <_realloc_r+0x1e>
 801576c:	4629      	mov	r1, r5
 801576e:	4640      	mov	r0, r8
 8015770:	f7fe ff8c 	bl	801468c <_malloc_r>
 8015774:	4607      	mov	r7, r0
 8015776:	2800      	cmp	r0, #0
 8015778:	d0ec      	beq.n	8015754 <_realloc_r+0x1c>
 801577a:	42b5      	cmp	r5, r6
 801577c:	462a      	mov	r2, r5
 801577e:	4621      	mov	r1, r4
 8015780:	bf28      	it	cs
 8015782:	4632      	movcs	r2, r6
 8015784:	f7fe f921 	bl	80139ca <memcpy>
 8015788:	4621      	mov	r1, r4
 801578a:	4640      	mov	r0, r8
 801578c:	f7fe ff0a 	bl	80145a4 <_free_r>
 8015790:	463c      	mov	r4, r7
 8015792:	e7e0      	b.n	8015756 <_realloc_r+0x1e>

08015794 <__ascii_wctomb>:
 8015794:	4603      	mov	r3, r0
 8015796:	4608      	mov	r0, r1
 8015798:	b141      	cbz	r1, 80157ac <__ascii_wctomb+0x18>
 801579a:	2aff      	cmp	r2, #255	@ 0xff
 801579c:	d904      	bls.n	80157a8 <__ascii_wctomb+0x14>
 801579e:	228a      	movs	r2, #138	@ 0x8a
 80157a0:	601a      	str	r2, [r3, #0]
 80157a2:	f04f 30ff 	mov.w	r0, #4294967295
 80157a6:	4770      	bx	lr
 80157a8:	700a      	strb	r2, [r1, #0]
 80157aa:	2001      	movs	r0, #1
 80157ac:	4770      	bx	lr
	...

080157b0 <fiprintf>:
 80157b0:	b40e      	push	{r1, r2, r3}
 80157b2:	b503      	push	{r0, r1, lr}
 80157b4:	4601      	mov	r1, r0
 80157b6:	ab03      	add	r3, sp, #12
 80157b8:	4805      	ldr	r0, [pc, #20]	@ (80157d0 <fiprintf+0x20>)
 80157ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80157be:	6800      	ldr	r0, [r0, #0]
 80157c0:	9301      	str	r3, [sp, #4]
 80157c2:	f7ff fcf3 	bl	80151ac <_vfiprintf_r>
 80157c6:	b002      	add	sp, #8
 80157c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80157cc:	b003      	add	sp, #12
 80157ce:	4770      	bx	lr
 80157d0:	2400004c 	.word	0x2400004c

080157d4 <__swhatbuf_r>:
 80157d4:	b570      	push	{r4, r5, r6, lr}
 80157d6:	460c      	mov	r4, r1
 80157d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157dc:	2900      	cmp	r1, #0
 80157de:	b096      	sub	sp, #88	@ 0x58
 80157e0:	4615      	mov	r5, r2
 80157e2:	461e      	mov	r6, r3
 80157e4:	da0d      	bge.n	8015802 <__swhatbuf_r+0x2e>
 80157e6:	89a3      	ldrh	r3, [r4, #12]
 80157e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80157ec:	f04f 0100 	mov.w	r1, #0
 80157f0:	bf14      	ite	ne
 80157f2:	2340      	movne	r3, #64	@ 0x40
 80157f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80157f8:	2000      	movs	r0, #0
 80157fa:	6031      	str	r1, [r6, #0]
 80157fc:	602b      	str	r3, [r5, #0]
 80157fe:	b016      	add	sp, #88	@ 0x58
 8015800:	bd70      	pop	{r4, r5, r6, pc}
 8015802:	466a      	mov	r2, sp
 8015804:	f000 f848 	bl	8015898 <_fstat_r>
 8015808:	2800      	cmp	r0, #0
 801580a:	dbec      	blt.n	80157e6 <__swhatbuf_r+0x12>
 801580c:	9901      	ldr	r1, [sp, #4]
 801580e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015816:	4259      	negs	r1, r3
 8015818:	4159      	adcs	r1, r3
 801581a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801581e:	e7eb      	b.n	80157f8 <__swhatbuf_r+0x24>

08015820 <__smakebuf_r>:
 8015820:	898b      	ldrh	r3, [r1, #12]
 8015822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015824:	079d      	lsls	r5, r3, #30
 8015826:	4606      	mov	r6, r0
 8015828:	460c      	mov	r4, r1
 801582a:	d507      	bpl.n	801583c <__smakebuf_r+0x1c>
 801582c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015830:	6023      	str	r3, [r4, #0]
 8015832:	6123      	str	r3, [r4, #16]
 8015834:	2301      	movs	r3, #1
 8015836:	6163      	str	r3, [r4, #20]
 8015838:	b003      	add	sp, #12
 801583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801583c:	ab01      	add	r3, sp, #4
 801583e:	466a      	mov	r2, sp
 8015840:	f7ff ffc8 	bl	80157d4 <__swhatbuf_r>
 8015844:	9f00      	ldr	r7, [sp, #0]
 8015846:	4605      	mov	r5, r0
 8015848:	4639      	mov	r1, r7
 801584a:	4630      	mov	r0, r6
 801584c:	f7fe ff1e 	bl	801468c <_malloc_r>
 8015850:	b948      	cbnz	r0, 8015866 <__smakebuf_r+0x46>
 8015852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015856:	059a      	lsls	r2, r3, #22
 8015858:	d4ee      	bmi.n	8015838 <__smakebuf_r+0x18>
 801585a:	f023 0303 	bic.w	r3, r3, #3
 801585e:	f043 0302 	orr.w	r3, r3, #2
 8015862:	81a3      	strh	r3, [r4, #12]
 8015864:	e7e2      	b.n	801582c <__smakebuf_r+0xc>
 8015866:	89a3      	ldrh	r3, [r4, #12]
 8015868:	6020      	str	r0, [r4, #0]
 801586a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801586e:	81a3      	strh	r3, [r4, #12]
 8015870:	9b01      	ldr	r3, [sp, #4]
 8015872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015876:	b15b      	cbz	r3, 8015890 <__smakebuf_r+0x70>
 8015878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801587c:	4630      	mov	r0, r6
 801587e:	f000 f81d 	bl	80158bc <_isatty_r>
 8015882:	b128      	cbz	r0, 8015890 <__smakebuf_r+0x70>
 8015884:	89a3      	ldrh	r3, [r4, #12]
 8015886:	f023 0303 	bic.w	r3, r3, #3
 801588a:	f043 0301 	orr.w	r3, r3, #1
 801588e:	81a3      	strh	r3, [r4, #12]
 8015890:	89a3      	ldrh	r3, [r4, #12]
 8015892:	431d      	orrs	r5, r3
 8015894:	81a5      	strh	r5, [r4, #12]
 8015896:	e7cf      	b.n	8015838 <__smakebuf_r+0x18>

08015898 <_fstat_r>:
 8015898:	b538      	push	{r3, r4, r5, lr}
 801589a:	4d07      	ldr	r5, [pc, #28]	@ (80158b8 <_fstat_r+0x20>)
 801589c:	2300      	movs	r3, #0
 801589e:	4604      	mov	r4, r0
 80158a0:	4608      	mov	r0, r1
 80158a2:	4611      	mov	r1, r2
 80158a4:	602b      	str	r3, [r5, #0]
 80158a6:	f7ed fbfb 	bl	80030a0 <_fstat>
 80158aa:	1c43      	adds	r3, r0, #1
 80158ac:	d102      	bne.n	80158b4 <_fstat_r+0x1c>
 80158ae:	682b      	ldr	r3, [r5, #0]
 80158b0:	b103      	cbz	r3, 80158b4 <_fstat_r+0x1c>
 80158b2:	6023      	str	r3, [r4, #0]
 80158b4:	bd38      	pop	{r3, r4, r5, pc}
 80158b6:	bf00      	nop
 80158b8:	240758b4 	.word	0x240758b4

080158bc <_isatty_r>:
 80158bc:	b538      	push	{r3, r4, r5, lr}
 80158be:	4d06      	ldr	r5, [pc, #24]	@ (80158d8 <_isatty_r+0x1c>)
 80158c0:	2300      	movs	r3, #0
 80158c2:	4604      	mov	r4, r0
 80158c4:	4608      	mov	r0, r1
 80158c6:	602b      	str	r3, [r5, #0]
 80158c8:	f7ed fbfa 	bl	80030c0 <_isatty>
 80158cc:	1c43      	adds	r3, r0, #1
 80158ce:	d102      	bne.n	80158d6 <_isatty_r+0x1a>
 80158d0:	682b      	ldr	r3, [r5, #0]
 80158d2:	b103      	cbz	r3, 80158d6 <_isatty_r+0x1a>
 80158d4:	6023      	str	r3, [r4, #0]
 80158d6:	bd38      	pop	{r3, r4, r5, pc}
 80158d8:	240758b4 	.word	0x240758b4

080158dc <abort>:
 80158dc:	b508      	push	{r3, lr}
 80158de:	2006      	movs	r0, #6
 80158e0:	f000 f834 	bl	801594c <raise>
 80158e4:	2001      	movs	r0, #1
 80158e6:	f7ed fb8b 	bl	8003000 <_exit>

080158ea <_malloc_usable_size_r>:
 80158ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158ee:	1f18      	subs	r0, r3, #4
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	bfbc      	itt	lt
 80158f4:	580b      	ldrlt	r3, [r1, r0]
 80158f6:	18c0      	addlt	r0, r0, r3
 80158f8:	4770      	bx	lr

080158fa <_raise_r>:
 80158fa:	291f      	cmp	r1, #31
 80158fc:	b538      	push	{r3, r4, r5, lr}
 80158fe:	4605      	mov	r5, r0
 8015900:	460c      	mov	r4, r1
 8015902:	d904      	bls.n	801590e <_raise_r+0x14>
 8015904:	2316      	movs	r3, #22
 8015906:	6003      	str	r3, [r0, #0]
 8015908:	f04f 30ff 	mov.w	r0, #4294967295
 801590c:	bd38      	pop	{r3, r4, r5, pc}
 801590e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015910:	b112      	cbz	r2, 8015918 <_raise_r+0x1e>
 8015912:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015916:	b94b      	cbnz	r3, 801592c <_raise_r+0x32>
 8015918:	4628      	mov	r0, r5
 801591a:	f000 f831 	bl	8015980 <_getpid_r>
 801591e:	4622      	mov	r2, r4
 8015920:	4601      	mov	r1, r0
 8015922:	4628      	mov	r0, r5
 8015924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015928:	f000 b818 	b.w	801595c <_kill_r>
 801592c:	2b01      	cmp	r3, #1
 801592e:	d00a      	beq.n	8015946 <_raise_r+0x4c>
 8015930:	1c59      	adds	r1, r3, #1
 8015932:	d103      	bne.n	801593c <_raise_r+0x42>
 8015934:	2316      	movs	r3, #22
 8015936:	6003      	str	r3, [r0, #0]
 8015938:	2001      	movs	r0, #1
 801593a:	e7e7      	b.n	801590c <_raise_r+0x12>
 801593c:	2100      	movs	r1, #0
 801593e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015942:	4620      	mov	r0, r4
 8015944:	4798      	blx	r3
 8015946:	2000      	movs	r0, #0
 8015948:	e7e0      	b.n	801590c <_raise_r+0x12>
	...

0801594c <raise>:
 801594c:	4b02      	ldr	r3, [pc, #8]	@ (8015958 <raise+0xc>)
 801594e:	4601      	mov	r1, r0
 8015950:	6818      	ldr	r0, [r3, #0]
 8015952:	f7ff bfd2 	b.w	80158fa <_raise_r>
 8015956:	bf00      	nop
 8015958:	2400004c 	.word	0x2400004c

0801595c <_kill_r>:
 801595c:	b538      	push	{r3, r4, r5, lr}
 801595e:	4d07      	ldr	r5, [pc, #28]	@ (801597c <_kill_r+0x20>)
 8015960:	2300      	movs	r3, #0
 8015962:	4604      	mov	r4, r0
 8015964:	4608      	mov	r0, r1
 8015966:	4611      	mov	r1, r2
 8015968:	602b      	str	r3, [r5, #0]
 801596a:	f7ed fb39 	bl	8002fe0 <_kill>
 801596e:	1c43      	adds	r3, r0, #1
 8015970:	d102      	bne.n	8015978 <_kill_r+0x1c>
 8015972:	682b      	ldr	r3, [r5, #0]
 8015974:	b103      	cbz	r3, 8015978 <_kill_r+0x1c>
 8015976:	6023      	str	r3, [r4, #0]
 8015978:	bd38      	pop	{r3, r4, r5, pc}
 801597a:	bf00      	nop
 801597c:	240758b4 	.word	0x240758b4

08015980 <_getpid_r>:
 8015980:	f7ed bb26 	b.w	8002fd0 <_getpid>
 8015984:	0000      	movs	r0, r0
	...

08015988 <cos>:
 8015988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801598a:	eeb0 7b40 	vmov.f64	d7, d0
 801598e:	ee17 3a90 	vmov	r3, s15
 8015992:	4a21      	ldr	r2, [pc, #132]	@ (8015a18 <cos+0x90>)
 8015994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015998:	4293      	cmp	r3, r2
 801599a:	d806      	bhi.n	80159aa <cos+0x22>
 801599c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015a10 <cos+0x88>
 80159a0:	b005      	add	sp, #20
 80159a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80159a6:	f000 b8ff 	b.w	8015ba8 <__kernel_cos>
 80159aa:	4a1c      	ldr	r2, [pc, #112]	@ (8015a1c <cos+0x94>)
 80159ac:	4293      	cmp	r3, r2
 80159ae:	d904      	bls.n	80159ba <cos+0x32>
 80159b0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80159b4:	b005      	add	sp, #20
 80159b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80159ba:	4668      	mov	r0, sp
 80159bc:	f000 f9b4 	bl	8015d28 <__ieee754_rem_pio2>
 80159c0:	f000 0003 	and.w	r0, r0, #3
 80159c4:	2801      	cmp	r0, #1
 80159c6:	d009      	beq.n	80159dc <cos+0x54>
 80159c8:	2802      	cmp	r0, #2
 80159ca:	d010      	beq.n	80159ee <cos+0x66>
 80159cc:	b9b0      	cbnz	r0, 80159fc <cos+0x74>
 80159ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80159d2:	ed9d 0b00 	vldr	d0, [sp]
 80159d6:	f000 f8e7 	bl	8015ba8 <__kernel_cos>
 80159da:	e7eb      	b.n	80159b4 <cos+0x2c>
 80159dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80159e0:	ed9d 0b00 	vldr	d0, [sp]
 80159e4:	f000 f948 	bl	8015c78 <__kernel_sin>
 80159e8:	eeb1 0b40 	vneg.f64	d0, d0
 80159ec:	e7e2      	b.n	80159b4 <cos+0x2c>
 80159ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80159f2:	ed9d 0b00 	vldr	d0, [sp]
 80159f6:	f000 f8d7 	bl	8015ba8 <__kernel_cos>
 80159fa:	e7f5      	b.n	80159e8 <cos+0x60>
 80159fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a00:	ed9d 0b00 	vldr	d0, [sp]
 8015a04:	2001      	movs	r0, #1
 8015a06:	f000 f937 	bl	8015c78 <__kernel_sin>
 8015a0a:	e7d3      	b.n	80159b4 <cos+0x2c>
 8015a0c:	f3af 8000 	nop.w
	...
 8015a18:	3fe921fb 	.word	0x3fe921fb
 8015a1c:	7fefffff 	.word	0x7fefffff

08015a20 <sin>:
 8015a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a22:	eeb0 7b40 	vmov.f64	d7, d0
 8015a26:	ee17 3a90 	vmov	r3, s15
 8015a2a:	4a21      	ldr	r2, [pc, #132]	@ (8015ab0 <sin+0x90>)
 8015a2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015a30:	4293      	cmp	r3, r2
 8015a32:	d807      	bhi.n	8015a44 <sin+0x24>
 8015a34:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8015aa8 <sin+0x88>
 8015a38:	2000      	movs	r0, #0
 8015a3a:	b005      	add	sp, #20
 8015a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a40:	f000 b91a 	b.w	8015c78 <__kernel_sin>
 8015a44:	4a1b      	ldr	r2, [pc, #108]	@ (8015ab4 <sin+0x94>)
 8015a46:	4293      	cmp	r3, r2
 8015a48:	d904      	bls.n	8015a54 <sin+0x34>
 8015a4a:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015a4e:	b005      	add	sp, #20
 8015a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a54:	4668      	mov	r0, sp
 8015a56:	f000 f967 	bl	8015d28 <__ieee754_rem_pio2>
 8015a5a:	f000 0003 	and.w	r0, r0, #3
 8015a5e:	2801      	cmp	r0, #1
 8015a60:	d00a      	beq.n	8015a78 <sin+0x58>
 8015a62:	2802      	cmp	r0, #2
 8015a64:	d00f      	beq.n	8015a86 <sin+0x66>
 8015a66:	b9c0      	cbnz	r0, 8015a9a <sin+0x7a>
 8015a68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a6c:	ed9d 0b00 	vldr	d0, [sp]
 8015a70:	2001      	movs	r0, #1
 8015a72:	f000 f901 	bl	8015c78 <__kernel_sin>
 8015a76:	e7ea      	b.n	8015a4e <sin+0x2e>
 8015a78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a7c:	ed9d 0b00 	vldr	d0, [sp]
 8015a80:	f000 f892 	bl	8015ba8 <__kernel_cos>
 8015a84:	e7e3      	b.n	8015a4e <sin+0x2e>
 8015a86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a8a:	ed9d 0b00 	vldr	d0, [sp]
 8015a8e:	2001      	movs	r0, #1
 8015a90:	f000 f8f2 	bl	8015c78 <__kernel_sin>
 8015a94:	eeb1 0b40 	vneg.f64	d0, d0
 8015a98:	e7d9      	b.n	8015a4e <sin+0x2e>
 8015a9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015a9e:	ed9d 0b00 	vldr	d0, [sp]
 8015aa2:	f000 f881 	bl	8015ba8 <__kernel_cos>
 8015aa6:	e7f5      	b.n	8015a94 <sin+0x74>
	...
 8015ab0:	3fe921fb 	.word	0x3fe921fb
 8015ab4:	7fefffff 	.word	0x7fefffff

08015ab8 <floor>:
 8015ab8:	ee10 3a90 	vmov	r3, s1
 8015abc:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8015ac0:	ee10 2a10 	vmov	r2, s0
 8015ac4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8015ac8:	2913      	cmp	r1, #19
 8015aca:	b530      	push	{r4, r5, lr}
 8015acc:	4615      	mov	r5, r2
 8015ace:	dc33      	bgt.n	8015b38 <floor+0x80>
 8015ad0:	2900      	cmp	r1, #0
 8015ad2:	da18      	bge.n	8015b06 <floor+0x4e>
 8015ad4:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 8015b98 <floor+0xe0>
 8015ad8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015adc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ae4:	dd0a      	ble.n	8015afc <floor+0x44>
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	da50      	bge.n	8015b8c <floor+0xd4>
 8015aea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015aee:	4313      	orrs	r3, r2
 8015af0:	2200      	movs	r2, #0
 8015af2:	4293      	cmp	r3, r2
 8015af4:	4b2a      	ldr	r3, [pc, #168]	@ (8015ba0 <floor+0xe8>)
 8015af6:	bf08      	it	eq
 8015af8:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8015afc:	4619      	mov	r1, r3
 8015afe:	4610      	mov	r0, r2
 8015b00:	ec41 0b10 	vmov	d0, r0, r1
 8015b04:	e01f      	b.n	8015b46 <floor+0x8e>
 8015b06:	4827      	ldr	r0, [pc, #156]	@ (8015ba4 <floor+0xec>)
 8015b08:	4108      	asrs	r0, r1
 8015b0a:	ea03 0400 	and.w	r4, r3, r0
 8015b0e:	4314      	orrs	r4, r2
 8015b10:	d019      	beq.n	8015b46 <floor+0x8e>
 8015b12:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015b98 <floor+0xe0>
 8015b16:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015b1a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b22:	ddeb      	ble.n	8015afc <floor+0x44>
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	bfbe      	ittt	lt
 8015b28:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 8015b2c:	410a      	asrlt	r2, r1
 8015b2e:	189b      	addlt	r3, r3, r2
 8015b30:	ea23 0300 	bic.w	r3, r3, r0
 8015b34:	2200      	movs	r2, #0
 8015b36:	e7e1      	b.n	8015afc <floor+0x44>
 8015b38:	2933      	cmp	r1, #51	@ 0x33
 8015b3a:	dd05      	ble.n	8015b48 <floor+0x90>
 8015b3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015b40:	d101      	bne.n	8015b46 <floor+0x8e>
 8015b42:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015b46:	bd30      	pop	{r4, r5, pc}
 8015b48:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 8015b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b50:	40e0      	lsrs	r0, r4
 8015b52:	4210      	tst	r0, r2
 8015b54:	d0f7      	beq.n	8015b46 <floor+0x8e>
 8015b56:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015b98 <floor+0xe0>
 8015b5a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015b5e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b66:	ddc9      	ble.n	8015afc <floor+0x44>
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	da02      	bge.n	8015b72 <floor+0xba>
 8015b6c:	2914      	cmp	r1, #20
 8015b6e:	d103      	bne.n	8015b78 <floor+0xc0>
 8015b70:	3301      	adds	r3, #1
 8015b72:	ea22 0200 	bic.w	r2, r2, r0
 8015b76:	e7c1      	b.n	8015afc <floor+0x44>
 8015b78:	2401      	movs	r4, #1
 8015b7a:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 8015b7e:	fa04 f101 	lsl.w	r1, r4, r1
 8015b82:	440a      	add	r2, r1
 8015b84:	42aa      	cmp	r2, r5
 8015b86:	bf38      	it	cc
 8015b88:	191b      	addcc	r3, r3, r4
 8015b8a:	e7f2      	b.n	8015b72 <floor+0xba>
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	4613      	mov	r3, r2
 8015b90:	e7b4      	b.n	8015afc <floor+0x44>
 8015b92:	bf00      	nop
 8015b94:	f3af 8000 	nop.w
 8015b98:	8800759c 	.word	0x8800759c
 8015b9c:	7e37e43c 	.word	0x7e37e43c
 8015ba0:	bff00000 	.word	0xbff00000
 8015ba4:	000fffff 	.word	0x000fffff

08015ba8 <__kernel_cos>:
 8015ba8:	eeb0 5b40 	vmov.f64	d5, d0
 8015bac:	ee15 1a90 	vmov	r1, s11
 8015bb0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8015bb4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015bb8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 8015bbc:	d204      	bcs.n	8015bc8 <__kernel_cos+0x20>
 8015bbe:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 8015bc2:	ee17 3a90 	vmov	r3, s15
 8015bc6:	b343      	cbz	r3, 8015c1a <__kernel_cos+0x72>
 8015bc8:	ee25 6b05 	vmul.f64	d6, d5, d5
 8015bcc:	ee21 1b45 	vnmul.f64	d1, d1, d5
 8015bd0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8015c40 <__kernel_cos+0x98>
 8015bd4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015c48 <__kernel_cos+0xa0>
 8015bd8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015bdc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015c50 <__kernel_cos+0xa8>
 8015be0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015be4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015c58 <__kernel_cos+0xb0>
 8015be8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015bec:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8015c60 <__kernel_cos+0xb8>
 8015bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8015c70 <__kernel_cos+0xc8>)
 8015bf2:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015bf6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8015c68 <__kernel_cos+0xc0>
 8015bfa:	4299      	cmp	r1, r3
 8015bfc:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015c00:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015c04:	ee24 4b06 	vmul.f64	d4, d4, d6
 8015c08:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015c0c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8015c10:	d804      	bhi.n	8015c1c <__kernel_cos+0x74>
 8015c12:	ee37 7b41 	vsub.f64	d7, d7, d1
 8015c16:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015c1a:	4770      	bx	lr
 8015c1c:	4b15      	ldr	r3, [pc, #84]	@ (8015c74 <__kernel_cos+0xcc>)
 8015c1e:	4299      	cmp	r1, r3
 8015c20:	d809      	bhi.n	8015c36 <__kernel_cos+0x8e>
 8015c22:	2200      	movs	r2, #0
 8015c24:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8015c28:	ec43 2b16 	vmov	d6, r2, r3
 8015c2c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015c34:	e7ed      	b.n	8015c12 <__kernel_cos+0x6a>
 8015c36:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 8015c3a:	e7f7      	b.n	8015c2c <__kernel_cos+0x84>
 8015c3c:	f3af 8000 	nop.w
 8015c40:	be8838d4 	.word	0xbe8838d4
 8015c44:	bda8fae9 	.word	0xbda8fae9
 8015c48:	bdb4b1c4 	.word	0xbdb4b1c4
 8015c4c:	3e21ee9e 	.word	0x3e21ee9e
 8015c50:	809c52ad 	.word	0x809c52ad
 8015c54:	be927e4f 	.word	0xbe927e4f
 8015c58:	19cb1590 	.word	0x19cb1590
 8015c5c:	3efa01a0 	.word	0x3efa01a0
 8015c60:	16c15177 	.word	0x16c15177
 8015c64:	bf56c16c 	.word	0xbf56c16c
 8015c68:	5555554c 	.word	0x5555554c
 8015c6c:	3fa55555 	.word	0x3fa55555
 8015c70:	3fd33332 	.word	0x3fd33332
 8015c74:	3fe90000 	.word	0x3fe90000

08015c78 <__kernel_sin>:
 8015c78:	ee10 3a90 	vmov	r3, s1
 8015c7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015c80:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8015c84:	d204      	bcs.n	8015c90 <__kernel_sin+0x18>
 8015c86:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8015c8a:	ee17 3a90 	vmov	r3, s15
 8015c8e:	b35b      	cbz	r3, 8015ce8 <__kernel_sin+0x70>
 8015c90:	ee20 6b00 	vmul.f64	d6, d0, d0
 8015c94:	ee20 5b06 	vmul.f64	d5, d0, d6
 8015c98:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8015cf0 <__kernel_sin+0x78>
 8015c9c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015cf8 <__kernel_sin+0x80>
 8015ca0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015ca4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015d00 <__kernel_sin+0x88>
 8015ca8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015cac:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015d08 <__kernel_sin+0x90>
 8015cb0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015cb4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015d10 <__kernel_sin+0x98>
 8015cb8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8015cbc:	b930      	cbnz	r0, 8015ccc <__kernel_sin+0x54>
 8015cbe:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8015d18 <__kernel_sin+0xa0>
 8015cc2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015cc6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8015cca:	4770      	bx	lr
 8015ccc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015cd0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 8015cd4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015cd8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8015cdc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8015d20 <__kernel_sin+0xa8>
 8015ce0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015ce4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop
 8015cec:	f3af 8000 	nop.w
 8015cf0:	5acfd57c 	.word	0x5acfd57c
 8015cf4:	3de5d93a 	.word	0x3de5d93a
 8015cf8:	8a2b9ceb 	.word	0x8a2b9ceb
 8015cfc:	be5ae5e6 	.word	0xbe5ae5e6
 8015d00:	57b1fe7d 	.word	0x57b1fe7d
 8015d04:	3ec71de3 	.word	0x3ec71de3
 8015d08:	19c161d5 	.word	0x19c161d5
 8015d0c:	bf2a01a0 	.word	0xbf2a01a0
 8015d10:	1110f8a6 	.word	0x1110f8a6
 8015d14:	3f811111 	.word	0x3f811111
 8015d18:	55555549 	.word	0x55555549
 8015d1c:	bfc55555 	.word	0xbfc55555
 8015d20:	55555549 	.word	0x55555549
 8015d24:	3fc55555 	.word	0x3fc55555

08015d28 <__ieee754_rem_pio2>:
 8015d28:	b570      	push	{r4, r5, r6, lr}
 8015d2a:	eeb0 7b40 	vmov.f64	d7, d0
 8015d2e:	ee17 5a90 	vmov	r5, s15
 8015d32:	4b99      	ldr	r3, [pc, #612]	@ (8015f98 <__ieee754_rem_pio2+0x270>)
 8015d34:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8015d38:	429e      	cmp	r6, r3
 8015d3a:	b088      	sub	sp, #32
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	d807      	bhi.n	8015d50 <__ieee754_rem_pio2+0x28>
 8015d40:	2200      	movs	r2, #0
 8015d42:	2300      	movs	r3, #0
 8015d44:	ed84 0b00 	vstr	d0, [r4]
 8015d48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	e01b      	b.n	8015d88 <__ieee754_rem_pio2+0x60>
 8015d50:	4b92      	ldr	r3, [pc, #584]	@ (8015f9c <__ieee754_rem_pio2+0x274>)
 8015d52:	429e      	cmp	r6, r3
 8015d54:	d83b      	bhi.n	8015dce <__ieee754_rem_pio2+0xa6>
 8015d56:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 8015d5a:	2d00      	cmp	r5, #0
 8015d5c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8015f58 <__ieee754_rem_pio2+0x230>
 8015d60:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8015d64:	dd19      	ble.n	8015d9a <__ieee754_rem_pio2+0x72>
 8015d66:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015d6a:	429e      	cmp	r6, r3
 8015d6c:	d00e      	beq.n	8015d8c <__ieee754_rem_pio2+0x64>
 8015d6e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8015f60 <__ieee754_rem_pio2+0x238>
 8015d72:	ee37 6b45 	vsub.f64	d6, d7, d5
 8015d76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015d7a:	ed84 6b00 	vstr	d6, [r4]
 8015d7e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015d82:	ed84 7b02 	vstr	d7, [r4, #8]
 8015d86:	2001      	movs	r0, #1
 8015d88:	b008      	add	sp, #32
 8015d8a:	bd70      	pop	{r4, r5, r6, pc}
 8015d8c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8015f68 <__ieee754_rem_pio2+0x240>
 8015d90:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8015f70 <__ieee754_rem_pio2+0x248>
 8015d94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015d98:	e7eb      	b.n	8015d72 <__ieee754_rem_pio2+0x4a>
 8015d9a:	429e      	cmp	r6, r3
 8015d9c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015da0:	d00e      	beq.n	8015dc0 <__ieee754_rem_pio2+0x98>
 8015da2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8015f60 <__ieee754_rem_pio2+0x238>
 8015da6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015daa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015dae:	ed84 6b00 	vstr	d6, [r4]
 8015db2:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015db6:	f04f 30ff 	mov.w	r0, #4294967295
 8015dba:	ed84 7b02 	vstr	d7, [r4, #8]
 8015dbe:	e7e3      	b.n	8015d88 <__ieee754_rem_pio2+0x60>
 8015dc0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8015f68 <__ieee754_rem_pio2+0x240>
 8015dc4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8015f70 <__ieee754_rem_pio2+0x248>
 8015dc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015dcc:	e7eb      	b.n	8015da6 <__ieee754_rem_pio2+0x7e>
 8015dce:	4b74      	ldr	r3, [pc, #464]	@ (8015fa0 <__ieee754_rem_pio2+0x278>)
 8015dd0:	429e      	cmp	r6, r3
 8015dd2:	d870      	bhi.n	8015eb6 <__ieee754_rem_pio2+0x18e>
 8015dd4:	f000 f8ec 	bl	8015fb0 <fabs>
 8015dd8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8015ddc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8015f78 <__ieee754_rem_pio2+0x250>
 8015de0:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015de4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015de8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015dec:	ee17 0a90 	vmov	r0, s15
 8015df0:	eeb1 4b45 	vneg.f64	d4, d5
 8015df4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015f58 <__ieee754_rem_pio2+0x230>
 8015df8:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015dfc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8015f60 <__ieee754_rem_pio2+0x238>
 8015e00:	281f      	cmp	r0, #31
 8015e02:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015e06:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015e0a:	dc05      	bgt.n	8015e18 <__ieee754_rem_pio2+0xf0>
 8015e0c:	4b65      	ldr	r3, [pc, #404]	@ (8015fa4 <__ieee754_rem_pio2+0x27c>)
 8015e0e:	1e42      	subs	r2, r0, #1
 8015e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e14:	42b3      	cmp	r3, r6
 8015e16:	d109      	bne.n	8015e2c <__ieee754_rem_pio2+0x104>
 8015e18:	ee16 3a90 	vmov	r3, s13
 8015e1c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015e20:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015e24:	2b10      	cmp	r3, #16
 8015e26:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015e2a:	dc02      	bgt.n	8015e32 <__ieee754_rem_pio2+0x10a>
 8015e2c:	ed84 6b00 	vstr	d6, [r4]
 8015e30:	e01a      	b.n	8015e68 <__ieee754_rem_pio2+0x140>
 8015e32:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8015f68 <__ieee754_rem_pio2+0x240>
 8015e36:	eeb0 6b40 	vmov.f64	d6, d0
 8015e3a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8015e3e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015e42:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015e46:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8015f70 <__ieee754_rem_pio2+0x248>
 8015e4a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015e4e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015e52:	ee13 3a90 	vmov	r3, s7
 8015e56:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015e5a:	1ad3      	subs	r3, r2, r3
 8015e5c:	2b31      	cmp	r3, #49	@ 0x31
 8015e5e:	dc17      	bgt.n	8015e90 <__ieee754_rem_pio2+0x168>
 8015e60:	eeb0 0b46 	vmov.f64	d0, d6
 8015e64:	ed84 3b00 	vstr	d3, [r4]
 8015e68:	ed94 6b00 	vldr	d6, [r4]
 8015e6c:	2d00      	cmp	r5, #0
 8015e6e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015e72:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015e76:	ed84 0b02 	vstr	d0, [r4, #8]
 8015e7a:	da85      	bge.n	8015d88 <__ieee754_rem_pio2+0x60>
 8015e7c:	eeb1 6b46 	vneg.f64	d6, d6
 8015e80:	eeb1 0b40 	vneg.f64	d0, d0
 8015e84:	ed84 6b00 	vstr	d6, [r4]
 8015e88:	ed84 0b02 	vstr	d0, [r4, #8]
 8015e8c:	4240      	negs	r0, r0
 8015e8e:	e77b      	b.n	8015d88 <__ieee754_rem_pio2+0x60>
 8015e90:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8015f80 <__ieee754_rem_pio2+0x258>
 8015e94:	eeb0 0b46 	vmov.f64	d0, d6
 8015e98:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015e9c:	ee36 6b40 	vsub.f64	d6, d6, d0
 8015ea0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015ea4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8015f88 <__ieee754_rem_pio2+0x260>
 8015ea8:	eeb0 7b46 	vmov.f64	d7, d6
 8015eac:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8015eb0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015eb4:	e7ba      	b.n	8015e2c <__ieee754_rem_pio2+0x104>
 8015eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8015fa8 <__ieee754_rem_pio2+0x280>)
 8015eb8:	429e      	cmp	r6, r3
 8015eba:	d906      	bls.n	8015eca <__ieee754_rem_pio2+0x1a2>
 8015ebc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015ec0:	ed80 7b02 	vstr	d7, [r0, #8]
 8015ec4:	ed80 7b00 	vstr	d7, [r0]
 8015ec8:	e740      	b.n	8015d4c <__ieee754_rem_pio2+0x24>
 8015eca:	ee10 3a10 	vmov	r3, s0
 8015ece:	1532      	asrs	r2, r6, #20
 8015ed0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015eda:	ec41 0b17 	vmov	d7, r0, r1
 8015ede:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015ee2:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8015f90 <__ieee754_rem_pio2+0x268>
 8015ee6:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015eea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015eee:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015ef2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015ef6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015efa:	a808      	add	r0, sp, #32
 8015efc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015f00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015f04:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015f08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015f0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f10:	2103      	movs	r1, #3
 8015f12:	ed30 7b02 	vldmdb	r0!, {d7}
 8015f16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f1e:	460b      	mov	r3, r1
 8015f20:	f101 31ff 	add.w	r1, r1, #4294967295
 8015f24:	d0f5      	beq.n	8015f12 <__ieee754_rem_pio2+0x1ea>
 8015f26:	4921      	ldr	r1, [pc, #132]	@ (8015fac <__ieee754_rem_pio2+0x284>)
 8015f28:	9101      	str	r1, [sp, #4]
 8015f2a:	2102      	movs	r1, #2
 8015f2c:	9100      	str	r1, [sp, #0]
 8015f2e:	a802      	add	r0, sp, #8
 8015f30:	4621      	mov	r1, r4
 8015f32:	f000 f845 	bl	8015fc0 <__kernel_rem_pio2>
 8015f36:	2d00      	cmp	r5, #0
 8015f38:	f6bf af26 	bge.w	8015d88 <__ieee754_rem_pio2+0x60>
 8015f3c:	ed94 7b00 	vldr	d7, [r4]
 8015f40:	eeb1 7b47 	vneg.f64	d7, d7
 8015f44:	ed84 7b00 	vstr	d7, [r4]
 8015f48:	ed94 7b02 	vldr	d7, [r4, #8]
 8015f4c:	eeb1 7b47 	vneg.f64	d7, d7
 8015f50:	ed84 7b02 	vstr	d7, [r4, #8]
 8015f54:	e79a      	b.n	8015e8c <__ieee754_rem_pio2+0x164>
 8015f56:	bf00      	nop
 8015f58:	54400000 	.word	0x54400000
 8015f5c:	3ff921fb 	.word	0x3ff921fb
 8015f60:	1a626331 	.word	0x1a626331
 8015f64:	3dd0b461 	.word	0x3dd0b461
 8015f68:	1a600000 	.word	0x1a600000
 8015f6c:	3dd0b461 	.word	0x3dd0b461
 8015f70:	2e037073 	.word	0x2e037073
 8015f74:	3ba3198a 	.word	0x3ba3198a
 8015f78:	6dc9c883 	.word	0x6dc9c883
 8015f7c:	3fe45f30 	.word	0x3fe45f30
 8015f80:	2e000000 	.word	0x2e000000
 8015f84:	3ba3198a 	.word	0x3ba3198a
 8015f88:	252049c1 	.word	0x252049c1
 8015f8c:	397b839a 	.word	0x397b839a
 8015f90:	00000000 	.word	0x00000000
 8015f94:	41700000 	.word	0x41700000
 8015f98:	3fe921fb 	.word	0x3fe921fb
 8015f9c:	4002d97b 	.word	0x4002d97b
 8015fa0:	413921fb 	.word	0x413921fb
 8015fa4:	08017bf8 	.word	0x08017bf8
 8015fa8:	7fefffff 	.word	0x7fefffff
 8015fac:	08017c78 	.word	0x08017c78

08015fb0 <fabs>:
 8015fb0:	ec51 0b10 	vmov	r0, r1, d0
 8015fb4:	4602      	mov	r2, r0
 8015fb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015fba:	ec43 2b10 	vmov	d0, r2, r3
 8015fbe:	4770      	bx	lr

08015fc0 <__kernel_rem_pio2>:
 8015fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc4:	ed2d 8b06 	vpush	{d8-d10}
 8015fc8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8015fcc:	469b      	mov	fp, r3
 8015fce:	9001      	str	r0, [sp, #4]
 8015fd0:	4bbb      	ldr	r3, [pc, #748]	@ (80162c0 <__kernel_rem_pio2+0x300>)
 8015fd2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 8015fd4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 8015fd8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8015fdc:	f112 0f14 	cmn.w	r2, #20
 8015fe0:	bfa8      	it	ge
 8015fe2:	1ed3      	subge	r3, r2, #3
 8015fe4:	f10b 3aff 	add.w	sl, fp, #4294967295
 8015fe8:	bfb8      	it	lt
 8015fea:	2300      	movlt	r3, #0
 8015fec:	f06f 0517 	mvn.w	r5, #23
 8015ff0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 80162a8 <__kernel_rem_pio2+0x2e8>
 8015ff4:	bfa4      	itt	ge
 8015ff6:	2018      	movge	r0, #24
 8015ff8:	fb93 f3f0 	sdivge	r3, r3, r0
 8015ffc:	fb03 5505 	mla	r5, r3, r5, r5
 8016000:	eba3 040a 	sub.w	r4, r3, sl
 8016004:	4415      	add	r5, r2
 8016006:	460f      	mov	r7, r1
 8016008:	eb09 060a 	add.w	r6, r9, sl
 801600c:	a81a      	add	r0, sp, #104	@ 0x68
 801600e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 8016012:	2200      	movs	r2, #0
 8016014:	42b2      	cmp	r2, r6
 8016016:	dd0e      	ble.n	8016036 <__kernel_rem_pio2+0x76>
 8016018:	aa1a      	add	r2, sp, #104	@ 0x68
 801601a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 801601e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 8016022:	2600      	movs	r6, #0
 8016024:	454e      	cmp	r6, r9
 8016026:	dc25      	bgt.n	8016074 <__kernel_rem_pio2+0xb4>
 8016028:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 80162a8 <__kernel_rem_pio2+0x2e8>
 801602c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016030:	4614      	mov	r4, r2
 8016032:	2000      	movs	r0, #0
 8016034:	e015      	b.n	8016062 <__kernel_rem_pio2+0xa2>
 8016036:	42d4      	cmn	r4, r2
 8016038:	d409      	bmi.n	801604e <__kernel_rem_pio2+0x8e>
 801603a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 801603e:	ee07 1a90 	vmov	s15, r1
 8016042:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016046:	eca0 7b02 	vstmia	r0!, {d7}
 801604a:	3201      	adds	r2, #1
 801604c:	e7e2      	b.n	8016014 <__kernel_rem_pio2+0x54>
 801604e:	eeb0 7b46 	vmov.f64	d7, d6
 8016052:	e7f8      	b.n	8016046 <__kernel_rem_pio2+0x86>
 8016054:	ecbc 5b02 	vldmia	ip!, {d5}
 8016058:	ed94 6b00 	vldr	d6, [r4]
 801605c:	3001      	adds	r0, #1
 801605e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016062:	4550      	cmp	r0, sl
 8016064:	f1a4 0408 	sub.w	r4, r4, #8
 8016068:	ddf4      	ble.n	8016054 <__kernel_rem_pio2+0x94>
 801606a:	ecae 7b02 	vstmia	lr!, {d7}
 801606e:	3601      	adds	r6, #1
 8016070:	3208      	adds	r2, #8
 8016072:	e7d7      	b.n	8016024 <__kernel_rem_pio2+0x64>
 8016074:	aa06      	add	r2, sp, #24
 8016076:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 80162b0 <__kernel_rem_pio2+0x2f0>
 801607a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 80162b8 <__kernel_rem_pio2+0x2f8>
 801607e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8016082:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8016086:	9203      	str	r2, [sp, #12]
 8016088:	9302      	str	r3, [sp, #8]
 801608a:	464c      	mov	r4, r9
 801608c:	00e3      	lsls	r3, r4, #3
 801608e:	9304      	str	r3, [sp, #16]
 8016090:	ab92      	add	r3, sp, #584	@ 0x248
 8016092:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016096:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 801609a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 801609c:	ab06      	add	r3, sp, #24
 801609e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80160a2:	461e      	mov	r6, r3
 80160a4:	4620      	mov	r0, r4
 80160a6:	2800      	cmp	r0, #0
 80160a8:	f1a2 0208 	sub.w	r2, r2, #8
 80160ac:	dc4a      	bgt.n	8016144 <__kernel_rem_pio2+0x184>
 80160ae:	4628      	mov	r0, r5
 80160b0:	9305      	str	r3, [sp, #20]
 80160b2:	f000 fa01 	bl	80164b8 <scalbn>
 80160b6:	eeb0 8b40 	vmov.f64	d8, d0
 80160ba:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 80160be:	ee28 0b00 	vmul.f64	d0, d8, d0
 80160c2:	f7ff fcf9 	bl	8015ab8 <floor>
 80160c6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 80160ca:	eea0 8b47 	vfms.f64	d8, d0, d7
 80160ce:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80160d2:	2d00      	cmp	r5, #0
 80160d4:	ee17 8a90 	vmov	r8, s15
 80160d8:	9b05      	ldr	r3, [sp, #20]
 80160da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80160de:	ee38 8b47 	vsub.f64	d8, d8, d7
 80160e2:	dd41      	ble.n	8016168 <__kernel_rem_pio2+0x1a8>
 80160e4:	1e60      	subs	r0, r4, #1
 80160e6:	aa06      	add	r2, sp, #24
 80160e8:	f1c5 0c18 	rsb	ip, r5, #24
 80160ec:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80160f0:	fa46 f20c 	asr.w	r2, r6, ip
 80160f4:	4490      	add	r8, r2
 80160f6:	fa02 f20c 	lsl.w	r2, r2, ip
 80160fa:	1ab6      	subs	r6, r6, r2
 80160fc:	aa06      	add	r2, sp, #24
 80160fe:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8016102:	f1c5 0217 	rsb	r2, r5, #23
 8016106:	4116      	asrs	r6, r2
 8016108:	2e00      	cmp	r6, #0
 801610a:	dd3c      	ble.n	8016186 <__kernel_rem_pio2+0x1c6>
 801610c:	f04f 0c00 	mov.w	ip, #0
 8016110:	f108 0801 	add.w	r8, r8, #1
 8016114:	4660      	mov	r0, ip
 8016116:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 801611a:	4564      	cmp	r4, ip
 801611c:	dc66      	bgt.n	80161ec <__kernel_rem_pio2+0x22c>
 801611e:	2d00      	cmp	r5, #0
 8016120:	dd03      	ble.n	801612a <__kernel_rem_pio2+0x16a>
 8016122:	2d01      	cmp	r5, #1
 8016124:	d072      	beq.n	801620c <__kernel_rem_pio2+0x24c>
 8016126:	2d02      	cmp	r5, #2
 8016128:	d07a      	beq.n	8016220 <__kernel_rem_pio2+0x260>
 801612a:	2e02      	cmp	r6, #2
 801612c:	d12b      	bne.n	8016186 <__kernel_rem_pio2+0x1c6>
 801612e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8016132:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016136:	b330      	cbz	r0, 8016186 <__kernel_rem_pio2+0x1c6>
 8016138:	4628      	mov	r0, r5
 801613a:	f000 f9bd 	bl	80164b8 <scalbn>
 801613e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016142:	e020      	b.n	8016186 <__kernel_rem_pio2+0x1c6>
 8016144:	ee20 7b09 	vmul.f64	d7, d0, d9
 8016148:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801614c:	3801      	subs	r0, #1
 801614e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016152:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016156:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801615a:	eca6 0a01 	vstmia	r6!, {s0}
 801615e:	ed92 0b00 	vldr	d0, [r2]
 8016162:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016166:	e79e      	b.n	80160a6 <__kernel_rem_pio2+0xe6>
 8016168:	d105      	bne.n	8016176 <__kernel_rem_pio2+0x1b6>
 801616a:	1e62      	subs	r2, r4, #1
 801616c:	a906      	add	r1, sp, #24
 801616e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8016172:	15f6      	asrs	r6, r6, #23
 8016174:	e7c8      	b.n	8016108 <__kernel_rem_pio2+0x148>
 8016176:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801617a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801617e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016182:	da31      	bge.n	80161e8 <__kernel_rem_pio2+0x228>
 8016184:	2600      	movs	r6, #0
 8016186:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618e:	f040 809b 	bne.w	80162c8 <__kernel_rem_pio2+0x308>
 8016192:	1e62      	subs	r2, r4, #1
 8016194:	2000      	movs	r0, #0
 8016196:	454a      	cmp	r2, r9
 8016198:	da49      	bge.n	801622e <__kernel_rem_pio2+0x26e>
 801619a:	2800      	cmp	r0, #0
 801619c:	d062      	beq.n	8016264 <__kernel_rem_pio2+0x2a4>
 801619e:	3c01      	subs	r4, #1
 80161a0:	ab06      	add	r3, sp, #24
 80161a2:	3d18      	subs	r5, #24
 80161a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d0f8      	beq.n	801619e <__kernel_rem_pio2+0x1de>
 80161ac:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80161b0:	4628      	mov	r0, r5
 80161b2:	f000 f981 	bl	80164b8 <scalbn>
 80161b6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 80162b0 <__kernel_rem_pio2+0x2f0>
 80161ba:	1c62      	adds	r2, r4, #1
 80161bc:	a96a      	add	r1, sp, #424	@ 0x1a8
 80161be:	00d3      	lsls	r3, r2, #3
 80161c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80161c4:	4622      	mov	r2, r4
 80161c6:	2a00      	cmp	r2, #0
 80161c8:	f280 80a8 	bge.w	801631c <__kernel_rem_pio2+0x35c>
 80161cc:	4622      	mov	r2, r4
 80161ce:	2a00      	cmp	r2, #0
 80161d0:	f2c0 80c6 	blt.w	8016360 <__kernel_rem_pio2+0x3a0>
 80161d4:	a96a      	add	r1, sp, #424	@ 0x1a8
 80161d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80161da:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 80162a8 <__kernel_rem_pio2+0x2e8>
 80161de:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80162c4 <__kernel_rem_pio2+0x304>
 80161e2:	2000      	movs	r0, #0
 80161e4:	1aa1      	subs	r1, r4, r2
 80161e6:	e0b0      	b.n	801634a <__kernel_rem_pio2+0x38a>
 80161e8:	2602      	movs	r6, #2
 80161ea:	e78f      	b.n	801610c <__kernel_rem_pio2+0x14c>
 80161ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80161f0:	b948      	cbnz	r0, 8016206 <__kernel_rem_pio2+0x246>
 80161f2:	b122      	cbz	r2, 80161fe <__kernel_rem_pio2+0x23e>
 80161f4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 80161f8:	f843 2c04 	str.w	r2, [r3, #-4]
 80161fc:	2201      	movs	r2, #1
 80161fe:	f10c 0c01 	add.w	ip, ip, #1
 8016202:	4610      	mov	r0, r2
 8016204:	e789      	b.n	801611a <__kernel_rem_pio2+0x15a>
 8016206:	ebae 0202 	sub.w	r2, lr, r2
 801620a:	e7f5      	b.n	80161f8 <__kernel_rem_pio2+0x238>
 801620c:	1e62      	subs	r2, r4, #1
 801620e:	ab06      	add	r3, sp, #24
 8016210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016214:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016218:	a906      	add	r1, sp, #24
 801621a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801621e:	e784      	b.n	801612a <__kernel_rem_pio2+0x16a>
 8016220:	1e62      	subs	r2, r4, #1
 8016222:	ab06      	add	r3, sp, #24
 8016224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016228:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801622c:	e7f4      	b.n	8016218 <__kernel_rem_pio2+0x258>
 801622e:	ab06      	add	r3, sp, #24
 8016230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016234:	3a01      	subs	r2, #1
 8016236:	4318      	orrs	r0, r3
 8016238:	e7ad      	b.n	8016196 <__kernel_rem_pio2+0x1d6>
 801623a:	3301      	adds	r3, #1
 801623c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8016240:	2800      	cmp	r0, #0
 8016242:	d0fa      	beq.n	801623a <__kernel_rem_pio2+0x27a>
 8016244:	9a04      	ldr	r2, [sp, #16]
 8016246:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 801624a:	446a      	add	r2, sp
 801624c:	eb04 000b 	add.w	r0, r4, fp
 8016250:	a91a      	add	r1, sp, #104	@ 0x68
 8016252:	1c66      	adds	r6, r4, #1
 8016254:	3a98      	subs	r2, #152	@ 0x98
 8016256:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801625a:	4423      	add	r3, r4
 801625c:	42b3      	cmp	r3, r6
 801625e:	da04      	bge.n	801626a <__kernel_rem_pio2+0x2aa>
 8016260:	461c      	mov	r4, r3
 8016262:	e713      	b.n	801608c <__kernel_rem_pio2+0xcc>
 8016264:	9a03      	ldr	r2, [sp, #12]
 8016266:	2301      	movs	r3, #1
 8016268:	e7e8      	b.n	801623c <__kernel_rem_pio2+0x27c>
 801626a:	9902      	ldr	r1, [sp, #8]
 801626c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016270:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8016274:	9104      	str	r1, [sp, #16]
 8016276:	ee07 1a90 	vmov	s15, r1
 801627a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801627e:	2400      	movs	r4, #0
 8016280:	eca0 7b02 	vstmia	r0!, {d7}
 8016284:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80162a8 <__kernel_rem_pio2+0x2e8>
 8016288:	4686      	mov	lr, r0
 801628a:	4554      	cmp	r4, sl
 801628c:	dd03      	ble.n	8016296 <__kernel_rem_pio2+0x2d6>
 801628e:	eca2 7b02 	vstmia	r2!, {d7}
 8016292:	3601      	adds	r6, #1
 8016294:	e7e2      	b.n	801625c <__kernel_rem_pio2+0x29c>
 8016296:	ecbc 5b02 	vldmia	ip!, {d5}
 801629a:	ed3e 6b02 	vldmdb	lr!, {d6}
 801629e:	3401      	adds	r4, #1
 80162a0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80162a4:	e7f1      	b.n	801628a <__kernel_rem_pio2+0x2ca>
 80162a6:	bf00      	nop
	...
 80162b4:	3e700000 	.word	0x3e700000
 80162b8:	00000000 	.word	0x00000000
 80162bc:	41700000 	.word	0x41700000
 80162c0:	08017dc0 	.word	0x08017dc0
 80162c4:	08017d80 	.word	0x08017d80
 80162c8:	4268      	negs	r0, r5
 80162ca:	eeb0 0b48 	vmov.f64	d0, d8
 80162ce:	f000 f8f3 	bl	80164b8 <scalbn>
 80162d2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 80164a0 <__kernel_rem_pio2+0x4e0>
 80162d6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80162da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162de:	db17      	blt.n	8016310 <__kernel_rem_pio2+0x350>
 80162e0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 80164a8 <__kernel_rem_pio2+0x4e8>
 80162e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80162e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80162ec:	aa06      	add	r2, sp, #24
 80162ee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80162f2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80162f6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80162fa:	3518      	adds	r5, #24
 80162fc:	ee10 3a10 	vmov	r3, s0
 8016300:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016304:	ee17 3a10 	vmov	r3, s14
 8016308:	3401      	adds	r4, #1
 801630a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801630e:	e74d      	b.n	80161ac <__kernel_rem_pio2+0x1ec>
 8016310:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016314:	aa06      	add	r2, sp, #24
 8016316:	ee10 3a10 	vmov	r3, s0
 801631a:	e7f6      	b.n	801630a <__kernel_rem_pio2+0x34a>
 801631c:	a806      	add	r0, sp, #24
 801631e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8016322:	9001      	str	r0, [sp, #4]
 8016324:	ee07 0a90 	vmov	s15, r0
 8016328:	3a01      	subs	r2, #1
 801632a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801632e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016332:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016336:	ed21 7b02 	vstmdb	r1!, {d7}
 801633a:	e744      	b.n	80161c6 <__kernel_rem_pio2+0x206>
 801633c:	ecbc 5b02 	vldmia	ip!, {d5}
 8016340:	ecb5 6b02 	vldmia	r5!, {d6}
 8016344:	3001      	adds	r0, #1
 8016346:	eea5 7b06 	vfma.f64	d7, d5, d6
 801634a:	4548      	cmp	r0, r9
 801634c:	dc01      	bgt.n	8016352 <__kernel_rem_pio2+0x392>
 801634e:	4281      	cmp	r1, r0
 8016350:	daf4      	bge.n	801633c <__kernel_rem_pio2+0x37c>
 8016352:	a842      	add	r0, sp, #264	@ 0x108
 8016354:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8016358:	ed81 7b00 	vstr	d7, [r1]
 801635c:	3a01      	subs	r2, #1
 801635e:	e736      	b.n	80161ce <__kernel_rem_pio2+0x20e>
 8016360:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8016362:	2a02      	cmp	r2, #2
 8016364:	dc0a      	bgt.n	801637c <__kernel_rem_pio2+0x3bc>
 8016366:	2a00      	cmp	r2, #0
 8016368:	dc2d      	bgt.n	80163c6 <__kernel_rem_pio2+0x406>
 801636a:	d046      	beq.n	80163fa <__kernel_rem_pio2+0x43a>
 801636c:	f008 0007 	and.w	r0, r8, #7
 8016370:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8016374:	ecbd 8b06 	vpop	{d8-d10}
 8016378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 801637e:	2a03      	cmp	r2, #3
 8016380:	d1f4      	bne.n	801636c <__kernel_rem_pio2+0x3ac>
 8016382:	a942      	add	r1, sp, #264	@ 0x108
 8016384:	f1a3 0208 	sub.w	r2, r3, #8
 8016388:	440a      	add	r2, r1
 801638a:	4611      	mov	r1, r2
 801638c:	4620      	mov	r0, r4
 801638e:	2800      	cmp	r0, #0
 8016390:	f1a1 0108 	sub.w	r1, r1, #8
 8016394:	dc52      	bgt.n	801643c <__kernel_rem_pio2+0x47c>
 8016396:	4621      	mov	r1, r4
 8016398:	2901      	cmp	r1, #1
 801639a:	f1a2 0208 	sub.w	r2, r2, #8
 801639e:	dc5d      	bgt.n	801645c <__kernel_rem_pio2+0x49c>
 80163a0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 80164b0 <__kernel_rem_pio2+0x4f0>
 80163a4:	aa42      	add	r2, sp, #264	@ 0x108
 80163a6:	4413      	add	r3, r2
 80163a8:	2c01      	cmp	r4, #1
 80163aa:	dc67      	bgt.n	801647c <__kernel_rem_pio2+0x4bc>
 80163ac:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 80163b0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 80163b4:	2e00      	cmp	r6, #0
 80163b6:	d167      	bne.n	8016488 <__kernel_rem_pio2+0x4c8>
 80163b8:	ed87 5b00 	vstr	d5, [r7]
 80163bc:	ed87 6b02 	vstr	d6, [r7, #8]
 80163c0:	ed87 7b04 	vstr	d7, [r7, #16]
 80163c4:	e7d2      	b.n	801636c <__kernel_rem_pio2+0x3ac>
 80163c6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 80164b0 <__kernel_rem_pio2+0x4f0>
 80163ca:	aa42      	add	r2, sp, #264	@ 0x108
 80163cc:	4413      	add	r3, r2
 80163ce:	4622      	mov	r2, r4
 80163d0:	2a00      	cmp	r2, #0
 80163d2:	da24      	bge.n	801641e <__kernel_rem_pio2+0x45e>
 80163d4:	b34e      	cbz	r6, 801642a <__kernel_rem_pio2+0x46a>
 80163d6:	eeb1 7b46 	vneg.f64	d7, d6
 80163da:	ed87 7b00 	vstr	d7, [r7]
 80163de:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 80163e2:	aa44      	add	r2, sp, #272	@ 0x110
 80163e4:	2301      	movs	r3, #1
 80163e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80163ea:	429c      	cmp	r4, r3
 80163ec:	da20      	bge.n	8016430 <__kernel_rem_pio2+0x470>
 80163ee:	b10e      	cbz	r6, 80163f4 <__kernel_rem_pio2+0x434>
 80163f0:	eeb1 7b47 	vneg.f64	d7, d7
 80163f4:	ed87 7b02 	vstr	d7, [r7, #8]
 80163f8:	e7b8      	b.n	801636c <__kernel_rem_pio2+0x3ac>
 80163fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 80164b0 <__kernel_rem_pio2+0x4f0>
 80163fe:	aa42      	add	r2, sp, #264	@ 0x108
 8016400:	4413      	add	r3, r2
 8016402:	2c00      	cmp	r4, #0
 8016404:	da05      	bge.n	8016412 <__kernel_rem_pio2+0x452>
 8016406:	b10e      	cbz	r6, 801640c <__kernel_rem_pio2+0x44c>
 8016408:	eeb1 7b47 	vneg.f64	d7, d7
 801640c:	ed87 7b00 	vstr	d7, [r7]
 8016410:	e7ac      	b.n	801636c <__kernel_rem_pio2+0x3ac>
 8016412:	ed33 6b02 	vldmdb	r3!, {d6}
 8016416:	3c01      	subs	r4, #1
 8016418:	ee37 7b06 	vadd.f64	d7, d7, d6
 801641c:	e7f1      	b.n	8016402 <__kernel_rem_pio2+0x442>
 801641e:	ed33 7b02 	vldmdb	r3!, {d7}
 8016422:	3a01      	subs	r2, #1
 8016424:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016428:	e7d2      	b.n	80163d0 <__kernel_rem_pio2+0x410>
 801642a:	eeb0 7b46 	vmov.f64	d7, d6
 801642e:	e7d4      	b.n	80163da <__kernel_rem_pio2+0x41a>
 8016430:	ecb2 6b02 	vldmia	r2!, {d6}
 8016434:	3301      	adds	r3, #1
 8016436:	ee37 7b06 	vadd.f64	d7, d7, d6
 801643a:	e7d6      	b.n	80163ea <__kernel_rem_pio2+0x42a>
 801643c:	ed91 7b00 	vldr	d7, [r1]
 8016440:	ed91 5b02 	vldr	d5, [r1, #8]
 8016444:	3801      	subs	r0, #1
 8016446:	ee37 6b05 	vadd.f64	d6, d7, d5
 801644a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801644e:	ed81 6b00 	vstr	d6, [r1]
 8016452:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016456:	ed81 7b02 	vstr	d7, [r1, #8]
 801645a:	e798      	b.n	801638e <__kernel_rem_pio2+0x3ce>
 801645c:	ed92 7b00 	vldr	d7, [r2]
 8016460:	ed92 5b02 	vldr	d5, [r2, #8]
 8016464:	3901      	subs	r1, #1
 8016466:	ee37 6b05 	vadd.f64	d6, d7, d5
 801646a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801646e:	ed82 6b00 	vstr	d6, [r2]
 8016472:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016476:	ed82 7b02 	vstr	d7, [r2, #8]
 801647a:	e78d      	b.n	8016398 <__kernel_rem_pio2+0x3d8>
 801647c:	ed33 6b02 	vldmdb	r3!, {d6}
 8016480:	3c01      	subs	r4, #1
 8016482:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016486:	e78f      	b.n	80163a8 <__kernel_rem_pio2+0x3e8>
 8016488:	eeb1 5b45 	vneg.f64	d5, d5
 801648c:	eeb1 6b46 	vneg.f64	d6, d6
 8016490:	ed87 5b00 	vstr	d5, [r7]
 8016494:	eeb1 7b47 	vneg.f64	d7, d7
 8016498:	ed87 6b02 	vstr	d6, [r7, #8]
 801649c:	e790      	b.n	80163c0 <__kernel_rem_pio2+0x400>
 801649e:	bf00      	nop
 80164a0:	00000000 	.word	0x00000000
 80164a4:	41700000 	.word	0x41700000
 80164a8:	00000000 	.word	0x00000000
 80164ac:	3e700000 	.word	0x3e700000
	...

080164b8 <scalbn>:
 80164b8:	ee10 1a90 	vmov	r1, s1
 80164bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80164c0:	b98b      	cbnz	r3, 80164e6 <scalbn+0x2e>
 80164c2:	ee10 3a10 	vmov	r3, s0
 80164c6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80164ca:	4319      	orrs	r1, r3
 80164cc:	d00a      	beq.n	80164e4 <scalbn+0x2c>
 80164ce:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016580 <scalbn+0xc8>
 80164d2:	4b37      	ldr	r3, [pc, #220]	@ (80165b0 <scalbn+0xf8>)
 80164d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80164d8:	4298      	cmp	r0, r3
 80164da:	da0b      	bge.n	80164f4 <scalbn+0x3c>
 80164dc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016588 <scalbn+0xd0>
 80164e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80164e4:	4770      	bx	lr
 80164e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80164ea:	4293      	cmp	r3, r2
 80164ec:	d107      	bne.n	80164fe <scalbn+0x46>
 80164ee:	ee30 0b00 	vadd.f64	d0, d0, d0
 80164f2:	4770      	bx	lr
 80164f4:	ee10 1a90 	vmov	r1, s1
 80164f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80164fc:	3b36      	subs	r3, #54	@ 0x36
 80164fe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016502:	4290      	cmp	r0, r2
 8016504:	dd0d      	ble.n	8016522 <scalbn+0x6a>
 8016506:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016590 <scalbn+0xd8>
 801650a:	ee10 3a90 	vmov	r3, s1
 801650e:	eeb0 6b47 	vmov.f64	d6, d7
 8016512:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8016598 <scalbn+0xe0>
 8016516:	2b00      	cmp	r3, #0
 8016518:	fe27 7b05 	vselge.f64	d7, d7, d5
 801651c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016520:	4770      	bx	lr
 8016522:	4418      	add	r0, r3
 8016524:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 8016528:	4298      	cmp	r0, r3
 801652a:	dcec      	bgt.n	8016506 <scalbn+0x4e>
 801652c:	2800      	cmp	r0, #0
 801652e:	dd0a      	ble.n	8016546 <scalbn+0x8e>
 8016530:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8016534:	ec53 2b10 	vmov	r2, r3, d0
 8016538:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801653c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8016540:	ec43 2b10 	vmov	d0, r2, r3
 8016544:	4770      	bx	lr
 8016546:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 801654a:	da09      	bge.n	8016560 <scalbn+0xa8>
 801654c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 8016588 <scalbn+0xd0>
 8016550:	ee10 3a90 	vmov	r3, s1
 8016554:	eeb0 6b47 	vmov.f64	d6, d7
 8016558:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 80165a0 <scalbn+0xe8>
 801655c:	2b00      	cmp	r3, #0
 801655e:	e7db      	b.n	8016518 <scalbn+0x60>
 8016560:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8016564:	ec53 2b10 	vmov	r2, r3, d0
 8016568:	3036      	adds	r0, #54	@ 0x36
 801656a:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 801656e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8016572:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80165a8 <scalbn+0xf0>
 8016576:	ec43 2b10 	vmov	d0, r2, r3
 801657a:	e7b1      	b.n	80164e0 <scalbn+0x28>
 801657c:	f3af 8000 	nop.w
 8016580:	00000000 	.word	0x00000000
 8016584:	43500000 	.word	0x43500000
 8016588:	c2f8f359 	.word	0xc2f8f359
 801658c:	01a56e1f 	.word	0x01a56e1f
 8016590:	8800759c 	.word	0x8800759c
 8016594:	7e37e43c 	.word	0x7e37e43c
 8016598:	8800759c 	.word	0x8800759c
 801659c:	fe37e43c 	.word	0xfe37e43c
 80165a0:	c2f8f359 	.word	0xc2f8f359
 80165a4:	81a56e1f 	.word	0x81a56e1f
 80165a8:	00000000 	.word	0x00000000
 80165ac:	3c900000 	.word	0x3c900000
 80165b0:	ffff3cb0 	.word	0xffff3cb0

080165b4 <_init>:
 80165b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165b6:	bf00      	nop
 80165b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165ba:	bc08      	pop	{r3}
 80165bc:	469e      	mov	lr, r3
 80165be:	4770      	bx	lr

080165c0 <_fini>:
 80165c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165c2:	bf00      	nop
 80165c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165c6:	bc08      	pop	{r3}
 80165c8:	469e      	mov	lr, r3
 80165ca:	4770      	bx	lr
